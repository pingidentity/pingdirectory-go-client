/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartySearchReferenceCriteriaSchemaUrn the model 'EnumthirdPartySearchReferenceCriteriaSchemaUrn'
type EnumthirdPartySearchReferenceCriteriaSchemaUrn string

// List of Enumthird-party-search-reference-criteriaSchemaUrn
const (
	ENUMTHIRDPARTYSEARCHREFERENCECRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SEARCH_REFERENCE_CRITERIATHIRD_PARTY EnumthirdPartySearchReferenceCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:search-reference-criteria:third-party"
)

// All allowed values of EnumthirdPartySearchReferenceCriteriaSchemaUrn enum
var AllowedEnumthirdPartySearchReferenceCriteriaSchemaUrnEnumValues = []EnumthirdPartySearchReferenceCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:search-reference-criteria:third-party",
}

func (v *EnumthirdPartySearchReferenceCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartySearchReferenceCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartySearchReferenceCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartySearchReferenceCriteriaSchemaUrn", value)
}

// NewEnumthirdPartySearchReferenceCriteriaSchemaUrnFromValue returns a pointer to a valid EnumthirdPartySearchReferenceCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartySearchReferenceCriteriaSchemaUrnFromValue(v string) (*EnumthirdPartySearchReferenceCriteriaSchemaUrn, error) {
	ev := EnumthirdPartySearchReferenceCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartySearchReferenceCriteriaSchemaUrn: valid values are %v", v, AllowedEnumthirdPartySearchReferenceCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartySearchReferenceCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartySearchReferenceCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-search-reference-criteriaSchemaUrn value
func (v EnumthirdPartySearchReferenceCriteriaSchemaUrn) Ptr() *EnumthirdPartySearchReferenceCriteriaSchemaUrn {
	return &v
}

type NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn struct {
	value *EnumthirdPartySearchReferenceCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn) Get() *EnumthirdPartySearchReferenceCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn) Set(val *EnumthirdPartySearchReferenceCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartySearchReferenceCriteriaSchemaUrn(val *EnumthirdPartySearchReferenceCriteriaSchemaUrn) *NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn {
	return &NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartySearchReferenceCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

