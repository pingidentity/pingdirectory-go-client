/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddLdifExportRecurringTaskRequest struct for AddLdifExportRecurringTaskRequest
type AddLdifExportRecurringTaskRequest struct {
	// Name of the new Recurring Task
	TaskName string `json:"taskName"`
	Schemas []EnumldifExportRecurringTaskSchemaUrn `json:"schemas"`
	// The directory in which LDIF export files will be placed. The directory must already exist.
	LdifDirectory string `json:"ldifDirectory"`
	// The backend ID for a backend to be exported.
	BackendID []string `json:"backendID,omitempty"`
	// The backend ID for a backend to be excluded from the export.
	ExcludeBackendID []string `json:"excludeBackendID,omitempty"`
	// Indicates whether to compress the LDIF data as it is exported.
	Compress *bool `json:"compress,omitempty"`
	// Indicates whether to encrypt the LDIF data as it exported.
	Encrypt *bool `json:"encrypt,omitempty"`
	// The ID of an encryption settings definition to use to obtain the LDIF export encryption key.
	EncryptionSettingsDefinitionID *string `json:"encryptionSettingsDefinitionID,omitempty"`
	// Indicates whether to cryptographically sign the exported data, which will make it possible to detect whether the LDIF data has been altered since it was exported.
	Sign *bool `json:"sign,omitempty"`
	// The minimum number of previous LDIF exports that should be preserved after a new export completes successfully.
	RetainPreviousLDIFExportCount *int32 `json:"retainPreviousLDIFExportCount,omitempty"`
	// The minimum age of previous LDIF exports that should be preserved after a new export completes successfully.
	RetainPreviousLDIFExportAge *string `json:"retainPreviousLDIFExportAge,omitempty"`
	// The maximum rate, in megabytes per second, at which LDIF exports should be written.
	MaxMegabytesPerSecond *int32 `json:"maxMegabytesPerSecond,omitempty"`
	// A description for this Recurring Task
	Description *string `json:"description,omitempty"`
	// Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
	CancelOnTaskDependencyFailure *bool `json:"cancelOnTaskDependencyFailure,omitempty"`
	// The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
	EmailOnStart []string `json:"emailOnStart,omitempty"`
	// The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
	EmailOnSuccess []string `json:"emailOnSuccess,omitempty"`
	// The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
	EmailOnFailure []string `json:"emailOnFailure,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
	AlertOnStart *bool `json:"alertOnStart,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
	AlertOnSuccess *bool `json:"alertOnSuccess,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
	AlertOnFailure *bool `json:"alertOnFailure,omitempty"`
}

// NewAddLdifExportRecurringTaskRequest instantiates a new AddLdifExportRecurringTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLdifExportRecurringTaskRequest(taskName string, schemas []EnumldifExportRecurringTaskSchemaUrn, ldifDirectory string) *AddLdifExportRecurringTaskRequest {
	this := AddLdifExportRecurringTaskRequest{}
	this.TaskName = taskName
	this.Schemas = schemas
	this.LdifDirectory = ldifDirectory
	return &this
}

// NewAddLdifExportRecurringTaskRequestWithDefaults instantiates a new AddLdifExportRecurringTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLdifExportRecurringTaskRequestWithDefaults() *AddLdifExportRecurringTaskRequest {
	this := AddLdifExportRecurringTaskRequest{}
	return &this
}

// GetTaskName returns the TaskName field value
func (o *AddLdifExportRecurringTaskRequest) GetTaskName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetTaskNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TaskName, true
}

// SetTaskName sets field value
func (o *AddLdifExportRecurringTaskRequest) SetTaskName(v string) {
	o.TaskName = v
}

// GetSchemas returns the Schemas field value
func (o *AddLdifExportRecurringTaskRequest) GetSchemas() []EnumldifExportRecurringTaskSchemaUrn {
	if o == nil {
		var ret []EnumldifExportRecurringTaskSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetSchemasOk() ([]EnumldifExportRecurringTaskSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddLdifExportRecurringTaskRequest) SetSchemas(v []EnumldifExportRecurringTaskSchemaUrn) {
	o.Schemas = v
}

// GetLdifDirectory returns the LdifDirectory field value
func (o *AddLdifExportRecurringTaskRequest) GetLdifDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdifDirectory
}

// GetLdifDirectoryOk returns a tuple with the LdifDirectory field value
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetLdifDirectoryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LdifDirectory, true
}

// SetLdifDirectory sets field value
func (o *AddLdifExportRecurringTaskRequest) SetLdifDirectory(v string) {
	o.LdifDirectory = v
}

// GetBackendID returns the BackendID field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetBackendID() []string {
	if o == nil || isNil(o.BackendID) {
		var ret []string
		return ret
	}
	return o.BackendID
}

// GetBackendIDOk returns a tuple with the BackendID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetBackendIDOk() ([]string, bool) {
	if o == nil || isNil(o.BackendID) {
    return nil, false
	}
	return o.BackendID, true
}

// HasBackendID returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasBackendID() bool {
	if o != nil && !isNil(o.BackendID) {
		return true
	}

	return false
}

// SetBackendID gets a reference to the given []string and assigns it to the BackendID field.
func (o *AddLdifExportRecurringTaskRequest) SetBackendID(v []string) {
	o.BackendID = v
}

// GetExcludeBackendID returns the ExcludeBackendID field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetExcludeBackendID() []string {
	if o == nil || isNil(o.ExcludeBackendID) {
		var ret []string
		return ret
	}
	return o.ExcludeBackendID
}

// GetExcludeBackendIDOk returns a tuple with the ExcludeBackendID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetExcludeBackendIDOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludeBackendID) {
    return nil, false
	}
	return o.ExcludeBackendID, true
}

// HasExcludeBackendID returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasExcludeBackendID() bool {
	if o != nil && !isNil(o.ExcludeBackendID) {
		return true
	}

	return false
}

// SetExcludeBackendID gets a reference to the given []string and assigns it to the ExcludeBackendID field.
func (o *AddLdifExportRecurringTaskRequest) SetExcludeBackendID(v []string) {
	o.ExcludeBackendID = v
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetCompress() bool {
	if o == nil || isNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetCompressOk() (*bool, bool) {
	if o == nil || isNil(o.Compress) {
    return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasCompress() bool {
	if o != nil && !isNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *AddLdifExportRecurringTaskRequest) SetCompress(v bool) {
	o.Compress = &v
}

// GetEncrypt returns the Encrypt field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetEncrypt() bool {
	if o == nil || isNil(o.Encrypt) {
		var ret bool
		return ret
	}
	return *o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetEncryptOk() (*bool, bool) {
	if o == nil || isNil(o.Encrypt) {
    return nil, false
	}
	return o.Encrypt, true
}

// HasEncrypt returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasEncrypt() bool {
	if o != nil && !isNil(o.Encrypt) {
		return true
	}

	return false
}

// SetEncrypt gets a reference to the given bool and assigns it to the Encrypt field.
func (o *AddLdifExportRecurringTaskRequest) SetEncrypt(v bool) {
	o.Encrypt = &v
}

// GetEncryptionSettingsDefinitionID returns the EncryptionSettingsDefinitionID field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetEncryptionSettingsDefinitionID() string {
	if o == nil || isNil(o.EncryptionSettingsDefinitionID) {
		var ret string
		return ret
	}
	return *o.EncryptionSettingsDefinitionID
}

// GetEncryptionSettingsDefinitionIDOk returns a tuple with the EncryptionSettingsDefinitionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetEncryptionSettingsDefinitionIDOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionSettingsDefinitionID) {
    return nil, false
	}
	return o.EncryptionSettingsDefinitionID, true
}

// HasEncryptionSettingsDefinitionID returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasEncryptionSettingsDefinitionID() bool {
	if o != nil && !isNil(o.EncryptionSettingsDefinitionID) {
		return true
	}

	return false
}

// SetEncryptionSettingsDefinitionID gets a reference to the given string and assigns it to the EncryptionSettingsDefinitionID field.
func (o *AddLdifExportRecurringTaskRequest) SetEncryptionSettingsDefinitionID(v string) {
	o.EncryptionSettingsDefinitionID = &v
}

// GetSign returns the Sign field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetSign() bool {
	if o == nil || isNil(o.Sign) {
		var ret bool
		return ret
	}
	return *o.Sign
}

// GetSignOk returns a tuple with the Sign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetSignOk() (*bool, bool) {
	if o == nil || isNil(o.Sign) {
    return nil, false
	}
	return o.Sign, true
}

// HasSign returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasSign() bool {
	if o != nil && !isNil(o.Sign) {
		return true
	}

	return false
}

// SetSign gets a reference to the given bool and assigns it to the Sign field.
func (o *AddLdifExportRecurringTaskRequest) SetSign(v bool) {
	o.Sign = &v
}

// GetRetainPreviousLDIFExportCount returns the RetainPreviousLDIFExportCount field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetRetainPreviousLDIFExportCount() int32 {
	if o == nil || isNil(o.RetainPreviousLDIFExportCount) {
		var ret int32
		return ret
	}
	return *o.RetainPreviousLDIFExportCount
}

// GetRetainPreviousLDIFExportCountOk returns a tuple with the RetainPreviousLDIFExportCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetRetainPreviousLDIFExportCountOk() (*int32, bool) {
	if o == nil || isNil(o.RetainPreviousLDIFExportCount) {
    return nil, false
	}
	return o.RetainPreviousLDIFExportCount, true
}

// HasRetainPreviousLDIFExportCount returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasRetainPreviousLDIFExportCount() bool {
	if o != nil && !isNil(o.RetainPreviousLDIFExportCount) {
		return true
	}

	return false
}

// SetRetainPreviousLDIFExportCount gets a reference to the given int32 and assigns it to the RetainPreviousLDIFExportCount field.
func (o *AddLdifExportRecurringTaskRequest) SetRetainPreviousLDIFExportCount(v int32) {
	o.RetainPreviousLDIFExportCount = &v
}

// GetRetainPreviousLDIFExportAge returns the RetainPreviousLDIFExportAge field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetRetainPreviousLDIFExportAge() string {
	if o == nil || isNil(o.RetainPreviousLDIFExportAge) {
		var ret string
		return ret
	}
	return *o.RetainPreviousLDIFExportAge
}

// GetRetainPreviousLDIFExportAgeOk returns a tuple with the RetainPreviousLDIFExportAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetRetainPreviousLDIFExportAgeOk() (*string, bool) {
	if o == nil || isNil(o.RetainPreviousLDIFExportAge) {
    return nil, false
	}
	return o.RetainPreviousLDIFExportAge, true
}

// HasRetainPreviousLDIFExportAge returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasRetainPreviousLDIFExportAge() bool {
	if o != nil && !isNil(o.RetainPreviousLDIFExportAge) {
		return true
	}

	return false
}

// SetRetainPreviousLDIFExportAge gets a reference to the given string and assigns it to the RetainPreviousLDIFExportAge field.
func (o *AddLdifExportRecurringTaskRequest) SetRetainPreviousLDIFExportAge(v string) {
	o.RetainPreviousLDIFExportAge = &v
}

// GetMaxMegabytesPerSecond returns the MaxMegabytesPerSecond field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetMaxMegabytesPerSecond() int32 {
	if o == nil || isNil(o.MaxMegabytesPerSecond) {
		var ret int32
		return ret
	}
	return *o.MaxMegabytesPerSecond
}

// GetMaxMegabytesPerSecondOk returns a tuple with the MaxMegabytesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetMaxMegabytesPerSecondOk() (*int32, bool) {
	if o == nil || isNil(o.MaxMegabytesPerSecond) {
    return nil, false
	}
	return o.MaxMegabytesPerSecond, true
}

// HasMaxMegabytesPerSecond returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasMaxMegabytesPerSecond() bool {
	if o != nil && !isNil(o.MaxMegabytesPerSecond) {
		return true
	}

	return false
}

// SetMaxMegabytesPerSecond gets a reference to the given int32 and assigns it to the MaxMegabytesPerSecond field.
func (o *AddLdifExportRecurringTaskRequest) SetMaxMegabytesPerSecond(v int32) {
	o.MaxMegabytesPerSecond = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddLdifExportRecurringTaskRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCancelOnTaskDependencyFailure returns the CancelOnTaskDependencyFailure field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetCancelOnTaskDependencyFailure() bool {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
		var ret bool
		return ret
	}
	return *o.CancelOnTaskDependencyFailure
}

// GetCancelOnTaskDependencyFailureOk returns a tuple with the CancelOnTaskDependencyFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetCancelOnTaskDependencyFailureOk() (*bool, bool) {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
    return nil, false
	}
	return o.CancelOnTaskDependencyFailure, true
}

// HasCancelOnTaskDependencyFailure returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasCancelOnTaskDependencyFailure() bool {
	if o != nil && !isNil(o.CancelOnTaskDependencyFailure) {
		return true
	}

	return false
}

// SetCancelOnTaskDependencyFailure gets a reference to the given bool and assigns it to the CancelOnTaskDependencyFailure field.
func (o *AddLdifExportRecurringTaskRequest) SetCancelOnTaskDependencyFailure(v bool) {
	o.CancelOnTaskDependencyFailure = &v
}

// GetEmailOnStart returns the EmailOnStart field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetEmailOnStart() []string {
	if o == nil || isNil(o.EmailOnStart) {
		var ret []string
		return ret
	}
	return o.EmailOnStart
}

// GetEmailOnStartOk returns a tuple with the EmailOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetEmailOnStartOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnStart) {
    return nil, false
	}
	return o.EmailOnStart, true
}

// HasEmailOnStart returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasEmailOnStart() bool {
	if o != nil && !isNil(o.EmailOnStart) {
		return true
	}

	return false
}

// SetEmailOnStart gets a reference to the given []string and assigns it to the EmailOnStart field.
func (o *AddLdifExportRecurringTaskRequest) SetEmailOnStart(v []string) {
	o.EmailOnStart = v
}

// GetEmailOnSuccess returns the EmailOnSuccess field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetEmailOnSuccess() []string {
	if o == nil || isNil(o.EmailOnSuccess) {
		var ret []string
		return ret
	}
	return o.EmailOnSuccess
}

// GetEmailOnSuccessOk returns a tuple with the EmailOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetEmailOnSuccessOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnSuccess) {
    return nil, false
	}
	return o.EmailOnSuccess, true
}

// HasEmailOnSuccess returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasEmailOnSuccess() bool {
	if o != nil && !isNil(o.EmailOnSuccess) {
		return true
	}

	return false
}

// SetEmailOnSuccess gets a reference to the given []string and assigns it to the EmailOnSuccess field.
func (o *AddLdifExportRecurringTaskRequest) SetEmailOnSuccess(v []string) {
	o.EmailOnSuccess = v
}

// GetEmailOnFailure returns the EmailOnFailure field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetEmailOnFailure() []string {
	if o == nil || isNil(o.EmailOnFailure) {
		var ret []string
		return ret
	}
	return o.EmailOnFailure
}

// GetEmailOnFailureOk returns a tuple with the EmailOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetEmailOnFailureOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnFailure) {
    return nil, false
	}
	return o.EmailOnFailure, true
}

// HasEmailOnFailure returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasEmailOnFailure() bool {
	if o != nil && !isNil(o.EmailOnFailure) {
		return true
	}

	return false
}

// SetEmailOnFailure gets a reference to the given []string and assigns it to the EmailOnFailure field.
func (o *AddLdifExportRecurringTaskRequest) SetEmailOnFailure(v []string) {
	o.EmailOnFailure = v
}

// GetAlertOnStart returns the AlertOnStart field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetAlertOnStart() bool {
	if o == nil || isNil(o.AlertOnStart) {
		var ret bool
		return ret
	}
	return *o.AlertOnStart
}

// GetAlertOnStartOk returns a tuple with the AlertOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetAlertOnStartOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnStart) {
    return nil, false
	}
	return o.AlertOnStart, true
}

// HasAlertOnStart returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasAlertOnStart() bool {
	if o != nil && !isNil(o.AlertOnStart) {
		return true
	}

	return false
}

// SetAlertOnStart gets a reference to the given bool and assigns it to the AlertOnStart field.
func (o *AddLdifExportRecurringTaskRequest) SetAlertOnStart(v bool) {
	o.AlertOnStart = &v
}

// GetAlertOnSuccess returns the AlertOnSuccess field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetAlertOnSuccess() bool {
	if o == nil || isNil(o.AlertOnSuccess) {
		var ret bool
		return ret
	}
	return *o.AlertOnSuccess
}

// GetAlertOnSuccessOk returns a tuple with the AlertOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetAlertOnSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnSuccess) {
    return nil, false
	}
	return o.AlertOnSuccess, true
}

// HasAlertOnSuccess returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasAlertOnSuccess() bool {
	if o != nil && !isNil(o.AlertOnSuccess) {
		return true
	}

	return false
}

// SetAlertOnSuccess gets a reference to the given bool and assigns it to the AlertOnSuccess field.
func (o *AddLdifExportRecurringTaskRequest) SetAlertOnSuccess(v bool) {
	o.AlertOnSuccess = &v
}

// GetAlertOnFailure returns the AlertOnFailure field value if set, zero value otherwise.
func (o *AddLdifExportRecurringTaskRequest) GetAlertOnFailure() bool {
	if o == nil || isNil(o.AlertOnFailure) {
		var ret bool
		return ret
	}
	return *o.AlertOnFailure
}

// GetAlertOnFailureOk returns a tuple with the AlertOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifExportRecurringTaskRequest) GetAlertOnFailureOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnFailure) {
    return nil, false
	}
	return o.AlertOnFailure, true
}

// HasAlertOnFailure returns a boolean if a field has been set.
func (o *AddLdifExportRecurringTaskRequest) HasAlertOnFailure() bool {
	if o != nil && !isNil(o.AlertOnFailure) {
		return true
	}

	return false
}

// SetAlertOnFailure gets a reference to the given bool and assigns it to the AlertOnFailure field.
func (o *AddLdifExportRecurringTaskRequest) SetAlertOnFailure(v bool) {
	o.AlertOnFailure = &v
}

func (o AddLdifExportRecurringTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["taskName"] = o.TaskName
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["ldifDirectory"] = o.LdifDirectory
	}
	if !isNil(o.BackendID) {
		toSerialize["backendID"] = o.BackendID
	}
	if !isNil(o.ExcludeBackendID) {
		toSerialize["excludeBackendID"] = o.ExcludeBackendID
	}
	if !isNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !isNil(o.Encrypt) {
		toSerialize["encrypt"] = o.Encrypt
	}
	if !isNil(o.EncryptionSettingsDefinitionID) {
		toSerialize["encryptionSettingsDefinitionID"] = o.EncryptionSettingsDefinitionID
	}
	if !isNil(o.Sign) {
		toSerialize["sign"] = o.Sign
	}
	if !isNil(o.RetainPreviousLDIFExportCount) {
		toSerialize["retainPreviousLDIFExportCount"] = o.RetainPreviousLDIFExportCount
	}
	if !isNil(o.RetainPreviousLDIFExportAge) {
		toSerialize["retainPreviousLDIFExportAge"] = o.RetainPreviousLDIFExportAge
	}
	if !isNil(o.MaxMegabytesPerSecond) {
		toSerialize["maxMegabytesPerSecond"] = o.MaxMegabytesPerSecond
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CancelOnTaskDependencyFailure) {
		toSerialize["cancelOnTaskDependencyFailure"] = o.CancelOnTaskDependencyFailure
	}
	if !isNil(o.EmailOnStart) {
		toSerialize["emailOnStart"] = o.EmailOnStart
	}
	if !isNil(o.EmailOnSuccess) {
		toSerialize["emailOnSuccess"] = o.EmailOnSuccess
	}
	if !isNil(o.EmailOnFailure) {
		toSerialize["emailOnFailure"] = o.EmailOnFailure
	}
	if !isNil(o.AlertOnStart) {
		toSerialize["alertOnStart"] = o.AlertOnStart
	}
	if !isNil(o.AlertOnSuccess) {
		toSerialize["alertOnSuccess"] = o.AlertOnSuccess
	}
	if !isNil(o.AlertOnFailure) {
		toSerialize["alertOnFailure"] = o.AlertOnFailure
	}
	return json.Marshal(toSerialize)
}

type NullableAddLdifExportRecurringTaskRequest struct {
	value *AddLdifExportRecurringTaskRequest
	isSet bool
}

func (v NullableAddLdifExportRecurringTaskRequest) Get() *AddLdifExportRecurringTaskRequest {
	return v.value
}

func (v *NullableAddLdifExportRecurringTaskRequest) Set(val *AddLdifExportRecurringTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLdifExportRecurringTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLdifExportRecurringTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLdifExportRecurringTaskRequest(val *AddLdifExportRecurringTaskRequest) *NullableAddLdifExportRecurringTaskRequest {
	return &NullableAddLdifExportRecurringTaskRequest{value: val, isSet: true}
}

func (v NullableAddLdifExportRecurringTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLdifExportRecurringTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


