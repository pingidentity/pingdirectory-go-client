/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LogRetentionPolicyApiService LogRetentionPolicyApi service
type LogRetentionPolicyApiService service

type ApiAddLogRetentionPolicyRequest struct {
	ctx                          context.Context
	ApiService                   *LogRetentionPolicyApiService
	addLogRetentionPolicyRequest *AddLogRetentionPolicyRequest
}

// Create a new Log Retention Policy in the config
func (r ApiAddLogRetentionPolicyRequest) AddLogRetentionPolicyRequest(addLogRetentionPolicyRequest AddLogRetentionPolicyRequest) ApiAddLogRetentionPolicyRequest {
	r.addLogRetentionPolicyRequest = &addLogRetentionPolicyRequest
	return r
}

func (r ApiAddLogRetentionPolicyRequest) Execute() (*AddLogRetentionPolicy200Response, *http.Response, error) {
	return r.ApiService.AddLogRetentionPolicyExecute(r)
}

/*
AddLogRetentionPolicy Add a new Log Retention Policy to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddLogRetentionPolicyRequest
*/
func (a *LogRetentionPolicyApiService) AddLogRetentionPolicy(ctx context.Context) ApiAddLogRetentionPolicyRequest {
	return ApiAddLogRetentionPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddLogRetentionPolicy200Response
func (a *LogRetentionPolicyApiService) AddLogRetentionPolicyExecute(r ApiAddLogRetentionPolicyRequest) (*AddLogRetentionPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogRetentionPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRetentionPolicyApiService.AddLogRetentionPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-retention-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLogRetentionPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("addLogRetentionPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addLogRetentionPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLogRetentionPolicyRequest struct {
	ctx                    context.Context
	ApiService             *LogRetentionPolicyApiService
	logRetentionPolicyName string
}

func (r ApiDeleteLogRetentionPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLogRetentionPolicyExecute(r)
}

/*
DeleteLogRetentionPolicy Delete a Log Retention Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logRetentionPolicyName Name of the Log Retention Policy to be deleted
	@return ApiDeleteLogRetentionPolicyRequest
*/
func (a *LogRetentionPolicyApiService) DeleteLogRetentionPolicy(ctx context.Context, logRetentionPolicyName string) ApiDeleteLogRetentionPolicyRequest {
	return ApiDeleteLogRetentionPolicyRequest{
		ApiService:             a,
		ctx:                    ctx,
		logRetentionPolicyName: logRetentionPolicyName,
	}
}

// Execute executes the request
func (a *LogRetentionPolicyApiService) DeleteLogRetentionPolicyExecute(r ApiDeleteLogRetentionPolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRetentionPolicyApiService.DeleteLogRetentionPolicy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-retention-policies/{log-retention-policy-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-retention-policy-name"+"}", url.PathEscape(parameterToString(r.logRetentionPolicyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLogRetentionPolicyRequest struct {
	ctx                    context.Context
	ApiService             *LogRetentionPolicyApiService
	logRetentionPolicyName string
}

func (r ApiGetLogRetentionPolicyRequest) Execute() (*AddLogRetentionPolicy200Response, *http.Response, error) {
	return r.ApiService.GetLogRetentionPolicyExecute(r)
}

/*
GetLogRetentionPolicy Returns a single Log Retention Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logRetentionPolicyName Name of the Log Retention Policy to be read
	@return ApiGetLogRetentionPolicyRequest
*/
func (a *LogRetentionPolicyApiService) GetLogRetentionPolicy(ctx context.Context, logRetentionPolicyName string) ApiGetLogRetentionPolicyRequest {
	return ApiGetLogRetentionPolicyRequest{
		ApiService:             a,
		ctx:                    ctx,
		logRetentionPolicyName: logRetentionPolicyName,
	}
}

// Execute executes the request
//
//	@return AddLogRetentionPolicy200Response
func (a *LogRetentionPolicyApiService) GetLogRetentionPolicyExecute(r ApiGetLogRetentionPolicyRequest) (*AddLogRetentionPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogRetentionPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRetentionPolicyApiService.GetLogRetentionPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-retention-policies/{log-retention-policy-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-retention-policy-name"+"}", url.PathEscape(parameterToString(r.logRetentionPolicyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLogRetentionPolicyRequest struct {
	ctx                    context.Context
	ApiService             *LogRetentionPolicyApiService
	logRetentionPolicyName string
	updateRequest          *UpdateRequest
}

// Update an existing Log Retention Policy
func (r ApiUpdateLogRetentionPolicyRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateLogRetentionPolicyRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateLogRetentionPolicyRequest) Execute() (*AddLogRetentionPolicy200Response, *http.Response, error) {
	return r.ApiService.UpdateLogRetentionPolicyExecute(r)
}

/*
UpdateLogRetentionPolicy Update an existing Log Retention Policy by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logRetentionPolicyName Name of the Log Retention Policy to be updated
	@return ApiUpdateLogRetentionPolicyRequest
*/
func (a *LogRetentionPolicyApiService) UpdateLogRetentionPolicy(ctx context.Context, logRetentionPolicyName string) ApiUpdateLogRetentionPolicyRequest {
	return ApiUpdateLogRetentionPolicyRequest{
		ApiService:             a,
		ctx:                    ctx,
		logRetentionPolicyName: logRetentionPolicyName,
	}
}

// Execute executes the request
//
//	@return AddLogRetentionPolicy200Response
func (a *LogRetentionPolicyApiService) UpdateLogRetentionPolicyExecute(r ApiUpdateLogRetentionPolicyRequest) (*AddLogRetentionPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogRetentionPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRetentionPolicyApiService.UpdateLogRetentionPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-retention-policies/{log-retention-policy-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-retention-policy-name"+"}", url.PathEscape(parameterToString(r.logRetentionPolicyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
