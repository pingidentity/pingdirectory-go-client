/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LocalDbIndexApiService LocalDbIndexApi service
type LocalDbIndexApiService service

type ApiAddLocalDbIndexRequest struct {
	ctx                    context.Context
	ApiService             *LocalDbIndexApiService
	addLocalDbIndexRequest *AddLocalDbIndexRequest
}

// Create a new Local DB Index in the config
func (r ApiAddLocalDbIndexRequest) AddLocalDbIndexRequest(addLocalDbIndexRequest AddLocalDbIndexRequest) ApiAddLocalDbIndexRequest {
	r.addLocalDbIndexRequest = &addLocalDbIndexRequest
	return r
}

func (r ApiAddLocalDbIndexRequest) Execute() (*LocalDbIndexResponse, *http.Response, error) {
	return r.ApiService.AddLocalDbIndexExecute(r)
}

/*
AddLocalDbIndex Add a new Local DB Index to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddLocalDbIndexRequest
*/
func (a *LocalDbIndexApiService) AddLocalDbIndex(ctx context.Context) ApiAddLocalDbIndexRequest {
	return ApiAddLocalDbIndexRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LocalDbIndexResponse
func (a *LocalDbIndexApiService) AddLocalDbIndexExecute(r ApiAddLocalDbIndexRequest) (*LocalDbIndexResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LocalDbIndexResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbIndexApiService.AddLocalDbIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/local-db-indexes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLocalDbIndexRequest == nil {
		return localVarReturnValue, nil, reportError("addLocalDbIndexRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addLocalDbIndexRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLocalDbIndexRequest struct {
	ctx              context.Context
	ApiService       *LocalDbIndexApiService
	localDbIndexName string
}

func (r ApiDeleteLocalDbIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocalDbIndexExecute(r)
}

/*
DeleteLocalDbIndex Delete a Local DB Index

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param localDbIndexName Name of the Local DB Index to be deleted
	@return ApiDeleteLocalDbIndexRequest
*/
func (a *LocalDbIndexApiService) DeleteLocalDbIndex(ctx context.Context, localDbIndexName string) ApiDeleteLocalDbIndexRequest {
	return ApiDeleteLocalDbIndexRequest{
		ApiService:       a,
		ctx:              ctx,
		localDbIndexName: localDbIndexName,
	}
}

// Execute executes the request
func (a *LocalDbIndexApiService) DeleteLocalDbIndexExecute(r ApiDeleteLocalDbIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbIndexApiService.DeleteLocalDbIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/local-db-indexes/{local-db-index-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"local-db-index-name"+"}", url.PathEscape(parameterToString(r.localDbIndexName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLocalDbIndexRequest struct {
	ctx              context.Context
	ApiService       *LocalDbIndexApiService
	localDbIndexName string
}

func (r ApiGetLocalDbIndexRequest) Execute() (*LocalDbIndexResponse, *http.Response, error) {
	return r.ApiService.GetLocalDbIndexExecute(r)
}

/*
GetLocalDbIndex Returns a single Local DB Index

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param localDbIndexName Name of the Local DB Index to be read
	@return ApiGetLocalDbIndexRequest
*/
func (a *LocalDbIndexApiService) GetLocalDbIndex(ctx context.Context, localDbIndexName string) ApiGetLocalDbIndexRequest {
	return ApiGetLocalDbIndexRequest{
		ApiService:       a,
		ctx:              ctx,
		localDbIndexName: localDbIndexName,
	}
}

// Execute executes the request
//
//	@return LocalDbIndexResponse
func (a *LocalDbIndexApiService) GetLocalDbIndexExecute(r ApiGetLocalDbIndexRequest) (*LocalDbIndexResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LocalDbIndexResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbIndexApiService.GetLocalDbIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/local-db-indexes/{local-db-index-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"local-db-index-name"+"}", url.PathEscape(parameterToString(r.localDbIndexName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLocalDbIndexRequest struct {
	ctx              context.Context
	ApiService       *LocalDbIndexApiService
	localDbIndexName string
	updateRequest    *UpdateRequest
}

// Update an existing Local DB Index
func (r ApiUpdateLocalDbIndexRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateLocalDbIndexRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateLocalDbIndexRequest) Execute() (*LocalDbIndexResponse, *http.Response, error) {
	return r.ApiService.UpdateLocalDbIndexExecute(r)
}

/*
UpdateLocalDbIndex Update an existing Local DB Index by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param localDbIndexName Name of the Local DB Index to be updated
	@return ApiUpdateLocalDbIndexRequest
*/
func (a *LocalDbIndexApiService) UpdateLocalDbIndex(ctx context.Context, localDbIndexName string) ApiUpdateLocalDbIndexRequest {
	return ApiUpdateLocalDbIndexRequest{
		ApiService:       a,
		ctx:              ctx,
		localDbIndexName: localDbIndexName,
	}
}

// Execute executes the request
//
//	@return LocalDbIndexResponse
func (a *LocalDbIndexApiService) UpdateLocalDbIndexExecute(r ApiUpdateLocalDbIndexRequest) (*LocalDbIndexResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LocalDbIndexResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbIndexApiService.UpdateLocalDbIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/local-db-indexes/{local-db-index-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"local-db-index-name"+"}", url.PathEscape(parameterToString(r.localDbIndexName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
