/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumenvironmentVariablePassphraseProviderSchemaUrn the model 'EnumenvironmentVariablePassphraseProviderSchemaUrn'
type EnumenvironmentVariablePassphraseProviderSchemaUrn string

// List of Enumenvironment-variable-passphrase-providerSchemaUrn
const (
	ENUMENVIRONMENTVARIABLEPASSPHRASEPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSPHRASE_PROVIDERENVIRONMENT_VARIABLE EnumenvironmentVariablePassphraseProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:passphrase-provider:environment-variable"
)

// All allowed values of EnumenvironmentVariablePassphraseProviderSchemaUrn enum
var AllowedEnumenvironmentVariablePassphraseProviderSchemaUrnEnumValues = []EnumenvironmentVariablePassphraseProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:passphrase-provider:environment-variable",
}

func (v *EnumenvironmentVariablePassphraseProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumenvironmentVariablePassphraseProviderSchemaUrn(value)
	for _, existing := range AllowedEnumenvironmentVariablePassphraseProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumenvironmentVariablePassphraseProviderSchemaUrn", value)
}

// NewEnumenvironmentVariablePassphraseProviderSchemaUrnFromValue returns a pointer to a valid EnumenvironmentVariablePassphraseProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumenvironmentVariablePassphraseProviderSchemaUrnFromValue(v string) (*EnumenvironmentVariablePassphraseProviderSchemaUrn, error) {
	ev := EnumenvironmentVariablePassphraseProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumenvironmentVariablePassphraseProviderSchemaUrn: valid values are %v", v, AllowedEnumenvironmentVariablePassphraseProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumenvironmentVariablePassphraseProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumenvironmentVariablePassphraseProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumenvironment-variable-passphrase-providerSchemaUrn value
func (v EnumenvironmentVariablePassphraseProviderSchemaUrn) Ptr() *EnumenvironmentVariablePassphraseProviderSchemaUrn {
	return &v
}

type NullableEnumenvironmentVariablePassphraseProviderSchemaUrn struct {
	value *EnumenvironmentVariablePassphraseProviderSchemaUrn
	isSet bool
}

func (v NullableEnumenvironmentVariablePassphraseProviderSchemaUrn) Get() *EnumenvironmentVariablePassphraseProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumenvironmentVariablePassphraseProviderSchemaUrn) Set(val *EnumenvironmentVariablePassphraseProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumenvironmentVariablePassphraseProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumenvironmentVariablePassphraseProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumenvironmentVariablePassphraseProviderSchemaUrn(val *EnumenvironmentVariablePassphraseProviderSchemaUrn) *NullableEnumenvironmentVariablePassphraseProviderSchemaUrn {
	return &NullableEnumenvironmentVariablePassphraseProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumenvironmentVariablePassphraseProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumenvironmentVariablePassphraseProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

