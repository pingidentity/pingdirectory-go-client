/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginDatetimeFormatProp Specifies the format of the datetime stored within the entry that determines when data should be purged.
type EnumpluginDatetimeFormatProp string

// List of Enumplugin-datetimeFormatProp
const (
	ENUMPLUGINDATETIMEFORMATPROP_GENERALIZED_TIME        EnumpluginDatetimeFormatProp = "generalized-time"
	ENUMPLUGINDATETIMEFORMATPROP_JAVA_SYSTEM_TIME_MILLIS EnumpluginDatetimeFormatProp = "java-system-time-millis"
	ENUMPLUGINDATETIMEFORMATPROP_CUSTOM                  EnumpluginDatetimeFormatProp = "custom"
)

// All allowed values of EnumpluginDatetimeFormatProp enum
var AllowedEnumpluginDatetimeFormatPropEnumValues = []EnumpluginDatetimeFormatProp{
	"generalized-time",
	"java-system-time-millis",
	"custom",
}

func (v *EnumpluginDatetimeFormatProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginDatetimeFormatProp(value)
	for _, existing := range AllowedEnumpluginDatetimeFormatPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginDatetimeFormatProp", value)
}

// NewEnumpluginDatetimeFormatPropFromValue returns a pointer to a valid EnumpluginDatetimeFormatProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginDatetimeFormatPropFromValue(v string) (*EnumpluginDatetimeFormatProp, error) {
	ev := EnumpluginDatetimeFormatProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginDatetimeFormatProp: valid values are %v", v, AllowedEnumpluginDatetimeFormatPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginDatetimeFormatProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginDatetimeFormatPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-datetimeFormatProp value
func (v EnumpluginDatetimeFormatProp) Ptr() *EnumpluginDatetimeFormatProp {
	return &v
}

type NullableEnumpluginDatetimeFormatProp struct {
	value *EnumpluginDatetimeFormatProp
	isSet bool
}

func (v NullableEnumpluginDatetimeFormatProp) Get() *EnumpluginDatetimeFormatProp {
	return v.value
}

func (v *NullableEnumpluginDatetimeFormatProp) Set(val *EnumpluginDatetimeFormatProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginDatetimeFormatProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginDatetimeFormatProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginDatetimeFormatProp(val *EnumpluginDatetimeFormatProp) *NullableEnumpluginDatetimeFormatProp {
	return &NullableEnumpluginDatetimeFormatProp{value: val, isSet: true}
}

func (v NullableEnumpluginDatetimeFormatProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginDatetimeFormatProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
