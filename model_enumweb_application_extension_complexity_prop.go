/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumwebApplicationExtensionComplexityProp Specifies the maximum complexity level for managed configuration elements.
type EnumwebApplicationExtensionComplexityProp string

// List of Enumweb-application-extension-complexityProp
const (
	BASIC EnumwebApplicationExtensionComplexityProp = "basic"
	STANDARD EnumwebApplicationExtensionComplexityProp = "standard"
	ADVANCED EnumwebApplicationExtensionComplexityProp = "advanced"
	EXPERT EnumwebApplicationExtensionComplexityProp = "expert"
)

// All allowed values of EnumwebApplicationExtensionComplexityProp enum
var AllowedEnumwebApplicationExtensionComplexityPropEnumValues = []EnumwebApplicationExtensionComplexityProp{
	"basic",
	"standard",
	"advanced",
	"expert",
}

func (v *EnumwebApplicationExtensionComplexityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumwebApplicationExtensionComplexityProp(value)
	for _, existing := range AllowedEnumwebApplicationExtensionComplexityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumwebApplicationExtensionComplexityProp", value)
}

// NewEnumwebApplicationExtensionComplexityPropFromValue returns a pointer to a valid EnumwebApplicationExtensionComplexityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumwebApplicationExtensionComplexityPropFromValue(v string) (*EnumwebApplicationExtensionComplexityProp, error) {
	ev := EnumwebApplicationExtensionComplexityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumwebApplicationExtensionComplexityProp: valid values are %v", v, AllowedEnumwebApplicationExtensionComplexityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumwebApplicationExtensionComplexityProp) IsValid() bool {
	for _, existing := range AllowedEnumwebApplicationExtensionComplexityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumweb-application-extension-complexityProp value
func (v EnumwebApplicationExtensionComplexityProp) Ptr() *EnumwebApplicationExtensionComplexityProp {
	return &v
}

type NullableEnumwebApplicationExtensionComplexityProp struct {
	value *EnumwebApplicationExtensionComplexityProp
	isSet bool
}

func (v NullableEnumwebApplicationExtensionComplexityProp) Get() *EnumwebApplicationExtensionComplexityProp {
	return v.value
}

func (v *NullableEnumwebApplicationExtensionComplexityProp) Set(val *EnumwebApplicationExtensionComplexityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumwebApplicationExtensionComplexityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumwebApplicationExtensionComplexityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumwebApplicationExtensionComplexityProp(val *EnumwebApplicationExtensionComplexityProp) *NullableEnumwebApplicationExtensionComplexityProp {
	return &NullableEnumwebApplicationExtensionComplexityProp{value: val, isSet: true}
}

func (v NullableEnumwebApplicationExtensionComplexityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumwebApplicationExtensionComplexityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

