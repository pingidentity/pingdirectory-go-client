/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaSearchIndexedCriteriaProp Indicates whether a search operation should be matched by this Simple Result Criteria based on whether it is considered indexed by the server. This will be ignored for all operations other than search.
type EnumresultCriteriaSearchIndexedCriteriaProp string

// List of Enumresult-criteria-searchIndexedCriteriaProp
const (
	ENUMRESULTCRITERIASEARCHINDEXEDCRITERIAPROP_ANY EnumresultCriteriaSearchIndexedCriteriaProp = "any"
	ENUMRESULTCRITERIASEARCHINDEXEDCRITERIAPROP_INDEXED EnumresultCriteriaSearchIndexedCriteriaProp = "indexed"
	ENUMRESULTCRITERIASEARCHINDEXEDCRITERIAPROP_UNINDEXED EnumresultCriteriaSearchIndexedCriteriaProp = "unindexed"
)

// All allowed values of EnumresultCriteriaSearchIndexedCriteriaProp enum
var AllowedEnumresultCriteriaSearchIndexedCriteriaPropEnumValues = []EnumresultCriteriaSearchIndexedCriteriaProp{
	"any",
	"indexed",
	"unindexed",
}

func (v *EnumresultCriteriaSearchIndexedCriteriaProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaSearchIndexedCriteriaProp(value)
	for _, existing := range AllowedEnumresultCriteriaSearchIndexedCriteriaPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaSearchIndexedCriteriaProp", value)
}

// NewEnumresultCriteriaSearchIndexedCriteriaPropFromValue returns a pointer to a valid EnumresultCriteriaSearchIndexedCriteriaProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaSearchIndexedCriteriaPropFromValue(v string) (*EnumresultCriteriaSearchIndexedCriteriaProp, error) {
	ev := EnumresultCriteriaSearchIndexedCriteriaProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaSearchIndexedCriteriaProp: valid values are %v", v, AllowedEnumresultCriteriaSearchIndexedCriteriaPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaSearchIndexedCriteriaProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaSearchIndexedCriteriaPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-searchIndexedCriteriaProp value
func (v EnumresultCriteriaSearchIndexedCriteriaProp) Ptr() *EnumresultCriteriaSearchIndexedCriteriaProp {
	return &v
}

type NullableEnumresultCriteriaSearchIndexedCriteriaProp struct {
	value *EnumresultCriteriaSearchIndexedCriteriaProp
	isSet bool
}

func (v NullableEnumresultCriteriaSearchIndexedCriteriaProp) Get() *EnumresultCriteriaSearchIndexedCriteriaProp {
	return v.value
}

func (v *NullableEnumresultCriteriaSearchIndexedCriteriaProp) Set(val *EnumresultCriteriaSearchIndexedCriteriaProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaSearchIndexedCriteriaProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaSearchIndexedCriteriaProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaSearchIndexedCriteriaProp(val *EnumresultCriteriaSearchIndexedCriteriaProp) *NullableEnumresultCriteriaSearchIndexedCriteriaProp {
	return &NullableEnumresultCriteriaSearchIndexedCriteriaProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaSearchIndexedCriteriaProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaSearchIndexedCriteriaProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

