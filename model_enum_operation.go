/*
PingData Location Config - OpenAPI 3.0

This is the PingData Configuration API for the Location config object

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumOperation the model 'EnumOperation'
type EnumOperation string

// List of EnumOperation
const (
	ADD EnumOperation = "add"
	REMOVE EnumOperation = "remove"
	REPLACE EnumOperation = "replace"
)

// All allowed values of EnumOperation enum
var AllowedEnumOperationEnumValues = []EnumOperation{
	"add",
	"remove",
	"replace",
}

func (v *EnumOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumOperation(value)
	for _, existing := range AllowedEnumOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumOperation", value)
}

// NewEnumOperationFromValue returns a pointer to a valid EnumOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumOperationFromValue(v string) (*EnumOperation, error) {
	ev := EnumOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumOperation: valid values are %v", v, AllowedEnumOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumOperation) IsValid() bool {
	for _, existing := range AllowedEnumOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumOperation value
func (v EnumOperation) Ptr() *EnumOperation {
	return &v
}

type NullableEnumOperation struct {
	value *EnumOperation
	isSet bool
}

func (v NullableEnumOperation) Get() *EnumOperation {
	return v.value
}

func (v *NullableEnumOperation) Set(val *EnumOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumOperation(val *EnumOperation) *NullableEnumOperation {
	return &NullableEnumOperation{value: val, isSet: true}
}

func (v NullableEnumOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

