/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LoggingChangeSubscriptionHandlerShared struct for LoggingChangeSubscriptionHandlerShared
type LoggingChangeSubscriptionHandlerShared struct {
	Schemas []EnumloggingChangeSubscriptionHandlerSchemaUrn `json:"schemas"`
	// Specifies the log file in which the change notification messages will be written.
	LogFile string `json:"logFile"`
	// A description for this Change Subscription Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether this change subscription handler is enabled within the server.
	Enabled bool `json:"enabled"`
	ChangeSubscription []string `json:"changeSubscription,omitempty"`
}

// NewLoggingChangeSubscriptionHandlerShared instantiates a new LoggingChangeSubscriptionHandlerShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingChangeSubscriptionHandlerShared(schemas []EnumloggingChangeSubscriptionHandlerSchemaUrn, logFile string, enabled bool) *LoggingChangeSubscriptionHandlerShared {
	this := LoggingChangeSubscriptionHandlerShared{}
	this.Schemas = schemas
	this.LogFile = logFile
	this.Enabled = enabled
	return &this
}

// NewLoggingChangeSubscriptionHandlerSharedWithDefaults instantiates a new LoggingChangeSubscriptionHandlerShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingChangeSubscriptionHandlerSharedWithDefaults() *LoggingChangeSubscriptionHandlerShared {
	this := LoggingChangeSubscriptionHandlerShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *LoggingChangeSubscriptionHandlerShared) GetSchemas() []EnumloggingChangeSubscriptionHandlerSchemaUrn {
	if o == nil {
		var ret []EnumloggingChangeSubscriptionHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerShared) GetSchemasOk() ([]EnumloggingChangeSubscriptionHandlerSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *LoggingChangeSubscriptionHandlerShared) SetSchemas(v []EnumloggingChangeSubscriptionHandlerSchemaUrn) {
	o.Schemas = v
}

// GetLogFile returns the LogFile field value
func (o *LoggingChangeSubscriptionHandlerShared) GetLogFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerShared) GetLogFileOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LogFile, true
}

// SetLogFile sets field value
func (o *LoggingChangeSubscriptionHandlerShared) SetLogFile(v string) {
	o.LogFile = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LoggingChangeSubscriptionHandlerShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LoggingChangeSubscriptionHandlerShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LoggingChangeSubscriptionHandlerShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *LoggingChangeSubscriptionHandlerShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LoggingChangeSubscriptionHandlerShared) SetEnabled(v bool) {
	o.Enabled = v
}

// GetChangeSubscription returns the ChangeSubscription field value if set, zero value otherwise.
func (o *LoggingChangeSubscriptionHandlerShared) GetChangeSubscription() []string {
	if o == nil || isNil(o.ChangeSubscription) {
		var ret []string
		return ret
	}
	return o.ChangeSubscription
}

// GetChangeSubscriptionOk returns a tuple with the ChangeSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerShared) GetChangeSubscriptionOk() ([]string, bool) {
	if o == nil || isNil(o.ChangeSubscription) {
    return nil, false
	}
	return o.ChangeSubscription, true
}

// HasChangeSubscription returns a boolean if a field has been set.
func (o *LoggingChangeSubscriptionHandlerShared) HasChangeSubscription() bool {
	if o != nil && !isNil(o.ChangeSubscription) {
		return true
	}

	return false
}

// SetChangeSubscription gets a reference to the given []string and assigns it to the ChangeSubscription field.
func (o *LoggingChangeSubscriptionHandlerShared) SetChangeSubscription(v []string) {
	o.ChangeSubscription = v
}

func (o LoggingChangeSubscriptionHandlerShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["logFile"] = o.LogFile
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.ChangeSubscription) {
		toSerialize["changeSubscription"] = o.ChangeSubscription
	}
	return json.Marshal(toSerialize)
}

type NullableLoggingChangeSubscriptionHandlerShared struct {
	value *LoggingChangeSubscriptionHandlerShared
	isSet bool
}

func (v NullableLoggingChangeSubscriptionHandlerShared) Get() *LoggingChangeSubscriptionHandlerShared {
	return v.value
}

func (v *NullableLoggingChangeSubscriptionHandlerShared) Set(val *LoggingChangeSubscriptionHandlerShared) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingChangeSubscriptionHandlerShared) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingChangeSubscriptionHandlerShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingChangeSubscriptionHandlerShared(val *LoggingChangeSubscriptionHandlerShared) *NullableLoggingChangeSubscriptionHandlerShared {
	return &NullableLoggingChangeSubscriptionHandlerShared{value: val, isSet: true}
}

func (v NullableLoggingChangeSubscriptionHandlerShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingChangeSubscriptionHandlerShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


