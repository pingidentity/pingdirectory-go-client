/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumserverInstancePreferredSecurityProp Specifies the preferred mechanism to use for securing connections to the server.
type EnumserverInstancePreferredSecurityProp string

// List of Enumserver-instance-preferredSecurityProp
const (
	NONE EnumserverInstancePreferredSecurityProp = "none"
	SSL EnumserverInstancePreferredSecurityProp = "ssl"
	STARTTLS EnumserverInstancePreferredSecurityProp = "starttls"
)

// All allowed values of EnumserverInstancePreferredSecurityProp enum
var AllowedEnumserverInstancePreferredSecurityPropEnumValues = []EnumserverInstancePreferredSecurityProp{
	"none",
	"ssl",
	"starttls",
}

func (v *EnumserverInstancePreferredSecurityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumserverInstancePreferredSecurityProp(value)
	for _, existing := range AllowedEnumserverInstancePreferredSecurityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumserverInstancePreferredSecurityProp", value)
}

// NewEnumserverInstancePreferredSecurityPropFromValue returns a pointer to a valid EnumserverInstancePreferredSecurityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumserverInstancePreferredSecurityPropFromValue(v string) (*EnumserverInstancePreferredSecurityProp, error) {
	ev := EnumserverInstancePreferredSecurityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumserverInstancePreferredSecurityProp: valid values are %v", v, AllowedEnumserverInstancePreferredSecurityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumserverInstancePreferredSecurityProp) IsValid() bool {
	for _, existing := range AllowedEnumserverInstancePreferredSecurityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumserver-instance-preferredSecurityProp value
func (v EnumserverInstancePreferredSecurityProp) Ptr() *EnumserverInstancePreferredSecurityProp {
	return &v
}

type NullableEnumserverInstancePreferredSecurityProp struct {
	value *EnumserverInstancePreferredSecurityProp
	isSet bool
}

func (v NullableEnumserverInstancePreferredSecurityProp) Get() *EnumserverInstancePreferredSecurityProp {
	return v.value
}

func (v *NullableEnumserverInstancePreferredSecurityProp) Set(val *EnumserverInstancePreferredSecurityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumserverInstancePreferredSecurityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumserverInstancePreferredSecurityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumserverInstancePreferredSecurityProp(val *EnumserverInstancePreferredSecurityProp) *NullableEnumserverInstancePreferredSecurityProp {
	return &NullableEnumserverInstancePreferredSecurityProp{value: val, isSet: true}
}

func (v NullableEnumserverInstancePreferredSecurityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumserverInstancePreferredSecurityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

