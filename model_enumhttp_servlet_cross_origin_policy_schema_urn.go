/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpServletCrossOriginPolicySchemaUrn the model 'EnumhttpServletCrossOriginPolicySchemaUrn'
type EnumhttpServletCrossOriginPolicySchemaUrn string

// List of Enumhttp-servlet-cross-origin-policySchemaUrn
const (
	ENUMHTTPSERVLETCROSSORIGINPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_CROSS_ORIGIN_POLICY EnumhttpServletCrossOriginPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-cross-origin-policy"
)

// All allowed values of EnumhttpServletCrossOriginPolicySchemaUrn enum
var AllowedEnumhttpServletCrossOriginPolicySchemaUrnEnumValues = []EnumhttpServletCrossOriginPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-cross-origin-policy",
}

func (v *EnumhttpServletCrossOriginPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpServletCrossOriginPolicySchemaUrn(value)
	for _, existing := range AllowedEnumhttpServletCrossOriginPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpServletCrossOriginPolicySchemaUrn", value)
}

// NewEnumhttpServletCrossOriginPolicySchemaUrnFromValue returns a pointer to a valid EnumhttpServletCrossOriginPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpServletCrossOriginPolicySchemaUrnFromValue(v string) (*EnumhttpServletCrossOriginPolicySchemaUrn, error) {
	ev := EnumhttpServletCrossOriginPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpServletCrossOriginPolicySchemaUrn: valid values are %v", v, AllowedEnumhttpServletCrossOriginPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpServletCrossOriginPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumhttpServletCrossOriginPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-servlet-cross-origin-policySchemaUrn value
func (v EnumhttpServletCrossOriginPolicySchemaUrn) Ptr() *EnumhttpServletCrossOriginPolicySchemaUrn {
	return &v
}

type NullableEnumhttpServletCrossOriginPolicySchemaUrn struct {
	value *EnumhttpServletCrossOriginPolicySchemaUrn
	isSet bool
}

func (v NullableEnumhttpServletCrossOriginPolicySchemaUrn) Get() *EnumhttpServletCrossOriginPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumhttpServletCrossOriginPolicySchemaUrn) Set(val *EnumhttpServletCrossOriginPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpServletCrossOriginPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpServletCrossOriginPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpServletCrossOriginPolicySchemaUrn(val *EnumhttpServletCrossOriginPolicySchemaUrn) *NullableEnumhttpServletCrossOriginPolicySchemaUrn {
	return &NullableEnumhttpServletCrossOriginPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumhttpServletCrossOriginPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpServletCrossOriginPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

