/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumcommonLogFileHttpOperationLogPublisherSchemaUrn the model 'EnumcommonLogFileHttpOperationLogPublisherSchemaUrn'
type EnumcommonLogFileHttpOperationLogPublisherSchemaUrn string

// List of Enumcommon-log-file-http-operation-log-publisherSchemaUrn
const (
	ENUMCOMMONLOGFILEHTTPOPERATIONLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERCOMMON_LOG_FILE_HTTP_OPERATION EnumcommonLogFileHttpOperationLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:common-log-file-http-operation"
)

// All allowed values of EnumcommonLogFileHttpOperationLogPublisherSchemaUrn enum
var AllowedEnumcommonLogFileHttpOperationLogPublisherSchemaUrnEnumValues = []EnumcommonLogFileHttpOperationLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:common-log-file-http-operation",
}

func (v *EnumcommonLogFileHttpOperationLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcommonLogFileHttpOperationLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumcommonLogFileHttpOperationLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcommonLogFileHttpOperationLogPublisherSchemaUrn", value)
}

// NewEnumcommonLogFileHttpOperationLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumcommonLogFileHttpOperationLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcommonLogFileHttpOperationLogPublisherSchemaUrnFromValue(v string) (*EnumcommonLogFileHttpOperationLogPublisherSchemaUrn, error) {
	ev := EnumcommonLogFileHttpOperationLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcommonLogFileHttpOperationLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumcommonLogFileHttpOperationLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcommonLogFileHttpOperationLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcommonLogFileHttpOperationLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcommon-log-file-http-operation-log-publisherSchemaUrn value
func (v EnumcommonLogFileHttpOperationLogPublisherSchemaUrn) Ptr() *EnumcommonLogFileHttpOperationLogPublisherSchemaUrn {
	return &v
}

type NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn struct {
	value *EnumcommonLogFileHttpOperationLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn) Get() *EnumcommonLogFileHttpOperationLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn) Set(val *EnumcommonLogFileHttpOperationLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn(val *EnumcommonLogFileHttpOperationLogPublisherSchemaUrn) *NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn {
	return &NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcommonLogFileHttpOperationLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

