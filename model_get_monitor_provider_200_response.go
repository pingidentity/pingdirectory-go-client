/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetMonitorProvider200Response - struct for GetMonitorProvider200Response
type GetMonitorProvider200Response struct {
	ActiveOperationsMonitorProviderResponse *ActiveOperationsMonitorProviderResponse
	ClientConnectionMonitorProviderResponse *ClientConnectionMonitorProviderResponse
	DiskSpaceUsageMonitorProviderResponse *DiskSpaceUsageMonitorProviderResponse
	GeneralMonitorProviderResponse *GeneralMonitorProviderResponse
	HostSystemMonitorProviderResponse *HostSystemMonitorProviderResponse
	MemoryUsageMonitorProviderResponse *MemoryUsageMonitorProviderResponse
	SslContextMonitorProviderResponse *SslContextMonitorProviderResponse
	StackTraceMonitorProviderResponse *StackTraceMonitorProviderResponse
	SystemInfoMonitorProviderResponse *SystemInfoMonitorProviderResponse
	ThirdPartyMonitorProviderResponse *ThirdPartyMonitorProviderResponse
	VersionMonitorProviderResponse *VersionMonitorProviderResponse
}

// ActiveOperationsMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns ActiveOperationsMonitorProviderResponse wrapped in GetMonitorProvider200Response
func ActiveOperationsMonitorProviderResponseAsGetMonitorProvider200Response(v *ActiveOperationsMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		ActiveOperationsMonitorProviderResponse: v,
	}
}

// ClientConnectionMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns ClientConnectionMonitorProviderResponse wrapped in GetMonitorProvider200Response
func ClientConnectionMonitorProviderResponseAsGetMonitorProvider200Response(v *ClientConnectionMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		ClientConnectionMonitorProviderResponse: v,
	}
}

// DiskSpaceUsageMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns DiskSpaceUsageMonitorProviderResponse wrapped in GetMonitorProvider200Response
func DiskSpaceUsageMonitorProviderResponseAsGetMonitorProvider200Response(v *DiskSpaceUsageMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		DiskSpaceUsageMonitorProviderResponse: v,
	}
}

// GeneralMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns GeneralMonitorProviderResponse wrapped in GetMonitorProvider200Response
func GeneralMonitorProviderResponseAsGetMonitorProvider200Response(v *GeneralMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		GeneralMonitorProviderResponse: v,
	}
}

// HostSystemMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns HostSystemMonitorProviderResponse wrapped in GetMonitorProvider200Response
func HostSystemMonitorProviderResponseAsGetMonitorProvider200Response(v *HostSystemMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		HostSystemMonitorProviderResponse: v,
	}
}

// MemoryUsageMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns MemoryUsageMonitorProviderResponse wrapped in GetMonitorProvider200Response
func MemoryUsageMonitorProviderResponseAsGetMonitorProvider200Response(v *MemoryUsageMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		MemoryUsageMonitorProviderResponse: v,
	}
}

// SslContextMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns SslContextMonitorProviderResponse wrapped in GetMonitorProvider200Response
func SslContextMonitorProviderResponseAsGetMonitorProvider200Response(v *SslContextMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		SslContextMonitorProviderResponse: v,
	}
}

// StackTraceMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns StackTraceMonitorProviderResponse wrapped in GetMonitorProvider200Response
func StackTraceMonitorProviderResponseAsGetMonitorProvider200Response(v *StackTraceMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		StackTraceMonitorProviderResponse: v,
	}
}

// SystemInfoMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns SystemInfoMonitorProviderResponse wrapped in GetMonitorProvider200Response
func SystemInfoMonitorProviderResponseAsGetMonitorProvider200Response(v *SystemInfoMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		SystemInfoMonitorProviderResponse: v,
	}
}

// ThirdPartyMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns ThirdPartyMonitorProviderResponse wrapped in GetMonitorProvider200Response
func ThirdPartyMonitorProviderResponseAsGetMonitorProvider200Response(v *ThirdPartyMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		ThirdPartyMonitorProviderResponse: v,
	}
}

// VersionMonitorProviderResponseAsGetMonitorProvider200Response is a convenience function that returns VersionMonitorProviderResponse wrapped in GetMonitorProvider200Response
func VersionMonitorProviderResponseAsGetMonitorProvider200Response(v *VersionMonitorProviderResponse) GetMonitorProvider200Response {
	return GetMonitorProvider200Response{
		VersionMonitorProviderResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetMonitorProvider200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActiveOperationsMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ActiveOperationsMonitorProviderResponse)
	if err == nil {
		jsonActiveOperationsMonitorProviderResponse, _ := json.Marshal(dst.ActiveOperationsMonitorProviderResponse)
		if string(jsonActiveOperationsMonitorProviderResponse) == "{}" { // empty struct
			dst.ActiveOperationsMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ActiveOperationsMonitorProviderResponse = nil
	}

	// try to unmarshal data into ClientConnectionMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ClientConnectionMonitorProviderResponse)
	if err == nil {
		jsonClientConnectionMonitorProviderResponse, _ := json.Marshal(dst.ClientConnectionMonitorProviderResponse)
		if string(jsonClientConnectionMonitorProviderResponse) == "{}" { // empty struct
			dst.ClientConnectionMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ClientConnectionMonitorProviderResponse = nil
	}

	// try to unmarshal data into DiskSpaceUsageMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.DiskSpaceUsageMonitorProviderResponse)
	if err == nil {
		jsonDiskSpaceUsageMonitorProviderResponse, _ := json.Marshal(dst.DiskSpaceUsageMonitorProviderResponse)
		if string(jsonDiskSpaceUsageMonitorProviderResponse) == "{}" { // empty struct
			dst.DiskSpaceUsageMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.DiskSpaceUsageMonitorProviderResponse = nil
	}

	// try to unmarshal data into GeneralMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.GeneralMonitorProviderResponse)
	if err == nil {
		jsonGeneralMonitorProviderResponse, _ := json.Marshal(dst.GeneralMonitorProviderResponse)
		if string(jsonGeneralMonitorProviderResponse) == "{}" { // empty struct
			dst.GeneralMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.GeneralMonitorProviderResponse = nil
	}

	// try to unmarshal data into HostSystemMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.HostSystemMonitorProviderResponse)
	if err == nil {
		jsonHostSystemMonitorProviderResponse, _ := json.Marshal(dst.HostSystemMonitorProviderResponse)
		if string(jsonHostSystemMonitorProviderResponse) == "{}" { // empty struct
			dst.HostSystemMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.HostSystemMonitorProviderResponse = nil
	}

	// try to unmarshal data into MemoryUsageMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.MemoryUsageMonitorProviderResponse)
	if err == nil {
		jsonMemoryUsageMonitorProviderResponse, _ := json.Marshal(dst.MemoryUsageMonitorProviderResponse)
		if string(jsonMemoryUsageMonitorProviderResponse) == "{}" { // empty struct
			dst.MemoryUsageMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.MemoryUsageMonitorProviderResponse = nil
	}

	// try to unmarshal data into SslContextMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.SslContextMonitorProviderResponse)
	if err == nil {
		jsonSslContextMonitorProviderResponse, _ := json.Marshal(dst.SslContextMonitorProviderResponse)
		if string(jsonSslContextMonitorProviderResponse) == "{}" { // empty struct
			dst.SslContextMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.SslContextMonitorProviderResponse = nil
	}

	// try to unmarshal data into StackTraceMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.StackTraceMonitorProviderResponse)
	if err == nil {
		jsonStackTraceMonitorProviderResponse, _ := json.Marshal(dst.StackTraceMonitorProviderResponse)
		if string(jsonStackTraceMonitorProviderResponse) == "{}" { // empty struct
			dst.StackTraceMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.StackTraceMonitorProviderResponse = nil
	}

	// try to unmarshal data into SystemInfoMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.SystemInfoMonitorProviderResponse)
	if err == nil {
		jsonSystemInfoMonitorProviderResponse, _ := json.Marshal(dst.SystemInfoMonitorProviderResponse)
		if string(jsonSystemInfoMonitorProviderResponse) == "{}" { // empty struct
			dst.SystemInfoMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.SystemInfoMonitorProviderResponse = nil
	}

	// try to unmarshal data into ThirdPartyMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyMonitorProviderResponse)
	if err == nil {
		jsonThirdPartyMonitorProviderResponse, _ := json.Marshal(dst.ThirdPartyMonitorProviderResponse)
		if string(jsonThirdPartyMonitorProviderResponse) == "{}" { // empty struct
			dst.ThirdPartyMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyMonitorProviderResponse = nil
	}

	// try to unmarshal data into VersionMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.VersionMonitorProviderResponse)
	if err == nil {
		jsonVersionMonitorProviderResponse, _ := json.Marshal(dst.VersionMonitorProviderResponse)
		if string(jsonVersionMonitorProviderResponse) == "{}" { // empty struct
			dst.VersionMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.VersionMonitorProviderResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActiveOperationsMonitorProviderResponse = nil
		dst.ClientConnectionMonitorProviderResponse = nil
		dst.DiskSpaceUsageMonitorProviderResponse = nil
		dst.GeneralMonitorProviderResponse = nil
		dst.HostSystemMonitorProviderResponse = nil
		dst.MemoryUsageMonitorProviderResponse = nil
		dst.SslContextMonitorProviderResponse = nil
		dst.StackTraceMonitorProviderResponse = nil
		dst.SystemInfoMonitorProviderResponse = nil
		dst.ThirdPartyMonitorProviderResponse = nil
		dst.VersionMonitorProviderResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetMonitorProvider200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetMonitorProvider200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetMonitorProvider200Response) MarshalJSON() ([]byte, error) {
	if src.ActiveOperationsMonitorProviderResponse != nil {
		return json.Marshal(&src.ActiveOperationsMonitorProviderResponse)
	}

	if src.ClientConnectionMonitorProviderResponse != nil {
		return json.Marshal(&src.ClientConnectionMonitorProviderResponse)
	}

	if src.DiskSpaceUsageMonitorProviderResponse != nil {
		return json.Marshal(&src.DiskSpaceUsageMonitorProviderResponse)
	}

	if src.GeneralMonitorProviderResponse != nil {
		return json.Marshal(&src.GeneralMonitorProviderResponse)
	}

	if src.HostSystemMonitorProviderResponse != nil {
		return json.Marshal(&src.HostSystemMonitorProviderResponse)
	}

	if src.MemoryUsageMonitorProviderResponse != nil {
		return json.Marshal(&src.MemoryUsageMonitorProviderResponse)
	}

	if src.SslContextMonitorProviderResponse != nil {
		return json.Marshal(&src.SslContextMonitorProviderResponse)
	}

	if src.StackTraceMonitorProviderResponse != nil {
		return json.Marshal(&src.StackTraceMonitorProviderResponse)
	}

	if src.SystemInfoMonitorProviderResponse != nil {
		return json.Marshal(&src.SystemInfoMonitorProviderResponse)
	}

	if src.ThirdPartyMonitorProviderResponse != nil {
		return json.Marshal(&src.ThirdPartyMonitorProviderResponse)
	}

	if src.VersionMonitorProviderResponse != nil {
		return json.Marshal(&src.VersionMonitorProviderResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetMonitorProvider200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActiveOperationsMonitorProviderResponse != nil {
		return obj.ActiveOperationsMonitorProviderResponse
	}

	if obj.ClientConnectionMonitorProviderResponse != nil {
		return obj.ClientConnectionMonitorProviderResponse
	}

	if obj.DiskSpaceUsageMonitorProviderResponse != nil {
		return obj.DiskSpaceUsageMonitorProviderResponse
	}

	if obj.GeneralMonitorProviderResponse != nil {
		return obj.GeneralMonitorProviderResponse
	}

	if obj.HostSystemMonitorProviderResponse != nil {
		return obj.HostSystemMonitorProviderResponse
	}

	if obj.MemoryUsageMonitorProviderResponse != nil {
		return obj.MemoryUsageMonitorProviderResponse
	}

	if obj.SslContextMonitorProviderResponse != nil {
		return obj.SslContextMonitorProviderResponse
	}

	if obj.StackTraceMonitorProviderResponse != nil {
		return obj.StackTraceMonitorProviderResponse
	}

	if obj.SystemInfoMonitorProviderResponse != nil {
		return obj.SystemInfoMonitorProviderResponse
	}

	if obj.ThirdPartyMonitorProviderResponse != nil {
		return obj.ThirdPartyMonitorProviderResponse
	}

	if obj.VersionMonitorProviderResponse != nil {
		return obj.VersionMonitorProviderResponse
	}

	// all schemas are nil
	return nil
}

type NullableGetMonitorProvider200Response struct {
	value *GetMonitorProvider200Response
	isSet bool
}

func (v NullableGetMonitorProvider200Response) Get() *GetMonitorProvider200Response {
	return v.value
}

func (v *NullableGetMonitorProvider200Response) Set(val *GetMonitorProvider200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMonitorProvider200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMonitorProvider200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMonitorProvider200Response(val *GetMonitorProvider200Response) *NullableGetMonitorProvider200Response {
	return &NullableGetMonitorProvider200Response{value: val, isSet: true}
}

func (v NullableGetMonitorProvider200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMonitorProvider200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


