/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvaultCipherStreamProviderSchemaUrn the model 'EnumvaultCipherStreamProviderSchemaUrn'
type EnumvaultCipherStreamProviderSchemaUrn string

// List of Enumvault-cipher-stream-providerSchemaUrn
const (
	ENUMVAULTCIPHERSTREAMPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CIPHER_STREAM_PROVIDERVAULT EnumvaultCipherStreamProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:vault"
)

// All allowed values of EnumvaultCipherStreamProviderSchemaUrn enum
var AllowedEnumvaultCipherStreamProviderSchemaUrnEnumValues = []EnumvaultCipherStreamProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:vault",
}

func (v *EnumvaultCipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvaultCipherStreamProviderSchemaUrn(value)
	for _, existing := range AllowedEnumvaultCipherStreamProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvaultCipherStreamProviderSchemaUrn", value)
}

// NewEnumvaultCipherStreamProviderSchemaUrnFromValue returns a pointer to a valid EnumvaultCipherStreamProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvaultCipherStreamProviderSchemaUrnFromValue(v string) (*EnumvaultCipherStreamProviderSchemaUrn, error) {
	ev := EnumvaultCipherStreamProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvaultCipherStreamProviderSchemaUrn: valid values are %v", v, AllowedEnumvaultCipherStreamProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvaultCipherStreamProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvaultCipherStreamProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvault-cipher-stream-providerSchemaUrn value
func (v EnumvaultCipherStreamProviderSchemaUrn) Ptr() *EnumvaultCipherStreamProviderSchemaUrn {
	return &v
}

type NullableEnumvaultCipherStreamProviderSchemaUrn struct {
	value *EnumvaultCipherStreamProviderSchemaUrn
	isSet bool
}

func (v NullableEnumvaultCipherStreamProviderSchemaUrn) Get() *EnumvaultCipherStreamProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumvaultCipherStreamProviderSchemaUrn) Set(val *EnumvaultCipherStreamProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvaultCipherStreamProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvaultCipherStreamProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvaultCipherStreamProviderSchemaUrn(val *EnumvaultCipherStreamProviderSchemaUrn) *NullableEnumvaultCipherStreamProviderSchemaUrn {
	return &NullableEnumvaultCipherStreamProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvaultCipherStreamProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvaultCipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

