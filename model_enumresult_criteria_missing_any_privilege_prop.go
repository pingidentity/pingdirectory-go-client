/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaMissingAnyPrivilegeProp Indicates whether operations in which one or more privileges were missing should be included in this Simple Result Criteria. If no value is provided, then whether there were any missing privileges will not be considered when determining whether an operation matches this Simple Result Criteria.
type EnumresultCriteriaMissingAnyPrivilegeProp string

// List of Enumresult-criteria-missingAnyPrivilegeProp
const (
	ENUMRESULTCRITERIAMISSINGANYPRIVILEGEPROP_REQUIRED EnumresultCriteriaMissingAnyPrivilegeProp = "required"
	ENUMRESULTCRITERIAMISSINGANYPRIVILEGEPROP_PROHIBITED EnumresultCriteriaMissingAnyPrivilegeProp = "prohibited"
	ENUMRESULTCRITERIAMISSINGANYPRIVILEGEPROP_OPTIONAL EnumresultCriteriaMissingAnyPrivilegeProp = "optional"
)

// All allowed values of EnumresultCriteriaMissingAnyPrivilegeProp enum
var AllowedEnumresultCriteriaMissingAnyPrivilegePropEnumValues = []EnumresultCriteriaMissingAnyPrivilegeProp{
	"required",
	"prohibited",
	"optional",
}

func (v *EnumresultCriteriaMissingAnyPrivilegeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaMissingAnyPrivilegeProp(value)
	for _, existing := range AllowedEnumresultCriteriaMissingAnyPrivilegePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaMissingAnyPrivilegeProp", value)
}

// NewEnumresultCriteriaMissingAnyPrivilegePropFromValue returns a pointer to a valid EnumresultCriteriaMissingAnyPrivilegeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaMissingAnyPrivilegePropFromValue(v string) (*EnumresultCriteriaMissingAnyPrivilegeProp, error) {
	ev := EnumresultCriteriaMissingAnyPrivilegeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaMissingAnyPrivilegeProp: valid values are %v", v, AllowedEnumresultCriteriaMissingAnyPrivilegePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaMissingAnyPrivilegeProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaMissingAnyPrivilegePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-missingAnyPrivilegeProp value
func (v EnumresultCriteriaMissingAnyPrivilegeProp) Ptr() *EnumresultCriteriaMissingAnyPrivilegeProp {
	return &v
}

type NullableEnumresultCriteriaMissingAnyPrivilegeProp struct {
	value *EnumresultCriteriaMissingAnyPrivilegeProp
	isSet bool
}

func (v NullableEnumresultCriteriaMissingAnyPrivilegeProp) Get() *EnumresultCriteriaMissingAnyPrivilegeProp {
	return v.value
}

func (v *NullableEnumresultCriteriaMissingAnyPrivilegeProp) Set(val *EnumresultCriteriaMissingAnyPrivilegeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaMissingAnyPrivilegeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaMissingAnyPrivilegeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaMissingAnyPrivilegeProp(val *EnumresultCriteriaMissingAnyPrivilegeProp) *NullableEnumresultCriteriaMissingAnyPrivilegeProp {
	return &NullableEnumresultCriteriaMissingAnyPrivilegeProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaMissingAnyPrivilegeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaMissingAnyPrivilegeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

