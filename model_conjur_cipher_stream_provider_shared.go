/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConjurCipherStreamProviderShared struct for ConjurCipherStreamProviderShared
type ConjurCipherStreamProviderShared struct {
	Schemas []EnumconjurCipherStreamProviderSchemaUrn `json:"schemas"`
	// An external server definition with information needed to connect and authenticate to the Conjur server.
	ConjurExternalServer string `json:"conjurExternalServer"`
	// The portion of the path that follows the account name in the URI needed to obtain the secret passphrase to use to generate the encryption key. Any special characters in the path must be URL-encoded.
	ConjurSecretRelativePath string `json:"conjurSecretRelativePath"`
	// The path to a file that will hold metadata about the encryption performed by this Conjur Cipher Stream Provider.
	EncryptionMetadataFile string `json:"encryptionMetadataFile"`
	// A description for this Cipher Stream Provider
	Description *string `json:"description,omitempty"`
	// Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.
	Enabled bool `json:"enabled"`
}

// NewConjurCipherStreamProviderShared instantiates a new ConjurCipherStreamProviderShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConjurCipherStreamProviderShared(schemas []EnumconjurCipherStreamProviderSchemaUrn, conjurExternalServer string, conjurSecretRelativePath string, encryptionMetadataFile string, enabled bool) *ConjurCipherStreamProviderShared {
	this := ConjurCipherStreamProviderShared{}
	this.Schemas = schemas
	this.ConjurExternalServer = conjurExternalServer
	this.ConjurSecretRelativePath = conjurSecretRelativePath
	this.EncryptionMetadataFile = encryptionMetadataFile
	this.Enabled = enabled
	return &this
}

// NewConjurCipherStreamProviderSharedWithDefaults instantiates a new ConjurCipherStreamProviderShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConjurCipherStreamProviderSharedWithDefaults() *ConjurCipherStreamProviderShared {
	this := ConjurCipherStreamProviderShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *ConjurCipherStreamProviderShared) GetSchemas() []EnumconjurCipherStreamProviderSchemaUrn {
	if o == nil {
		var ret []EnumconjurCipherStreamProviderSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ConjurCipherStreamProviderShared) GetSchemasOk() ([]EnumconjurCipherStreamProviderSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ConjurCipherStreamProviderShared) SetSchemas(v []EnumconjurCipherStreamProviderSchemaUrn) {
	o.Schemas = v
}

// GetConjurExternalServer returns the ConjurExternalServer field value
func (o *ConjurCipherStreamProviderShared) GetConjurExternalServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConjurExternalServer
}

// GetConjurExternalServerOk returns a tuple with the ConjurExternalServer field value
// and a boolean to check if the value has been set.
func (o *ConjurCipherStreamProviderShared) GetConjurExternalServerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConjurExternalServer, true
}

// SetConjurExternalServer sets field value
func (o *ConjurCipherStreamProviderShared) SetConjurExternalServer(v string) {
	o.ConjurExternalServer = v
}

// GetConjurSecretRelativePath returns the ConjurSecretRelativePath field value
func (o *ConjurCipherStreamProviderShared) GetConjurSecretRelativePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConjurSecretRelativePath
}

// GetConjurSecretRelativePathOk returns a tuple with the ConjurSecretRelativePath field value
// and a boolean to check if the value has been set.
func (o *ConjurCipherStreamProviderShared) GetConjurSecretRelativePathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConjurSecretRelativePath, true
}

// SetConjurSecretRelativePath sets field value
func (o *ConjurCipherStreamProviderShared) SetConjurSecretRelativePath(v string) {
	o.ConjurSecretRelativePath = v
}

// GetEncryptionMetadataFile returns the EncryptionMetadataFile field value
func (o *ConjurCipherStreamProviderShared) GetEncryptionMetadataFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionMetadataFile
}

// GetEncryptionMetadataFileOk returns a tuple with the EncryptionMetadataFile field value
// and a boolean to check if the value has been set.
func (o *ConjurCipherStreamProviderShared) GetEncryptionMetadataFileOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EncryptionMetadataFile, true
}

// SetEncryptionMetadataFile sets field value
func (o *ConjurCipherStreamProviderShared) SetEncryptionMetadataFile(v string) {
	o.EncryptionMetadataFile = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConjurCipherStreamProviderShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConjurCipherStreamProviderShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConjurCipherStreamProviderShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConjurCipherStreamProviderShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *ConjurCipherStreamProviderShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ConjurCipherStreamProviderShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ConjurCipherStreamProviderShared) SetEnabled(v bool) {
	o.Enabled = v
}

func (o ConjurCipherStreamProviderShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["conjurExternalServer"] = o.ConjurExternalServer
	}
	if true {
		toSerialize["conjurSecretRelativePath"] = o.ConjurSecretRelativePath
	}
	if true {
		toSerialize["encryptionMetadataFile"] = o.EncryptionMetadataFile
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableConjurCipherStreamProviderShared struct {
	value *ConjurCipherStreamProviderShared
	isSet bool
}

func (v NullableConjurCipherStreamProviderShared) Get() *ConjurCipherStreamProviderShared {
	return v.value
}

func (v *NullableConjurCipherStreamProviderShared) Set(val *ConjurCipherStreamProviderShared) {
	v.value = val
	v.isSet = true
}

func (v NullableConjurCipherStreamProviderShared) IsSet() bool {
	return v.isSet
}

func (v *NullableConjurCipherStreamProviderShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConjurCipherStreamProviderShared(val *ConjurCipherStreamProviderShared) *NullableConjurCipherStreamProviderShared {
	return &NullableConjurCipherStreamProviderShared{value: val, isSet: true}
}

func (v NullableConjurCipherStreamProviderShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConjurCipherStreamProviderShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


