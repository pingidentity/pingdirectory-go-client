/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumfileBasedAccessLogPublisherSchemaUrn the model 'EnumfileBasedAccessLogPublisherSchemaUrn'
type EnumfileBasedAccessLogPublisherSchemaUrn string

// List of Enumfile-based-access-log-publisherSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERFILE_BASED_ACCESS EnumfileBasedAccessLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:file-based-access"
)

// All allowed values of EnumfileBasedAccessLogPublisherSchemaUrn enum
var AllowedEnumfileBasedAccessLogPublisherSchemaUrnEnumValues = []EnumfileBasedAccessLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:file-based-access",
}

func (v *EnumfileBasedAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumfileBasedAccessLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumfileBasedAccessLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumfileBasedAccessLogPublisherSchemaUrn", value)
}

// NewEnumfileBasedAccessLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumfileBasedAccessLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumfileBasedAccessLogPublisherSchemaUrnFromValue(v string) (*EnumfileBasedAccessLogPublisherSchemaUrn, error) {
	ev := EnumfileBasedAccessLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumfileBasedAccessLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumfileBasedAccessLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumfileBasedAccessLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumfileBasedAccessLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumfile-based-access-log-publisherSchemaUrn value
func (v EnumfileBasedAccessLogPublisherSchemaUrn) Ptr() *EnumfileBasedAccessLogPublisherSchemaUrn {
	return &v
}

type NullableEnumfileBasedAccessLogPublisherSchemaUrn struct {
	value *EnumfileBasedAccessLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumfileBasedAccessLogPublisherSchemaUrn) Get() *EnumfileBasedAccessLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumfileBasedAccessLogPublisherSchemaUrn) Set(val *EnumfileBasedAccessLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumfileBasedAccessLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumfileBasedAccessLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumfileBasedAccessLogPublisherSchemaUrn(val *EnumfileBasedAccessLogPublisherSchemaUrn) *NullableEnumfileBasedAccessLogPublisherSchemaUrn {
	return &NullableEnumfileBasedAccessLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumfileBasedAccessLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumfileBasedAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

