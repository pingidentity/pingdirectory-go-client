/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdebugTargetDebugLevelProp Specifies the lowest severity level of debug messages to log.
type EnumdebugTargetDebugLevelProp string

// List of Enumdebug-target-debugLevelProp
const (
	ENUMDEBUGTARGETDEBUGLEVELPROP_DISABLED EnumdebugTargetDebugLevelProp = "disabled"
	ENUMDEBUGTARGETDEBUGLEVELPROP_ERROR    EnumdebugTargetDebugLevelProp = "error"
	ENUMDEBUGTARGETDEBUGLEVELPROP_WARNING  EnumdebugTargetDebugLevelProp = "warning"
	ENUMDEBUGTARGETDEBUGLEVELPROP_INFO     EnumdebugTargetDebugLevelProp = "info"
	ENUMDEBUGTARGETDEBUGLEVELPROP_VERBOSE  EnumdebugTargetDebugLevelProp = "verbose"
	ENUMDEBUGTARGETDEBUGLEVELPROP_ALL      EnumdebugTargetDebugLevelProp = "all"
)

// All allowed values of EnumdebugTargetDebugLevelProp enum
var AllowedEnumdebugTargetDebugLevelPropEnumValues = []EnumdebugTargetDebugLevelProp{
	"disabled",
	"error",
	"warning",
	"info",
	"verbose",
	"all",
}

func (v *EnumdebugTargetDebugLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdebugTargetDebugLevelProp(value)
	for _, existing := range AllowedEnumdebugTargetDebugLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdebugTargetDebugLevelProp", value)
}

// NewEnumdebugTargetDebugLevelPropFromValue returns a pointer to a valid EnumdebugTargetDebugLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdebugTargetDebugLevelPropFromValue(v string) (*EnumdebugTargetDebugLevelProp, error) {
	ev := EnumdebugTargetDebugLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdebugTargetDebugLevelProp: valid values are %v", v, AllowedEnumdebugTargetDebugLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdebugTargetDebugLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumdebugTargetDebugLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdebug-target-debugLevelProp value
func (v EnumdebugTargetDebugLevelProp) Ptr() *EnumdebugTargetDebugLevelProp {
	return &v
}

type NullableEnumdebugTargetDebugLevelProp struct {
	value *EnumdebugTargetDebugLevelProp
	isSet bool
}

func (v NullableEnumdebugTargetDebugLevelProp) Get() *EnumdebugTargetDebugLevelProp {
	return v.value
}

func (v *NullableEnumdebugTargetDebugLevelProp) Set(val *EnumdebugTargetDebugLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdebugTargetDebugLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdebugTargetDebugLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdebugTargetDebugLevelProp(val *EnumdebugTargetDebugLevelProp) *NullableEnumdebugTargetDebugLevelProp {
	return &NullableEnumdebugTargetDebugLevelProp{value: val, isSet: true}
}

func (v NullableEnumdebugTargetDebugLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdebugTargetDebugLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
