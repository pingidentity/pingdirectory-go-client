/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyNotificationManagerSchemaUrn the model 'EnumthirdPartyNotificationManagerSchemaUrn'
type EnumthirdPartyNotificationManagerSchemaUrn string

// List of Enumthird-party-notification-managerSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0NOTIFICATION_MANAGERTHIRD_PARTY EnumthirdPartyNotificationManagerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:notification-manager:third-party"
)

// All allowed values of EnumthirdPartyNotificationManagerSchemaUrn enum
var AllowedEnumthirdPartyNotificationManagerSchemaUrnEnumValues = []EnumthirdPartyNotificationManagerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:notification-manager:third-party",
}

func (v *EnumthirdPartyNotificationManagerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyNotificationManagerSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyNotificationManagerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyNotificationManagerSchemaUrn", value)
}

// NewEnumthirdPartyNotificationManagerSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyNotificationManagerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyNotificationManagerSchemaUrnFromValue(v string) (*EnumthirdPartyNotificationManagerSchemaUrn, error) {
	ev := EnumthirdPartyNotificationManagerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyNotificationManagerSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyNotificationManagerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyNotificationManagerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyNotificationManagerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-notification-managerSchemaUrn value
func (v EnumthirdPartyNotificationManagerSchemaUrn) Ptr() *EnumthirdPartyNotificationManagerSchemaUrn {
	return &v
}

type NullableEnumthirdPartyNotificationManagerSchemaUrn struct {
	value *EnumthirdPartyNotificationManagerSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyNotificationManagerSchemaUrn) Get() *EnumthirdPartyNotificationManagerSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyNotificationManagerSchemaUrn) Set(val *EnumthirdPartyNotificationManagerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyNotificationManagerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyNotificationManagerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyNotificationManagerSchemaUrn(val *EnumthirdPartyNotificationManagerSchemaUrn) *NullableEnumthirdPartyNotificationManagerSchemaUrn {
	return &NullableEnumthirdPartyNotificationManagerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyNotificationManagerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyNotificationManagerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

