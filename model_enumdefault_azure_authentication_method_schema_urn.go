/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdefaultAzureAuthenticationMethodSchemaUrn the model 'EnumdefaultAzureAuthenticationMethodSchemaUrn'
type EnumdefaultAzureAuthenticationMethodSchemaUrn string

// List of Enumdefault-azure-authentication-methodSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0AZURE_AUTHENTICATION_METHODDEFAULT EnumdefaultAzureAuthenticationMethodSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:azure-authentication-method:default"
)

// All allowed values of EnumdefaultAzureAuthenticationMethodSchemaUrn enum
var AllowedEnumdefaultAzureAuthenticationMethodSchemaUrnEnumValues = []EnumdefaultAzureAuthenticationMethodSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:azure-authentication-method:default",
}

func (v *EnumdefaultAzureAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdefaultAzureAuthenticationMethodSchemaUrn(value)
	for _, existing := range AllowedEnumdefaultAzureAuthenticationMethodSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdefaultAzureAuthenticationMethodSchemaUrn", value)
}

// NewEnumdefaultAzureAuthenticationMethodSchemaUrnFromValue returns a pointer to a valid EnumdefaultAzureAuthenticationMethodSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdefaultAzureAuthenticationMethodSchemaUrnFromValue(v string) (*EnumdefaultAzureAuthenticationMethodSchemaUrn, error) {
	ev := EnumdefaultAzureAuthenticationMethodSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdefaultAzureAuthenticationMethodSchemaUrn: valid values are %v", v, AllowedEnumdefaultAzureAuthenticationMethodSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdefaultAzureAuthenticationMethodSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdefaultAzureAuthenticationMethodSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdefault-azure-authentication-methodSchemaUrn value
func (v EnumdefaultAzureAuthenticationMethodSchemaUrn) Ptr() *EnumdefaultAzureAuthenticationMethodSchemaUrn {
	return &v
}

type NullableEnumdefaultAzureAuthenticationMethodSchemaUrn struct {
	value *EnumdefaultAzureAuthenticationMethodSchemaUrn
	isSet bool
}

func (v NullableEnumdefaultAzureAuthenticationMethodSchemaUrn) Get() *EnumdefaultAzureAuthenticationMethodSchemaUrn {
	return v.value
}

func (v *NullableEnumdefaultAzureAuthenticationMethodSchemaUrn) Set(val *EnumdefaultAzureAuthenticationMethodSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdefaultAzureAuthenticationMethodSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdefaultAzureAuthenticationMethodSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdefaultAzureAuthenticationMethodSchemaUrn(val *EnumdefaultAzureAuthenticationMethodSchemaUrn) *NullableEnumdefaultAzureAuthenticationMethodSchemaUrn {
	return &NullableEnumdefaultAzureAuthenticationMethodSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdefaultAzureAuthenticationMethodSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdefaultAzureAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

