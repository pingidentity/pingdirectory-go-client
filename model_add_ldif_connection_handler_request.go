/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddLdifConnectionHandlerRequest struct for AddLdifConnectionHandlerRequest
type AddLdifConnectionHandlerRequest struct {
	// Name of the new Connection Handler
	HandlerName string                               `json:"handlerName"`
	Schemas     []EnumldifConnectionHandlerSchemaUrn `json:"schemas"`
	// Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections to this connection handler.
	AllowedClient []string `json:"allowedClient,omitempty"`
	// Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish connections to this connection handler.
	DeniedClient []string `json:"deniedClient,omitempty"`
	// Specifies the path to the directory in which the LDIF files should be placed.
	LdifDirectory string `json:"ldifDirectory"`
	// Specifies how frequently the LDIF connection handler should check the LDIF directory to determine whether a new LDIF file has been added.
	PollInterval string `json:"pollInterval"`
	// A description for this Connection Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether the Connection Handler is enabled.
	Enabled bool `json:"enabled"`
}

// NewAddLdifConnectionHandlerRequest instantiates a new AddLdifConnectionHandlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLdifConnectionHandlerRequest(handlerName string, schemas []EnumldifConnectionHandlerSchemaUrn, ldifDirectory string, pollInterval string, enabled bool) *AddLdifConnectionHandlerRequest {
	this := AddLdifConnectionHandlerRequest{}
	this.HandlerName = handlerName
	this.Schemas = schemas
	this.LdifDirectory = ldifDirectory
	this.PollInterval = pollInterval
	this.Enabled = enabled
	return &this
}

// NewAddLdifConnectionHandlerRequestWithDefaults instantiates a new AddLdifConnectionHandlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLdifConnectionHandlerRequestWithDefaults() *AddLdifConnectionHandlerRequest {
	this := AddLdifConnectionHandlerRequest{}
	return &this
}

// GetHandlerName returns the HandlerName field value
func (o *AddLdifConnectionHandlerRequest) GetHandlerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HandlerName
}

// GetHandlerNameOk returns a tuple with the HandlerName field value
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetHandlerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HandlerName, true
}

// SetHandlerName sets field value
func (o *AddLdifConnectionHandlerRequest) SetHandlerName(v string) {
	o.HandlerName = v
}

// GetSchemas returns the Schemas field value
func (o *AddLdifConnectionHandlerRequest) GetSchemas() []EnumldifConnectionHandlerSchemaUrn {
	if o == nil {
		var ret []EnumldifConnectionHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetSchemasOk() ([]EnumldifConnectionHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddLdifConnectionHandlerRequest) SetSchemas(v []EnumldifConnectionHandlerSchemaUrn) {
	o.Schemas = v
}

// GetAllowedClient returns the AllowedClient field value if set, zero value otherwise.
func (o *AddLdifConnectionHandlerRequest) GetAllowedClient() []string {
	if o == nil || isNil(o.AllowedClient) {
		var ret []string
		return ret
	}
	return o.AllowedClient
}

// GetAllowedClientOk returns a tuple with the AllowedClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetAllowedClientOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedClient) {
		return nil, false
	}
	return o.AllowedClient, true
}

// HasAllowedClient returns a boolean if a field has been set.
func (o *AddLdifConnectionHandlerRequest) HasAllowedClient() bool {
	if o != nil && !isNil(o.AllowedClient) {
		return true
	}

	return false
}

// SetAllowedClient gets a reference to the given []string and assigns it to the AllowedClient field.
func (o *AddLdifConnectionHandlerRequest) SetAllowedClient(v []string) {
	o.AllowedClient = v
}

// GetDeniedClient returns the DeniedClient field value if set, zero value otherwise.
func (o *AddLdifConnectionHandlerRequest) GetDeniedClient() []string {
	if o == nil || isNil(o.DeniedClient) {
		var ret []string
		return ret
	}
	return o.DeniedClient
}

// GetDeniedClientOk returns a tuple with the DeniedClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetDeniedClientOk() ([]string, bool) {
	if o == nil || isNil(o.DeniedClient) {
		return nil, false
	}
	return o.DeniedClient, true
}

// HasDeniedClient returns a boolean if a field has been set.
func (o *AddLdifConnectionHandlerRequest) HasDeniedClient() bool {
	if o != nil && !isNil(o.DeniedClient) {
		return true
	}

	return false
}

// SetDeniedClient gets a reference to the given []string and assigns it to the DeniedClient field.
func (o *AddLdifConnectionHandlerRequest) SetDeniedClient(v []string) {
	o.DeniedClient = v
}

// GetLdifDirectory returns the LdifDirectory field value
func (o *AddLdifConnectionHandlerRequest) GetLdifDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdifDirectory
}

// GetLdifDirectoryOk returns a tuple with the LdifDirectory field value
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetLdifDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LdifDirectory, true
}

// SetLdifDirectory sets field value
func (o *AddLdifConnectionHandlerRequest) SetLdifDirectory(v string) {
	o.LdifDirectory = v
}

// GetPollInterval returns the PollInterval field value
func (o *AddLdifConnectionHandlerRequest) GetPollInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PollInterval
}

// GetPollIntervalOk returns a tuple with the PollInterval field value
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetPollIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PollInterval, true
}

// SetPollInterval sets field value
func (o *AddLdifConnectionHandlerRequest) SetPollInterval(v string) {
	o.PollInterval = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddLdifConnectionHandlerRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddLdifConnectionHandlerRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddLdifConnectionHandlerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddLdifConnectionHandlerRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddLdifConnectionHandlerRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddLdifConnectionHandlerRequest) SetEnabled(v bool) {
	o.Enabled = v
}

func (o AddLdifConnectionHandlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["handlerName"] = o.HandlerName
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.AllowedClient) {
		toSerialize["allowedClient"] = o.AllowedClient
	}
	if !isNil(o.DeniedClient) {
		toSerialize["deniedClient"] = o.DeniedClient
	}
	if true {
		toSerialize["ldifDirectory"] = o.LdifDirectory
	}
	if true {
		toSerialize["pollInterval"] = o.PollInterval
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableAddLdifConnectionHandlerRequest struct {
	value *AddLdifConnectionHandlerRequest
	isSet bool
}

func (v NullableAddLdifConnectionHandlerRequest) Get() *AddLdifConnectionHandlerRequest {
	return v.value
}

func (v *NullableAddLdifConnectionHandlerRequest) Set(val *AddLdifConnectionHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLdifConnectionHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLdifConnectionHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLdifConnectionHandlerRequest(val *AddLdifConnectionHandlerRequest) *NullableAddLdifConnectionHandlerRequest {
	return &NullableAddLdifConnectionHandlerRequest{value: val, isSet: true}
}

func (v NullableAddLdifConnectionHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLdifConnectionHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
