/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherLogResponseHeadersProp Indicates whether response log messages should include information about HTTP headers included in the response.
type EnumlogPublisherLogResponseHeadersProp string

// List of Enumlog-publisher-logResponseHeadersProp
const (
	NONE EnumlogPublisherLogResponseHeadersProp = "none"
	HEADER_NAMES EnumlogPublisherLogResponseHeadersProp = "header-names"
	HEADER_NAMES_AND_VALUES EnumlogPublisherLogResponseHeadersProp = "header-names-and-values"
)

// All allowed values of EnumlogPublisherLogResponseHeadersProp enum
var AllowedEnumlogPublisherLogResponseHeadersPropEnumValues = []EnumlogPublisherLogResponseHeadersProp{
	"none",
	"header-names",
	"header-names-and-values",
}

func (v *EnumlogPublisherLogResponseHeadersProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherLogResponseHeadersProp(value)
	for _, existing := range AllowedEnumlogPublisherLogResponseHeadersPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherLogResponseHeadersProp", value)
}

// NewEnumlogPublisherLogResponseHeadersPropFromValue returns a pointer to a valid EnumlogPublisherLogResponseHeadersProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherLogResponseHeadersPropFromValue(v string) (*EnumlogPublisherLogResponseHeadersProp, error) {
	ev := EnumlogPublisherLogResponseHeadersProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherLogResponseHeadersProp: valid values are %v", v, AllowedEnumlogPublisherLogResponseHeadersPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherLogResponseHeadersProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherLogResponseHeadersPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-logResponseHeadersProp value
func (v EnumlogPublisherLogResponseHeadersProp) Ptr() *EnumlogPublisherLogResponseHeadersProp {
	return &v
}

type NullableEnumlogPublisherLogResponseHeadersProp struct {
	value *EnumlogPublisherLogResponseHeadersProp
	isSet bool
}

func (v NullableEnumlogPublisherLogResponseHeadersProp) Get() *EnumlogPublisherLogResponseHeadersProp {
	return v.value
}

func (v *NullableEnumlogPublisherLogResponseHeadersProp) Set(val *EnumlogPublisherLogResponseHeadersProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherLogResponseHeadersProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherLogResponseHeadersProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherLogResponseHeadersProp(val *EnumlogPublisherLogResponseHeadersProp) *NullableEnumlogPublisherLogResponseHeadersProp {
	return &NullableEnumlogPublisherLogResponseHeadersProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherLogResponseHeadersProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherLogResponseHeadersProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

