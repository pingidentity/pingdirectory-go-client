/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherLogRequestParametersProp Indicates what (if any) information about request parameters should be included in request log messages. Note that this will only be used for requests with a method other than GET, since GET request parameters will be included in the request URL.
type EnumlogPublisherLogRequestParametersProp string

// List of Enumlog-publisher-logRequestParametersProp
const (
	ENUMLOGPUBLISHERLOGREQUESTPARAMETERSPROP_NONE                       EnumlogPublisherLogRequestParametersProp = "none"
	ENUMLOGPUBLISHERLOGREQUESTPARAMETERSPROP_PARAMETER_NAMES            EnumlogPublisherLogRequestParametersProp = "parameter-names"
	ENUMLOGPUBLISHERLOGREQUESTPARAMETERSPROP_PARAMETER_NAMES_AND_VALUES EnumlogPublisherLogRequestParametersProp = "parameter-names-and-values"
)

// All allowed values of EnumlogPublisherLogRequestParametersProp enum
var AllowedEnumlogPublisherLogRequestParametersPropEnumValues = []EnumlogPublisherLogRequestParametersProp{
	"none",
	"parameter-names",
	"parameter-names-and-values",
}

func (v *EnumlogPublisherLogRequestParametersProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherLogRequestParametersProp(value)
	for _, existing := range AllowedEnumlogPublisherLogRequestParametersPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherLogRequestParametersProp", value)
}

// NewEnumlogPublisherLogRequestParametersPropFromValue returns a pointer to a valid EnumlogPublisherLogRequestParametersProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherLogRequestParametersPropFromValue(v string) (*EnumlogPublisherLogRequestParametersProp, error) {
	ev := EnumlogPublisherLogRequestParametersProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherLogRequestParametersProp: valid values are %v", v, AllowedEnumlogPublisherLogRequestParametersPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherLogRequestParametersProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherLogRequestParametersPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-logRequestParametersProp value
func (v EnumlogPublisherLogRequestParametersProp) Ptr() *EnumlogPublisherLogRequestParametersProp {
	return &v
}

type NullableEnumlogPublisherLogRequestParametersProp struct {
	value *EnumlogPublisherLogRequestParametersProp
	isSet bool
}

func (v NullableEnumlogPublisherLogRequestParametersProp) Get() *EnumlogPublisherLogRequestParametersProp {
	return v.value
}

func (v *NullableEnumlogPublisherLogRequestParametersProp) Set(val *EnumlogPublisherLogRequestParametersProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherLogRequestParametersProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherLogRequestParametersProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherLogRequestParametersProp(val *EnumlogPublisherLogRequestParametersProp) *NullableEnumlogPublisherLogRequestParametersProp {
	return &NullableEnumlogPublisherLogRequestParametersProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherLogRequestParametersProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherLogRequestParametersProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
