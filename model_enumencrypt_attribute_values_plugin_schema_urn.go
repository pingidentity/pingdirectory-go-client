/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumencryptAttributeValuesPluginSchemaUrn the model 'EnumencryptAttributeValuesPluginSchemaUrn'
type EnumencryptAttributeValuesPluginSchemaUrn string

// List of Enumencrypt-attribute-values-pluginSchemaUrn
const (
	ENUMENCRYPTATTRIBUTEVALUESPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINENCRYPT_ATTRIBUTE_VALUES EnumencryptAttributeValuesPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:encrypt-attribute-values"
)

// All allowed values of EnumencryptAttributeValuesPluginSchemaUrn enum
var AllowedEnumencryptAttributeValuesPluginSchemaUrnEnumValues = []EnumencryptAttributeValuesPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:encrypt-attribute-values",
}

func (v *EnumencryptAttributeValuesPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumencryptAttributeValuesPluginSchemaUrn(value)
	for _, existing := range AllowedEnumencryptAttributeValuesPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumencryptAttributeValuesPluginSchemaUrn", value)
}

// NewEnumencryptAttributeValuesPluginSchemaUrnFromValue returns a pointer to a valid EnumencryptAttributeValuesPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumencryptAttributeValuesPluginSchemaUrnFromValue(v string) (*EnumencryptAttributeValuesPluginSchemaUrn, error) {
	ev := EnumencryptAttributeValuesPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumencryptAttributeValuesPluginSchemaUrn: valid values are %v", v, AllowedEnumencryptAttributeValuesPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumencryptAttributeValuesPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumencryptAttributeValuesPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumencrypt-attribute-values-pluginSchemaUrn value
func (v EnumencryptAttributeValuesPluginSchemaUrn) Ptr() *EnumencryptAttributeValuesPluginSchemaUrn {
	return &v
}

type NullableEnumencryptAttributeValuesPluginSchemaUrn struct {
	value *EnumencryptAttributeValuesPluginSchemaUrn
	isSet bool
}

func (v NullableEnumencryptAttributeValuesPluginSchemaUrn) Get() *EnumencryptAttributeValuesPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumencryptAttributeValuesPluginSchemaUrn) Set(val *EnumencryptAttributeValuesPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumencryptAttributeValuesPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumencryptAttributeValuesPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumencryptAttributeValuesPluginSchemaUrn(val *EnumencryptAttributeValuesPluginSchemaUrn) *NullableEnumencryptAttributeValuesPluginSchemaUrn {
	return &NullableEnumencryptAttributeValuesPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumencryptAttributeValuesPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumencryptAttributeValuesPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
