/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PwnedPasswordsPasswordValidatorShared struct for PwnedPasswordsPasswordValidatorShared
type PwnedPasswordsPasswordValidatorShared struct {
	Schemas []EnumpwnedPasswordsPasswordValidatorSchemaUrn `json:"schemas"`
	// The base URL for requests used to interact with the Pwned Passwords service. The first five characters of the hexadecimal representation of the unsalted SHA-1 digest of a proposed password will be appended to this base URL to construct the HTTP GET request used to obtain information about potential matches.
	PwnedPasswordsBaseURL string `json:"pwnedPasswordsBaseURL"`
	// Indicates whether this password validator should be used to validate clear-text passwords provided in LDAP add requests.
	InvokeForAdd bool `json:"invokeForAdd"`
	// Indicates whether this password validator should be used to validate clear-text passwords provided by an end user in the course of changing their own password.
	InvokeForSelfChange bool `json:"invokeForSelfChange"`
	// Indicates whether this password validator should be used to validate clear-text passwords provided by administrators when changing the password for another user.
	InvokeForAdminReset bool `json:"invokeForAdminReset"`
	// Indicates whether to accept the proposed password if an error occurs while attempting to interact with the Pwned Passwords service.
	AcceptPasswordOnServiceError bool `json:"acceptPasswordOnServiceError"`
	// Specifies which key manager provider should be used to obtain a client certificate to present to the validation server when performing HTTPS communication. This may be left undefined if communication will not be secured with HTTPS, or if there is no need to present a client certificate to the validation service.
	KeyManagerProvider *string `json:"keyManagerProvider,omitempty"`
	// Specifies which trust manager provider should be used to determine whether to trust the certificate presented by the server when performing HTTPS communication. This may be left undefined if HTTPS communication is not needed, or if the validation service presents a certificate that is trusted by the default JVM configuration (which should be the case for the Pwned Password servers).
	TrustManagerProvider *string `json:"trustManagerProvider,omitempty"`
	// A description for this Password Validator
	Description *string `json:"description,omitempty"`
	// Indicates whether the password validator is enabled for use.
	Enabled bool `json:"enabled"`
	// Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
	ValidatorRequirementDescription *string `json:"validatorRequirementDescription,omitempty"`
	// Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
	ValidatorFailureMessage *string `json:"validatorFailureMessage,omitempty"`
}

// NewPwnedPasswordsPasswordValidatorShared instantiates a new PwnedPasswordsPasswordValidatorShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPwnedPasswordsPasswordValidatorShared(schemas []EnumpwnedPasswordsPasswordValidatorSchemaUrn, pwnedPasswordsBaseURL string, invokeForAdd bool, invokeForSelfChange bool, invokeForAdminReset bool, acceptPasswordOnServiceError bool, enabled bool) *PwnedPasswordsPasswordValidatorShared {
	this := PwnedPasswordsPasswordValidatorShared{}
	this.Schemas = schemas
	this.PwnedPasswordsBaseURL = pwnedPasswordsBaseURL
	this.InvokeForAdd = invokeForAdd
	this.InvokeForSelfChange = invokeForSelfChange
	this.InvokeForAdminReset = invokeForAdminReset
	this.AcceptPasswordOnServiceError = acceptPasswordOnServiceError
	this.Enabled = enabled
	return &this
}

// NewPwnedPasswordsPasswordValidatorSharedWithDefaults instantiates a new PwnedPasswordsPasswordValidatorShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPwnedPasswordsPasswordValidatorSharedWithDefaults() *PwnedPasswordsPasswordValidatorShared {
	this := PwnedPasswordsPasswordValidatorShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *PwnedPasswordsPasswordValidatorShared) GetSchemas() []EnumpwnedPasswordsPasswordValidatorSchemaUrn {
	if o == nil {
		var ret []EnumpwnedPasswordsPasswordValidatorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetSchemasOk() ([]EnumpwnedPasswordsPasswordValidatorSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetSchemas(v []EnumpwnedPasswordsPasswordValidatorSchemaUrn) {
	o.Schemas = v
}

// GetPwnedPasswordsBaseURL returns the PwnedPasswordsBaseURL field value
func (o *PwnedPasswordsPasswordValidatorShared) GetPwnedPasswordsBaseURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PwnedPasswordsBaseURL
}

// GetPwnedPasswordsBaseURLOk returns a tuple with the PwnedPasswordsBaseURL field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetPwnedPasswordsBaseURLOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PwnedPasswordsBaseURL, true
}

// SetPwnedPasswordsBaseURL sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetPwnedPasswordsBaseURL(v string) {
	o.PwnedPasswordsBaseURL = v
}

// GetInvokeForAdd returns the InvokeForAdd field value
func (o *PwnedPasswordsPasswordValidatorShared) GetInvokeForAdd() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InvokeForAdd
}

// GetInvokeForAddOk returns a tuple with the InvokeForAdd field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetInvokeForAddOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.InvokeForAdd, true
}

// SetInvokeForAdd sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetInvokeForAdd(v bool) {
	o.InvokeForAdd = v
}

// GetInvokeForSelfChange returns the InvokeForSelfChange field value
func (o *PwnedPasswordsPasswordValidatorShared) GetInvokeForSelfChange() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InvokeForSelfChange
}

// GetInvokeForSelfChangeOk returns a tuple with the InvokeForSelfChange field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetInvokeForSelfChangeOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.InvokeForSelfChange, true
}

// SetInvokeForSelfChange sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetInvokeForSelfChange(v bool) {
	o.InvokeForSelfChange = v
}

// GetInvokeForAdminReset returns the InvokeForAdminReset field value
func (o *PwnedPasswordsPasswordValidatorShared) GetInvokeForAdminReset() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InvokeForAdminReset
}

// GetInvokeForAdminResetOk returns a tuple with the InvokeForAdminReset field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetInvokeForAdminResetOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.InvokeForAdminReset, true
}

// SetInvokeForAdminReset sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetInvokeForAdminReset(v bool) {
	o.InvokeForAdminReset = v
}

// GetAcceptPasswordOnServiceError returns the AcceptPasswordOnServiceError field value
func (o *PwnedPasswordsPasswordValidatorShared) GetAcceptPasswordOnServiceError() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AcceptPasswordOnServiceError
}

// GetAcceptPasswordOnServiceErrorOk returns a tuple with the AcceptPasswordOnServiceError field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetAcceptPasswordOnServiceErrorOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AcceptPasswordOnServiceError, true
}

// SetAcceptPasswordOnServiceError sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetAcceptPasswordOnServiceError(v bool) {
	o.AcceptPasswordOnServiceError = v
}

// GetKeyManagerProvider returns the KeyManagerProvider field value if set, zero value otherwise.
func (o *PwnedPasswordsPasswordValidatorShared) GetKeyManagerProvider() string {
	if o == nil || isNil(o.KeyManagerProvider) {
		var ret string
		return ret
	}
	return *o.KeyManagerProvider
}

// GetKeyManagerProviderOk returns a tuple with the KeyManagerProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetKeyManagerProviderOk() (*string, bool) {
	if o == nil || isNil(o.KeyManagerProvider) {
    return nil, false
	}
	return o.KeyManagerProvider, true
}

// HasKeyManagerProvider returns a boolean if a field has been set.
func (o *PwnedPasswordsPasswordValidatorShared) HasKeyManagerProvider() bool {
	if o != nil && !isNil(o.KeyManagerProvider) {
		return true
	}

	return false
}

// SetKeyManagerProvider gets a reference to the given string and assigns it to the KeyManagerProvider field.
func (o *PwnedPasswordsPasswordValidatorShared) SetKeyManagerProvider(v string) {
	o.KeyManagerProvider = &v
}

// GetTrustManagerProvider returns the TrustManagerProvider field value if set, zero value otherwise.
func (o *PwnedPasswordsPasswordValidatorShared) GetTrustManagerProvider() string {
	if o == nil || isNil(o.TrustManagerProvider) {
		var ret string
		return ret
	}
	return *o.TrustManagerProvider
}

// GetTrustManagerProviderOk returns a tuple with the TrustManagerProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetTrustManagerProviderOk() (*string, bool) {
	if o == nil || isNil(o.TrustManagerProvider) {
    return nil, false
	}
	return o.TrustManagerProvider, true
}

// HasTrustManagerProvider returns a boolean if a field has been set.
func (o *PwnedPasswordsPasswordValidatorShared) HasTrustManagerProvider() bool {
	if o != nil && !isNil(o.TrustManagerProvider) {
		return true
	}

	return false
}

// SetTrustManagerProvider gets a reference to the given string and assigns it to the TrustManagerProvider field.
func (o *PwnedPasswordsPasswordValidatorShared) SetTrustManagerProvider(v string) {
	o.TrustManagerProvider = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PwnedPasswordsPasswordValidatorShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PwnedPasswordsPasswordValidatorShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PwnedPasswordsPasswordValidatorShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *PwnedPasswordsPasswordValidatorShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *PwnedPasswordsPasswordValidatorShared) SetEnabled(v bool) {
	o.Enabled = v
}

// GetValidatorRequirementDescription returns the ValidatorRequirementDescription field value if set, zero value otherwise.
func (o *PwnedPasswordsPasswordValidatorShared) GetValidatorRequirementDescription() string {
	if o == nil || isNil(o.ValidatorRequirementDescription) {
		var ret string
		return ret
	}
	return *o.ValidatorRequirementDescription
}

// GetValidatorRequirementDescriptionOk returns a tuple with the ValidatorRequirementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetValidatorRequirementDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.ValidatorRequirementDescription) {
    return nil, false
	}
	return o.ValidatorRequirementDescription, true
}

// HasValidatorRequirementDescription returns a boolean if a field has been set.
func (o *PwnedPasswordsPasswordValidatorShared) HasValidatorRequirementDescription() bool {
	if o != nil && !isNil(o.ValidatorRequirementDescription) {
		return true
	}

	return false
}

// SetValidatorRequirementDescription gets a reference to the given string and assigns it to the ValidatorRequirementDescription field.
func (o *PwnedPasswordsPasswordValidatorShared) SetValidatorRequirementDescription(v string) {
	o.ValidatorRequirementDescription = &v
}

// GetValidatorFailureMessage returns the ValidatorFailureMessage field value if set, zero value otherwise.
func (o *PwnedPasswordsPasswordValidatorShared) GetValidatorFailureMessage() string {
	if o == nil || isNil(o.ValidatorFailureMessage) {
		var ret string
		return ret
	}
	return *o.ValidatorFailureMessage
}

// GetValidatorFailureMessageOk returns a tuple with the ValidatorFailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PwnedPasswordsPasswordValidatorShared) GetValidatorFailureMessageOk() (*string, bool) {
	if o == nil || isNil(o.ValidatorFailureMessage) {
    return nil, false
	}
	return o.ValidatorFailureMessage, true
}

// HasValidatorFailureMessage returns a boolean if a field has been set.
func (o *PwnedPasswordsPasswordValidatorShared) HasValidatorFailureMessage() bool {
	if o != nil && !isNil(o.ValidatorFailureMessage) {
		return true
	}

	return false
}

// SetValidatorFailureMessage gets a reference to the given string and assigns it to the ValidatorFailureMessage field.
func (o *PwnedPasswordsPasswordValidatorShared) SetValidatorFailureMessage(v string) {
	o.ValidatorFailureMessage = &v
}

func (o PwnedPasswordsPasswordValidatorShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["pwnedPasswordsBaseURL"] = o.PwnedPasswordsBaseURL
	}
	if true {
		toSerialize["invokeForAdd"] = o.InvokeForAdd
	}
	if true {
		toSerialize["invokeForSelfChange"] = o.InvokeForSelfChange
	}
	if true {
		toSerialize["invokeForAdminReset"] = o.InvokeForAdminReset
	}
	if true {
		toSerialize["acceptPasswordOnServiceError"] = o.AcceptPasswordOnServiceError
	}
	if !isNil(o.KeyManagerProvider) {
		toSerialize["keyManagerProvider"] = o.KeyManagerProvider
	}
	if !isNil(o.TrustManagerProvider) {
		toSerialize["trustManagerProvider"] = o.TrustManagerProvider
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.ValidatorRequirementDescription) {
		toSerialize["validatorRequirementDescription"] = o.ValidatorRequirementDescription
	}
	if !isNil(o.ValidatorFailureMessage) {
		toSerialize["validatorFailureMessage"] = o.ValidatorFailureMessage
	}
	return json.Marshal(toSerialize)
}

type NullablePwnedPasswordsPasswordValidatorShared struct {
	value *PwnedPasswordsPasswordValidatorShared
	isSet bool
}

func (v NullablePwnedPasswordsPasswordValidatorShared) Get() *PwnedPasswordsPasswordValidatorShared {
	return v.value
}

func (v *NullablePwnedPasswordsPasswordValidatorShared) Set(val *PwnedPasswordsPasswordValidatorShared) {
	v.value = val
	v.isSet = true
}

func (v NullablePwnedPasswordsPasswordValidatorShared) IsSet() bool {
	return v.isSet
}

func (v *NullablePwnedPasswordsPasswordValidatorShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePwnedPasswordsPasswordValidatorShared(val *PwnedPasswordsPasswordValidatorShared) *NullablePwnedPasswordsPasswordValidatorShared {
	return &NullablePwnedPasswordsPasswordValidatorShared{value: val, isSet: true}
}

func (v NullablePwnedPasswordsPasswordValidatorShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePwnedPasswordsPasswordValidatorShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


