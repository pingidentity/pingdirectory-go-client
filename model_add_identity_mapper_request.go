/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddIdentityMapperRequest - struct for AddIdentityMapperRequest
type AddIdentityMapperRequest struct {
	AddAggregateIdentityMapperRequest         *AddAggregateIdentityMapperRequest
	AddExactMatchIdentityMapperRequest        *AddExactMatchIdentityMapperRequest
	AddGroovyScriptedIdentityMapperRequest    *AddGroovyScriptedIdentityMapperRequest
	AddRegularExpressionIdentityMapperRequest *AddRegularExpressionIdentityMapperRequest
	AddThirdPartyIdentityMapperRequest        *AddThirdPartyIdentityMapperRequest
}

// AddAggregateIdentityMapperRequestAsAddIdentityMapperRequest is a convenience function that returns AddAggregateIdentityMapperRequest wrapped in AddIdentityMapperRequest
func AddAggregateIdentityMapperRequestAsAddIdentityMapperRequest(v *AddAggregateIdentityMapperRequest) AddIdentityMapperRequest {
	return AddIdentityMapperRequest{
		AddAggregateIdentityMapperRequest: v,
	}
}

// AddExactMatchIdentityMapperRequestAsAddIdentityMapperRequest is a convenience function that returns AddExactMatchIdentityMapperRequest wrapped in AddIdentityMapperRequest
func AddExactMatchIdentityMapperRequestAsAddIdentityMapperRequest(v *AddExactMatchIdentityMapperRequest) AddIdentityMapperRequest {
	return AddIdentityMapperRequest{
		AddExactMatchIdentityMapperRequest: v,
	}
}

// AddGroovyScriptedIdentityMapperRequestAsAddIdentityMapperRequest is a convenience function that returns AddGroovyScriptedIdentityMapperRequest wrapped in AddIdentityMapperRequest
func AddGroovyScriptedIdentityMapperRequestAsAddIdentityMapperRequest(v *AddGroovyScriptedIdentityMapperRequest) AddIdentityMapperRequest {
	return AddIdentityMapperRequest{
		AddGroovyScriptedIdentityMapperRequest: v,
	}
}

// AddRegularExpressionIdentityMapperRequestAsAddIdentityMapperRequest is a convenience function that returns AddRegularExpressionIdentityMapperRequest wrapped in AddIdentityMapperRequest
func AddRegularExpressionIdentityMapperRequestAsAddIdentityMapperRequest(v *AddRegularExpressionIdentityMapperRequest) AddIdentityMapperRequest {
	return AddIdentityMapperRequest{
		AddRegularExpressionIdentityMapperRequest: v,
	}
}

// AddThirdPartyIdentityMapperRequestAsAddIdentityMapperRequest is a convenience function that returns AddThirdPartyIdentityMapperRequest wrapped in AddIdentityMapperRequest
func AddThirdPartyIdentityMapperRequestAsAddIdentityMapperRequest(v *AddThirdPartyIdentityMapperRequest) AddIdentityMapperRequest {
	return AddIdentityMapperRequest{
		AddThirdPartyIdentityMapperRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddIdentityMapperRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAggregateIdentityMapperRequest
	err = newStrictDecoder(data).Decode(&dst.AddAggregateIdentityMapperRequest)
	if err == nil {
		jsonAddAggregateIdentityMapperRequest, _ := json.Marshal(dst.AddAggregateIdentityMapperRequest)
		if string(jsonAddAggregateIdentityMapperRequest) == "{}" { // empty struct
			dst.AddAggregateIdentityMapperRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAggregateIdentityMapperRequest = nil
	}

	// try to unmarshal data into AddExactMatchIdentityMapperRequest
	err = newStrictDecoder(data).Decode(&dst.AddExactMatchIdentityMapperRequest)
	if err == nil {
		jsonAddExactMatchIdentityMapperRequest, _ := json.Marshal(dst.AddExactMatchIdentityMapperRequest)
		if string(jsonAddExactMatchIdentityMapperRequest) == "{}" { // empty struct
			dst.AddExactMatchIdentityMapperRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddExactMatchIdentityMapperRequest = nil
	}

	// try to unmarshal data into AddGroovyScriptedIdentityMapperRequest
	err = newStrictDecoder(data).Decode(&dst.AddGroovyScriptedIdentityMapperRequest)
	if err == nil {
		jsonAddGroovyScriptedIdentityMapperRequest, _ := json.Marshal(dst.AddGroovyScriptedIdentityMapperRequest)
		if string(jsonAddGroovyScriptedIdentityMapperRequest) == "{}" { // empty struct
			dst.AddGroovyScriptedIdentityMapperRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddGroovyScriptedIdentityMapperRequest = nil
	}

	// try to unmarshal data into AddRegularExpressionIdentityMapperRequest
	err = newStrictDecoder(data).Decode(&dst.AddRegularExpressionIdentityMapperRequest)
	if err == nil {
		jsonAddRegularExpressionIdentityMapperRequest, _ := json.Marshal(dst.AddRegularExpressionIdentityMapperRequest)
		if string(jsonAddRegularExpressionIdentityMapperRequest) == "{}" { // empty struct
			dst.AddRegularExpressionIdentityMapperRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddRegularExpressionIdentityMapperRequest = nil
	}

	// try to unmarshal data into AddThirdPartyIdentityMapperRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyIdentityMapperRequest)
	if err == nil {
		jsonAddThirdPartyIdentityMapperRequest, _ := json.Marshal(dst.AddThirdPartyIdentityMapperRequest)
		if string(jsonAddThirdPartyIdentityMapperRequest) == "{}" { // empty struct
			dst.AddThirdPartyIdentityMapperRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyIdentityMapperRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAggregateIdentityMapperRequest = nil
		dst.AddExactMatchIdentityMapperRequest = nil
		dst.AddGroovyScriptedIdentityMapperRequest = nil
		dst.AddRegularExpressionIdentityMapperRequest = nil
		dst.AddThirdPartyIdentityMapperRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddIdentityMapperRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddIdentityMapperRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddIdentityMapperRequest) MarshalJSON() ([]byte, error) {
	if src.AddAggregateIdentityMapperRequest != nil {
		return json.Marshal(&src.AddAggregateIdentityMapperRequest)
	}

	if src.AddExactMatchIdentityMapperRequest != nil {
		return json.Marshal(&src.AddExactMatchIdentityMapperRequest)
	}

	if src.AddGroovyScriptedIdentityMapperRequest != nil {
		return json.Marshal(&src.AddGroovyScriptedIdentityMapperRequest)
	}

	if src.AddRegularExpressionIdentityMapperRequest != nil {
		return json.Marshal(&src.AddRegularExpressionIdentityMapperRequest)
	}

	if src.AddThirdPartyIdentityMapperRequest != nil {
		return json.Marshal(&src.AddThirdPartyIdentityMapperRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddIdentityMapperRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddAggregateIdentityMapperRequest != nil {
		return obj.AddAggregateIdentityMapperRequest
	}

	if obj.AddExactMatchIdentityMapperRequest != nil {
		return obj.AddExactMatchIdentityMapperRequest
	}

	if obj.AddGroovyScriptedIdentityMapperRequest != nil {
		return obj.AddGroovyScriptedIdentityMapperRequest
	}

	if obj.AddRegularExpressionIdentityMapperRequest != nil {
		return obj.AddRegularExpressionIdentityMapperRequest
	}

	if obj.AddThirdPartyIdentityMapperRequest != nil {
		return obj.AddThirdPartyIdentityMapperRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddIdentityMapperRequest struct {
	value *AddIdentityMapperRequest
	isSet bool
}

func (v NullableAddIdentityMapperRequest) Get() *AddIdentityMapperRequest {
	return v.value
}

func (v *NullableAddIdentityMapperRequest) Set(val *AddIdentityMapperRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIdentityMapperRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIdentityMapperRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIdentityMapperRequest(val *AddIdentityMapperRequest) *NullableAddIdentityMapperRequest {
	return &NullableAddIdentityMapperRequest{value: val, isSet: true}
}

func (v NullableAddIdentityMapperRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIdentityMapperRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
