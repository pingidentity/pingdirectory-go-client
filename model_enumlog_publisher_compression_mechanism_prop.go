/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherCompressionMechanismProp Specifies the type of compression (if any) to use for log files that are written.
type EnumlogPublisherCompressionMechanismProp string

// List of Enumlog-publisher-compressionMechanismProp
const (
	ENUMLOGPUBLISHERCOMPRESSIONMECHANISMPROP_NONE EnumlogPublisherCompressionMechanismProp = "none"
	ENUMLOGPUBLISHERCOMPRESSIONMECHANISMPROP_GZIP EnumlogPublisherCompressionMechanismProp = "gzip"
)

// All allowed values of EnumlogPublisherCompressionMechanismProp enum
var AllowedEnumlogPublisherCompressionMechanismPropEnumValues = []EnumlogPublisherCompressionMechanismProp{
	"none",
	"gzip",
}

func (v *EnumlogPublisherCompressionMechanismProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherCompressionMechanismProp(value)
	for _, existing := range AllowedEnumlogPublisherCompressionMechanismPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherCompressionMechanismProp", value)
}

// NewEnumlogPublisherCompressionMechanismPropFromValue returns a pointer to a valid EnumlogPublisherCompressionMechanismProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherCompressionMechanismPropFromValue(v string) (*EnumlogPublisherCompressionMechanismProp, error) {
	ev := EnumlogPublisherCompressionMechanismProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherCompressionMechanismProp: valid values are %v", v, AllowedEnumlogPublisherCompressionMechanismPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherCompressionMechanismProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherCompressionMechanismPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-compressionMechanismProp value
func (v EnumlogPublisherCompressionMechanismProp) Ptr() *EnumlogPublisherCompressionMechanismProp {
	return &v
}

type NullableEnumlogPublisherCompressionMechanismProp struct {
	value *EnumlogPublisherCompressionMechanismProp
	isSet bool
}

func (v NullableEnumlogPublisherCompressionMechanismProp) Get() *EnumlogPublisherCompressionMechanismProp {
	return v.value
}

func (v *NullableEnumlogPublisherCompressionMechanismProp) Set(val *EnumlogPublisherCompressionMechanismProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherCompressionMechanismProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherCompressionMechanismProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherCompressionMechanismProp(val *EnumlogPublisherCompressionMechanismProp) *NullableEnumlogPublisherCompressionMechanismProp {
	return &NullableEnumlogPublisherCompressionMechanismProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherCompressionMechanismProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherCompressionMechanismProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

