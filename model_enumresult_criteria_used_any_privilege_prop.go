/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaUsedAnyPrivilegeProp Indicates whether operations in which one or more privileges were used should be included in this Simple Result Criteria. If no value is provided, then whether an operation used any privileges will not be considered when determining whether it matches this Simple Result Criteria.
type EnumresultCriteriaUsedAnyPrivilegeProp string

// List of Enumresult-criteria-usedAnyPrivilegeProp
const (
	ENUMRESULTCRITERIAUSEDANYPRIVILEGEPROP_REQUIRED EnumresultCriteriaUsedAnyPrivilegeProp = "required"
	ENUMRESULTCRITERIAUSEDANYPRIVILEGEPROP_PROHIBITED EnumresultCriteriaUsedAnyPrivilegeProp = "prohibited"
	ENUMRESULTCRITERIAUSEDANYPRIVILEGEPROP_OPTIONAL EnumresultCriteriaUsedAnyPrivilegeProp = "optional"
)

// All allowed values of EnumresultCriteriaUsedAnyPrivilegeProp enum
var AllowedEnumresultCriteriaUsedAnyPrivilegePropEnumValues = []EnumresultCriteriaUsedAnyPrivilegeProp{
	"required",
	"prohibited",
	"optional",
}

func (v *EnumresultCriteriaUsedAnyPrivilegeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaUsedAnyPrivilegeProp(value)
	for _, existing := range AllowedEnumresultCriteriaUsedAnyPrivilegePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaUsedAnyPrivilegeProp", value)
}

// NewEnumresultCriteriaUsedAnyPrivilegePropFromValue returns a pointer to a valid EnumresultCriteriaUsedAnyPrivilegeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaUsedAnyPrivilegePropFromValue(v string) (*EnumresultCriteriaUsedAnyPrivilegeProp, error) {
	ev := EnumresultCriteriaUsedAnyPrivilegeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaUsedAnyPrivilegeProp: valid values are %v", v, AllowedEnumresultCriteriaUsedAnyPrivilegePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaUsedAnyPrivilegeProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaUsedAnyPrivilegePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-usedAnyPrivilegeProp value
func (v EnumresultCriteriaUsedAnyPrivilegeProp) Ptr() *EnumresultCriteriaUsedAnyPrivilegeProp {
	return &v
}

type NullableEnumresultCriteriaUsedAnyPrivilegeProp struct {
	value *EnumresultCriteriaUsedAnyPrivilegeProp
	isSet bool
}

func (v NullableEnumresultCriteriaUsedAnyPrivilegeProp) Get() *EnumresultCriteriaUsedAnyPrivilegeProp {
	return v.value
}

func (v *NullableEnumresultCriteriaUsedAnyPrivilegeProp) Set(val *EnumresultCriteriaUsedAnyPrivilegeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaUsedAnyPrivilegeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaUsedAnyPrivilegeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaUsedAnyPrivilegeProp(val *EnumresultCriteriaUsedAnyPrivilegeProp) *NullableEnumresultCriteriaUsedAnyPrivilegeProp {
	return &NullableEnumresultCriteriaUsedAnyPrivilegeProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaUsedAnyPrivilegeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaUsedAnyPrivilegeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

