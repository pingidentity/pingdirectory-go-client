/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HttpServletCrossOriginPolicyResponse struct for HttpServletCrossOriginPolicyResponse
type HttpServletCrossOriginPolicyResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	// Name of the HTTP Servlet Cross Origin Policy
	Id      string                                      `json:"id"`
	Schemas []EnumhttpServletCrossOriginPolicySchemaUrn `json:"schemas,omitempty"`
	// A description for this HTTP Servlet Cross Origin Policy
	Description *string `json:"description,omitempty"`
	// A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc.
	CorsAllowedMethods []string `json:"corsAllowedMethods,omitempty"`
	// A list of origins that are allowed to execute cross-origin requests.
	CorsAllowedOrigins []string `json:"corsAllowedOrigins,omitempty"`
	// A list of HTTP headers other than the simple response headers that browsers are allowed to access.
	CorsExposedHeaders []string `json:"corsExposedHeaders,omitempty"`
	// A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request.
	CorsAllowedHeaders []string `json:"corsAllowedHeaders,omitempty"`
	// The maximum amount of time that a preflight request can be cached by a client.
	CorsPreflightMaxAge *string `json:"corsPreflightMaxAge,omitempty"`
	// Indicates whether the servlet extension allows CORS requests with username/password credentials.
	CorsAllowCredentials *bool `json:"corsAllowCredentials,omitempty"`
}

// NewHttpServletCrossOriginPolicyResponse instantiates a new HttpServletCrossOriginPolicyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpServletCrossOriginPolicyResponse(id string) *HttpServletCrossOriginPolicyResponse {
	this := HttpServletCrossOriginPolicyResponse{}
	this.Id = id
	return &this
}

// NewHttpServletCrossOriginPolicyResponseWithDefaults instantiates a new HttpServletCrossOriginPolicyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpServletCrossOriginPolicyResponseWithDefaults() *HttpServletCrossOriginPolicyResponse {
	this := HttpServletCrossOriginPolicyResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *HttpServletCrossOriginPolicyResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *HttpServletCrossOriginPolicyResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetId returns the Id field value
func (o *HttpServletCrossOriginPolicyResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HttpServletCrossOriginPolicyResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetSchemas() []EnumhttpServletCrossOriginPolicySchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumhttpServletCrossOriginPolicySchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetSchemasOk() ([]EnumhttpServletCrossOriginPolicySchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumhttpServletCrossOriginPolicySchemaUrn and assigns it to the Schemas field.
func (o *HttpServletCrossOriginPolicyResponse) SetSchemas(v []EnumhttpServletCrossOriginPolicySchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HttpServletCrossOriginPolicyResponse) SetDescription(v string) {
	o.Description = &v
}

// GetCorsAllowedMethods returns the CorsAllowedMethods field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowedMethods() []string {
	if o == nil || isNil(o.CorsAllowedMethods) {
		var ret []string
		return ret
	}
	return o.CorsAllowedMethods
}

// GetCorsAllowedMethodsOk returns a tuple with the CorsAllowedMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowedMethodsOk() ([]string, bool) {
	if o == nil || isNil(o.CorsAllowedMethods) {
		return nil, false
	}
	return o.CorsAllowedMethods, true
}

// HasCorsAllowedMethods returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasCorsAllowedMethods() bool {
	if o != nil && !isNil(o.CorsAllowedMethods) {
		return true
	}

	return false
}

// SetCorsAllowedMethods gets a reference to the given []string and assigns it to the CorsAllowedMethods field.
func (o *HttpServletCrossOriginPolicyResponse) SetCorsAllowedMethods(v []string) {
	o.CorsAllowedMethods = v
}

// GetCorsAllowedOrigins returns the CorsAllowedOrigins field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowedOrigins() []string {
	if o == nil || isNil(o.CorsAllowedOrigins) {
		var ret []string
		return ret
	}
	return o.CorsAllowedOrigins
}

// GetCorsAllowedOriginsOk returns a tuple with the CorsAllowedOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowedOriginsOk() ([]string, bool) {
	if o == nil || isNil(o.CorsAllowedOrigins) {
		return nil, false
	}
	return o.CorsAllowedOrigins, true
}

// HasCorsAllowedOrigins returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasCorsAllowedOrigins() bool {
	if o != nil && !isNil(o.CorsAllowedOrigins) {
		return true
	}

	return false
}

// SetCorsAllowedOrigins gets a reference to the given []string and assigns it to the CorsAllowedOrigins field.
func (o *HttpServletCrossOriginPolicyResponse) SetCorsAllowedOrigins(v []string) {
	o.CorsAllowedOrigins = v
}

// GetCorsExposedHeaders returns the CorsExposedHeaders field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsExposedHeaders() []string {
	if o == nil || isNil(o.CorsExposedHeaders) {
		var ret []string
		return ret
	}
	return o.CorsExposedHeaders
}

// GetCorsExposedHeadersOk returns a tuple with the CorsExposedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsExposedHeadersOk() ([]string, bool) {
	if o == nil || isNil(o.CorsExposedHeaders) {
		return nil, false
	}
	return o.CorsExposedHeaders, true
}

// HasCorsExposedHeaders returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasCorsExposedHeaders() bool {
	if o != nil && !isNil(o.CorsExposedHeaders) {
		return true
	}

	return false
}

// SetCorsExposedHeaders gets a reference to the given []string and assigns it to the CorsExposedHeaders field.
func (o *HttpServletCrossOriginPolicyResponse) SetCorsExposedHeaders(v []string) {
	o.CorsExposedHeaders = v
}

// GetCorsAllowedHeaders returns the CorsAllowedHeaders field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowedHeaders() []string {
	if o == nil || isNil(o.CorsAllowedHeaders) {
		var ret []string
		return ret
	}
	return o.CorsAllowedHeaders
}

// GetCorsAllowedHeadersOk returns a tuple with the CorsAllowedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowedHeadersOk() ([]string, bool) {
	if o == nil || isNil(o.CorsAllowedHeaders) {
		return nil, false
	}
	return o.CorsAllowedHeaders, true
}

// HasCorsAllowedHeaders returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasCorsAllowedHeaders() bool {
	if o != nil && !isNil(o.CorsAllowedHeaders) {
		return true
	}

	return false
}

// SetCorsAllowedHeaders gets a reference to the given []string and assigns it to the CorsAllowedHeaders field.
func (o *HttpServletCrossOriginPolicyResponse) SetCorsAllowedHeaders(v []string) {
	o.CorsAllowedHeaders = v
}

// GetCorsPreflightMaxAge returns the CorsPreflightMaxAge field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsPreflightMaxAge() string {
	if o == nil || isNil(o.CorsPreflightMaxAge) {
		var ret string
		return ret
	}
	return *o.CorsPreflightMaxAge
}

// GetCorsPreflightMaxAgeOk returns a tuple with the CorsPreflightMaxAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsPreflightMaxAgeOk() (*string, bool) {
	if o == nil || isNil(o.CorsPreflightMaxAge) {
		return nil, false
	}
	return o.CorsPreflightMaxAge, true
}

// HasCorsPreflightMaxAge returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasCorsPreflightMaxAge() bool {
	if o != nil && !isNil(o.CorsPreflightMaxAge) {
		return true
	}

	return false
}

// SetCorsPreflightMaxAge gets a reference to the given string and assigns it to the CorsPreflightMaxAge field.
func (o *HttpServletCrossOriginPolicyResponse) SetCorsPreflightMaxAge(v string) {
	o.CorsPreflightMaxAge = &v
}

// GetCorsAllowCredentials returns the CorsAllowCredentials field value if set, zero value otherwise.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowCredentials() bool {
	if o == nil || isNil(o.CorsAllowCredentials) {
		var ret bool
		return ret
	}
	return *o.CorsAllowCredentials
}

// GetCorsAllowCredentialsOk returns a tuple with the CorsAllowCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServletCrossOriginPolicyResponse) GetCorsAllowCredentialsOk() (*bool, bool) {
	if o == nil || isNil(o.CorsAllowCredentials) {
		return nil, false
	}
	return o.CorsAllowCredentials, true
}

// HasCorsAllowCredentials returns a boolean if a field has been set.
func (o *HttpServletCrossOriginPolicyResponse) HasCorsAllowCredentials() bool {
	if o != nil && !isNil(o.CorsAllowCredentials) {
		return true
	}

	return false
}

// SetCorsAllowCredentials gets a reference to the given bool and assigns it to the CorsAllowCredentials field.
func (o *HttpServletCrossOriginPolicyResponse) SetCorsAllowCredentials(v bool) {
	o.CorsAllowCredentials = &v
}

func (o HttpServletCrossOriginPolicyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CorsAllowedMethods) {
		toSerialize["corsAllowedMethods"] = o.CorsAllowedMethods
	}
	if !isNil(o.CorsAllowedOrigins) {
		toSerialize["corsAllowedOrigins"] = o.CorsAllowedOrigins
	}
	if !isNil(o.CorsExposedHeaders) {
		toSerialize["corsExposedHeaders"] = o.CorsExposedHeaders
	}
	if !isNil(o.CorsAllowedHeaders) {
		toSerialize["corsAllowedHeaders"] = o.CorsAllowedHeaders
	}
	if !isNil(o.CorsPreflightMaxAge) {
		toSerialize["corsPreflightMaxAge"] = o.CorsPreflightMaxAge
	}
	if !isNil(o.CorsAllowCredentials) {
		toSerialize["corsAllowCredentials"] = o.CorsAllowCredentials
	}
	return json.Marshal(toSerialize)
}

type NullableHttpServletCrossOriginPolicyResponse struct {
	value *HttpServletCrossOriginPolicyResponse
	isSet bool
}

func (v NullableHttpServletCrossOriginPolicyResponse) Get() *HttpServletCrossOriginPolicyResponse {
	return v.value
}

func (v *NullableHttpServletCrossOriginPolicyResponse) Set(val *HttpServletCrossOriginPolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpServletCrossOriginPolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpServletCrossOriginPolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpServletCrossOriginPolicyResponse(val *HttpServletCrossOriginPolicyResponse) *NullableHttpServletCrossOriginPolicyResponse {
	return &NullableHttpServletCrossOriginPolicyResponse{value: val, isSet: true}
}

func (v NullableHttpServletCrossOriginPolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpServletCrossOriginPolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
