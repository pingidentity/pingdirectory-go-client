/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherScimMessageTypeProp Specifies the SCIM message types which can be logged.
type EnumlogPublisherScimMessageTypeProp string

// List of Enumlog-publisher-scimMessageTypeProp
const (
	REQUEST EnumlogPublisherScimMessageTypeProp = "request"
	RESULT EnumlogPublisherScimMessageTypeProp = "result"
	INTERNAL_REQUEST EnumlogPublisherScimMessageTypeProp = "internal-request"
	INTERNAL_RESULT EnumlogPublisherScimMessageTypeProp = "internal-result"
	ERROR EnumlogPublisherScimMessageTypeProp = "error"
)

// All allowed values of EnumlogPublisherScimMessageTypeProp enum
var AllowedEnumlogPublisherScimMessageTypePropEnumValues = []EnumlogPublisherScimMessageTypeProp{
	"request",
	"result",
	"internal-request",
	"internal-result",
	"error",
}

func (v *EnumlogPublisherScimMessageTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherScimMessageTypeProp(value)
	for _, existing := range AllowedEnumlogPublisherScimMessageTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherScimMessageTypeProp", value)
}

// NewEnumlogPublisherScimMessageTypePropFromValue returns a pointer to a valid EnumlogPublisherScimMessageTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherScimMessageTypePropFromValue(v string) (*EnumlogPublisherScimMessageTypeProp, error) {
	ev := EnumlogPublisherScimMessageTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherScimMessageTypeProp: valid values are %v", v, AllowedEnumlogPublisherScimMessageTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherScimMessageTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherScimMessageTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-scimMessageTypeProp value
func (v EnumlogPublisherScimMessageTypeProp) Ptr() *EnumlogPublisherScimMessageTypeProp {
	return &v
}

type NullableEnumlogPublisherScimMessageTypeProp struct {
	value *EnumlogPublisherScimMessageTypeProp
	isSet bool
}

func (v NullableEnumlogPublisherScimMessageTypeProp) Get() *EnumlogPublisherScimMessageTypeProp {
	return v.value
}

func (v *NullableEnumlogPublisherScimMessageTypeProp) Set(val *EnumlogPublisherScimMessageTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherScimMessageTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherScimMessageTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherScimMessageTypeProp(val *EnumlogPublisherScimMessageTypeProp) *NullableEnumlogPublisherScimMessageTypeProp {
	return &NullableEnumlogPublisherScimMessageTypeProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherScimMessageTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherScimMessageTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

