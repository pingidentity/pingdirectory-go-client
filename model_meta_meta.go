/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetaMeta struct for MetaMeta
type MetaMeta struct {
	ResourceType *string `json:"resourceType,omitempty"`
	Location     *string `json:"location,omitempty"`
}

// NewMetaMeta instantiates a new MetaMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaMeta() *MetaMeta {
	this := MetaMeta{}
	return &this
}

// NewMetaMetaWithDefaults instantiates a new MetaMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaMetaWithDefaults() *MetaMeta {
	this := MetaMeta{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *MetaMeta) GetResourceType() string {
	if o == nil || isNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaMeta) GetResourceTypeOk() (*string, bool) {
	if o == nil || isNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *MetaMeta) HasResourceType() bool {
	if o != nil && !isNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *MetaMeta) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *MetaMeta) GetLocation() string {
	if o == nil || isNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaMeta) GetLocationOk() (*string, bool) {
	if o == nil || isNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *MetaMeta) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *MetaMeta) SetLocation(v string) {
	o.Location = &v
}

func (o MetaMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableMetaMeta struct {
	value *MetaMeta
	isSet bool
}

func (v NullableMetaMeta) Get() *MetaMeta {
	return v.value
}

func (v *NullableMetaMeta) Set(val *MetaMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaMeta(val *MetaMeta) *NullableMetaMeta {
	return &NullableMetaMeta{value: val, isSet: true}
}

func (v NullableMetaMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
