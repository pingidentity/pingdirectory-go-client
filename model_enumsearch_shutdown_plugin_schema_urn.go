/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsearchShutdownPluginSchemaUrn the model 'EnumsearchShutdownPluginSchemaUrn'
type EnumsearchShutdownPluginSchemaUrn string

// List of Enumsearch-shutdown-pluginSchemaUrn
const (
	ENUMSEARCHSHUTDOWNPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSEARCH_SHUTDOWN EnumsearchShutdownPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:search-shutdown"
)

// All allowed values of EnumsearchShutdownPluginSchemaUrn enum
var AllowedEnumsearchShutdownPluginSchemaUrnEnumValues = []EnumsearchShutdownPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:search-shutdown",
}

func (v *EnumsearchShutdownPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsearchShutdownPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsearchShutdownPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsearchShutdownPluginSchemaUrn", value)
}

// NewEnumsearchShutdownPluginSchemaUrnFromValue returns a pointer to a valid EnumsearchShutdownPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsearchShutdownPluginSchemaUrnFromValue(v string) (*EnumsearchShutdownPluginSchemaUrn, error) {
	ev := EnumsearchShutdownPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsearchShutdownPluginSchemaUrn: valid values are %v", v, AllowedEnumsearchShutdownPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsearchShutdownPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsearchShutdownPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsearch-shutdown-pluginSchemaUrn value
func (v EnumsearchShutdownPluginSchemaUrn) Ptr() *EnumsearchShutdownPluginSchemaUrn {
	return &v
}

type NullableEnumsearchShutdownPluginSchemaUrn struct {
	value *EnumsearchShutdownPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsearchShutdownPluginSchemaUrn) Get() *EnumsearchShutdownPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsearchShutdownPluginSchemaUrn) Set(val *EnumsearchShutdownPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsearchShutdownPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsearchShutdownPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsearchShutdownPluginSchemaUrn(val *EnumsearchShutdownPluginSchemaUrn) *NullableEnumsearchShutdownPluginSchemaUrn {
	return &NullableEnumsearchShutdownPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsearchShutdownPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsearchShutdownPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
