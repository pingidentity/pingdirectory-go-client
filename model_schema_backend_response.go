/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SchemaBackendResponse struct for SchemaBackendResponse
type SchemaBackendResponse struct {
	Meta *MetaMeta `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas []EnumschemaBackendSchemaUrn `json:"schemas"`
	// Name of the Backend
	Id *string `json:"id,omitempty"`
	// Specifies a name to identify the associated backend.
	BackendID string `json:"backendID"`
	// Specifies the base DN(s) for the data that the backend handles.
	BaseDN []string `json:"baseDN"`
	WritabilityMode EnumbackendWritabilityModeProp `json:"writabilityMode"`
	// Defines the base DNs of the subtrees in which the schema information is published in addition to the value included in the base-dn property.
	SchemaEntryDN []string `json:"schemaEntryDN,omitempty"`
	// Indicates whether to treat all attributes in the schema entry as if they were user attributes regardless of their configuration.
	ShowAllAttributes bool `json:"showAllAttributes"`
	// Specifies the name of a file (which must exist in the config/schema directory) containing schema elements that should be considered read-only. Any schema definitions contained in read-only files cannot be altered by external clients.
	ReadOnlySchemaFile []string `json:"readOnlySchemaFile,omitempty"`
	// A description for this Backend
	Description *string `json:"description,omitempty"`
	// Indicates whether the backend is enabled in the server.
	Enabled bool `json:"enabled"`
	// Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
	SetDegradedAlertWhenDisabled *bool `json:"setDegradedAlertWhenDisabled,omitempty"`
	// Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
	ReturnUnavailableWhenDisabled *bool `json:"returnUnavailableWhenDisabled,omitempty"`
	// Specifies the permissions that should be applied to files and directories created by a backup of the backend.
	BackupFilePermissions *string `json:"backupFilePermissions,omitempty"`
	// Specifies a notification manager for changes resulting from operations processed through this Backend
	NotificationManager *string `json:"notificationManager,omitempty"`
}

// NewSchemaBackendResponse instantiates a new SchemaBackendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaBackendResponse(schemas []EnumschemaBackendSchemaUrn, backendID string, baseDN []string, writabilityMode EnumbackendWritabilityModeProp, showAllAttributes bool, enabled bool) *SchemaBackendResponse {
	this := SchemaBackendResponse{}
	this.Schemas = schemas
	this.BackendID = backendID
	this.BaseDN = baseDN
	this.WritabilityMode = writabilityMode
	this.ShowAllAttributes = showAllAttributes
	this.Enabled = enabled
	return &this
}

// NewSchemaBackendResponseWithDefaults instantiates a new SchemaBackendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaBackendResponseWithDefaults() *SchemaBackendResponse {
	this := SchemaBackendResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
    return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *SchemaBackendResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
    return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *SchemaBackendResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value
func (o *SchemaBackendResponse) GetSchemas() []EnumschemaBackendSchemaUrn {
	if o == nil {
		var ret []EnumschemaBackendSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetSchemasOk() ([]EnumschemaBackendSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *SchemaBackendResponse) SetSchemas(v []EnumschemaBackendSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaBackendResponse) SetId(v string) {
	o.Id = &v
}

// GetBackendID returns the BackendID field value
func (o *SchemaBackendResponse) GetBackendID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackendID
}

// GetBackendIDOk returns a tuple with the BackendID field value
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetBackendIDOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BackendID, true
}

// SetBackendID sets field value
func (o *SchemaBackendResponse) SetBackendID(v string) {
	o.BackendID = v
}

// GetBaseDN returns the BaseDN field value
func (o *SchemaBackendResponse) GetBaseDN() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetBaseDNOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BaseDN, true
}

// SetBaseDN sets field value
func (o *SchemaBackendResponse) SetBaseDN(v []string) {
	o.BaseDN = v
}

// GetWritabilityMode returns the WritabilityMode field value
func (o *SchemaBackendResponse) GetWritabilityMode() EnumbackendWritabilityModeProp {
	if o == nil {
		var ret EnumbackendWritabilityModeProp
		return ret
	}

	return o.WritabilityMode
}

// GetWritabilityModeOk returns a tuple with the WritabilityMode field value
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetWritabilityModeOk() (*EnumbackendWritabilityModeProp, bool) {
	if o == nil {
    return nil, false
	}
	return &o.WritabilityMode, true
}

// SetWritabilityMode sets field value
func (o *SchemaBackendResponse) SetWritabilityMode(v EnumbackendWritabilityModeProp) {
	o.WritabilityMode = v
}

// GetSchemaEntryDN returns the SchemaEntryDN field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetSchemaEntryDN() []string {
	if o == nil || isNil(o.SchemaEntryDN) {
		var ret []string
		return ret
	}
	return o.SchemaEntryDN
}

// GetSchemaEntryDNOk returns a tuple with the SchemaEntryDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetSchemaEntryDNOk() ([]string, bool) {
	if o == nil || isNil(o.SchemaEntryDN) {
    return nil, false
	}
	return o.SchemaEntryDN, true
}

// HasSchemaEntryDN returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasSchemaEntryDN() bool {
	if o != nil && !isNil(o.SchemaEntryDN) {
		return true
	}

	return false
}

// SetSchemaEntryDN gets a reference to the given []string and assigns it to the SchemaEntryDN field.
func (o *SchemaBackendResponse) SetSchemaEntryDN(v []string) {
	o.SchemaEntryDN = v
}

// GetShowAllAttributes returns the ShowAllAttributes field value
func (o *SchemaBackendResponse) GetShowAllAttributes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ShowAllAttributes
}

// GetShowAllAttributesOk returns a tuple with the ShowAllAttributes field value
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetShowAllAttributesOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ShowAllAttributes, true
}

// SetShowAllAttributes sets field value
func (o *SchemaBackendResponse) SetShowAllAttributes(v bool) {
	o.ShowAllAttributes = v
}

// GetReadOnlySchemaFile returns the ReadOnlySchemaFile field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetReadOnlySchemaFile() []string {
	if o == nil || isNil(o.ReadOnlySchemaFile) {
		var ret []string
		return ret
	}
	return o.ReadOnlySchemaFile
}

// GetReadOnlySchemaFileOk returns a tuple with the ReadOnlySchemaFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetReadOnlySchemaFileOk() ([]string, bool) {
	if o == nil || isNil(o.ReadOnlySchemaFile) {
    return nil, false
	}
	return o.ReadOnlySchemaFile, true
}

// HasReadOnlySchemaFile returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasReadOnlySchemaFile() bool {
	if o != nil && !isNil(o.ReadOnlySchemaFile) {
		return true
	}

	return false
}

// SetReadOnlySchemaFile gets a reference to the given []string and assigns it to the ReadOnlySchemaFile field.
func (o *SchemaBackendResponse) SetReadOnlySchemaFile(v []string) {
	o.ReadOnlySchemaFile = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaBackendResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *SchemaBackendResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SchemaBackendResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSetDegradedAlertWhenDisabled returns the SetDegradedAlertWhenDisabled field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetSetDegradedAlertWhenDisabled() bool {
	if o == nil || isNil(o.SetDegradedAlertWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.SetDegradedAlertWhenDisabled
}

// GetSetDegradedAlertWhenDisabledOk returns a tuple with the SetDegradedAlertWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetSetDegradedAlertWhenDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.SetDegradedAlertWhenDisabled) {
    return nil, false
	}
	return o.SetDegradedAlertWhenDisabled, true
}

// HasSetDegradedAlertWhenDisabled returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasSetDegradedAlertWhenDisabled() bool {
	if o != nil && !isNil(o.SetDegradedAlertWhenDisabled) {
		return true
	}

	return false
}

// SetSetDegradedAlertWhenDisabled gets a reference to the given bool and assigns it to the SetDegradedAlertWhenDisabled field.
func (o *SchemaBackendResponse) SetSetDegradedAlertWhenDisabled(v bool) {
	o.SetDegradedAlertWhenDisabled = &v
}

// GetReturnUnavailableWhenDisabled returns the ReturnUnavailableWhenDisabled field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetReturnUnavailableWhenDisabled() bool {
	if o == nil || isNil(o.ReturnUnavailableWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.ReturnUnavailableWhenDisabled
}

// GetReturnUnavailableWhenDisabledOk returns a tuple with the ReturnUnavailableWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetReturnUnavailableWhenDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.ReturnUnavailableWhenDisabled) {
    return nil, false
	}
	return o.ReturnUnavailableWhenDisabled, true
}

// HasReturnUnavailableWhenDisabled returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasReturnUnavailableWhenDisabled() bool {
	if o != nil && !isNil(o.ReturnUnavailableWhenDisabled) {
		return true
	}

	return false
}

// SetReturnUnavailableWhenDisabled gets a reference to the given bool and assigns it to the ReturnUnavailableWhenDisabled field.
func (o *SchemaBackendResponse) SetReturnUnavailableWhenDisabled(v bool) {
	o.ReturnUnavailableWhenDisabled = &v
}

// GetBackupFilePermissions returns the BackupFilePermissions field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetBackupFilePermissions() string {
	if o == nil || isNil(o.BackupFilePermissions) {
		var ret string
		return ret
	}
	return *o.BackupFilePermissions
}

// GetBackupFilePermissionsOk returns a tuple with the BackupFilePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetBackupFilePermissionsOk() (*string, bool) {
	if o == nil || isNil(o.BackupFilePermissions) {
    return nil, false
	}
	return o.BackupFilePermissions, true
}

// HasBackupFilePermissions returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasBackupFilePermissions() bool {
	if o != nil && !isNil(o.BackupFilePermissions) {
		return true
	}

	return false
}

// SetBackupFilePermissions gets a reference to the given string and assigns it to the BackupFilePermissions field.
func (o *SchemaBackendResponse) SetBackupFilePermissions(v string) {
	o.BackupFilePermissions = &v
}

// GetNotificationManager returns the NotificationManager field value if set, zero value otherwise.
func (o *SchemaBackendResponse) GetNotificationManager() string {
	if o == nil || isNil(o.NotificationManager) {
		var ret string
		return ret
	}
	return *o.NotificationManager
}

// GetNotificationManagerOk returns a tuple with the NotificationManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaBackendResponse) GetNotificationManagerOk() (*string, bool) {
	if o == nil || isNil(o.NotificationManager) {
    return nil, false
	}
	return o.NotificationManager, true
}

// HasNotificationManager returns a boolean if a field has been set.
func (o *SchemaBackendResponse) HasNotificationManager() bool {
	if o != nil && !isNil(o.NotificationManager) {
		return true
	}

	return false
}

// SetNotificationManager gets a reference to the given string and assigns it to the NotificationManager field.
func (o *SchemaBackendResponse) SetNotificationManager(v string) {
	o.NotificationManager = &v
}

func (o SchemaBackendResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["backendID"] = o.BackendID
	}
	if true {
		toSerialize["baseDN"] = o.BaseDN
	}
	if true {
		toSerialize["writabilityMode"] = o.WritabilityMode
	}
	if !isNil(o.SchemaEntryDN) {
		toSerialize["schemaEntryDN"] = o.SchemaEntryDN
	}
	if true {
		toSerialize["showAllAttributes"] = o.ShowAllAttributes
	}
	if !isNil(o.ReadOnlySchemaFile) {
		toSerialize["readOnlySchemaFile"] = o.ReadOnlySchemaFile
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.SetDegradedAlertWhenDisabled) {
		toSerialize["setDegradedAlertWhenDisabled"] = o.SetDegradedAlertWhenDisabled
	}
	if !isNil(o.ReturnUnavailableWhenDisabled) {
		toSerialize["returnUnavailableWhenDisabled"] = o.ReturnUnavailableWhenDisabled
	}
	if !isNil(o.BackupFilePermissions) {
		toSerialize["backupFilePermissions"] = o.BackupFilePermissions
	}
	if !isNil(o.NotificationManager) {
		toSerialize["notificationManager"] = o.NotificationManager
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaBackendResponse struct {
	value *SchemaBackendResponse
	isSet bool
}

func (v NullableSchemaBackendResponse) Get() *SchemaBackendResponse {
	return v.value
}

func (v *NullableSchemaBackendResponse) Set(val *SchemaBackendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaBackendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaBackendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaBackendResponse(val *SchemaBackendResponse) *NullableSchemaBackendResponse {
	return &NullableSchemaBackendResponse{value: val, isSet: true}
}

func (v NullableSchemaBackendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaBackendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


