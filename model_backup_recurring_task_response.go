/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BackupRecurringTaskResponse struct for BackupRecurringTaskResponse
type BackupRecurringTaskResponse struct {
	// Name of the Recurring Task
	Id string `json:"id"`
	Schemas []EnumbackupRecurringTaskSchemaUrn `json:"schemas"`
	// The directory in which backup files will be placed. When backing up a single backend, the backup files will be placed directly in this directory. When backing up multiple backends, the backup files for each backend will be placed in a subdirectory whose name is the corresponding backend ID.
	BackupDirectory string `json:"backupDirectory"`
	IncludedBackendID []string `json:"includedBackendID,omitempty"`
	ExcludedBackendID []string `json:"excludedBackendID,omitempty"`
	// Indicates whether to compress the data as it is written into the backup.
	Compress *bool `json:"compress,omitempty"`
	// Indicates whether to encrypt the data as it is written into the backup.
	Encrypt *bool `json:"encrypt,omitempty"`
	// The ID of an encryption settings definition to use to obtain the backup encryption key.
	EncryptionSettingsDefinitionID *string `json:"encryptionSettingsDefinitionID,omitempty"`
	// Indicates whether to cryptographically sign backups, which will make it possible to detect whether the backup has been altered since it was created.
	Sign *bool `json:"sign,omitempty"`
	// The minimum number of previous full backups that should be preserved after a new backup completes successfully.
	RetainPreviousFullBackupCount *int32 `json:"retainPreviousFullBackupCount,omitempty"`
	// The minimum age of previous full backups that should be preserved after a new backup completes successfully.
	RetainPreviousFullBackupAge *string `json:"retainPreviousFullBackupAge,omitempty"`
	// The maximum rate, in megabytes per second, at which backups should be written.
	MaxMegabytesPerSecond *int32 `json:"maxMegabytesPerSecond,omitempty"`
	// A description for this Recurring Task
	Description *string `json:"description,omitempty"`
	// Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
	CancelOnTaskDependencyFailure *bool `json:"cancelOnTaskDependencyFailure,omitempty"`
	EmailOnStart []string `json:"emailOnStart,omitempty"`
	EmailOnSuccess []string `json:"emailOnSuccess,omitempty"`
	EmailOnFailure []string `json:"emailOnFailure,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
	AlertOnStart *bool `json:"alertOnStart,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
	AlertOnSuccess *bool `json:"alertOnSuccess,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
	AlertOnFailure *bool `json:"alertOnFailure,omitempty"`
}

// NewBackupRecurringTaskResponse instantiates a new BackupRecurringTaskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRecurringTaskResponse(id string, schemas []EnumbackupRecurringTaskSchemaUrn, backupDirectory string) *BackupRecurringTaskResponse {
	this := BackupRecurringTaskResponse{}
	this.Id = id
	this.Schemas = schemas
	this.BackupDirectory = backupDirectory
	return &this
}

// NewBackupRecurringTaskResponseWithDefaults instantiates a new BackupRecurringTaskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRecurringTaskResponseWithDefaults() *BackupRecurringTaskResponse {
	this := BackupRecurringTaskResponse{}
	return &this
}

// GetId returns the Id field value
func (o *BackupRecurringTaskResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BackupRecurringTaskResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *BackupRecurringTaskResponse) GetSchemas() []EnumbackupRecurringTaskSchemaUrn {
	if o == nil {
		var ret []EnumbackupRecurringTaskSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetSchemasOk() ([]EnumbackupRecurringTaskSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *BackupRecurringTaskResponse) SetSchemas(v []EnumbackupRecurringTaskSchemaUrn) {
	o.Schemas = v
}

// GetBackupDirectory returns the BackupDirectory field value
func (o *BackupRecurringTaskResponse) GetBackupDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackupDirectory
}

// GetBackupDirectoryOk returns a tuple with the BackupDirectory field value
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetBackupDirectoryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BackupDirectory, true
}

// SetBackupDirectory sets field value
func (o *BackupRecurringTaskResponse) SetBackupDirectory(v string) {
	o.BackupDirectory = v
}

// GetIncludedBackendID returns the IncludedBackendID field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetIncludedBackendID() []string {
	if o == nil || isNil(o.IncludedBackendID) {
		var ret []string
		return ret
	}
	return o.IncludedBackendID
}

// GetIncludedBackendIDOk returns a tuple with the IncludedBackendID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetIncludedBackendIDOk() ([]string, bool) {
	if o == nil || isNil(o.IncludedBackendID) {
    return nil, false
	}
	return o.IncludedBackendID, true
}

// HasIncludedBackendID returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasIncludedBackendID() bool {
	if o != nil && !isNil(o.IncludedBackendID) {
		return true
	}

	return false
}

// SetIncludedBackendID gets a reference to the given []string and assigns it to the IncludedBackendID field.
func (o *BackupRecurringTaskResponse) SetIncludedBackendID(v []string) {
	o.IncludedBackendID = v
}

// GetExcludedBackendID returns the ExcludedBackendID field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetExcludedBackendID() []string {
	if o == nil || isNil(o.ExcludedBackendID) {
		var ret []string
		return ret
	}
	return o.ExcludedBackendID
}

// GetExcludedBackendIDOk returns a tuple with the ExcludedBackendID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetExcludedBackendIDOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludedBackendID) {
    return nil, false
	}
	return o.ExcludedBackendID, true
}

// HasExcludedBackendID returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasExcludedBackendID() bool {
	if o != nil && !isNil(o.ExcludedBackendID) {
		return true
	}

	return false
}

// SetExcludedBackendID gets a reference to the given []string and assigns it to the ExcludedBackendID field.
func (o *BackupRecurringTaskResponse) SetExcludedBackendID(v []string) {
	o.ExcludedBackendID = v
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetCompress() bool {
	if o == nil || isNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetCompressOk() (*bool, bool) {
	if o == nil || isNil(o.Compress) {
    return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasCompress() bool {
	if o != nil && !isNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *BackupRecurringTaskResponse) SetCompress(v bool) {
	o.Compress = &v
}

// GetEncrypt returns the Encrypt field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetEncrypt() bool {
	if o == nil || isNil(o.Encrypt) {
		var ret bool
		return ret
	}
	return *o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetEncryptOk() (*bool, bool) {
	if o == nil || isNil(o.Encrypt) {
    return nil, false
	}
	return o.Encrypt, true
}

// HasEncrypt returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasEncrypt() bool {
	if o != nil && !isNil(o.Encrypt) {
		return true
	}

	return false
}

// SetEncrypt gets a reference to the given bool and assigns it to the Encrypt field.
func (o *BackupRecurringTaskResponse) SetEncrypt(v bool) {
	o.Encrypt = &v
}

// GetEncryptionSettingsDefinitionID returns the EncryptionSettingsDefinitionID field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetEncryptionSettingsDefinitionID() string {
	if o == nil || isNil(o.EncryptionSettingsDefinitionID) {
		var ret string
		return ret
	}
	return *o.EncryptionSettingsDefinitionID
}

// GetEncryptionSettingsDefinitionIDOk returns a tuple with the EncryptionSettingsDefinitionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetEncryptionSettingsDefinitionIDOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionSettingsDefinitionID) {
    return nil, false
	}
	return o.EncryptionSettingsDefinitionID, true
}

// HasEncryptionSettingsDefinitionID returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasEncryptionSettingsDefinitionID() bool {
	if o != nil && !isNil(o.EncryptionSettingsDefinitionID) {
		return true
	}

	return false
}

// SetEncryptionSettingsDefinitionID gets a reference to the given string and assigns it to the EncryptionSettingsDefinitionID field.
func (o *BackupRecurringTaskResponse) SetEncryptionSettingsDefinitionID(v string) {
	o.EncryptionSettingsDefinitionID = &v
}

// GetSign returns the Sign field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetSign() bool {
	if o == nil || isNil(o.Sign) {
		var ret bool
		return ret
	}
	return *o.Sign
}

// GetSignOk returns a tuple with the Sign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetSignOk() (*bool, bool) {
	if o == nil || isNil(o.Sign) {
    return nil, false
	}
	return o.Sign, true
}

// HasSign returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasSign() bool {
	if o != nil && !isNil(o.Sign) {
		return true
	}

	return false
}

// SetSign gets a reference to the given bool and assigns it to the Sign field.
func (o *BackupRecurringTaskResponse) SetSign(v bool) {
	o.Sign = &v
}

// GetRetainPreviousFullBackupCount returns the RetainPreviousFullBackupCount field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetRetainPreviousFullBackupCount() int32 {
	if o == nil || isNil(o.RetainPreviousFullBackupCount) {
		var ret int32
		return ret
	}
	return *o.RetainPreviousFullBackupCount
}

// GetRetainPreviousFullBackupCountOk returns a tuple with the RetainPreviousFullBackupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetRetainPreviousFullBackupCountOk() (*int32, bool) {
	if o == nil || isNil(o.RetainPreviousFullBackupCount) {
    return nil, false
	}
	return o.RetainPreviousFullBackupCount, true
}

// HasRetainPreviousFullBackupCount returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasRetainPreviousFullBackupCount() bool {
	if o != nil && !isNil(o.RetainPreviousFullBackupCount) {
		return true
	}

	return false
}

// SetRetainPreviousFullBackupCount gets a reference to the given int32 and assigns it to the RetainPreviousFullBackupCount field.
func (o *BackupRecurringTaskResponse) SetRetainPreviousFullBackupCount(v int32) {
	o.RetainPreviousFullBackupCount = &v
}

// GetRetainPreviousFullBackupAge returns the RetainPreviousFullBackupAge field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetRetainPreviousFullBackupAge() string {
	if o == nil || isNil(o.RetainPreviousFullBackupAge) {
		var ret string
		return ret
	}
	return *o.RetainPreviousFullBackupAge
}

// GetRetainPreviousFullBackupAgeOk returns a tuple with the RetainPreviousFullBackupAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetRetainPreviousFullBackupAgeOk() (*string, bool) {
	if o == nil || isNil(o.RetainPreviousFullBackupAge) {
    return nil, false
	}
	return o.RetainPreviousFullBackupAge, true
}

// HasRetainPreviousFullBackupAge returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasRetainPreviousFullBackupAge() bool {
	if o != nil && !isNil(o.RetainPreviousFullBackupAge) {
		return true
	}

	return false
}

// SetRetainPreviousFullBackupAge gets a reference to the given string and assigns it to the RetainPreviousFullBackupAge field.
func (o *BackupRecurringTaskResponse) SetRetainPreviousFullBackupAge(v string) {
	o.RetainPreviousFullBackupAge = &v
}

// GetMaxMegabytesPerSecond returns the MaxMegabytesPerSecond field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetMaxMegabytesPerSecond() int32 {
	if o == nil || isNil(o.MaxMegabytesPerSecond) {
		var ret int32
		return ret
	}
	return *o.MaxMegabytesPerSecond
}

// GetMaxMegabytesPerSecondOk returns a tuple with the MaxMegabytesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetMaxMegabytesPerSecondOk() (*int32, bool) {
	if o == nil || isNil(o.MaxMegabytesPerSecond) {
    return nil, false
	}
	return o.MaxMegabytesPerSecond, true
}

// HasMaxMegabytesPerSecond returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasMaxMegabytesPerSecond() bool {
	if o != nil && !isNil(o.MaxMegabytesPerSecond) {
		return true
	}

	return false
}

// SetMaxMegabytesPerSecond gets a reference to the given int32 and assigns it to the MaxMegabytesPerSecond field.
func (o *BackupRecurringTaskResponse) SetMaxMegabytesPerSecond(v int32) {
	o.MaxMegabytesPerSecond = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BackupRecurringTaskResponse) SetDescription(v string) {
	o.Description = &v
}

// GetCancelOnTaskDependencyFailure returns the CancelOnTaskDependencyFailure field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetCancelOnTaskDependencyFailure() bool {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
		var ret bool
		return ret
	}
	return *o.CancelOnTaskDependencyFailure
}

// GetCancelOnTaskDependencyFailureOk returns a tuple with the CancelOnTaskDependencyFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetCancelOnTaskDependencyFailureOk() (*bool, bool) {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
    return nil, false
	}
	return o.CancelOnTaskDependencyFailure, true
}

// HasCancelOnTaskDependencyFailure returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasCancelOnTaskDependencyFailure() bool {
	if o != nil && !isNil(o.CancelOnTaskDependencyFailure) {
		return true
	}

	return false
}

// SetCancelOnTaskDependencyFailure gets a reference to the given bool and assigns it to the CancelOnTaskDependencyFailure field.
func (o *BackupRecurringTaskResponse) SetCancelOnTaskDependencyFailure(v bool) {
	o.CancelOnTaskDependencyFailure = &v
}

// GetEmailOnStart returns the EmailOnStart field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetEmailOnStart() []string {
	if o == nil || isNil(o.EmailOnStart) {
		var ret []string
		return ret
	}
	return o.EmailOnStart
}

// GetEmailOnStartOk returns a tuple with the EmailOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetEmailOnStartOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnStart) {
    return nil, false
	}
	return o.EmailOnStart, true
}

// HasEmailOnStart returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasEmailOnStart() bool {
	if o != nil && !isNil(o.EmailOnStart) {
		return true
	}

	return false
}

// SetEmailOnStart gets a reference to the given []string and assigns it to the EmailOnStart field.
func (o *BackupRecurringTaskResponse) SetEmailOnStart(v []string) {
	o.EmailOnStart = v
}

// GetEmailOnSuccess returns the EmailOnSuccess field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetEmailOnSuccess() []string {
	if o == nil || isNil(o.EmailOnSuccess) {
		var ret []string
		return ret
	}
	return o.EmailOnSuccess
}

// GetEmailOnSuccessOk returns a tuple with the EmailOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetEmailOnSuccessOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnSuccess) {
    return nil, false
	}
	return o.EmailOnSuccess, true
}

// HasEmailOnSuccess returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasEmailOnSuccess() bool {
	if o != nil && !isNil(o.EmailOnSuccess) {
		return true
	}

	return false
}

// SetEmailOnSuccess gets a reference to the given []string and assigns it to the EmailOnSuccess field.
func (o *BackupRecurringTaskResponse) SetEmailOnSuccess(v []string) {
	o.EmailOnSuccess = v
}

// GetEmailOnFailure returns the EmailOnFailure field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetEmailOnFailure() []string {
	if o == nil || isNil(o.EmailOnFailure) {
		var ret []string
		return ret
	}
	return o.EmailOnFailure
}

// GetEmailOnFailureOk returns a tuple with the EmailOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetEmailOnFailureOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnFailure) {
    return nil, false
	}
	return o.EmailOnFailure, true
}

// HasEmailOnFailure returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasEmailOnFailure() bool {
	if o != nil && !isNil(o.EmailOnFailure) {
		return true
	}

	return false
}

// SetEmailOnFailure gets a reference to the given []string and assigns it to the EmailOnFailure field.
func (o *BackupRecurringTaskResponse) SetEmailOnFailure(v []string) {
	o.EmailOnFailure = v
}

// GetAlertOnStart returns the AlertOnStart field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetAlertOnStart() bool {
	if o == nil || isNil(o.AlertOnStart) {
		var ret bool
		return ret
	}
	return *o.AlertOnStart
}

// GetAlertOnStartOk returns a tuple with the AlertOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetAlertOnStartOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnStart) {
    return nil, false
	}
	return o.AlertOnStart, true
}

// HasAlertOnStart returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasAlertOnStart() bool {
	if o != nil && !isNil(o.AlertOnStart) {
		return true
	}

	return false
}

// SetAlertOnStart gets a reference to the given bool and assigns it to the AlertOnStart field.
func (o *BackupRecurringTaskResponse) SetAlertOnStart(v bool) {
	o.AlertOnStart = &v
}

// GetAlertOnSuccess returns the AlertOnSuccess field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetAlertOnSuccess() bool {
	if o == nil || isNil(o.AlertOnSuccess) {
		var ret bool
		return ret
	}
	return *o.AlertOnSuccess
}

// GetAlertOnSuccessOk returns a tuple with the AlertOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetAlertOnSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnSuccess) {
    return nil, false
	}
	return o.AlertOnSuccess, true
}

// HasAlertOnSuccess returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasAlertOnSuccess() bool {
	if o != nil && !isNil(o.AlertOnSuccess) {
		return true
	}

	return false
}

// SetAlertOnSuccess gets a reference to the given bool and assigns it to the AlertOnSuccess field.
func (o *BackupRecurringTaskResponse) SetAlertOnSuccess(v bool) {
	o.AlertOnSuccess = &v
}

// GetAlertOnFailure returns the AlertOnFailure field value if set, zero value otherwise.
func (o *BackupRecurringTaskResponse) GetAlertOnFailure() bool {
	if o == nil || isNil(o.AlertOnFailure) {
		var ret bool
		return ret
	}
	return *o.AlertOnFailure
}

// GetAlertOnFailureOk returns a tuple with the AlertOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRecurringTaskResponse) GetAlertOnFailureOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnFailure) {
    return nil, false
	}
	return o.AlertOnFailure, true
}

// HasAlertOnFailure returns a boolean if a field has been set.
func (o *BackupRecurringTaskResponse) HasAlertOnFailure() bool {
	if o != nil && !isNil(o.AlertOnFailure) {
		return true
	}

	return false
}

// SetAlertOnFailure gets a reference to the given bool and assigns it to the AlertOnFailure field.
func (o *BackupRecurringTaskResponse) SetAlertOnFailure(v bool) {
	o.AlertOnFailure = &v
}

func (o BackupRecurringTaskResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["backupDirectory"] = o.BackupDirectory
	}
	if !isNil(o.IncludedBackendID) {
		toSerialize["includedBackendID"] = o.IncludedBackendID
	}
	if !isNil(o.ExcludedBackendID) {
		toSerialize["excludedBackendID"] = o.ExcludedBackendID
	}
	if !isNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !isNil(o.Encrypt) {
		toSerialize["encrypt"] = o.Encrypt
	}
	if !isNil(o.EncryptionSettingsDefinitionID) {
		toSerialize["encryptionSettingsDefinitionID"] = o.EncryptionSettingsDefinitionID
	}
	if !isNil(o.Sign) {
		toSerialize["sign"] = o.Sign
	}
	if !isNil(o.RetainPreviousFullBackupCount) {
		toSerialize["retainPreviousFullBackupCount"] = o.RetainPreviousFullBackupCount
	}
	if !isNil(o.RetainPreviousFullBackupAge) {
		toSerialize["retainPreviousFullBackupAge"] = o.RetainPreviousFullBackupAge
	}
	if !isNil(o.MaxMegabytesPerSecond) {
		toSerialize["maxMegabytesPerSecond"] = o.MaxMegabytesPerSecond
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CancelOnTaskDependencyFailure) {
		toSerialize["cancelOnTaskDependencyFailure"] = o.CancelOnTaskDependencyFailure
	}
	if !isNil(o.EmailOnStart) {
		toSerialize["emailOnStart"] = o.EmailOnStart
	}
	if !isNil(o.EmailOnSuccess) {
		toSerialize["emailOnSuccess"] = o.EmailOnSuccess
	}
	if !isNil(o.EmailOnFailure) {
		toSerialize["emailOnFailure"] = o.EmailOnFailure
	}
	if !isNil(o.AlertOnStart) {
		toSerialize["alertOnStart"] = o.AlertOnStart
	}
	if !isNil(o.AlertOnSuccess) {
		toSerialize["alertOnSuccess"] = o.AlertOnSuccess
	}
	if !isNil(o.AlertOnFailure) {
		toSerialize["alertOnFailure"] = o.AlertOnFailure
	}
	return json.Marshal(toSerialize)
}

type NullableBackupRecurringTaskResponse struct {
	value *BackupRecurringTaskResponse
	isSet bool
}

func (v NullableBackupRecurringTaskResponse) Get() *BackupRecurringTaskResponse {
	return v.value
}

func (v *NullableBackupRecurringTaskResponse) Set(val *BackupRecurringTaskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRecurringTaskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRecurringTaskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRecurringTaskResponse(val *BackupRecurringTaskResponse) *NullableBackupRecurringTaskResponse {
	return &NullableBackupRecurringTaskResponse{value: val, isSet: true}
}

func (v NullableBackupRecurringTaskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRecurringTaskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


