/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumuniqueCharactersPasswordValidatorSchemaUrn the model 'EnumuniqueCharactersPasswordValidatorSchemaUrn'
type EnumuniqueCharactersPasswordValidatorSchemaUrn string

// List of Enumunique-characters-password-validatorSchemaUrn
const (
	ENUMUNIQUECHARACTERSPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORUNIQUE_CHARACTERS EnumuniqueCharactersPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:unique-characters"
)

// All allowed values of EnumuniqueCharactersPasswordValidatorSchemaUrn enum
var AllowedEnumuniqueCharactersPasswordValidatorSchemaUrnEnumValues = []EnumuniqueCharactersPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:unique-characters",
}

func (v *EnumuniqueCharactersPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumuniqueCharactersPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumuniqueCharactersPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumuniqueCharactersPasswordValidatorSchemaUrn", value)
}

// NewEnumuniqueCharactersPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumuniqueCharactersPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumuniqueCharactersPasswordValidatorSchemaUrnFromValue(v string) (*EnumuniqueCharactersPasswordValidatorSchemaUrn, error) {
	ev := EnumuniqueCharactersPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumuniqueCharactersPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumuniqueCharactersPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumuniqueCharactersPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumuniqueCharactersPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumunique-characters-password-validatorSchemaUrn value
func (v EnumuniqueCharactersPasswordValidatorSchemaUrn) Ptr() *EnumuniqueCharactersPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumuniqueCharactersPasswordValidatorSchemaUrn struct {
	value *EnumuniqueCharactersPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumuniqueCharactersPasswordValidatorSchemaUrn) Get() *EnumuniqueCharactersPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumuniqueCharactersPasswordValidatorSchemaUrn) Set(val *EnumuniqueCharactersPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumuniqueCharactersPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumuniqueCharactersPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumuniqueCharactersPasswordValidatorSchemaUrn(val *EnumuniqueCharactersPasswordValidatorSchemaUrn) *NullableEnumuniqueCharactersPasswordValidatorSchemaUrn {
	return &NullableEnumuniqueCharactersPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumuniqueCharactersPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumuniqueCharactersPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
