/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumblowfishPasswordStorageSchemeSchemaUrn the model 'EnumblowfishPasswordStorageSchemeSchemaUrn'
type EnumblowfishPasswordStorageSchemeSchemaUrn string

// List of Enumblowfish-password-storage-schemeSchemaUrn
const (
	ENUMBLOWFISHPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEBLOWFISH EnumblowfishPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:blowfish"
)

// All allowed values of EnumblowfishPasswordStorageSchemeSchemaUrn enum
var AllowedEnumblowfishPasswordStorageSchemeSchemaUrnEnumValues = []EnumblowfishPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:blowfish",
}

func (v *EnumblowfishPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumblowfishPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumblowfishPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumblowfishPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumblowfishPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumblowfishPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumblowfishPasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumblowfishPasswordStorageSchemeSchemaUrn, error) {
	ev := EnumblowfishPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumblowfishPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumblowfishPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumblowfishPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumblowfishPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumblowfish-password-storage-schemeSchemaUrn value
func (v EnumblowfishPasswordStorageSchemeSchemaUrn) Ptr() *EnumblowfishPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumblowfishPasswordStorageSchemeSchemaUrn struct {
	value *EnumblowfishPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumblowfishPasswordStorageSchemeSchemaUrn) Get() *EnumblowfishPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumblowfishPasswordStorageSchemeSchemaUrn) Set(val *EnumblowfishPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumblowfishPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumblowfishPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumblowfishPasswordStorageSchemeSchemaUrn(val *EnumblowfishPasswordStorageSchemeSchemaUrn) *NullableEnumblowfishPasswordStorageSchemeSchemaUrn {
	return &NullableEnumblowfishPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumblowfishPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumblowfishPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
