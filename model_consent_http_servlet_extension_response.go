/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConsentHttpServletExtensionResponse struct for ConsentHttpServletExtensionResponse
type ConsentHttpServletExtensionResponse struct {
	Schemas []EnumconsentHttpServletExtensionSchemaUrn `json:"schemas"`
	// Enables HTTP bearer token authentication.
	BearerTokenAuthEnabled *bool `json:"bearerTokenAuthEnabled,omitempty"`
	// Enables HTTP Basic authentication, using a username and password. The Identity Mapper specified by the identity-mapper property will be used to map the username to a DN.
	BasicAuthEnabled *bool `json:"basicAuthEnabled,omitempty"`
	// Specifies the Identity Mapper that is to be used for associating basic authentication usernames with DNs.
	IdentityMapper *string `json:"identityMapper,omitempty"`
	AccessTokenValidator []string `json:"accessTokenValidator,omitempty"`
	// A description for this HTTP Servlet Extension
	Description *string `json:"description,omitempty"`
	// The cross-origin request policy to use for the HTTP Servlet Extension.
	CrossOriginPolicy *string `json:"crossOriginPolicy,omitempty"`
	ResponseHeader []string `json:"responseHeader,omitempty"`
	// Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".
	CorrelationIDResponseHeader *string `json:"correlationIDResponseHeader,omitempty"`
}

// NewConsentHttpServletExtensionResponse instantiates a new ConsentHttpServletExtensionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentHttpServletExtensionResponse(schemas []EnumconsentHttpServletExtensionSchemaUrn) *ConsentHttpServletExtensionResponse {
	this := ConsentHttpServletExtensionResponse{}
	this.Schemas = schemas
	return &this
}

// NewConsentHttpServletExtensionResponseWithDefaults instantiates a new ConsentHttpServletExtensionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentHttpServletExtensionResponseWithDefaults() *ConsentHttpServletExtensionResponse {
	this := ConsentHttpServletExtensionResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *ConsentHttpServletExtensionResponse) GetSchemas() []EnumconsentHttpServletExtensionSchemaUrn {
	if o == nil {
		var ret []EnumconsentHttpServletExtensionSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetSchemasOk() ([]EnumconsentHttpServletExtensionSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ConsentHttpServletExtensionResponse) SetSchemas(v []EnumconsentHttpServletExtensionSchemaUrn) {
	o.Schemas = v
}

// GetBearerTokenAuthEnabled returns the BearerTokenAuthEnabled field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetBearerTokenAuthEnabled() bool {
	if o == nil || isNil(o.BearerTokenAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.BearerTokenAuthEnabled
}

// GetBearerTokenAuthEnabledOk returns a tuple with the BearerTokenAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetBearerTokenAuthEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.BearerTokenAuthEnabled) {
    return nil, false
	}
	return o.BearerTokenAuthEnabled, true
}

// HasBearerTokenAuthEnabled returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasBearerTokenAuthEnabled() bool {
	if o != nil && !isNil(o.BearerTokenAuthEnabled) {
		return true
	}

	return false
}

// SetBearerTokenAuthEnabled gets a reference to the given bool and assigns it to the BearerTokenAuthEnabled field.
func (o *ConsentHttpServletExtensionResponse) SetBearerTokenAuthEnabled(v bool) {
	o.BearerTokenAuthEnabled = &v
}

// GetBasicAuthEnabled returns the BasicAuthEnabled field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetBasicAuthEnabled() bool {
	if o == nil || isNil(o.BasicAuthEnabled) {
		var ret bool
		return ret
	}
	return *o.BasicAuthEnabled
}

// GetBasicAuthEnabledOk returns a tuple with the BasicAuthEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetBasicAuthEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.BasicAuthEnabled) {
    return nil, false
	}
	return o.BasicAuthEnabled, true
}

// HasBasicAuthEnabled returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasBasicAuthEnabled() bool {
	if o != nil && !isNil(o.BasicAuthEnabled) {
		return true
	}

	return false
}

// SetBasicAuthEnabled gets a reference to the given bool and assigns it to the BasicAuthEnabled field.
func (o *ConsentHttpServletExtensionResponse) SetBasicAuthEnabled(v bool) {
	o.BasicAuthEnabled = &v
}

// GetIdentityMapper returns the IdentityMapper field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetIdentityMapper() string {
	if o == nil || isNil(o.IdentityMapper) {
		var ret string
		return ret
	}
	return *o.IdentityMapper
}

// GetIdentityMapperOk returns a tuple with the IdentityMapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetIdentityMapperOk() (*string, bool) {
	if o == nil || isNil(o.IdentityMapper) {
    return nil, false
	}
	return o.IdentityMapper, true
}

// HasIdentityMapper returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasIdentityMapper() bool {
	if o != nil && !isNil(o.IdentityMapper) {
		return true
	}

	return false
}

// SetIdentityMapper gets a reference to the given string and assigns it to the IdentityMapper field.
func (o *ConsentHttpServletExtensionResponse) SetIdentityMapper(v string) {
	o.IdentityMapper = &v
}

// GetAccessTokenValidator returns the AccessTokenValidator field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetAccessTokenValidator() []string {
	if o == nil || isNil(o.AccessTokenValidator) {
		var ret []string
		return ret
	}
	return o.AccessTokenValidator
}

// GetAccessTokenValidatorOk returns a tuple with the AccessTokenValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetAccessTokenValidatorOk() ([]string, bool) {
	if o == nil || isNil(o.AccessTokenValidator) {
    return nil, false
	}
	return o.AccessTokenValidator, true
}

// HasAccessTokenValidator returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasAccessTokenValidator() bool {
	if o != nil && !isNil(o.AccessTokenValidator) {
		return true
	}

	return false
}

// SetAccessTokenValidator gets a reference to the given []string and assigns it to the AccessTokenValidator field.
func (o *ConsentHttpServletExtensionResponse) SetAccessTokenValidator(v []string) {
	o.AccessTokenValidator = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConsentHttpServletExtensionResponse) SetDescription(v string) {
	o.Description = &v
}

// GetCrossOriginPolicy returns the CrossOriginPolicy field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetCrossOriginPolicy() string {
	if o == nil || isNil(o.CrossOriginPolicy) {
		var ret string
		return ret
	}
	return *o.CrossOriginPolicy
}

// GetCrossOriginPolicyOk returns a tuple with the CrossOriginPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetCrossOriginPolicyOk() (*string, bool) {
	if o == nil || isNil(o.CrossOriginPolicy) {
    return nil, false
	}
	return o.CrossOriginPolicy, true
}

// HasCrossOriginPolicy returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasCrossOriginPolicy() bool {
	if o != nil && !isNil(o.CrossOriginPolicy) {
		return true
	}

	return false
}

// SetCrossOriginPolicy gets a reference to the given string and assigns it to the CrossOriginPolicy field.
func (o *ConsentHttpServletExtensionResponse) SetCrossOriginPolicy(v string) {
	o.CrossOriginPolicy = &v
}

// GetResponseHeader returns the ResponseHeader field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetResponseHeader() []string {
	if o == nil || isNil(o.ResponseHeader) {
		var ret []string
		return ret
	}
	return o.ResponseHeader
}

// GetResponseHeaderOk returns a tuple with the ResponseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetResponseHeaderOk() ([]string, bool) {
	if o == nil || isNil(o.ResponseHeader) {
    return nil, false
	}
	return o.ResponseHeader, true
}

// HasResponseHeader returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasResponseHeader() bool {
	if o != nil && !isNil(o.ResponseHeader) {
		return true
	}

	return false
}

// SetResponseHeader gets a reference to the given []string and assigns it to the ResponseHeader field.
func (o *ConsentHttpServletExtensionResponse) SetResponseHeader(v []string) {
	o.ResponseHeader = v
}

// GetCorrelationIDResponseHeader returns the CorrelationIDResponseHeader field value if set, zero value otherwise.
func (o *ConsentHttpServletExtensionResponse) GetCorrelationIDResponseHeader() string {
	if o == nil || isNil(o.CorrelationIDResponseHeader) {
		var ret string
		return ret
	}
	return *o.CorrelationIDResponseHeader
}

// GetCorrelationIDResponseHeaderOk returns a tuple with the CorrelationIDResponseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentHttpServletExtensionResponse) GetCorrelationIDResponseHeaderOk() (*string, bool) {
	if o == nil || isNil(o.CorrelationIDResponseHeader) {
    return nil, false
	}
	return o.CorrelationIDResponseHeader, true
}

// HasCorrelationIDResponseHeader returns a boolean if a field has been set.
func (o *ConsentHttpServletExtensionResponse) HasCorrelationIDResponseHeader() bool {
	if o != nil && !isNil(o.CorrelationIDResponseHeader) {
		return true
	}

	return false
}

// SetCorrelationIDResponseHeader gets a reference to the given string and assigns it to the CorrelationIDResponseHeader field.
func (o *ConsentHttpServletExtensionResponse) SetCorrelationIDResponseHeader(v string) {
	o.CorrelationIDResponseHeader = &v
}

func (o ConsentHttpServletExtensionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.BearerTokenAuthEnabled) {
		toSerialize["bearerTokenAuthEnabled"] = o.BearerTokenAuthEnabled
	}
	if !isNil(o.BasicAuthEnabled) {
		toSerialize["basicAuthEnabled"] = o.BasicAuthEnabled
	}
	if !isNil(o.IdentityMapper) {
		toSerialize["identityMapper"] = o.IdentityMapper
	}
	if !isNil(o.AccessTokenValidator) {
		toSerialize["accessTokenValidator"] = o.AccessTokenValidator
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CrossOriginPolicy) {
		toSerialize["crossOriginPolicy"] = o.CrossOriginPolicy
	}
	if !isNil(o.ResponseHeader) {
		toSerialize["responseHeader"] = o.ResponseHeader
	}
	if !isNil(o.CorrelationIDResponseHeader) {
		toSerialize["correlationIDResponseHeader"] = o.CorrelationIDResponseHeader
	}
	return json.Marshal(toSerialize)
}

type NullableConsentHttpServletExtensionResponse struct {
	value *ConsentHttpServletExtensionResponse
	isSet bool
}

func (v NullableConsentHttpServletExtensionResponse) Get() *ConsentHttpServletExtensionResponse {
	return v.value
}

func (v *NullableConsentHttpServletExtensionResponse) Set(val *ConsentHttpServletExtensionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentHttpServletExtensionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentHttpServletExtensionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentHttpServletExtensionResponse(val *ConsentHttpServletExtensionResponse) *NullableConsentHttpServletExtensionResponse {
	return &NullableConsentHttpServletExtensionResponse{value: val, isSet: true}
}

func (v NullableConsentHttpServletExtensionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentHttpServletExtensionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


