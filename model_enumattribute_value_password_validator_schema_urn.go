/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumattributeValuePasswordValidatorSchemaUrn the model 'EnumattributeValuePasswordValidatorSchemaUrn'
type EnumattributeValuePasswordValidatorSchemaUrn string

// List of Enumattribute-value-password-validatorSchemaUrn
const (
	ENUMATTRIBUTEVALUEPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORATTRIBUTE_VALUE EnumattributeValuePasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:attribute-value"
)

// All allowed values of EnumattributeValuePasswordValidatorSchemaUrn enum
var AllowedEnumattributeValuePasswordValidatorSchemaUrnEnumValues = []EnumattributeValuePasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:attribute-value",
}

func (v *EnumattributeValuePasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumattributeValuePasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumattributeValuePasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumattributeValuePasswordValidatorSchemaUrn", value)
}

// NewEnumattributeValuePasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumattributeValuePasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumattributeValuePasswordValidatorSchemaUrnFromValue(v string) (*EnumattributeValuePasswordValidatorSchemaUrn, error) {
	ev := EnumattributeValuePasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumattributeValuePasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumattributeValuePasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumattributeValuePasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumattributeValuePasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumattribute-value-password-validatorSchemaUrn value
func (v EnumattributeValuePasswordValidatorSchemaUrn) Ptr() *EnumattributeValuePasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumattributeValuePasswordValidatorSchemaUrn struct {
	value *EnumattributeValuePasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumattributeValuePasswordValidatorSchemaUrn) Get() *EnumattributeValuePasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumattributeValuePasswordValidatorSchemaUrn) Set(val *EnumattributeValuePasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumattributeValuePasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumattributeValuePasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumattributeValuePasswordValidatorSchemaUrn(val *EnumattributeValuePasswordValidatorSchemaUrn) *NullableEnumattributeValuePasswordValidatorSchemaUrn {
	return &NullableEnumattributeValuePasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumattributeValuePasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumattributeValuePasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

