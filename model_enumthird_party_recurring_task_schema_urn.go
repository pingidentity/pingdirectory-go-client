/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyRecurringTaskSchemaUrn the model 'EnumthirdPartyRecurringTaskSchemaUrn'
type EnumthirdPartyRecurringTaskSchemaUrn string

// List of Enumthird-party-recurring-taskSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0RECURRING_TASKTHIRD_PARTY EnumthirdPartyRecurringTaskSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:recurring-task:third-party"
)

// All allowed values of EnumthirdPartyRecurringTaskSchemaUrn enum
var AllowedEnumthirdPartyRecurringTaskSchemaUrnEnumValues = []EnumthirdPartyRecurringTaskSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:recurring-task:third-party",
}

func (v *EnumthirdPartyRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyRecurringTaskSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyRecurringTaskSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyRecurringTaskSchemaUrn", value)
}

// NewEnumthirdPartyRecurringTaskSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyRecurringTaskSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyRecurringTaskSchemaUrnFromValue(v string) (*EnumthirdPartyRecurringTaskSchemaUrn, error) {
	ev := EnumthirdPartyRecurringTaskSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyRecurringTaskSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyRecurringTaskSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyRecurringTaskSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyRecurringTaskSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-recurring-taskSchemaUrn value
func (v EnumthirdPartyRecurringTaskSchemaUrn) Ptr() *EnumthirdPartyRecurringTaskSchemaUrn {
	return &v
}

type NullableEnumthirdPartyRecurringTaskSchemaUrn struct {
	value *EnumthirdPartyRecurringTaskSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyRecurringTaskSchemaUrn) Get() *EnumthirdPartyRecurringTaskSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyRecurringTaskSchemaUrn) Set(val *EnumthirdPartyRecurringTaskSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyRecurringTaskSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyRecurringTaskSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyRecurringTaskSchemaUrn(val *EnumthirdPartyRecurringTaskSchemaUrn) *NullableEnumthirdPartyRecurringTaskSchemaUrn {
	return &NullableEnumthirdPartyRecurringTaskSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyRecurringTaskSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

