/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SoftDeletePolicyShared struct for SoftDeletePolicyShared
type SoftDeletePolicyShared struct {
	Schemas []EnumsoftDeletePolicySchemaUrn `json:"schemas,omitempty"`
	// A description for this Soft Delete Policy
	Description *string `json:"description,omitempty"`
	// Connection criteria used to automatically identify a delete operation for processing as a soft delete request.
	AutoSoftDeleteConnectionCriteria *string `json:"autoSoftDeleteConnectionCriteria,omitempty"`
	// Request criteria used to automatically identify a delete operation for processing as a soft delete request.
	AutoSoftDeleteRequestCriteria *string `json:"autoSoftDeleteRequestCriteria,omitempty"`
	// Specifies the maximum length of time that soft delete entries are retained before they are eligible to purged automatically.
	SoftDeleteRetentionTime *string `json:"softDeleteRetentionTime,omitempty"`
	// Specifies the number of soft deleted entries to retain before the oldest entries are purged.
	SoftDeleteRetainNumberOfEntries *int32 `json:"softDeleteRetainNumberOfEntries,omitempty"`
}

// NewSoftDeletePolicyShared instantiates a new SoftDeletePolicyShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftDeletePolicyShared() *SoftDeletePolicyShared {
	this := SoftDeletePolicyShared{}
	return &this
}

// NewSoftDeletePolicySharedWithDefaults instantiates a new SoftDeletePolicyShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftDeletePolicySharedWithDefaults() *SoftDeletePolicyShared {
	this := SoftDeletePolicyShared{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *SoftDeletePolicyShared) GetSchemas() []EnumsoftDeletePolicySchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumsoftDeletePolicySchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftDeletePolicyShared) GetSchemasOk() ([]EnumsoftDeletePolicySchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *SoftDeletePolicyShared) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumsoftDeletePolicySchemaUrn and assigns it to the Schemas field.
func (o *SoftDeletePolicyShared) SetSchemas(v []EnumsoftDeletePolicySchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SoftDeletePolicyShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftDeletePolicyShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SoftDeletePolicyShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SoftDeletePolicyShared) SetDescription(v string) {
	o.Description = &v
}

// GetAutoSoftDeleteConnectionCriteria returns the AutoSoftDeleteConnectionCriteria field value if set, zero value otherwise.
func (o *SoftDeletePolicyShared) GetAutoSoftDeleteConnectionCriteria() string {
	if o == nil || isNil(o.AutoSoftDeleteConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.AutoSoftDeleteConnectionCriteria
}

// GetAutoSoftDeleteConnectionCriteriaOk returns a tuple with the AutoSoftDeleteConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftDeletePolicyShared) GetAutoSoftDeleteConnectionCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.AutoSoftDeleteConnectionCriteria) {
    return nil, false
	}
	return o.AutoSoftDeleteConnectionCriteria, true
}

// HasAutoSoftDeleteConnectionCriteria returns a boolean if a field has been set.
func (o *SoftDeletePolicyShared) HasAutoSoftDeleteConnectionCriteria() bool {
	if o != nil && !isNil(o.AutoSoftDeleteConnectionCriteria) {
		return true
	}

	return false
}

// SetAutoSoftDeleteConnectionCriteria gets a reference to the given string and assigns it to the AutoSoftDeleteConnectionCriteria field.
func (o *SoftDeletePolicyShared) SetAutoSoftDeleteConnectionCriteria(v string) {
	o.AutoSoftDeleteConnectionCriteria = &v
}

// GetAutoSoftDeleteRequestCriteria returns the AutoSoftDeleteRequestCriteria field value if set, zero value otherwise.
func (o *SoftDeletePolicyShared) GetAutoSoftDeleteRequestCriteria() string {
	if o == nil || isNil(o.AutoSoftDeleteRequestCriteria) {
		var ret string
		return ret
	}
	return *o.AutoSoftDeleteRequestCriteria
}

// GetAutoSoftDeleteRequestCriteriaOk returns a tuple with the AutoSoftDeleteRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftDeletePolicyShared) GetAutoSoftDeleteRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.AutoSoftDeleteRequestCriteria) {
    return nil, false
	}
	return o.AutoSoftDeleteRequestCriteria, true
}

// HasAutoSoftDeleteRequestCriteria returns a boolean if a field has been set.
func (o *SoftDeletePolicyShared) HasAutoSoftDeleteRequestCriteria() bool {
	if o != nil && !isNil(o.AutoSoftDeleteRequestCriteria) {
		return true
	}

	return false
}

// SetAutoSoftDeleteRequestCriteria gets a reference to the given string and assigns it to the AutoSoftDeleteRequestCriteria field.
func (o *SoftDeletePolicyShared) SetAutoSoftDeleteRequestCriteria(v string) {
	o.AutoSoftDeleteRequestCriteria = &v
}

// GetSoftDeleteRetentionTime returns the SoftDeleteRetentionTime field value if set, zero value otherwise.
func (o *SoftDeletePolicyShared) GetSoftDeleteRetentionTime() string {
	if o == nil || isNil(o.SoftDeleteRetentionTime) {
		var ret string
		return ret
	}
	return *o.SoftDeleteRetentionTime
}

// GetSoftDeleteRetentionTimeOk returns a tuple with the SoftDeleteRetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftDeletePolicyShared) GetSoftDeleteRetentionTimeOk() (*string, bool) {
	if o == nil || isNil(o.SoftDeleteRetentionTime) {
    return nil, false
	}
	return o.SoftDeleteRetentionTime, true
}

// HasSoftDeleteRetentionTime returns a boolean if a field has been set.
func (o *SoftDeletePolicyShared) HasSoftDeleteRetentionTime() bool {
	if o != nil && !isNil(o.SoftDeleteRetentionTime) {
		return true
	}

	return false
}

// SetSoftDeleteRetentionTime gets a reference to the given string and assigns it to the SoftDeleteRetentionTime field.
func (o *SoftDeletePolicyShared) SetSoftDeleteRetentionTime(v string) {
	o.SoftDeleteRetentionTime = &v
}

// GetSoftDeleteRetainNumberOfEntries returns the SoftDeleteRetainNumberOfEntries field value if set, zero value otherwise.
func (o *SoftDeletePolicyShared) GetSoftDeleteRetainNumberOfEntries() int32 {
	if o == nil || isNil(o.SoftDeleteRetainNumberOfEntries) {
		var ret int32
		return ret
	}
	return *o.SoftDeleteRetainNumberOfEntries
}

// GetSoftDeleteRetainNumberOfEntriesOk returns a tuple with the SoftDeleteRetainNumberOfEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftDeletePolicyShared) GetSoftDeleteRetainNumberOfEntriesOk() (*int32, bool) {
	if o == nil || isNil(o.SoftDeleteRetainNumberOfEntries) {
    return nil, false
	}
	return o.SoftDeleteRetainNumberOfEntries, true
}

// HasSoftDeleteRetainNumberOfEntries returns a boolean if a field has been set.
func (o *SoftDeletePolicyShared) HasSoftDeleteRetainNumberOfEntries() bool {
	if o != nil && !isNil(o.SoftDeleteRetainNumberOfEntries) {
		return true
	}

	return false
}

// SetSoftDeleteRetainNumberOfEntries gets a reference to the given int32 and assigns it to the SoftDeleteRetainNumberOfEntries field.
func (o *SoftDeletePolicyShared) SetSoftDeleteRetainNumberOfEntries(v int32) {
	o.SoftDeleteRetainNumberOfEntries = &v
}

func (o SoftDeletePolicyShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.AutoSoftDeleteConnectionCriteria) {
		toSerialize["autoSoftDeleteConnectionCriteria"] = o.AutoSoftDeleteConnectionCriteria
	}
	if !isNil(o.AutoSoftDeleteRequestCriteria) {
		toSerialize["autoSoftDeleteRequestCriteria"] = o.AutoSoftDeleteRequestCriteria
	}
	if !isNil(o.SoftDeleteRetentionTime) {
		toSerialize["softDeleteRetentionTime"] = o.SoftDeleteRetentionTime
	}
	if !isNil(o.SoftDeleteRetainNumberOfEntries) {
		toSerialize["softDeleteRetainNumberOfEntries"] = o.SoftDeleteRetainNumberOfEntries
	}
	return json.Marshal(toSerialize)
}

type NullableSoftDeletePolicyShared struct {
	value *SoftDeletePolicyShared
	isSet bool
}

func (v NullableSoftDeletePolicyShared) Get() *SoftDeletePolicyShared {
	return v.value
}

func (v *NullableSoftDeletePolicyShared) Set(val *SoftDeletePolicyShared) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftDeletePolicyShared) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftDeletePolicyShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftDeletePolicyShared(val *SoftDeletePolicyShared) *NullableSoftDeletePolicyShared {
	return &NullableSoftDeletePolicyShared{value: val, isSet: true}
}

func (v NullableSoftDeletePolicyShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftDeletePolicyShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


