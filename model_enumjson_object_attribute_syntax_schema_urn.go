/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonObjectAttributeSyntaxSchemaUrn the model 'EnumjsonObjectAttributeSyntaxSchemaUrn'
type EnumjsonObjectAttributeSyntaxSchemaUrn string

// List of Enumjson-object-attribute-syntaxSchemaUrn
const (
	ENUMJSONOBJECTATTRIBUTESYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ATTRIBUTE_SYNTAXJSON_OBJECT EnumjsonObjectAttributeSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:attribute-syntax:json-object"
)

// All allowed values of EnumjsonObjectAttributeSyntaxSchemaUrn enum
var AllowedEnumjsonObjectAttributeSyntaxSchemaUrnEnumValues = []EnumjsonObjectAttributeSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:attribute-syntax:json-object",
}

func (v *EnumjsonObjectAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonObjectAttributeSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumjsonObjectAttributeSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonObjectAttributeSyntaxSchemaUrn", value)
}

// NewEnumjsonObjectAttributeSyntaxSchemaUrnFromValue returns a pointer to a valid EnumjsonObjectAttributeSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonObjectAttributeSyntaxSchemaUrnFromValue(v string) (*EnumjsonObjectAttributeSyntaxSchemaUrn, error) {
	ev := EnumjsonObjectAttributeSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonObjectAttributeSyntaxSchemaUrn: valid values are %v", v, AllowedEnumjsonObjectAttributeSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonObjectAttributeSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjsonObjectAttributeSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-object-attribute-syntaxSchemaUrn value
func (v EnumjsonObjectAttributeSyntaxSchemaUrn) Ptr() *EnumjsonObjectAttributeSyntaxSchemaUrn {
	return &v
}

type NullableEnumjsonObjectAttributeSyntaxSchemaUrn struct {
	value *EnumjsonObjectAttributeSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumjsonObjectAttributeSyntaxSchemaUrn) Get() *EnumjsonObjectAttributeSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumjsonObjectAttributeSyntaxSchemaUrn) Set(val *EnumjsonObjectAttributeSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonObjectAttributeSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonObjectAttributeSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonObjectAttributeSyntaxSchemaUrn(val *EnumjsonObjectAttributeSyntaxSchemaUrn) *NullableEnumjsonObjectAttributeSyntaxSchemaUrn {
	return &NullableEnumjsonObjectAttributeSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjsonObjectAttributeSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonObjectAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
