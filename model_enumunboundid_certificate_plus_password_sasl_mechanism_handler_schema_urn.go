/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn the model 'EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn'
type EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn string

// List of Enumunboundid-certificate-plus-password-sasl-mechanism-handlerSchemaUrn
const (
	ENUMUNBOUNDIDCERTIFICATEPLUSPASSWORDSASLMECHANISMHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SASL_MECHANISM_HANDLERUNBOUNDID_CERTIFICATE_PLUS_PASSWORD EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:sasl-mechanism-handler:unboundid-certificate-plus-password"
)

// All allowed values of EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn enum
var AllowedEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrnEnumValues = []EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:sasl-mechanism-handler:unboundid-certificate-plus-password",
}

func (v *EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn", value)
}

// NewEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrnFromValue returns a pointer to a valid EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrnFromValue(v string) (*EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn, error) {
	ev := EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn: valid values are %v", v, AllowedEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumunboundid-certificate-plus-password-sasl-mechanism-handlerSchemaUrn value
func (v EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) Ptr() *EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn {
	return &v
}

type NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn struct {
	value *EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) Get() *EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) Set(val *EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn(val *EnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) *NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn {
	return &NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumunboundidCertificatePlusPasswordSaslMechanismHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
