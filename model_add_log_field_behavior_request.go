/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddLogFieldBehaviorRequest - struct for AddLogFieldBehaviorRequest
type AddLogFieldBehaviorRequest struct {
	AddJsonFormattedAccessLogFieldBehaviorRequest *AddJsonFormattedAccessLogFieldBehaviorRequest
	AddTextAccessLogFieldBehaviorRequest          *AddTextAccessLogFieldBehaviorRequest
}

// AddJsonFormattedAccessLogFieldBehaviorRequestAsAddLogFieldBehaviorRequest is a convenience function that returns AddJsonFormattedAccessLogFieldBehaviorRequest wrapped in AddLogFieldBehaviorRequest
func AddJsonFormattedAccessLogFieldBehaviorRequestAsAddLogFieldBehaviorRequest(v *AddJsonFormattedAccessLogFieldBehaviorRequest) AddLogFieldBehaviorRequest {
	return AddLogFieldBehaviorRequest{
		AddJsonFormattedAccessLogFieldBehaviorRequest: v,
	}
}

// AddTextAccessLogFieldBehaviorRequestAsAddLogFieldBehaviorRequest is a convenience function that returns AddTextAccessLogFieldBehaviorRequest wrapped in AddLogFieldBehaviorRequest
func AddTextAccessLogFieldBehaviorRequestAsAddLogFieldBehaviorRequest(v *AddTextAccessLogFieldBehaviorRequest) AddLogFieldBehaviorRequest {
	return AddLogFieldBehaviorRequest{
		AddTextAccessLogFieldBehaviorRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogFieldBehaviorRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddJsonFormattedAccessLogFieldBehaviorRequest
	err = newStrictDecoder(data).Decode(&dst.AddJsonFormattedAccessLogFieldBehaviorRequest)
	if err == nil {
		jsonAddJsonFormattedAccessLogFieldBehaviorRequest, _ := json.Marshal(dst.AddJsonFormattedAccessLogFieldBehaviorRequest)
		if string(jsonAddJsonFormattedAccessLogFieldBehaviorRequest) == "{}" { // empty struct
			dst.AddJsonFormattedAccessLogFieldBehaviorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddJsonFormattedAccessLogFieldBehaviorRequest = nil
	}

	// try to unmarshal data into AddTextAccessLogFieldBehaviorRequest
	err = newStrictDecoder(data).Decode(&dst.AddTextAccessLogFieldBehaviorRequest)
	if err == nil {
		jsonAddTextAccessLogFieldBehaviorRequest, _ := json.Marshal(dst.AddTextAccessLogFieldBehaviorRequest)
		if string(jsonAddTextAccessLogFieldBehaviorRequest) == "{}" { // empty struct
			dst.AddTextAccessLogFieldBehaviorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddTextAccessLogFieldBehaviorRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddJsonFormattedAccessLogFieldBehaviorRequest = nil
		dst.AddTextAccessLogFieldBehaviorRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogFieldBehaviorRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogFieldBehaviorRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogFieldBehaviorRequest) MarshalJSON() ([]byte, error) {
	if src.AddJsonFormattedAccessLogFieldBehaviorRequest != nil {
		return json.Marshal(&src.AddJsonFormattedAccessLogFieldBehaviorRequest)
	}

	if src.AddTextAccessLogFieldBehaviorRequest != nil {
		return json.Marshal(&src.AddTextAccessLogFieldBehaviorRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogFieldBehaviorRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddJsonFormattedAccessLogFieldBehaviorRequest != nil {
		return obj.AddJsonFormattedAccessLogFieldBehaviorRequest
	}

	if obj.AddTextAccessLogFieldBehaviorRequest != nil {
		return obj.AddTextAccessLogFieldBehaviorRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddLogFieldBehaviorRequest struct {
	value *AddLogFieldBehaviorRequest
	isSet bool
}

func (v NullableAddLogFieldBehaviorRequest) Get() *AddLogFieldBehaviorRequest {
	return v.value
}

func (v *NullableAddLogFieldBehaviorRequest) Set(val *AddLogFieldBehaviorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogFieldBehaviorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogFieldBehaviorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogFieldBehaviorRequest(val *AddLogFieldBehaviorRequest) *NullableAddLogFieldBehaviorRequest {
	return &NullableAddLogFieldBehaviorRequest{value: val, isSet: true}
}

func (v NullableAddLogFieldBehaviorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogFieldBehaviorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
