/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginMultipleAttributeBehaviorProp The behavior to exhibit if multiple attribute types are specified.
type EnumpluginMultipleAttributeBehaviorProp string

// List of Enumplugin-multipleAttributeBehaviorProp
const (
	ENUMPLUGINMULTIPLEATTRIBUTEBEHAVIORPROP_WITHIN_EACH_ATTRIBUTE                         EnumpluginMultipleAttributeBehaviorProp = "unique-within-each-attribute"
	ENUMPLUGINMULTIPLEATTRIBUTEBEHAVIORPROP_ACROSS_ALL_ATTRIBUTES_INCLUDING_IN_SAME_ENTRY EnumpluginMultipleAttributeBehaviorProp = "unique-across-all-attributes-including-in-same-entry"
	ENUMPLUGINMULTIPLEATTRIBUTEBEHAVIORPROP_ACROSS_ALL_ATTRIBUTES_EXCEPT_IN_SAME_ENTRY    EnumpluginMultipleAttributeBehaviorProp = "unique-across-all-attributes-except-in-same-entry"
)

// All allowed values of EnumpluginMultipleAttributeBehaviorProp enum
var AllowedEnumpluginMultipleAttributeBehaviorPropEnumValues = []EnumpluginMultipleAttributeBehaviorProp{
	"unique-within-each-attribute",
	"unique-across-all-attributes-including-in-same-entry",
	"unique-across-all-attributes-except-in-same-entry",
}

func (v *EnumpluginMultipleAttributeBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginMultipleAttributeBehaviorProp(value)
	for _, existing := range AllowedEnumpluginMultipleAttributeBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginMultipleAttributeBehaviorProp", value)
}

// NewEnumpluginMultipleAttributeBehaviorPropFromValue returns a pointer to a valid EnumpluginMultipleAttributeBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginMultipleAttributeBehaviorPropFromValue(v string) (*EnumpluginMultipleAttributeBehaviorProp, error) {
	ev := EnumpluginMultipleAttributeBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginMultipleAttributeBehaviorProp: valid values are %v", v, AllowedEnumpluginMultipleAttributeBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginMultipleAttributeBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginMultipleAttributeBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-multipleAttributeBehaviorProp value
func (v EnumpluginMultipleAttributeBehaviorProp) Ptr() *EnumpluginMultipleAttributeBehaviorProp {
	return &v
}

type NullableEnumpluginMultipleAttributeBehaviorProp struct {
	value *EnumpluginMultipleAttributeBehaviorProp
	isSet bool
}

func (v NullableEnumpluginMultipleAttributeBehaviorProp) Get() *EnumpluginMultipleAttributeBehaviorProp {
	return v.value
}

func (v *NullableEnumpluginMultipleAttributeBehaviorProp) Set(val *EnumpluginMultipleAttributeBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginMultipleAttributeBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginMultipleAttributeBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginMultipleAttributeBehaviorProp(val *EnumpluginMultipleAttributeBehaviorProp) *NullableEnumpluginMultipleAttributeBehaviorProp {
	return &NullableEnumpluginMultipleAttributeBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpluginMultipleAttributeBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginMultipleAttributeBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
