/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumfreeDiskSpaceLogRetentionPolicySchemaUrn the model 'EnumfreeDiskSpaceLogRetentionPolicySchemaUrn'
type EnumfreeDiskSpaceLogRetentionPolicySchemaUrn string

// List of Enumfree-disk-space-log-retention-policySchemaUrn
const (
	ENUMFREEDISKSPACELOGRETENTIONPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_RETENTION_POLICYFREE_DISK_SPACE EnumfreeDiskSpaceLogRetentionPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-retention-policy:free-disk-space"
)

// All allowed values of EnumfreeDiskSpaceLogRetentionPolicySchemaUrn enum
var AllowedEnumfreeDiskSpaceLogRetentionPolicySchemaUrnEnumValues = []EnumfreeDiskSpaceLogRetentionPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-retention-policy:free-disk-space",
}

func (v *EnumfreeDiskSpaceLogRetentionPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumfreeDiskSpaceLogRetentionPolicySchemaUrn(value)
	for _, existing := range AllowedEnumfreeDiskSpaceLogRetentionPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumfreeDiskSpaceLogRetentionPolicySchemaUrn", value)
}

// NewEnumfreeDiskSpaceLogRetentionPolicySchemaUrnFromValue returns a pointer to a valid EnumfreeDiskSpaceLogRetentionPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumfreeDiskSpaceLogRetentionPolicySchemaUrnFromValue(v string) (*EnumfreeDiskSpaceLogRetentionPolicySchemaUrn, error) {
	ev := EnumfreeDiskSpaceLogRetentionPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumfreeDiskSpaceLogRetentionPolicySchemaUrn: valid values are %v", v, AllowedEnumfreeDiskSpaceLogRetentionPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumfreeDiskSpaceLogRetentionPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumfreeDiskSpaceLogRetentionPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumfree-disk-space-log-retention-policySchemaUrn value
func (v EnumfreeDiskSpaceLogRetentionPolicySchemaUrn) Ptr() *EnumfreeDiskSpaceLogRetentionPolicySchemaUrn {
	return &v
}

type NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn struct {
	value *EnumfreeDiskSpaceLogRetentionPolicySchemaUrn
	isSet bool
}

func (v NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn) Get() *EnumfreeDiskSpaceLogRetentionPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn) Set(val *EnumfreeDiskSpaceLogRetentionPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn(val *EnumfreeDiskSpaceLogRetentionPolicySchemaUrn) *NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn {
	return &NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumfreeDiskSpaceLogRetentionPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
