/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumldapUrlAttributeSyntaxSchemaUrn the model 'EnumldapUrlAttributeSyntaxSchemaUrn'
type EnumldapUrlAttributeSyntaxSchemaUrn string

// List of Enumldap-url-attribute-syntaxSchemaUrn
const (
	ENUMLDAPURLATTRIBUTESYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ATTRIBUTE_SYNTAXLDAP_URL EnumldapUrlAttributeSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:attribute-syntax:ldap-url"
)

// All allowed values of EnumldapUrlAttributeSyntaxSchemaUrn enum
var AllowedEnumldapUrlAttributeSyntaxSchemaUrnEnumValues = []EnumldapUrlAttributeSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:attribute-syntax:ldap-url",
}

func (v *EnumldapUrlAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldapUrlAttributeSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumldapUrlAttributeSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldapUrlAttributeSyntaxSchemaUrn", value)
}

// NewEnumldapUrlAttributeSyntaxSchemaUrnFromValue returns a pointer to a valid EnumldapUrlAttributeSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldapUrlAttributeSyntaxSchemaUrnFromValue(v string) (*EnumldapUrlAttributeSyntaxSchemaUrn, error) {
	ev := EnumldapUrlAttributeSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldapUrlAttributeSyntaxSchemaUrn: valid values are %v", v, AllowedEnumldapUrlAttributeSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldapUrlAttributeSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldapUrlAttributeSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldap-url-attribute-syntaxSchemaUrn value
func (v EnumldapUrlAttributeSyntaxSchemaUrn) Ptr() *EnumldapUrlAttributeSyntaxSchemaUrn {
	return &v
}

type NullableEnumldapUrlAttributeSyntaxSchemaUrn struct {
	value *EnumldapUrlAttributeSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumldapUrlAttributeSyntaxSchemaUrn) Get() *EnumldapUrlAttributeSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumldapUrlAttributeSyntaxSchemaUrn) Set(val *EnumldapUrlAttributeSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldapUrlAttributeSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldapUrlAttributeSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldapUrlAttributeSyntaxSchemaUrn(val *EnumldapUrlAttributeSyntaxSchemaUrn) *NullableEnumldapUrlAttributeSyntaxSchemaUrn {
	return &NullableEnumldapUrlAttributeSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldapUrlAttributeSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldapUrlAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

