/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginInvokeGCDayOfWeekProp Specifies the days of the week which the Periodic GC Plugin should run. If no values are provided, then the plugin will run every day at the specified time.
type EnumpluginInvokeGCDayOfWeekProp string

// List of Enumplugin-invokeGCDayOfWeekProp
const (
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_SUNDAY    EnumpluginInvokeGCDayOfWeekProp = "sunday"
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_MONDAY    EnumpluginInvokeGCDayOfWeekProp = "monday"
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_TUESDAY   EnumpluginInvokeGCDayOfWeekProp = "tuesday"
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_WEDNESDAY EnumpluginInvokeGCDayOfWeekProp = "wednesday"
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_THURSDAY  EnumpluginInvokeGCDayOfWeekProp = "thursday"
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_FRIDAY    EnumpluginInvokeGCDayOfWeekProp = "friday"
	ENUMPLUGININVOKEGCDAYOFWEEKPROP_SATURDAY  EnumpluginInvokeGCDayOfWeekProp = "saturday"
)

// All allowed values of EnumpluginInvokeGCDayOfWeekProp enum
var AllowedEnumpluginInvokeGCDayOfWeekPropEnumValues = []EnumpluginInvokeGCDayOfWeekProp{
	"sunday",
	"monday",
	"tuesday",
	"wednesday",
	"thursday",
	"friday",
	"saturday",
}

func (v *EnumpluginInvokeGCDayOfWeekProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginInvokeGCDayOfWeekProp(value)
	for _, existing := range AllowedEnumpluginInvokeGCDayOfWeekPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginInvokeGCDayOfWeekProp", value)
}

// NewEnumpluginInvokeGCDayOfWeekPropFromValue returns a pointer to a valid EnumpluginInvokeGCDayOfWeekProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginInvokeGCDayOfWeekPropFromValue(v string) (*EnumpluginInvokeGCDayOfWeekProp, error) {
	ev := EnumpluginInvokeGCDayOfWeekProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginInvokeGCDayOfWeekProp: valid values are %v", v, AllowedEnumpluginInvokeGCDayOfWeekPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginInvokeGCDayOfWeekProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginInvokeGCDayOfWeekPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-invokeGCDayOfWeekProp value
func (v EnumpluginInvokeGCDayOfWeekProp) Ptr() *EnumpluginInvokeGCDayOfWeekProp {
	return &v
}

type NullableEnumpluginInvokeGCDayOfWeekProp struct {
	value *EnumpluginInvokeGCDayOfWeekProp
	isSet bool
}

func (v NullableEnumpluginInvokeGCDayOfWeekProp) Get() *EnumpluginInvokeGCDayOfWeekProp {
	return v.value
}

func (v *NullableEnumpluginInvokeGCDayOfWeekProp) Set(val *EnumpluginInvokeGCDayOfWeekProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginInvokeGCDayOfWeekProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginInvokeGCDayOfWeekProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginInvokeGCDayOfWeekProp(val *EnumpluginInvokeGCDayOfWeekProp) *NullableEnumpluginInvokeGCDayOfWeekProp {
	return &NullableEnumpluginInvokeGCDayOfWeekProp{value: val, isSet: true}
}

func (v NullableEnumpluginInvokeGCDayOfWeekProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginInvokeGCDayOfWeekProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
