/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetricsBackendResponse struct for MetricsBackendResponse
type MetricsBackendResponse struct {
	Schemas []EnummetricsBackendSchemaUrn `json:"schemas"`
	// Specifies a name to identify the associated backend.
	BackendID string `json:"backendID"`
	// Specifies the path to the directory that will be used to store queued samples.
	StorageDir string `json:"storageDir"`
	// Specifies the path to the directory that contains metric definitions.
	MetricsDir string `json:"metricsDir"`
	// Period when samples are flushed to disk.
	SampleFlushInterval *string `json:"sampleFlushInterval,omitempty"`
	// The retention policy to use for the Metrics Backend .
	RetentionPolicy []string `json:"retentionPolicy"`
	// A description for this Backend
	Description *string `json:"description,omitempty"`
	// Indicates whether the backend is enabled in the server.
	Enabled bool `json:"enabled"`
	WritabilityMode EnumbackendWritabilityModeProp `json:"writabilityMode"`
	// Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
	ReturnUnavailableWhenDisabled *bool `json:"returnUnavailableWhenDisabled,omitempty"`
	// Specifies a notification manager for changes resulting from operations processed through this Backend
	NotificationManager *string `json:"notificationManager,omitempty"`
}

// NewMetricsBackendResponse instantiates a new MetricsBackendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsBackendResponse(schemas []EnummetricsBackendSchemaUrn, backendID string, storageDir string, metricsDir string, retentionPolicy []string, enabled bool, writabilityMode EnumbackendWritabilityModeProp) *MetricsBackendResponse {
	this := MetricsBackendResponse{}
	this.Schemas = schemas
	this.BackendID = backendID
	this.StorageDir = storageDir
	this.MetricsDir = metricsDir
	this.RetentionPolicy = retentionPolicy
	this.Enabled = enabled
	this.WritabilityMode = writabilityMode
	return &this
}

// NewMetricsBackendResponseWithDefaults instantiates a new MetricsBackendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsBackendResponseWithDefaults() *MetricsBackendResponse {
	this := MetricsBackendResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *MetricsBackendResponse) GetSchemas() []EnummetricsBackendSchemaUrn {
	if o == nil {
		var ret []EnummetricsBackendSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetSchemasOk() ([]EnummetricsBackendSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *MetricsBackendResponse) SetSchemas(v []EnummetricsBackendSchemaUrn) {
	o.Schemas = v
}

// GetBackendID returns the BackendID field value
func (o *MetricsBackendResponse) GetBackendID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackendID
}

// GetBackendIDOk returns a tuple with the BackendID field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetBackendIDOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BackendID, true
}

// SetBackendID sets field value
func (o *MetricsBackendResponse) SetBackendID(v string) {
	o.BackendID = v
}

// GetStorageDir returns the StorageDir field value
func (o *MetricsBackendResponse) GetStorageDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageDir
}

// GetStorageDirOk returns a tuple with the StorageDir field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetStorageDirOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StorageDir, true
}

// SetStorageDir sets field value
func (o *MetricsBackendResponse) SetStorageDir(v string) {
	o.StorageDir = v
}

// GetMetricsDir returns the MetricsDir field value
func (o *MetricsBackendResponse) GetMetricsDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricsDir
}

// GetMetricsDirOk returns a tuple with the MetricsDir field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetMetricsDirOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MetricsDir, true
}

// SetMetricsDir sets field value
func (o *MetricsBackendResponse) SetMetricsDir(v string) {
	o.MetricsDir = v
}

// GetSampleFlushInterval returns the SampleFlushInterval field value if set, zero value otherwise.
func (o *MetricsBackendResponse) GetSampleFlushInterval() string {
	if o == nil || isNil(o.SampleFlushInterval) {
		var ret string
		return ret
	}
	return *o.SampleFlushInterval
}

// GetSampleFlushIntervalOk returns a tuple with the SampleFlushInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetSampleFlushIntervalOk() (*string, bool) {
	if o == nil || isNil(o.SampleFlushInterval) {
    return nil, false
	}
	return o.SampleFlushInterval, true
}

// HasSampleFlushInterval returns a boolean if a field has been set.
func (o *MetricsBackendResponse) HasSampleFlushInterval() bool {
	if o != nil && !isNil(o.SampleFlushInterval) {
		return true
	}

	return false
}

// SetSampleFlushInterval gets a reference to the given string and assigns it to the SampleFlushInterval field.
func (o *MetricsBackendResponse) SetSampleFlushInterval(v string) {
	o.SampleFlushInterval = &v
}

// GetRetentionPolicy returns the RetentionPolicy field value
func (o *MetricsBackendResponse) GetRetentionPolicy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RetentionPolicy
}

// GetRetentionPolicyOk returns a tuple with the RetentionPolicy field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetRetentionPolicyOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RetentionPolicy, true
}

// SetRetentionPolicy sets field value
func (o *MetricsBackendResponse) SetRetentionPolicy(v []string) {
	o.RetentionPolicy = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricsBackendResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricsBackendResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricsBackendResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *MetricsBackendResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *MetricsBackendResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetWritabilityMode returns the WritabilityMode field value
func (o *MetricsBackendResponse) GetWritabilityMode() EnumbackendWritabilityModeProp {
	if o == nil {
		var ret EnumbackendWritabilityModeProp
		return ret
	}

	return o.WritabilityMode
}

// GetWritabilityModeOk returns a tuple with the WritabilityMode field value
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetWritabilityModeOk() (*EnumbackendWritabilityModeProp, bool) {
	if o == nil {
    return nil, false
	}
	return &o.WritabilityMode, true
}

// SetWritabilityMode sets field value
func (o *MetricsBackendResponse) SetWritabilityMode(v EnumbackendWritabilityModeProp) {
	o.WritabilityMode = v
}

// GetReturnUnavailableWhenDisabled returns the ReturnUnavailableWhenDisabled field value if set, zero value otherwise.
func (o *MetricsBackendResponse) GetReturnUnavailableWhenDisabled() bool {
	if o == nil || isNil(o.ReturnUnavailableWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.ReturnUnavailableWhenDisabled
}

// GetReturnUnavailableWhenDisabledOk returns a tuple with the ReturnUnavailableWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetReturnUnavailableWhenDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.ReturnUnavailableWhenDisabled) {
    return nil, false
	}
	return o.ReturnUnavailableWhenDisabled, true
}

// HasReturnUnavailableWhenDisabled returns a boolean if a field has been set.
func (o *MetricsBackendResponse) HasReturnUnavailableWhenDisabled() bool {
	if o != nil && !isNil(o.ReturnUnavailableWhenDisabled) {
		return true
	}

	return false
}

// SetReturnUnavailableWhenDisabled gets a reference to the given bool and assigns it to the ReturnUnavailableWhenDisabled field.
func (o *MetricsBackendResponse) SetReturnUnavailableWhenDisabled(v bool) {
	o.ReturnUnavailableWhenDisabled = &v
}

// GetNotificationManager returns the NotificationManager field value if set, zero value otherwise.
func (o *MetricsBackendResponse) GetNotificationManager() string {
	if o == nil || isNil(o.NotificationManager) {
		var ret string
		return ret
	}
	return *o.NotificationManager
}

// GetNotificationManagerOk returns a tuple with the NotificationManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsBackendResponse) GetNotificationManagerOk() (*string, bool) {
	if o == nil || isNil(o.NotificationManager) {
    return nil, false
	}
	return o.NotificationManager, true
}

// HasNotificationManager returns a boolean if a field has been set.
func (o *MetricsBackendResponse) HasNotificationManager() bool {
	if o != nil && !isNil(o.NotificationManager) {
		return true
	}

	return false
}

// SetNotificationManager gets a reference to the given string and assigns it to the NotificationManager field.
func (o *MetricsBackendResponse) SetNotificationManager(v string) {
	o.NotificationManager = &v
}

func (o MetricsBackendResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["backendID"] = o.BackendID
	}
	if true {
		toSerialize["storageDir"] = o.StorageDir
	}
	if true {
		toSerialize["metricsDir"] = o.MetricsDir
	}
	if !isNil(o.SampleFlushInterval) {
		toSerialize["sampleFlushInterval"] = o.SampleFlushInterval
	}
	if true {
		toSerialize["retentionPolicy"] = o.RetentionPolicy
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["writabilityMode"] = o.WritabilityMode
	}
	if !isNil(o.ReturnUnavailableWhenDisabled) {
		toSerialize["returnUnavailableWhenDisabled"] = o.ReturnUnavailableWhenDisabled
	}
	if !isNil(o.NotificationManager) {
		toSerialize["notificationManager"] = o.NotificationManager
	}
	return json.Marshal(toSerialize)
}

type NullableMetricsBackendResponse struct {
	value *MetricsBackendResponse
	isSet bool
}

func (v NullableMetricsBackendResponse) Get() *MetricsBackendResponse {
	return v.value
}

func (v *NullableMetricsBackendResponse) Set(val *MetricsBackendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsBackendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsBackendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsBackendResponse(val *MetricsBackendResponse) *NullableMetricsBackendResponse {
	return &NullableMetricsBackendResponse{value: val, isSet: true}
}

func (v NullableMetricsBackendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsBackendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


