/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScimSchemaShared struct for ScimSchemaShared
type ScimSchemaShared struct {
	Schemas []EnumscimSchemaSchemaUrn `json:"schemas,omitempty"`
	// A description for this SCIM Schema
	Description *string `json:"description,omitempty"`
	// The URN which identifies this SCIM Schema.
	SchemaURN string `json:"schemaURN"`
	// The human readable name for this SCIM Schema.
	DisplayName *string `json:"displayName,omitempty"`
}

// NewScimSchemaShared instantiates a new ScimSchemaShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimSchemaShared(schemaURN string) *ScimSchemaShared {
	this := ScimSchemaShared{}
	this.SchemaURN = schemaURN
	return &this
}

// NewScimSchemaSharedWithDefaults instantiates a new ScimSchemaShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimSchemaSharedWithDefaults() *ScimSchemaShared {
	this := ScimSchemaShared{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ScimSchemaShared) GetSchemas() []EnumscimSchemaSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumscimSchemaSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimSchemaShared) GetSchemasOk() ([]EnumscimSchemaSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ScimSchemaShared) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumscimSchemaSchemaUrn and assigns it to the Schemas field.
func (o *ScimSchemaShared) SetSchemas(v []EnumscimSchemaSchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScimSchemaShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimSchemaShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScimSchemaShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScimSchemaShared) SetDescription(v string) {
	o.Description = &v
}

// GetSchemaURN returns the SchemaURN field value
func (o *ScimSchemaShared) GetSchemaURN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaURN
}

// GetSchemaURNOk returns a tuple with the SchemaURN field value
// and a boolean to check if the value has been set.
func (o *ScimSchemaShared) GetSchemaURNOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SchemaURN, true
}

// SetSchemaURN sets field value
func (o *ScimSchemaShared) SetSchemaURN(v string) {
	o.SchemaURN = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ScimSchemaShared) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimSchemaShared) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
    return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ScimSchemaShared) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ScimSchemaShared) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o ScimSchemaShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["schemaURN"] = o.SchemaURN
	}
	if !isNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableScimSchemaShared struct {
	value *ScimSchemaShared
	isSet bool
}

func (v NullableScimSchemaShared) Get() *ScimSchemaShared {
	return v.value
}

func (v *NullableScimSchemaShared) Set(val *ScimSchemaShared) {
	v.value = val
	v.isSet = true
}

func (v NullableScimSchemaShared) IsSet() bool {
	return v.isSet
}

func (v *NullableScimSchemaShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimSchemaShared(val *ScimSchemaShared) *NullableScimSchemaShared {
	return &NullableScimSchemaShared{value: val, isSet: true}
}

func (v NullableScimSchemaShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimSchemaShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


