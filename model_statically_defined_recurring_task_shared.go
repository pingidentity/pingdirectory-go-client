/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StaticallyDefinedRecurringTaskShared struct for StaticallyDefinedRecurringTaskShared
type StaticallyDefinedRecurringTaskShared struct {
	Schemas []EnumstaticallyDefinedRecurringTaskSchemaUrn `json:"schemas"`
	// The fully-qualified name of the Java class that provides the logic for the task to be invoked.
	TaskJavaClass string `json:"taskJavaClass"`
	TaskObjectClass []string `json:"taskObjectClass"`
	TaskAttributeValue []string `json:"taskAttributeValue,omitempty"`
	// A description for this Recurring Task
	Description *string `json:"description,omitempty"`
	// Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
	CancelOnTaskDependencyFailure *bool `json:"cancelOnTaskDependencyFailure,omitempty"`
	EmailOnStart []string `json:"emailOnStart,omitempty"`
	EmailOnSuccess []string `json:"emailOnSuccess,omitempty"`
	EmailOnFailure []string `json:"emailOnFailure,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
	AlertOnStart *bool `json:"alertOnStart,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
	AlertOnSuccess *bool `json:"alertOnSuccess,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
	AlertOnFailure *bool `json:"alertOnFailure,omitempty"`
}

// NewStaticallyDefinedRecurringTaskShared instantiates a new StaticallyDefinedRecurringTaskShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticallyDefinedRecurringTaskShared(schemas []EnumstaticallyDefinedRecurringTaskSchemaUrn, taskJavaClass string, taskObjectClass []string) *StaticallyDefinedRecurringTaskShared {
	this := StaticallyDefinedRecurringTaskShared{}
	this.Schemas = schemas
	this.TaskJavaClass = taskJavaClass
	this.TaskObjectClass = taskObjectClass
	return &this
}

// NewStaticallyDefinedRecurringTaskSharedWithDefaults instantiates a new StaticallyDefinedRecurringTaskShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticallyDefinedRecurringTaskSharedWithDefaults() *StaticallyDefinedRecurringTaskShared {
	this := StaticallyDefinedRecurringTaskShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *StaticallyDefinedRecurringTaskShared) GetSchemas() []EnumstaticallyDefinedRecurringTaskSchemaUrn {
	if o == nil {
		var ret []EnumstaticallyDefinedRecurringTaskSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetSchemasOk() ([]EnumstaticallyDefinedRecurringTaskSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *StaticallyDefinedRecurringTaskShared) SetSchemas(v []EnumstaticallyDefinedRecurringTaskSchemaUrn) {
	o.Schemas = v
}

// GetTaskJavaClass returns the TaskJavaClass field value
func (o *StaticallyDefinedRecurringTaskShared) GetTaskJavaClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskJavaClass
}

// GetTaskJavaClassOk returns a tuple with the TaskJavaClass field value
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetTaskJavaClassOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TaskJavaClass, true
}

// SetTaskJavaClass sets field value
func (o *StaticallyDefinedRecurringTaskShared) SetTaskJavaClass(v string) {
	o.TaskJavaClass = v
}

// GetTaskObjectClass returns the TaskObjectClass field value
func (o *StaticallyDefinedRecurringTaskShared) GetTaskObjectClass() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TaskObjectClass
}

// GetTaskObjectClassOk returns a tuple with the TaskObjectClass field value
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetTaskObjectClassOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TaskObjectClass, true
}

// SetTaskObjectClass sets field value
func (o *StaticallyDefinedRecurringTaskShared) SetTaskObjectClass(v []string) {
	o.TaskObjectClass = v
}

// GetTaskAttributeValue returns the TaskAttributeValue field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetTaskAttributeValue() []string {
	if o == nil || isNil(o.TaskAttributeValue) {
		var ret []string
		return ret
	}
	return o.TaskAttributeValue
}

// GetTaskAttributeValueOk returns a tuple with the TaskAttributeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetTaskAttributeValueOk() ([]string, bool) {
	if o == nil || isNil(o.TaskAttributeValue) {
    return nil, false
	}
	return o.TaskAttributeValue, true
}

// HasTaskAttributeValue returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasTaskAttributeValue() bool {
	if o != nil && !isNil(o.TaskAttributeValue) {
		return true
	}

	return false
}

// SetTaskAttributeValue gets a reference to the given []string and assigns it to the TaskAttributeValue field.
func (o *StaticallyDefinedRecurringTaskShared) SetTaskAttributeValue(v []string) {
	o.TaskAttributeValue = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StaticallyDefinedRecurringTaskShared) SetDescription(v string) {
	o.Description = &v
}

// GetCancelOnTaskDependencyFailure returns the CancelOnTaskDependencyFailure field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetCancelOnTaskDependencyFailure() bool {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
		var ret bool
		return ret
	}
	return *o.CancelOnTaskDependencyFailure
}

// GetCancelOnTaskDependencyFailureOk returns a tuple with the CancelOnTaskDependencyFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetCancelOnTaskDependencyFailureOk() (*bool, bool) {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
    return nil, false
	}
	return o.CancelOnTaskDependencyFailure, true
}

// HasCancelOnTaskDependencyFailure returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasCancelOnTaskDependencyFailure() bool {
	if o != nil && !isNil(o.CancelOnTaskDependencyFailure) {
		return true
	}

	return false
}

// SetCancelOnTaskDependencyFailure gets a reference to the given bool and assigns it to the CancelOnTaskDependencyFailure field.
func (o *StaticallyDefinedRecurringTaskShared) SetCancelOnTaskDependencyFailure(v bool) {
	o.CancelOnTaskDependencyFailure = &v
}

// GetEmailOnStart returns the EmailOnStart field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetEmailOnStart() []string {
	if o == nil || isNil(o.EmailOnStart) {
		var ret []string
		return ret
	}
	return o.EmailOnStart
}

// GetEmailOnStartOk returns a tuple with the EmailOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetEmailOnStartOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnStart) {
    return nil, false
	}
	return o.EmailOnStart, true
}

// HasEmailOnStart returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasEmailOnStart() bool {
	if o != nil && !isNil(o.EmailOnStart) {
		return true
	}

	return false
}

// SetEmailOnStart gets a reference to the given []string and assigns it to the EmailOnStart field.
func (o *StaticallyDefinedRecurringTaskShared) SetEmailOnStart(v []string) {
	o.EmailOnStart = v
}

// GetEmailOnSuccess returns the EmailOnSuccess field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetEmailOnSuccess() []string {
	if o == nil || isNil(o.EmailOnSuccess) {
		var ret []string
		return ret
	}
	return o.EmailOnSuccess
}

// GetEmailOnSuccessOk returns a tuple with the EmailOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetEmailOnSuccessOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnSuccess) {
    return nil, false
	}
	return o.EmailOnSuccess, true
}

// HasEmailOnSuccess returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasEmailOnSuccess() bool {
	if o != nil && !isNil(o.EmailOnSuccess) {
		return true
	}

	return false
}

// SetEmailOnSuccess gets a reference to the given []string and assigns it to the EmailOnSuccess field.
func (o *StaticallyDefinedRecurringTaskShared) SetEmailOnSuccess(v []string) {
	o.EmailOnSuccess = v
}

// GetEmailOnFailure returns the EmailOnFailure field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetEmailOnFailure() []string {
	if o == nil || isNil(o.EmailOnFailure) {
		var ret []string
		return ret
	}
	return o.EmailOnFailure
}

// GetEmailOnFailureOk returns a tuple with the EmailOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetEmailOnFailureOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnFailure) {
    return nil, false
	}
	return o.EmailOnFailure, true
}

// HasEmailOnFailure returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasEmailOnFailure() bool {
	if o != nil && !isNil(o.EmailOnFailure) {
		return true
	}

	return false
}

// SetEmailOnFailure gets a reference to the given []string and assigns it to the EmailOnFailure field.
func (o *StaticallyDefinedRecurringTaskShared) SetEmailOnFailure(v []string) {
	o.EmailOnFailure = v
}

// GetAlertOnStart returns the AlertOnStart field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetAlertOnStart() bool {
	if o == nil || isNil(o.AlertOnStart) {
		var ret bool
		return ret
	}
	return *o.AlertOnStart
}

// GetAlertOnStartOk returns a tuple with the AlertOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetAlertOnStartOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnStart) {
    return nil, false
	}
	return o.AlertOnStart, true
}

// HasAlertOnStart returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasAlertOnStart() bool {
	if o != nil && !isNil(o.AlertOnStart) {
		return true
	}

	return false
}

// SetAlertOnStart gets a reference to the given bool and assigns it to the AlertOnStart field.
func (o *StaticallyDefinedRecurringTaskShared) SetAlertOnStart(v bool) {
	o.AlertOnStart = &v
}

// GetAlertOnSuccess returns the AlertOnSuccess field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetAlertOnSuccess() bool {
	if o == nil || isNil(o.AlertOnSuccess) {
		var ret bool
		return ret
	}
	return *o.AlertOnSuccess
}

// GetAlertOnSuccessOk returns a tuple with the AlertOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetAlertOnSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnSuccess) {
    return nil, false
	}
	return o.AlertOnSuccess, true
}

// HasAlertOnSuccess returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasAlertOnSuccess() bool {
	if o != nil && !isNil(o.AlertOnSuccess) {
		return true
	}

	return false
}

// SetAlertOnSuccess gets a reference to the given bool and assigns it to the AlertOnSuccess field.
func (o *StaticallyDefinedRecurringTaskShared) SetAlertOnSuccess(v bool) {
	o.AlertOnSuccess = &v
}

// GetAlertOnFailure returns the AlertOnFailure field value if set, zero value otherwise.
func (o *StaticallyDefinedRecurringTaskShared) GetAlertOnFailure() bool {
	if o == nil || isNil(o.AlertOnFailure) {
		var ret bool
		return ret
	}
	return *o.AlertOnFailure
}

// GetAlertOnFailureOk returns a tuple with the AlertOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticallyDefinedRecurringTaskShared) GetAlertOnFailureOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnFailure) {
    return nil, false
	}
	return o.AlertOnFailure, true
}

// HasAlertOnFailure returns a boolean if a field has been set.
func (o *StaticallyDefinedRecurringTaskShared) HasAlertOnFailure() bool {
	if o != nil && !isNil(o.AlertOnFailure) {
		return true
	}

	return false
}

// SetAlertOnFailure gets a reference to the given bool and assigns it to the AlertOnFailure field.
func (o *StaticallyDefinedRecurringTaskShared) SetAlertOnFailure(v bool) {
	o.AlertOnFailure = &v
}

func (o StaticallyDefinedRecurringTaskShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["taskJavaClass"] = o.TaskJavaClass
	}
	if true {
		toSerialize["taskObjectClass"] = o.TaskObjectClass
	}
	if !isNil(o.TaskAttributeValue) {
		toSerialize["taskAttributeValue"] = o.TaskAttributeValue
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CancelOnTaskDependencyFailure) {
		toSerialize["cancelOnTaskDependencyFailure"] = o.CancelOnTaskDependencyFailure
	}
	if !isNil(o.EmailOnStart) {
		toSerialize["emailOnStart"] = o.EmailOnStart
	}
	if !isNil(o.EmailOnSuccess) {
		toSerialize["emailOnSuccess"] = o.EmailOnSuccess
	}
	if !isNil(o.EmailOnFailure) {
		toSerialize["emailOnFailure"] = o.EmailOnFailure
	}
	if !isNil(o.AlertOnStart) {
		toSerialize["alertOnStart"] = o.AlertOnStart
	}
	if !isNil(o.AlertOnSuccess) {
		toSerialize["alertOnSuccess"] = o.AlertOnSuccess
	}
	if !isNil(o.AlertOnFailure) {
		toSerialize["alertOnFailure"] = o.AlertOnFailure
	}
	return json.Marshal(toSerialize)
}

type NullableStaticallyDefinedRecurringTaskShared struct {
	value *StaticallyDefinedRecurringTaskShared
	isSet bool
}

func (v NullableStaticallyDefinedRecurringTaskShared) Get() *StaticallyDefinedRecurringTaskShared {
	return v.value
}

func (v *NullableStaticallyDefinedRecurringTaskShared) Set(val *StaticallyDefinedRecurringTaskShared) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticallyDefinedRecurringTaskShared) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticallyDefinedRecurringTaskShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticallyDefinedRecurringTaskShared(val *StaticallyDefinedRecurringTaskShared) *NullableStaticallyDefinedRecurringTaskShared {
	return &NullableStaticallyDefinedRecurringTaskShared{value: val, isSet: true}
}

func (v NullableStaticallyDefinedRecurringTaskShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticallyDefinedRecurringTaskShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


