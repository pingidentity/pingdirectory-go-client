/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumtokenClaimValidationRequiredValueProp Specifies the boolean claim's required value.
type EnumtokenClaimValidationRequiredValueProp string

// List of Enumtoken-claim-validation-requiredValueProp
const (
	ENUMTOKENCLAIMVALIDATIONREQUIREDVALUEPROP_TRUE  EnumtokenClaimValidationRequiredValueProp = "true"
	ENUMTOKENCLAIMVALIDATIONREQUIREDVALUEPROP_FALSE EnumtokenClaimValidationRequiredValueProp = "false"
)

// All allowed values of EnumtokenClaimValidationRequiredValueProp enum
var AllowedEnumtokenClaimValidationRequiredValuePropEnumValues = []EnumtokenClaimValidationRequiredValueProp{
	"true",
	"false",
}

func (v *EnumtokenClaimValidationRequiredValueProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumtokenClaimValidationRequiredValueProp(value)
	for _, existing := range AllowedEnumtokenClaimValidationRequiredValuePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumtokenClaimValidationRequiredValueProp", value)
}

// NewEnumtokenClaimValidationRequiredValuePropFromValue returns a pointer to a valid EnumtokenClaimValidationRequiredValueProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumtokenClaimValidationRequiredValuePropFromValue(v string) (*EnumtokenClaimValidationRequiredValueProp, error) {
	ev := EnumtokenClaimValidationRequiredValueProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumtokenClaimValidationRequiredValueProp: valid values are %v", v, AllowedEnumtokenClaimValidationRequiredValuePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumtokenClaimValidationRequiredValueProp) IsValid() bool {
	for _, existing := range AllowedEnumtokenClaimValidationRequiredValuePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumtoken-claim-validation-requiredValueProp value
func (v EnumtokenClaimValidationRequiredValueProp) Ptr() *EnumtokenClaimValidationRequiredValueProp {
	return &v
}

type NullableEnumtokenClaimValidationRequiredValueProp struct {
	value *EnumtokenClaimValidationRequiredValueProp
	isSet bool
}

func (v NullableEnumtokenClaimValidationRequiredValueProp) Get() *EnumtokenClaimValidationRequiredValueProp {
	return v.value
}

func (v *NullableEnumtokenClaimValidationRequiredValueProp) Set(val *EnumtokenClaimValidationRequiredValueProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumtokenClaimValidationRequiredValueProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumtokenClaimValidationRequiredValueProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumtokenClaimValidationRequiredValueProp(val *EnumtokenClaimValidationRequiredValueProp) *NullableEnumtokenClaimValidationRequiredValueProp {
	return &NullableEnumtokenClaimValidationRequiredValueProp{value: val, isSet: true}
}

func (v NullableEnumtokenClaimValidationRequiredValueProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumtokenClaimValidationRequiredValueProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
