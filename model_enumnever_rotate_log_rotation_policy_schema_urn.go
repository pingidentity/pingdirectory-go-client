/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumneverRotateLogRotationPolicySchemaUrn the model 'EnumneverRotateLogRotationPolicySchemaUrn'
type EnumneverRotateLogRotationPolicySchemaUrn string

// List of Enumnever-rotate-log-rotation-policySchemaUrn
const (
	ENUMNEVERROTATELOGROTATIONPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_ROTATION_POLICYNEVER_ROTATE EnumneverRotateLogRotationPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:never-rotate"
)

// All allowed values of EnumneverRotateLogRotationPolicySchemaUrn enum
var AllowedEnumneverRotateLogRotationPolicySchemaUrnEnumValues = []EnumneverRotateLogRotationPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:never-rotate",
}

func (v *EnumneverRotateLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumneverRotateLogRotationPolicySchemaUrn(value)
	for _, existing := range AllowedEnumneverRotateLogRotationPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumneverRotateLogRotationPolicySchemaUrn", value)
}

// NewEnumneverRotateLogRotationPolicySchemaUrnFromValue returns a pointer to a valid EnumneverRotateLogRotationPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumneverRotateLogRotationPolicySchemaUrnFromValue(v string) (*EnumneverRotateLogRotationPolicySchemaUrn, error) {
	ev := EnumneverRotateLogRotationPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumneverRotateLogRotationPolicySchemaUrn: valid values are %v", v, AllowedEnumneverRotateLogRotationPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumneverRotateLogRotationPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumneverRotateLogRotationPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumnever-rotate-log-rotation-policySchemaUrn value
func (v EnumneverRotateLogRotationPolicySchemaUrn) Ptr() *EnumneverRotateLogRotationPolicySchemaUrn {
	return &v
}

type NullableEnumneverRotateLogRotationPolicySchemaUrn struct {
	value *EnumneverRotateLogRotationPolicySchemaUrn
	isSet bool
}

func (v NullableEnumneverRotateLogRotationPolicySchemaUrn) Get() *EnumneverRotateLogRotationPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumneverRotateLogRotationPolicySchemaUrn) Set(val *EnumneverRotateLogRotationPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumneverRotateLogRotationPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumneverRotateLogRotationPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumneverRotateLogRotationPolicySchemaUrn(val *EnumneverRotateLogRotationPolicySchemaUrn) *NullableEnumneverRotateLogRotationPolicySchemaUrn {
	return &NullableEnumneverRotateLogRotationPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumneverRotateLogRotationPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumneverRotateLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
