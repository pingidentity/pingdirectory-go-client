/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumnokiaProxyServerExternalServerSchemaUrn the model 'EnumnokiaProxyServerExternalServerSchemaUrn'
type EnumnokiaProxyServerExternalServerSchemaUrn string

// List of Enumnokia-proxy-server-external-serverSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERNOKIA_PROXY_SERVER EnumnokiaProxyServerExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:nokia-proxy-server"
)

// All allowed values of EnumnokiaProxyServerExternalServerSchemaUrn enum
var AllowedEnumnokiaProxyServerExternalServerSchemaUrnEnumValues = []EnumnokiaProxyServerExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:nokia-proxy-server",
}

func (v *EnumnokiaProxyServerExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumnokiaProxyServerExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumnokiaProxyServerExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumnokiaProxyServerExternalServerSchemaUrn", value)
}

// NewEnumnokiaProxyServerExternalServerSchemaUrnFromValue returns a pointer to a valid EnumnokiaProxyServerExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumnokiaProxyServerExternalServerSchemaUrnFromValue(v string) (*EnumnokiaProxyServerExternalServerSchemaUrn, error) {
	ev := EnumnokiaProxyServerExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumnokiaProxyServerExternalServerSchemaUrn: valid values are %v", v, AllowedEnumnokiaProxyServerExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumnokiaProxyServerExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumnokiaProxyServerExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumnokia-proxy-server-external-serverSchemaUrn value
func (v EnumnokiaProxyServerExternalServerSchemaUrn) Ptr() *EnumnokiaProxyServerExternalServerSchemaUrn {
	return &v
}

type NullableEnumnokiaProxyServerExternalServerSchemaUrn struct {
	value *EnumnokiaProxyServerExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumnokiaProxyServerExternalServerSchemaUrn) Get() *EnumnokiaProxyServerExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumnokiaProxyServerExternalServerSchemaUrn) Set(val *EnumnokiaProxyServerExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumnokiaProxyServerExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumnokiaProxyServerExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumnokiaProxyServerExternalServerSchemaUrn(val *EnumnokiaProxyServerExternalServerSchemaUrn) *NullableEnumnokiaProxyServerExternalServerSchemaUrn {
	return &NullableEnumnokiaProxyServerExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumnokiaProxyServerExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumnokiaProxyServerExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

