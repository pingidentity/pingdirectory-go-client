/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumrootDseRequestCriteriaSchemaUrn the model 'EnumrootDseRequestCriteriaSchemaUrn'
type EnumrootDseRequestCriteriaSchemaUrn string

// List of Enumroot-dse-request-criteriaSchemaUrn
const (
	ENUMROOTDSEREQUESTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0REQUEST_CRITERIAROOT_DSE EnumrootDseRequestCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:request-criteria:root-dse"
)

// All allowed values of EnumrootDseRequestCriteriaSchemaUrn enum
var AllowedEnumrootDseRequestCriteriaSchemaUrnEnumValues = []EnumrootDseRequestCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:request-criteria:root-dse",
}

func (v *EnumrootDseRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrootDseRequestCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumrootDseRequestCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrootDseRequestCriteriaSchemaUrn", value)
}

// NewEnumrootDseRequestCriteriaSchemaUrnFromValue returns a pointer to a valid EnumrootDseRequestCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrootDseRequestCriteriaSchemaUrnFromValue(v string) (*EnumrootDseRequestCriteriaSchemaUrn, error) {
	ev := EnumrootDseRequestCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrootDseRequestCriteriaSchemaUrn: valid values are %v", v, AllowedEnumrootDseRequestCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrootDseRequestCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumrootDseRequestCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumroot-dse-request-criteriaSchemaUrn value
func (v EnumrootDseRequestCriteriaSchemaUrn) Ptr() *EnumrootDseRequestCriteriaSchemaUrn {
	return &v
}

type NullableEnumrootDseRequestCriteriaSchemaUrn struct {
	value *EnumrootDseRequestCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumrootDseRequestCriteriaSchemaUrn) Get() *EnumrootDseRequestCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumrootDseRequestCriteriaSchemaUrn) Set(val *EnumrootDseRequestCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrootDseRequestCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrootDseRequestCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrootDseRequestCriteriaSchemaUrn(val *EnumrootDseRequestCriteriaSchemaUrn) *NullableEnumrootDseRequestCriteriaSchemaUrn {
	return &NullableEnumrootDseRequestCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumrootDseRequestCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrootDseRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

