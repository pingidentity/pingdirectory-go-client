/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumwaitForPassphraseCipherStreamProviderSchemaUrn the model 'EnumwaitForPassphraseCipherStreamProviderSchemaUrn'
type EnumwaitForPassphraseCipherStreamProviderSchemaUrn string

// List of Enumwait-for-passphrase-cipher-stream-providerSchemaUrn
const (
	ENUMWAITFORPASSPHRASECIPHERSTREAMPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CIPHER_STREAM_PROVIDERWAIT_FOR_PASSPHRASE EnumwaitForPassphraseCipherStreamProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:wait-for-passphrase"
)

// All allowed values of EnumwaitForPassphraseCipherStreamProviderSchemaUrn enum
var AllowedEnumwaitForPassphraseCipherStreamProviderSchemaUrnEnumValues = []EnumwaitForPassphraseCipherStreamProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:wait-for-passphrase",
}

func (v *EnumwaitForPassphraseCipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumwaitForPassphraseCipherStreamProviderSchemaUrn(value)
	for _, existing := range AllowedEnumwaitForPassphraseCipherStreamProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumwaitForPassphraseCipherStreamProviderSchemaUrn", value)
}

// NewEnumwaitForPassphraseCipherStreamProviderSchemaUrnFromValue returns a pointer to a valid EnumwaitForPassphraseCipherStreamProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumwaitForPassphraseCipherStreamProviderSchemaUrnFromValue(v string) (*EnumwaitForPassphraseCipherStreamProviderSchemaUrn, error) {
	ev := EnumwaitForPassphraseCipherStreamProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumwaitForPassphraseCipherStreamProviderSchemaUrn: valid values are %v", v, AllowedEnumwaitForPassphraseCipherStreamProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumwaitForPassphraseCipherStreamProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumwaitForPassphraseCipherStreamProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumwait-for-passphrase-cipher-stream-providerSchemaUrn value
func (v EnumwaitForPassphraseCipherStreamProviderSchemaUrn) Ptr() *EnumwaitForPassphraseCipherStreamProviderSchemaUrn {
	return &v
}

type NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn struct {
	value *EnumwaitForPassphraseCipherStreamProviderSchemaUrn
	isSet bool
}

func (v NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn) Get() *EnumwaitForPassphraseCipherStreamProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn) Set(val *EnumwaitForPassphraseCipherStreamProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn(val *EnumwaitForPassphraseCipherStreamProviderSchemaUrn) *NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn {
	return &NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumwaitForPassphraseCipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

