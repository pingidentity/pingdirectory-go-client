/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddTokenClaimValidation200Response - struct for AddTokenClaimValidation200Response
type AddTokenClaimValidation200Response struct {
	BooleanTokenClaimValidationResponse     *BooleanTokenClaimValidationResponse
	StringArrayTokenClaimValidationResponse *StringArrayTokenClaimValidationResponse
	StringTokenClaimValidationResponse      *StringTokenClaimValidationResponse
}

// BooleanTokenClaimValidationResponseAsAddTokenClaimValidation200Response is a convenience function that returns BooleanTokenClaimValidationResponse wrapped in AddTokenClaimValidation200Response
func BooleanTokenClaimValidationResponseAsAddTokenClaimValidation200Response(v *BooleanTokenClaimValidationResponse) AddTokenClaimValidation200Response {
	return AddTokenClaimValidation200Response{
		BooleanTokenClaimValidationResponse: v,
	}
}

// StringArrayTokenClaimValidationResponseAsAddTokenClaimValidation200Response is a convenience function that returns StringArrayTokenClaimValidationResponse wrapped in AddTokenClaimValidation200Response
func StringArrayTokenClaimValidationResponseAsAddTokenClaimValidation200Response(v *StringArrayTokenClaimValidationResponse) AddTokenClaimValidation200Response {
	return AddTokenClaimValidation200Response{
		StringArrayTokenClaimValidationResponse: v,
	}
}

// StringTokenClaimValidationResponseAsAddTokenClaimValidation200Response is a convenience function that returns StringTokenClaimValidationResponse wrapped in AddTokenClaimValidation200Response
func StringTokenClaimValidationResponseAsAddTokenClaimValidation200Response(v *StringTokenClaimValidationResponse) AddTokenClaimValidation200Response {
	return AddTokenClaimValidation200Response{
		StringTokenClaimValidationResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddTokenClaimValidation200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BooleanTokenClaimValidationResponse
	err = newStrictDecoder(data).Decode(&dst.BooleanTokenClaimValidationResponse)
	if err == nil {
		jsonBooleanTokenClaimValidationResponse, _ := json.Marshal(dst.BooleanTokenClaimValidationResponse)
		if string(jsonBooleanTokenClaimValidationResponse) == "{}" { // empty struct
			dst.BooleanTokenClaimValidationResponse = nil
		} else {
			match++
		}
	} else {
		dst.BooleanTokenClaimValidationResponse = nil
	}

	// try to unmarshal data into StringArrayTokenClaimValidationResponse
	err = newStrictDecoder(data).Decode(&dst.StringArrayTokenClaimValidationResponse)
	if err == nil {
		jsonStringArrayTokenClaimValidationResponse, _ := json.Marshal(dst.StringArrayTokenClaimValidationResponse)
		if string(jsonStringArrayTokenClaimValidationResponse) == "{}" { // empty struct
			dst.StringArrayTokenClaimValidationResponse = nil
		} else {
			match++
		}
	} else {
		dst.StringArrayTokenClaimValidationResponse = nil
	}

	// try to unmarshal data into StringTokenClaimValidationResponse
	err = newStrictDecoder(data).Decode(&dst.StringTokenClaimValidationResponse)
	if err == nil {
		jsonStringTokenClaimValidationResponse, _ := json.Marshal(dst.StringTokenClaimValidationResponse)
		if string(jsonStringTokenClaimValidationResponse) == "{}" { // empty struct
			dst.StringTokenClaimValidationResponse = nil
		} else {
			match++
		}
	} else {
		dst.StringTokenClaimValidationResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BooleanTokenClaimValidationResponse = nil
		dst.StringArrayTokenClaimValidationResponse = nil
		dst.StringTokenClaimValidationResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddTokenClaimValidation200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddTokenClaimValidation200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddTokenClaimValidation200Response) MarshalJSON() ([]byte, error) {
	if src.BooleanTokenClaimValidationResponse != nil {
		return json.Marshal(&src.BooleanTokenClaimValidationResponse)
	}

	if src.StringArrayTokenClaimValidationResponse != nil {
		return json.Marshal(&src.StringArrayTokenClaimValidationResponse)
	}

	if src.StringTokenClaimValidationResponse != nil {
		return json.Marshal(&src.StringTokenClaimValidationResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddTokenClaimValidation200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BooleanTokenClaimValidationResponse != nil {
		return obj.BooleanTokenClaimValidationResponse
	}

	if obj.StringArrayTokenClaimValidationResponse != nil {
		return obj.StringArrayTokenClaimValidationResponse
	}

	if obj.StringTokenClaimValidationResponse != nil {
		return obj.StringTokenClaimValidationResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddTokenClaimValidation200Response struct {
	value *AddTokenClaimValidation200Response
	isSet bool
}

func (v NullableAddTokenClaimValidation200Response) Get() *AddTokenClaimValidation200Response {
	return v.value
}

func (v *NullableAddTokenClaimValidation200Response) Set(val *AddTokenClaimValidation200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTokenClaimValidation200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTokenClaimValidation200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTokenClaimValidation200Response(val *AddTokenClaimValidation200Response) *NullableAddTokenClaimValidation200Response {
	return &NullableAddTokenClaimValidation200Response{value: val, isSet: true}
}

func (v NullableAddTokenClaimValidation200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTokenClaimValidation200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
