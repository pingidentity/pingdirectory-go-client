/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsimpleRequestCriteriaSchemaUrn the model 'EnumsimpleRequestCriteriaSchemaUrn'
type EnumsimpleRequestCriteriaSchemaUrn string

// List of Enumsimple-request-criteriaSchemaUrn
const (
	ENUMSIMPLEREQUESTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0REQUEST_CRITERIASIMPLE EnumsimpleRequestCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:request-criteria:simple"
)

// All allowed values of EnumsimpleRequestCriteriaSchemaUrn enum
var AllowedEnumsimpleRequestCriteriaSchemaUrnEnumValues = []EnumsimpleRequestCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:request-criteria:simple",
}

func (v *EnumsimpleRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsimpleRequestCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumsimpleRequestCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsimpleRequestCriteriaSchemaUrn", value)
}

// NewEnumsimpleRequestCriteriaSchemaUrnFromValue returns a pointer to a valid EnumsimpleRequestCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsimpleRequestCriteriaSchemaUrnFromValue(v string) (*EnumsimpleRequestCriteriaSchemaUrn, error) {
	ev := EnumsimpleRequestCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsimpleRequestCriteriaSchemaUrn: valid values are %v", v, AllowedEnumsimpleRequestCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsimpleRequestCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsimpleRequestCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsimple-request-criteriaSchemaUrn value
func (v EnumsimpleRequestCriteriaSchemaUrn) Ptr() *EnumsimpleRequestCriteriaSchemaUrn {
	return &v
}

type NullableEnumsimpleRequestCriteriaSchemaUrn struct {
	value *EnumsimpleRequestCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumsimpleRequestCriteriaSchemaUrn) Get() *EnumsimpleRequestCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumsimpleRequestCriteriaSchemaUrn) Set(val *EnumsimpleRequestCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsimpleRequestCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsimpleRequestCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsimpleRequestCriteriaSchemaUrn(val *EnumsimpleRequestCriteriaSchemaUrn) *NullableEnumsimpleRequestCriteriaSchemaUrn {
	return &NullableEnumsimpleRequestCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsimpleRequestCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsimpleRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
