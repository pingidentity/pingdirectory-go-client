/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumuserRestResourceTypeSchemaUrn the model 'EnumuserRestResourceTypeSchemaUrn'
type EnumuserRestResourceTypeSchemaUrn string

// List of Enumuser-rest-resource-typeSchemaUrn
const (
	ENUMUSERRESTRESOURCETYPESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0REST_RESOURCE_TYPEUSER EnumuserRestResourceTypeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:rest-resource-type:user"
)

// All allowed values of EnumuserRestResourceTypeSchemaUrn enum
var AllowedEnumuserRestResourceTypeSchemaUrnEnumValues = []EnumuserRestResourceTypeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:rest-resource-type:user",
}

func (v *EnumuserRestResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumuserRestResourceTypeSchemaUrn(value)
	for _, existing := range AllowedEnumuserRestResourceTypeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumuserRestResourceTypeSchemaUrn", value)
}

// NewEnumuserRestResourceTypeSchemaUrnFromValue returns a pointer to a valid EnumuserRestResourceTypeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumuserRestResourceTypeSchemaUrnFromValue(v string) (*EnumuserRestResourceTypeSchemaUrn, error) {
	ev := EnumuserRestResourceTypeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumuserRestResourceTypeSchemaUrn: valid values are %v", v, AllowedEnumuserRestResourceTypeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumuserRestResourceTypeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumuserRestResourceTypeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumuser-rest-resource-typeSchemaUrn value
func (v EnumuserRestResourceTypeSchemaUrn) Ptr() *EnumuserRestResourceTypeSchemaUrn {
	return &v
}

type NullableEnumuserRestResourceTypeSchemaUrn struct {
	value *EnumuserRestResourceTypeSchemaUrn
	isSet bool
}

func (v NullableEnumuserRestResourceTypeSchemaUrn) Get() *EnumuserRestResourceTypeSchemaUrn {
	return v.value
}

func (v *NullableEnumuserRestResourceTypeSchemaUrn) Set(val *EnumuserRestResourceTypeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumuserRestResourceTypeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumuserRestResourceTypeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumuserRestResourceTypeSchemaUrn(val *EnumuserRestResourceTypeSchemaUrn) *NullableEnumuserRestResourceTypeSchemaUrn {
	return &NullableEnumuserRestResourceTypeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumuserRestResourceTypeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumuserRestResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

