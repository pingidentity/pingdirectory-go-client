/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn the model 'EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn'
type EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn string

// List of Enumlast-access-time-uncached-entry-criteriaSchemaUrn
const (
	ENUMLASTACCESSTIMEUNCACHEDENTRYCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0UNCACHED_ENTRY_CRITERIALAST_ACCESS_TIME EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:uncached-entry-criteria:last-access-time"
)

// All allowed values of EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn enum
var AllowedEnumlastAccessTimeUncachedEntryCriteriaSchemaUrnEnumValues = []EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:uncached-entry-criteria:last-access-time",
}

func (v *EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumlastAccessTimeUncachedEntryCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn", value)
}

// NewEnumlastAccessTimeUncachedEntryCriteriaSchemaUrnFromValue returns a pointer to a valid EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlastAccessTimeUncachedEntryCriteriaSchemaUrnFromValue(v string) (*EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn, error) {
	ev := EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn: valid values are %v", v, AllowedEnumlastAccessTimeUncachedEntryCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumlastAccessTimeUncachedEntryCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlast-access-time-uncached-entry-criteriaSchemaUrn value
func (v EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) Ptr() *EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn {
	return &v
}

type NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn struct {
	value *EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) Get() *EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) Set(val *EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn(val *EnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) *NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn {
	return &NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlastAccessTimeUncachedEntryCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
