/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddPassphraseProviderRequest - struct for AddPassphraseProviderRequest
type AddPassphraseProviderRequest struct {
	AddAmazonSecretsManagerPassphraseProviderRequest *AddAmazonSecretsManagerPassphraseProviderRequest
	AddAzureKeyVaultPassphraseProviderRequest        *AddAzureKeyVaultPassphraseProviderRequest
	AddConjurPassphraseProviderRequest               *AddConjurPassphraseProviderRequest
	AddEnvironmentVariablePassphraseProviderRequest  *AddEnvironmentVariablePassphraseProviderRequest
	AddFileBasedPassphraseProviderRequest            *AddFileBasedPassphraseProviderRequest
	AddObscuredValuePassphraseProviderRequest        *AddObscuredValuePassphraseProviderRequest
	AddThirdPartyPassphraseProviderRequest           *AddThirdPartyPassphraseProviderRequest
	AddVaultPassphraseProviderRequest                *AddVaultPassphraseProviderRequest
}

// AddAmazonSecretsManagerPassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddAmazonSecretsManagerPassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddAmazonSecretsManagerPassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddAmazonSecretsManagerPassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddAmazonSecretsManagerPassphraseProviderRequest: v,
	}
}

// AddAzureKeyVaultPassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddAzureKeyVaultPassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddAzureKeyVaultPassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddAzureKeyVaultPassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddAzureKeyVaultPassphraseProviderRequest: v,
	}
}

// AddConjurPassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddConjurPassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddConjurPassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddConjurPassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddConjurPassphraseProviderRequest: v,
	}
}

// AddEnvironmentVariablePassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddEnvironmentVariablePassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddEnvironmentVariablePassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddEnvironmentVariablePassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddEnvironmentVariablePassphraseProviderRequest: v,
	}
}

// AddFileBasedPassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddFileBasedPassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddFileBasedPassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddFileBasedPassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddFileBasedPassphraseProviderRequest: v,
	}
}

// AddObscuredValuePassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddObscuredValuePassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddObscuredValuePassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddObscuredValuePassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddObscuredValuePassphraseProviderRequest: v,
	}
}

// AddThirdPartyPassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddThirdPartyPassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddThirdPartyPassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddThirdPartyPassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddThirdPartyPassphraseProviderRequest: v,
	}
}

// AddVaultPassphraseProviderRequestAsAddPassphraseProviderRequest is a convenience function that returns AddVaultPassphraseProviderRequest wrapped in AddPassphraseProviderRequest
func AddVaultPassphraseProviderRequestAsAddPassphraseProviderRequest(v *AddVaultPassphraseProviderRequest) AddPassphraseProviderRequest {
	return AddPassphraseProviderRequest{
		AddVaultPassphraseProviderRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddPassphraseProviderRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAmazonSecretsManagerPassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddAmazonSecretsManagerPassphraseProviderRequest)
	if err == nil {
		jsonAddAmazonSecretsManagerPassphraseProviderRequest, _ := json.Marshal(dst.AddAmazonSecretsManagerPassphraseProviderRequest)
		if string(jsonAddAmazonSecretsManagerPassphraseProviderRequest) == "{}" { // empty struct
			dst.AddAmazonSecretsManagerPassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAmazonSecretsManagerPassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddAzureKeyVaultPassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddAzureKeyVaultPassphraseProviderRequest)
	if err == nil {
		jsonAddAzureKeyVaultPassphraseProviderRequest, _ := json.Marshal(dst.AddAzureKeyVaultPassphraseProviderRequest)
		if string(jsonAddAzureKeyVaultPassphraseProviderRequest) == "{}" { // empty struct
			dst.AddAzureKeyVaultPassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAzureKeyVaultPassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddConjurPassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddConjurPassphraseProviderRequest)
	if err == nil {
		jsonAddConjurPassphraseProviderRequest, _ := json.Marshal(dst.AddConjurPassphraseProviderRequest)
		if string(jsonAddConjurPassphraseProviderRequest) == "{}" { // empty struct
			dst.AddConjurPassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddConjurPassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddEnvironmentVariablePassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddEnvironmentVariablePassphraseProviderRequest)
	if err == nil {
		jsonAddEnvironmentVariablePassphraseProviderRequest, _ := json.Marshal(dst.AddEnvironmentVariablePassphraseProviderRequest)
		if string(jsonAddEnvironmentVariablePassphraseProviderRequest) == "{}" { // empty struct
			dst.AddEnvironmentVariablePassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddEnvironmentVariablePassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddFileBasedPassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddFileBasedPassphraseProviderRequest)
	if err == nil {
		jsonAddFileBasedPassphraseProviderRequest, _ := json.Marshal(dst.AddFileBasedPassphraseProviderRequest)
		if string(jsonAddFileBasedPassphraseProviderRequest) == "{}" { // empty struct
			dst.AddFileBasedPassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFileBasedPassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddObscuredValuePassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddObscuredValuePassphraseProviderRequest)
	if err == nil {
		jsonAddObscuredValuePassphraseProviderRequest, _ := json.Marshal(dst.AddObscuredValuePassphraseProviderRequest)
		if string(jsonAddObscuredValuePassphraseProviderRequest) == "{}" { // empty struct
			dst.AddObscuredValuePassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddObscuredValuePassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddThirdPartyPassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyPassphraseProviderRequest)
	if err == nil {
		jsonAddThirdPartyPassphraseProviderRequest, _ := json.Marshal(dst.AddThirdPartyPassphraseProviderRequest)
		if string(jsonAddThirdPartyPassphraseProviderRequest) == "{}" { // empty struct
			dst.AddThirdPartyPassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyPassphraseProviderRequest = nil
	}

	// try to unmarshal data into AddVaultPassphraseProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddVaultPassphraseProviderRequest)
	if err == nil {
		jsonAddVaultPassphraseProviderRequest, _ := json.Marshal(dst.AddVaultPassphraseProviderRequest)
		if string(jsonAddVaultPassphraseProviderRequest) == "{}" { // empty struct
			dst.AddVaultPassphraseProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddVaultPassphraseProviderRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAmazonSecretsManagerPassphraseProviderRequest = nil
		dst.AddAzureKeyVaultPassphraseProviderRequest = nil
		dst.AddConjurPassphraseProviderRequest = nil
		dst.AddEnvironmentVariablePassphraseProviderRequest = nil
		dst.AddFileBasedPassphraseProviderRequest = nil
		dst.AddObscuredValuePassphraseProviderRequest = nil
		dst.AddThirdPartyPassphraseProviderRequest = nil
		dst.AddVaultPassphraseProviderRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddPassphraseProviderRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddPassphraseProviderRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddPassphraseProviderRequest) MarshalJSON() ([]byte, error) {
	if src.AddAmazonSecretsManagerPassphraseProviderRequest != nil {
		return json.Marshal(&src.AddAmazonSecretsManagerPassphraseProviderRequest)
	}

	if src.AddAzureKeyVaultPassphraseProviderRequest != nil {
		return json.Marshal(&src.AddAzureKeyVaultPassphraseProviderRequest)
	}

	if src.AddConjurPassphraseProviderRequest != nil {
		return json.Marshal(&src.AddConjurPassphraseProviderRequest)
	}

	if src.AddEnvironmentVariablePassphraseProviderRequest != nil {
		return json.Marshal(&src.AddEnvironmentVariablePassphraseProviderRequest)
	}

	if src.AddFileBasedPassphraseProviderRequest != nil {
		return json.Marshal(&src.AddFileBasedPassphraseProviderRequest)
	}

	if src.AddObscuredValuePassphraseProviderRequest != nil {
		return json.Marshal(&src.AddObscuredValuePassphraseProviderRequest)
	}

	if src.AddThirdPartyPassphraseProviderRequest != nil {
		return json.Marshal(&src.AddThirdPartyPassphraseProviderRequest)
	}

	if src.AddVaultPassphraseProviderRequest != nil {
		return json.Marshal(&src.AddVaultPassphraseProviderRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddPassphraseProviderRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddAmazonSecretsManagerPassphraseProviderRequest != nil {
		return obj.AddAmazonSecretsManagerPassphraseProviderRequest
	}

	if obj.AddAzureKeyVaultPassphraseProviderRequest != nil {
		return obj.AddAzureKeyVaultPassphraseProviderRequest
	}

	if obj.AddConjurPassphraseProviderRequest != nil {
		return obj.AddConjurPassphraseProviderRequest
	}

	if obj.AddEnvironmentVariablePassphraseProviderRequest != nil {
		return obj.AddEnvironmentVariablePassphraseProviderRequest
	}

	if obj.AddFileBasedPassphraseProviderRequest != nil {
		return obj.AddFileBasedPassphraseProviderRequest
	}

	if obj.AddObscuredValuePassphraseProviderRequest != nil {
		return obj.AddObscuredValuePassphraseProviderRequest
	}

	if obj.AddThirdPartyPassphraseProviderRequest != nil {
		return obj.AddThirdPartyPassphraseProviderRequest
	}

	if obj.AddVaultPassphraseProviderRequest != nil {
		return obj.AddVaultPassphraseProviderRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddPassphraseProviderRequest struct {
	value *AddPassphraseProviderRequest
	isSet bool
}

func (v NullableAddPassphraseProviderRequest) Get() *AddPassphraseProviderRequest {
	return v.value
}

func (v *NullableAddPassphraseProviderRequest) Set(val *AddPassphraseProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPassphraseProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPassphraseProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPassphraseProviderRequest(val *AddPassphraseProviderRequest) *NullableAddPassphraseProviderRequest {
	return &NullableAddPassphraseProviderRequest{value: val, isSet: true}
}

func (v NullableAddPassphraseProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPassphraseProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
