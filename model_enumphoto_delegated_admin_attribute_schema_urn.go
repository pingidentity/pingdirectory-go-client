/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumphotoDelegatedAdminAttributeSchemaUrn the model 'EnumphotoDelegatedAdminAttributeSchemaUrn'
type EnumphotoDelegatedAdminAttributeSchemaUrn string

// List of Enumphoto-delegated-admin-attributeSchemaUrn
const (
	ENUMPHOTODELEGATEDADMINATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DELEGATED_ADMIN_ATTRIBUTEPHOTO EnumphotoDelegatedAdminAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:delegated-admin-attribute:photo"
)

// All allowed values of EnumphotoDelegatedAdminAttributeSchemaUrn enum
var AllowedEnumphotoDelegatedAdminAttributeSchemaUrnEnumValues = []EnumphotoDelegatedAdminAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:delegated-admin-attribute:photo",
}

func (v *EnumphotoDelegatedAdminAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumphotoDelegatedAdminAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumphotoDelegatedAdminAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumphotoDelegatedAdminAttributeSchemaUrn", value)
}

// NewEnumphotoDelegatedAdminAttributeSchemaUrnFromValue returns a pointer to a valid EnumphotoDelegatedAdminAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumphotoDelegatedAdminAttributeSchemaUrnFromValue(v string) (*EnumphotoDelegatedAdminAttributeSchemaUrn, error) {
	ev := EnumphotoDelegatedAdminAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumphotoDelegatedAdminAttributeSchemaUrn: valid values are %v", v, AllowedEnumphotoDelegatedAdminAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumphotoDelegatedAdminAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumphotoDelegatedAdminAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumphoto-delegated-admin-attributeSchemaUrn value
func (v EnumphotoDelegatedAdminAttributeSchemaUrn) Ptr() *EnumphotoDelegatedAdminAttributeSchemaUrn {
	return &v
}

type NullableEnumphotoDelegatedAdminAttributeSchemaUrn struct {
	value *EnumphotoDelegatedAdminAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumphotoDelegatedAdminAttributeSchemaUrn) Get() *EnumphotoDelegatedAdminAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumphotoDelegatedAdminAttributeSchemaUrn) Set(val *EnumphotoDelegatedAdminAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumphotoDelegatedAdminAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumphotoDelegatedAdminAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumphotoDelegatedAdminAttributeSchemaUrn(val *EnumphotoDelegatedAdminAttributeSchemaUrn) *NullableEnumphotoDelegatedAdminAttributeSchemaUrn {
	return &NullableEnumphotoDelegatedAdminAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumphotoDelegatedAdminAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumphotoDelegatedAdminAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
