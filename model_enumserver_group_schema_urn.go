/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumserverGroupSchemaUrn the model 'EnumserverGroupSchemaUrn'
type EnumserverGroupSchemaUrn string

// List of Enumserver-groupSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0SERVER_GROUP EnumserverGroupSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:server-group"
)

// All allowed values of EnumserverGroupSchemaUrn enum
var AllowedEnumserverGroupSchemaUrnEnumValues = []EnumserverGroupSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:server-group",
}

func (v *EnumserverGroupSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumserverGroupSchemaUrn(value)
	for _, existing := range AllowedEnumserverGroupSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumserverGroupSchemaUrn", value)
}

// NewEnumserverGroupSchemaUrnFromValue returns a pointer to a valid EnumserverGroupSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumserverGroupSchemaUrnFromValue(v string) (*EnumserverGroupSchemaUrn, error) {
	ev := EnumserverGroupSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumserverGroupSchemaUrn: valid values are %v", v, AllowedEnumserverGroupSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumserverGroupSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumserverGroupSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumserver-groupSchemaUrn value
func (v EnumserverGroupSchemaUrn) Ptr() *EnumserverGroupSchemaUrn {
	return &v
}

type NullableEnumserverGroupSchemaUrn struct {
	value *EnumserverGroupSchemaUrn
	isSet bool
}

func (v NullableEnumserverGroupSchemaUrn) Get() *EnumserverGroupSchemaUrn {
	return v.value
}

func (v *NullableEnumserverGroupSchemaUrn) Set(val *EnumserverGroupSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumserverGroupSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumserverGroupSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumserverGroupSchemaUrn(val *EnumserverGroupSchemaUrn) *NullableEnumserverGroupSchemaUrn {
	return &NullableEnumserverGroupSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumserverGroupSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumserverGroupSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

