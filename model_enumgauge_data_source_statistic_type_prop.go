/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumgaugeDataSourceStatisticTypeProp Specifies the type of statistic to include in the output for the monitored attribute.
type EnumgaugeDataSourceStatisticTypeProp string

// List of Enumgauge-data-source-statisticTypeProp
const (
	COUNT_PER_SECOND EnumgaugeDataSourceStatisticTypeProp = "count-per-second"
	AVERAGE EnumgaugeDataSourceStatisticTypeProp = "average"
	MINIMUM EnumgaugeDataSourceStatisticTypeProp = "minimum"
	MAXIMUM EnumgaugeDataSourceStatisticTypeProp = "maximum"
)

// All allowed values of EnumgaugeDataSourceStatisticTypeProp enum
var AllowedEnumgaugeDataSourceStatisticTypePropEnumValues = []EnumgaugeDataSourceStatisticTypeProp{
	"count-per-second",
	"average",
	"minimum",
	"maximum",
}

func (v *EnumgaugeDataSourceStatisticTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgaugeDataSourceStatisticTypeProp(value)
	for _, existing := range AllowedEnumgaugeDataSourceStatisticTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgaugeDataSourceStatisticTypeProp", value)
}

// NewEnumgaugeDataSourceStatisticTypePropFromValue returns a pointer to a valid EnumgaugeDataSourceStatisticTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgaugeDataSourceStatisticTypePropFromValue(v string) (*EnumgaugeDataSourceStatisticTypeProp, error) {
	ev := EnumgaugeDataSourceStatisticTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgaugeDataSourceStatisticTypeProp: valid values are %v", v, AllowedEnumgaugeDataSourceStatisticTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgaugeDataSourceStatisticTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumgaugeDataSourceStatisticTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgauge-data-source-statisticTypeProp value
func (v EnumgaugeDataSourceStatisticTypeProp) Ptr() *EnumgaugeDataSourceStatisticTypeProp {
	return &v
}

type NullableEnumgaugeDataSourceStatisticTypeProp struct {
	value *EnumgaugeDataSourceStatisticTypeProp
	isSet bool
}

func (v NullableEnumgaugeDataSourceStatisticTypeProp) Get() *EnumgaugeDataSourceStatisticTypeProp {
	return v.value
}

func (v *NullableEnumgaugeDataSourceStatisticTypeProp) Set(val *EnumgaugeDataSourceStatisticTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgaugeDataSourceStatisticTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgaugeDataSourceStatisticTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgaugeDataSourceStatisticTypeProp(val *EnumgaugeDataSourceStatisticTypeProp) *NullableEnumgaugeDataSourceStatisticTypeProp {
	return &NullableEnumgaugeDataSourceStatisticTypeProp{value: val, isSet: true}
}

func (v NullableEnumgaugeDataSourceStatisticTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgaugeDataSourceStatisticTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

