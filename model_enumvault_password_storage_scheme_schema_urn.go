/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvaultPasswordStorageSchemeSchemaUrn the model 'EnumvaultPasswordStorageSchemeSchemaUrn'
type EnumvaultPasswordStorageSchemeSchemaUrn string

// List of Enumvault-password-storage-schemeSchemaUrn
const (
	ENUMVAULTPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEVAULT EnumvaultPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:vault"
)

// All allowed values of EnumvaultPasswordStorageSchemeSchemaUrn enum
var AllowedEnumvaultPasswordStorageSchemeSchemaUrnEnumValues = []EnumvaultPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:vault",
}

func (v *EnumvaultPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvaultPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumvaultPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvaultPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumvaultPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumvaultPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvaultPasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumvaultPasswordStorageSchemeSchemaUrn, error) {
	ev := EnumvaultPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvaultPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumvaultPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvaultPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvaultPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvault-password-storage-schemeSchemaUrn value
func (v EnumvaultPasswordStorageSchemeSchemaUrn) Ptr() *EnumvaultPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumvaultPasswordStorageSchemeSchemaUrn struct {
	value *EnumvaultPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumvaultPasswordStorageSchemeSchemaUrn) Get() *EnumvaultPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumvaultPasswordStorageSchemeSchemaUrn) Set(val *EnumvaultPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvaultPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvaultPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvaultPasswordStorageSchemeSchemaUrn(val *EnumvaultPasswordStorageSchemeSchemaUrn) *NullableEnumvaultPasswordStorageSchemeSchemaUrn {
	return &NullableEnumvaultPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvaultPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvaultPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
