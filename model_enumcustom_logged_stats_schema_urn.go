/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumcustomLoggedStatsSchemaUrn the model 'EnumcustomLoggedStatsSchemaUrn'
type EnumcustomLoggedStatsSchemaUrn string

// List of Enumcustom-logged-statsSchemaUrn
const (
	ENUMCUSTOMLOGGEDSTATSSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CUSTOM_LOGGED_STATS EnumcustomLoggedStatsSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:custom-logged-stats"
)

// All allowed values of EnumcustomLoggedStatsSchemaUrn enum
var AllowedEnumcustomLoggedStatsSchemaUrnEnumValues = []EnumcustomLoggedStatsSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:custom-logged-stats",
}

func (v *EnumcustomLoggedStatsSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcustomLoggedStatsSchemaUrn(value)
	for _, existing := range AllowedEnumcustomLoggedStatsSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcustomLoggedStatsSchemaUrn", value)
}

// NewEnumcustomLoggedStatsSchemaUrnFromValue returns a pointer to a valid EnumcustomLoggedStatsSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcustomLoggedStatsSchemaUrnFromValue(v string) (*EnumcustomLoggedStatsSchemaUrn, error) {
	ev := EnumcustomLoggedStatsSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcustomLoggedStatsSchemaUrn: valid values are %v", v, AllowedEnumcustomLoggedStatsSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcustomLoggedStatsSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcustomLoggedStatsSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcustom-logged-statsSchemaUrn value
func (v EnumcustomLoggedStatsSchemaUrn) Ptr() *EnumcustomLoggedStatsSchemaUrn {
	return &v
}

type NullableEnumcustomLoggedStatsSchemaUrn struct {
	value *EnumcustomLoggedStatsSchemaUrn
	isSet bool
}

func (v NullableEnumcustomLoggedStatsSchemaUrn) Get() *EnumcustomLoggedStatsSchemaUrn {
	return v.value
}

func (v *NullableEnumcustomLoggedStatsSchemaUrn) Set(val *EnumcustomLoggedStatsSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcustomLoggedStatsSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcustomLoggedStatsSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcustomLoggedStatsSchemaUrn(val *EnumcustomLoggedStatsSchemaUrn) *NullableEnumcustomLoggedStatsSchemaUrn {
	return &NullableEnumcustomLoggedStatsSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcustomLoggedStatsSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcustomLoggedStatsSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
