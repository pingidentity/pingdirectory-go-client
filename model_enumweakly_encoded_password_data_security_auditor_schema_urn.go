/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn the model 'EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn'
type EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn string

// List of Enumweakly-encoded-password-data-security-auditorSchemaUrn
const (
	ENUMWEAKLYENCODEDPASSWORDDATASECURITYAUDITORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DATA_SECURITY_AUDITORWEAKLY_ENCODED_PASSWORD EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:data-security-auditor:weakly-encoded-password"
)

// All allowed values of EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn enum
var AllowedEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrnEnumValues = []EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:data-security-auditor:weakly-encoded-password",
}

func (v *EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn(value)
	for _, existing := range AllowedEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn", value)
}

// NewEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrnFromValue returns a pointer to a valid EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrnFromValue(v string) (*EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn, error) {
	ev := EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn: valid values are %v", v, AllowedEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumweakly-encoded-password-data-security-auditorSchemaUrn value
func (v EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) Ptr() *EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn {
	return &v
}

type NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn struct {
	value *EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn
	isSet bool
}

func (v NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) Get() *EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn {
	return v.value
}

func (v *NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) Set(val *EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn(val *EnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) *NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn {
	return &NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumweaklyEncodedPasswordDataSecurityAuditorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

