/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumglobalConfigurationJmxValueBehaviorProp Specifies how a Java type is chosen for monitor attributes exposed as JMX attribute values.
type EnumglobalConfigurationJmxValueBehaviorProp string

// List of Enumglobal-configuration-jmxValueBehaviorProp
const (
	ENUMGLOBALCONFIGURATIONJMXVALUEBEHAVIORPROP_INFERRED EnumglobalConfigurationJmxValueBehaviorProp = "inferred"
	ENUMGLOBALCONFIGURATIONJMXVALUEBEHAVIORPROP_STRING   EnumglobalConfigurationJmxValueBehaviorProp = "string"
)

// All allowed values of EnumglobalConfigurationJmxValueBehaviorProp enum
var AllowedEnumglobalConfigurationJmxValueBehaviorPropEnumValues = []EnumglobalConfigurationJmxValueBehaviorProp{
	"inferred",
	"string",
}

func (v *EnumglobalConfigurationJmxValueBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumglobalConfigurationJmxValueBehaviorProp(value)
	for _, existing := range AllowedEnumglobalConfigurationJmxValueBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumglobalConfigurationJmxValueBehaviorProp", value)
}

// NewEnumglobalConfigurationJmxValueBehaviorPropFromValue returns a pointer to a valid EnumglobalConfigurationJmxValueBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumglobalConfigurationJmxValueBehaviorPropFromValue(v string) (*EnumglobalConfigurationJmxValueBehaviorProp, error) {
	ev := EnumglobalConfigurationJmxValueBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumglobalConfigurationJmxValueBehaviorProp: valid values are %v", v, AllowedEnumglobalConfigurationJmxValueBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumglobalConfigurationJmxValueBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumglobalConfigurationJmxValueBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumglobal-configuration-jmxValueBehaviorProp value
func (v EnumglobalConfigurationJmxValueBehaviorProp) Ptr() *EnumglobalConfigurationJmxValueBehaviorProp {
	return &v
}

type NullableEnumglobalConfigurationJmxValueBehaviorProp struct {
	value *EnumglobalConfigurationJmxValueBehaviorProp
	isSet bool
}

func (v NullableEnumglobalConfigurationJmxValueBehaviorProp) Get() *EnumglobalConfigurationJmxValueBehaviorProp {
	return v.value
}

func (v *NullableEnumglobalConfigurationJmxValueBehaviorProp) Set(val *EnumglobalConfigurationJmxValueBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumglobalConfigurationJmxValueBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumglobalConfigurationJmxValueBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumglobalConfigurationJmxValueBehaviorProp(val *EnumglobalConfigurationJmxValueBehaviorProp) *NullableEnumglobalConfigurationJmxValueBehaviorProp {
	return &NullableEnumglobalConfigurationJmxValueBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumglobalConfigurationJmxValueBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumglobalConfigurationJmxValueBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
