/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetServerInstance200Response - struct for GetServerInstance200Response
type GetServerInstance200Response struct {
	AuthorizeServerInstanceResponse     *AuthorizeServerInstanceResponse
	DirectoryServerInstanceResponse     *DirectoryServerInstanceResponse
	MetricsEngineServerInstanceResponse *MetricsEngineServerInstanceResponse
	ProxyServerInstanceResponse         *ProxyServerInstanceResponse
	SyncServerInstanceResponse          *SyncServerInstanceResponse
}

// AuthorizeServerInstanceResponseAsGetServerInstance200Response is a convenience function that returns AuthorizeServerInstanceResponse wrapped in GetServerInstance200Response
func AuthorizeServerInstanceResponseAsGetServerInstance200Response(v *AuthorizeServerInstanceResponse) GetServerInstance200Response {
	return GetServerInstance200Response{
		AuthorizeServerInstanceResponse: v,
	}
}

// DirectoryServerInstanceResponseAsGetServerInstance200Response is a convenience function that returns DirectoryServerInstanceResponse wrapped in GetServerInstance200Response
func DirectoryServerInstanceResponseAsGetServerInstance200Response(v *DirectoryServerInstanceResponse) GetServerInstance200Response {
	return GetServerInstance200Response{
		DirectoryServerInstanceResponse: v,
	}
}

// MetricsEngineServerInstanceResponseAsGetServerInstance200Response is a convenience function that returns MetricsEngineServerInstanceResponse wrapped in GetServerInstance200Response
func MetricsEngineServerInstanceResponseAsGetServerInstance200Response(v *MetricsEngineServerInstanceResponse) GetServerInstance200Response {
	return GetServerInstance200Response{
		MetricsEngineServerInstanceResponse: v,
	}
}

// ProxyServerInstanceResponseAsGetServerInstance200Response is a convenience function that returns ProxyServerInstanceResponse wrapped in GetServerInstance200Response
func ProxyServerInstanceResponseAsGetServerInstance200Response(v *ProxyServerInstanceResponse) GetServerInstance200Response {
	return GetServerInstance200Response{
		ProxyServerInstanceResponse: v,
	}
}

// SyncServerInstanceResponseAsGetServerInstance200Response is a convenience function that returns SyncServerInstanceResponse wrapped in GetServerInstance200Response
func SyncServerInstanceResponseAsGetServerInstance200Response(v *SyncServerInstanceResponse) GetServerInstance200Response {
	return GetServerInstance200Response{
		SyncServerInstanceResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetServerInstance200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AuthorizeServerInstanceResponse
	err = newStrictDecoder(data).Decode(&dst.AuthorizeServerInstanceResponse)
	if err == nil {
		jsonAuthorizeServerInstanceResponse, _ := json.Marshal(dst.AuthorizeServerInstanceResponse)
		if string(jsonAuthorizeServerInstanceResponse) == "{}" { // empty struct
			dst.AuthorizeServerInstanceResponse = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeServerInstanceResponse = nil
	}

	// try to unmarshal data into DirectoryServerInstanceResponse
	err = newStrictDecoder(data).Decode(&dst.DirectoryServerInstanceResponse)
	if err == nil {
		jsonDirectoryServerInstanceResponse, _ := json.Marshal(dst.DirectoryServerInstanceResponse)
		if string(jsonDirectoryServerInstanceResponse) == "{}" { // empty struct
			dst.DirectoryServerInstanceResponse = nil
		} else {
			match++
		}
	} else {
		dst.DirectoryServerInstanceResponse = nil
	}

	// try to unmarshal data into MetricsEngineServerInstanceResponse
	err = newStrictDecoder(data).Decode(&dst.MetricsEngineServerInstanceResponse)
	if err == nil {
		jsonMetricsEngineServerInstanceResponse, _ := json.Marshal(dst.MetricsEngineServerInstanceResponse)
		if string(jsonMetricsEngineServerInstanceResponse) == "{}" { // empty struct
			dst.MetricsEngineServerInstanceResponse = nil
		} else {
			match++
		}
	} else {
		dst.MetricsEngineServerInstanceResponse = nil
	}

	// try to unmarshal data into ProxyServerInstanceResponse
	err = newStrictDecoder(data).Decode(&dst.ProxyServerInstanceResponse)
	if err == nil {
		jsonProxyServerInstanceResponse, _ := json.Marshal(dst.ProxyServerInstanceResponse)
		if string(jsonProxyServerInstanceResponse) == "{}" { // empty struct
			dst.ProxyServerInstanceResponse = nil
		} else {
			match++
		}
	} else {
		dst.ProxyServerInstanceResponse = nil
	}

	// try to unmarshal data into SyncServerInstanceResponse
	err = newStrictDecoder(data).Decode(&dst.SyncServerInstanceResponse)
	if err == nil {
		jsonSyncServerInstanceResponse, _ := json.Marshal(dst.SyncServerInstanceResponse)
		if string(jsonSyncServerInstanceResponse) == "{}" { // empty struct
			dst.SyncServerInstanceResponse = nil
		} else {
			match++
		}
	} else {
		dst.SyncServerInstanceResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AuthorizeServerInstanceResponse = nil
		dst.DirectoryServerInstanceResponse = nil
		dst.MetricsEngineServerInstanceResponse = nil
		dst.ProxyServerInstanceResponse = nil
		dst.SyncServerInstanceResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetServerInstance200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetServerInstance200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetServerInstance200Response) MarshalJSON() ([]byte, error) {
	if src.AuthorizeServerInstanceResponse != nil {
		return json.Marshal(&src.AuthorizeServerInstanceResponse)
	}

	if src.DirectoryServerInstanceResponse != nil {
		return json.Marshal(&src.DirectoryServerInstanceResponse)
	}

	if src.MetricsEngineServerInstanceResponse != nil {
		return json.Marshal(&src.MetricsEngineServerInstanceResponse)
	}

	if src.ProxyServerInstanceResponse != nil {
		return json.Marshal(&src.ProxyServerInstanceResponse)
	}

	if src.SyncServerInstanceResponse != nil {
		return json.Marshal(&src.SyncServerInstanceResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetServerInstance200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeServerInstanceResponse != nil {
		return obj.AuthorizeServerInstanceResponse
	}

	if obj.DirectoryServerInstanceResponse != nil {
		return obj.DirectoryServerInstanceResponse
	}

	if obj.MetricsEngineServerInstanceResponse != nil {
		return obj.MetricsEngineServerInstanceResponse
	}

	if obj.ProxyServerInstanceResponse != nil {
		return obj.ProxyServerInstanceResponse
	}

	if obj.SyncServerInstanceResponse != nil {
		return obj.SyncServerInstanceResponse
	}

	// all schemas are nil
	return nil
}

type NullableGetServerInstance200Response struct {
	value *GetServerInstance200Response
	isSet bool
}

func (v NullableGetServerInstance200Response) Get() *GetServerInstance200Response {
	return v.value
}

func (v *NullableGetServerInstance200Response) Set(val *GetServerInstance200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetServerInstance200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetServerInstance200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetServerInstance200Response(val *GetServerInstance200Response) *NullableGetServerInstance200Response {
	return &NullableGetServerInstance200Response{value: val, isSet: true}
}

func (v NullableGetServerInstance200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetServerInstance200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
