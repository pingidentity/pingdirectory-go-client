/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumerrorLogAlertHandlerSchemaUrn the model 'EnumerrorLogAlertHandlerSchemaUrn'
type EnumerrorLogAlertHandlerSchemaUrn string

// List of Enumerror-log-alert-handlerSchemaUrn
const (
	ENUMERRORLOGALERTHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ALERT_HANDLERERROR_LOG EnumerrorLogAlertHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:alert-handler:error-log"
)

// All allowed values of EnumerrorLogAlertHandlerSchemaUrn enum
var AllowedEnumerrorLogAlertHandlerSchemaUrnEnumValues = []EnumerrorLogAlertHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:alert-handler:error-log",
}

func (v *EnumerrorLogAlertHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumerrorLogAlertHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumerrorLogAlertHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumerrorLogAlertHandlerSchemaUrn", value)
}

// NewEnumerrorLogAlertHandlerSchemaUrnFromValue returns a pointer to a valid EnumerrorLogAlertHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumerrorLogAlertHandlerSchemaUrnFromValue(v string) (*EnumerrorLogAlertHandlerSchemaUrn, error) {
	ev := EnumerrorLogAlertHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumerrorLogAlertHandlerSchemaUrn: valid values are %v", v, AllowedEnumerrorLogAlertHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumerrorLogAlertHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumerrorLogAlertHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumerror-log-alert-handlerSchemaUrn value
func (v EnumerrorLogAlertHandlerSchemaUrn) Ptr() *EnumerrorLogAlertHandlerSchemaUrn {
	return &v
}

type NullableEnumerrorLogAlertHandlerSchemaUrn struct {
	value *EnumerrorLogAlertHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumerrorLogAlertHandlerSchemaUrn) Get() *EnumerrorLogAlertHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumerrorLogAlertHandlerSchemaUrn) Set(val *EnumerrorLogAlertHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumerrorLogAlertHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumerrorLogAlertHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumerrorLogAlertHandlerSchemaUrn(val *EnumerrorLogAlertHandlerSchemaUrn) *NullableEnumerrorLogAlertHandlerSchemaUrn {
	return &NullableEnumerrorLogAlertHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumerrorLogAlertHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumerrorLogAlertHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
