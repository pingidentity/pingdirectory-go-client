/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackupBackendSchemaUrn the model 'EnumbackupBackendSchemaUrn'
type EnumbackupBackendSchemaUrn string

// List of Enumbackup-backendSchemaUrn
const (
	ENUMBACKUPBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDBACKUP EnumbackupBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:backup"
)

// All allowed values of EnumbackupBackendSchemaUrn enum
var AllowedEnumbackupBackendSchemaUrnEnumValues = []EnumbackupBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:backup",
}

func (v *EnumbackupBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackupBackendSchemaUrn(value)
	for _, existing := range AllowedEnumbackupBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackupBackendSchemaUrn", value)
}

// NewEnumbackupBackendSchemaUrnFromValue returns a pointer to a valid EnumbackupBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackupBackendSchemaUrnFromValue(v string) (*EnumbackupBackendSchemaUrn, error) {
	ev := EnumbackupBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackupBackendSchemaUrn: valid values are %v", v, AllowedEnumbackupBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackupBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumbackupBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackup-backendSchemaUrn value
func (v EnumbackupBackendSchemaUrn) Ptr() *EnumbackupBackendSchemaUrn {
	return &v
}

type NullableEnumbackupBackendSchemaUrn struct {
	value *EnumbackupBackendSchemaUrn
	isSet bool
}

func (v NullableEnumbackupBackendSchemaUrn) Get() *EnumbackupBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumbackupBackendSchemaUrn) Set(val *EnumbackupBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackupBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackupBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackupBackendSchemaUrn(val *EnumbackupBackendSchemaUrn) *NullableEnumbackupBackendSchemaUrn {
	return &NullableEnumbackupBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumbackupBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackupBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
