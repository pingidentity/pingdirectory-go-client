/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExpiredPasswordDataSecurityAuditorShared struct for ExpiredPasswordDataSecurityAuditorShared
type ExpiredPasswordDataSecurityAuditorShared struct {
	Schemas []EnumexpiredPasswordDataSecurityAuditorSchemaUrn `json:"schemas"`
	// Specifies the name of the detailed report file.
	ReportFile string `json:"reportFile"`
	IncludeAttribute []string `json:"includeAttribute,omitempty"`
	// If set, the auditor will report all users with passwords older than the specified value even if password expiration is not enabled.
	PasswordEvaluationAge *string `json:"passwordEvaluationAge,omitempty"`
	// Indicates whether the Data Security Auditor is enabled for use.
	Enabled bool `json:"enabled"`
	AuditBackend []string `json:"auditBackend,omitempty"`
	AuditSeverity *EnumdataSecurityAuditorAuditSeverityProp `json:"auditSeverity,omitempty"`
}

// NewExpiredPasswordDataSecurityAuditorShared instantiates a new ExpiredPasswordDataSecurityAuditorShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpiredPasswordDataSecurityAuditorShared(schemas []EnumexpiredPasswordDataSecurityAuditorSchemaUrn, reportFile string, enabled bool) *ExpiredPasswordDataSecurityAuditorShared {
	this := ExpiredPasswordDataSecurityAuditorShared{}
	this.Schemas = schemas
	this.ReportFile = reportFile
	this.Enabled = enabled
	return &this
}

// NewExpiredPasswordDataSecurityAuditorSharedWithDefaults instantiates a new ExpiredPasswordDataSecurityAuditorShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpiredPasswordDataSecurityAuditorSharedWithDefaults() *ExpiredPasswordDataSecurityAuditorShared {
	this := ExpiredPasswordDataSecurityAuditorShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *ExpiredPasswordDataSecurityAuditorShared) GetSchemas() []EnumexpiredPasswordDataSecurityAuditorSchemaUrn {
	if o == nil {
		var ret []EnumexpiredPasswordDataSecurityAuditorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetSchemasOk() ([]EnumexpiredPasswordDataSecurityAuditorSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ExpiredPasswordDataSecurityAuditorShared) SetSchemas(v []EnumexpiredPasswordDataSecurityAuditorSchemaUrn) {
	o.Schemas = v
}

// GetReportFile returns the ReportFile field value
func (o *ExpiredPasswordDataSecurityAuditorShared) GetReportFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportFile
}

// GetReportFileOk returns a tuple with the ReportFile field value
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetReportFileOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReportFile, true
}

// SetReportFile sets field value
func (o *ExpiredPasswordDataSecurityAuditorShared) SetReportFile(v string) {
	o.ReportFile = v
}

// GetIncludeAttribute returns the IncludeAttribute field value if set, zero value otherwise.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetIncludeAttribute() []string {
	if o == nil || isNil(o.IncludeAttribute) {
		var ret []string
		return ret
	}
	return o.IncludeAttribute
}

// GetIncludeAttributeOk returns a tuple with the IncludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetIncludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.IncludeAttribute) {
    return nil, false
	}
	return o.IncludeAttribute, true
}

// HasIncludeAttribute returns a boolean if a field has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) HasIncludeAttribute() bool {
	if o != nil && !isNil(o.IncludeAttribute) {
		return true
	}

	return false
}

// SetIncludeAttribute gets a reference to the given []string and assigns it to the IncludeAttribute field.
func (o *ExpiredPasswordDataSecurityAuditorShared) SetIncludeAttribute(v []string) {
	o.IncludeAttribute = v
}

// GetPasswordEvaluationAge returns the PasswordEvaluationAge field value if set, zero value otherwise.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetPasswordEvaluationAge() string {
	if o == nil || isNil(o.PasswordEvaluationAge) {
		var ret string
		return ret
	}
	return *o.PasswordEvaluationAge
}

// GetPasswordEvaluationAgeOk returns a tuple with the PasswordEvaluationAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetPasswordEvaluationAgeOk() (*string, bool) {
	if o == nil || isNil(o.PasswordEvaluationAge) {
    return nil, false
	}
	return o.PasswordEvaluationAge, true
}

// HasPasswordEvaluationAge returns a boolean if a field has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) HasPasswordEvaluationAge() bool {
	if o != nil && !isNil(o.PasswordEvaluationAge) {
		return true
	}

	return false
}

// SetPasswordEvaluationAge gets a reference to the given string and assigns it to the PasswordEvaluationAge field.
func (o *ExpiredPasswordDataSecurityAuditorShared) SetPasswordEvaluationAge(v string) {
	o.PasswordEvaluationAge = &v
}

// GetEnabled returns the Enabled field value
func (o *ExpiredPasswordDataSecurityAuditorShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ExpiredPasswordDataSecurityAuditorShared) SetEnabled(v bool) {
	o.Enabled = v
}

// GetAuditBackend returns the AuditBackend field value if set, zero value otherwise.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetAuditBackend() []string {
	if o == nil || isNil(o.AuditBackend) {
		var ret []string
		return ret
	}
	return o.AuditBackend
}

// GetAuditBackendOk returns a tuple with the AuditBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetAuditBackendOk() ([]string, bool) {
	if o == nil || isNil(o.AuditBackend) {
    return nil, false
	}
	return o.AuditBackend, true
}

// HasAuditBackend returns a boolean if a field has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) HasAuditBackend() bool {
	if o != nil && !isNil(o.AuditBackend) {
		return true
	}

	return false
}

// SetAuditBackend gets a reference to the given []string and assigns it to the AuditBackend field.
func (o *ExpiredPasswordDataSecurityAuditorShared) SetAuditBackend(v []string) {
	o.AuditBackend = v
}

// GetAuditSeverity returns the AuditSeverity field value if set, zero value otherwise.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetAuditSeverity() EnumdataSecurityAuditorAuditSeverityProp {
	if o == nil || isNil(o.AuditSeverity) {
		var ret EnumdataSecurityAuditorAuditSeverityProp
		return ret
	}
	return *o.AuditSeverity
}

// GetAuditSeverityOk returns a tuple with the AuditSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) GetAuditSeverityOk() (*EnumdataSecurityAuditorAuditSeverityProp, bool) {
	if o == nil || isNil(o.AuditSeverity) {
    return nil, false
	}
	return o.AuditSeverity, true
}

// HasAuditSeverity returns a boolean if a field has been set.
func (o *ExpiredPasswordDataSecurityAuditorShared) HasAuditSeverity() bool {
	if o != nil && !isNil(o.AuditSeverity) {
		return true
	}

	return false
}

// SetAuditSeverity gets a reference to the given EnumdataSecurityAuditorAuditSeverityProp and assigns it to the AuditSeverity field.
func (o *ExpiredPasswordDataSecurityAuditorShared) SetAuditSeverity(v EnumdataSecurityAuditorAuditSeverityProp) {
	o.AuditSeverity = &v
}

func (o ExpiredPasswordDataSecurityAuditorShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["reportFile"] = o.ReportFile
	}
	if !isNil(o.IncludeAttribute) {
		toSerialize["includeAttribute"] = o.IncludeAttribute
	}
	if !isNil(o.PasswordEvaluationAge) {
		toSerialize["passwordEvaluationAge"] = o.PasswordEvaluationAge
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.AuditBackend) {
		toSerialize["auditBackend"] = o.AuditBackend
	}
	if !isNil(o.AuditSeverity) {
		toSerialize["auditSeverity"] = o.AuditSeverity
	}
	return json.Marshal(toSerialize)
}

type NullableExpiredPasswordDataSecurityAuditorShared struct {
	value *ExpiredPasswordDataSecurityAuditorShared
	isSet bool
}

func (v NullableExpiredPasswordDataSecurityAuditorShared) Get() *ExpiredPasswordDataSecurityAuditorShared {
	return v.value
}

func (v *NullableExpiredPasswordDataSecurityAuditorShared) Set(val *ExpiredPasswordDataSecurityAuditorShared) {
	v.value = val
	v.isSet = true
}

func (v NullableExpiredPasswordDataSecurityAuditorShared) IsSet() bool {
	return v.isSet
}

func (v *NullableExpiredPasswordDataSecurityAuditorShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpiredPasswordDataSecurityAuditorShared(val *ExpiredPasswordDataSecurityAuditorShared) *NullableExpiredPasswordDataSecurityAuditorShared {
	return &NullableExpiredPasswordDataSecurityAuditorShared{value: val, isSet: true}
}

func (v NullableExpiredPasswordDataSecurityAuditorShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpiredPasswordDataSecurityAuditorShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


