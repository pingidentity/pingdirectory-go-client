/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumconstructedAttributeSchemaUrn the model 'EnumconstructedAttributeSchemaUrn'
type EnumconstructedAttributeSchemaUrn string

// List of Enumconstructed-attributeSchemaUrn
const (
	ENUMCONSTRUCTEDATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CONSTRUCTED_ATTRIBUTE EnumconstructedAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:constructed-attribute"
)

// All allowed values of EnumconstructedAttributeSchemaUrn enum
var AllowedEnumconstructedAttributeSchemaUrnEnumValues = []EnumconstructedAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:constructed-attribute",
}

func (v *EnumconstructedAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconstructedAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumconstructedAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconstructedAttributeSchemaUrn", value)
}

// NewEnumconstructedAttributeSchemaUrnFromValue returns a pointer to a valid EnumconstructedAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconstructedAttributeSchemaUrnFromValue(v string) (*EnumconstructedAttributeSchemaUrn, error) {
	ev := EnumconstructedAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconstructedAttributeSchemaUrn: valid values are %v", v, AllowedEnumconstructedAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconstructedAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconstructedAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconstructed-attributeSchemaUrn value
func (v EnumconstructedAttributeSchemaUrn) Ptr() *EnumconstructedAttributeSchemaUrn {
	return &v
}

type NullableEnumconstructedAttributeSchemaUrn struct {
	value *EnumconstructedAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumconstructedAttributeSchemaUrn) Get() *EnumconstructedAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumconstructedAttributeSchemaUrn) Set(val *EnumconstructedAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconstructedAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconstructedAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconstructedAttributeSchemaUrn(val *EnumconstructedAttributeSchemaUrn) *NullableEnumconstructedAttributeSchemaUrn {
	return &NullableEnumconstructedAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconstructedAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconstructedAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
