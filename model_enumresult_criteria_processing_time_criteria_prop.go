/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaProcessingTimeCriteriaProp Indicates whether the time required to process the operation should be taken into consideration when determining whether to include the operation in this Simple Result Criteria. If the processing time should be taken into account, then the \"processing-time-value\" property should contain the boundary value.
type EnumresultCriteriaProcessingTimeCriteriaProp string

// List of Enumresult-criteria-processingTimeCriteriaProp
const (
	ENUMRESULTCRITERIAPROCESSINGTIMECRITERIAPROP_ANY EnumresultCriteriaProcessingTimeCriteriaProp = "any"
	ENUMRESULTCRITERIAPROCESSINGTIMECRITERIAPROP_LESS_THAN_OR_EQUAL_TO EnumresultCriteriaProcessingTimeCriteriaProp = "less-than-or-equal-to"
	ENUMRESULTCRITERIAPROCESSINGTIMECRITERIAPROP_GREATER_THAN_OR_EQUAL_TO EnumresultCriteriaProcessingTimeCriteriaProp = "greater-than-or-equal-to"
)

// All allowed values of EnumresultCriteriaProcessingTimeCriteriaProp enum
var AllowedEnumresultCriteriaProcessingTimeCriteriaPropEnumValues = []EnumresultCriteriaProcessingTimeCriteriaProp{
	"any",
	"less-than-or-equal-to",
	"greater-than-or-equal-to",
}

func (v *EnumresultCriteriaProcessingTimeCriteriaProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaProcessingTimeCriteriaProp(value)
	for _, existing := range AllowedEnumresultCriteriaProcessingTimeCriteriaPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaProcessingTimeCriteriaProp", value)
}

// NewEnumresultCriteriaProcessingTimeCriteriaPropFromValue returns a pointer to a valid EnumresultCriteriaProcessingTimeCriteriaProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaProcessingTimeCriteriaPropFromValue(v string) (*EnumresultCriteriaProcessingTimeCriteriaProp, error) {
	ev := EnumresultCriteriaProcessingTimeCriteriaProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaProcessingTimeCriteriaProp: valid values are %v", v, AllowedEnumresultCriteriaProcessingTimeCriteriaPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaProcessingTimeCriteriaProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaProcessingTimeCriteriaPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-processingTimeCriteriaProp value
func (v EnumresultCriteriaProcessingTimeCriteriaProp) Ptr() *EnumresultCriteriaProcessingTimeCriteriaProp {
	return &v
}

type NullableEnumresultCriteriaProcessingTimeCriteriaProp struct {
	value *EnumresultCriteriaProcessingTimeCriteriaProp
	isSet bool
}

func (v NullableEnumresultCriteriaProcessingTimeCriteriaProp) Get() *EnumresultCriteriaProcessingTimeCriteriaProp {
	return v.value
}

func (v *NullableEnumresultCriteriaProcessingTimeCriteriaProp) Set(val *EnumresultCriteriaProcessingTimeCriteriaProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaProcessingTimeCriteriaProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaProcessingTimeCriteriaProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaProcessingTimeCriteriaProp(val *EnumresultCriteriaProcessingTimeCriteriaProp) *NullableEnumresultCriteriaProcessingTimeCriteriaProp {
	return &NullableEnumresultCriteriaProcessingTimeCriteriaProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaProcessingTimeCriteriaProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaProcessingTimeCriteriaProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

