/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdictionaryPasswordValidatorSchemaUrn the model 'EnumdictionaryPasswordValidatorSchemaUrn'
type EnumdictionaryPasswordValidatorSchemaUrn string

// List of Enumdictionary-password-validatorSchemaUrn
const (
	ENUMDICTIONARYPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORDICTIONARY EnumdictionaryPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:dictionary"
)

// All allowed values of EnumdictionaryPasswordValidatorSchemaUrn enum
var AllowedEnumdictionaryPasswordValidatorSchemaUrnEnumValues = []EnumdictionaryPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:dictionary",
}

func (v *EnumdictionaryPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdictionaryPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumdictionaryPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdictionaryPasswordValidatorSchemaUrn", value)
}

// NewEnumdictionaryPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumdictionaryPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdictionaryPasswordValidatorSchemaUrnFromValue(v string) (*EnumdictionaryPasswordValidatorSchemaUrn, error) {
	ev := EnumdictionaryPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdictionaryPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumdictionaryPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdictionaryPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdictionaryPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdictionary-password-validatorSchemaUrn value
func (v EnumdictionaryPasswordValidatorSchemaUrn) Ptr() *EnumdictionaryPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumdictionaryPasswordValidatorSchemaUrn struct {
	value *EnumdictionaryPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumdictionaryPasswordValidatorSchemaUrn) Get() *EnumdictionaryPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumdictionaryPasswordValidatorSchemaUrn) Set(val *EnumdictionaryPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdictionaryPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdictionaryPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdictionaryPasswordValidatorSchemaUrn(val *EnumdictionaryPasswordValidatorSchemaUrn) *NullableEnumdictionaryPasswordValidatorSchemaUrn {
	return &NullableEnumdictionaryPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdictionaryPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdictionaryPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

