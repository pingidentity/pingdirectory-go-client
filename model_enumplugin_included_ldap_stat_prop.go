/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginIncludedLDAPStatProp Specifies the types of statistics related to LDAP connections and operation processing that should be included in the output.
type EnumpluginIncludedLDAPStatProp string

// List of Enumplugin-includedLDAPStatProp
const (
	ENUMPLUGININCLUDEDLDAPSTATPROP_ACTIVE_OPERATIONS    EnumpluginIncludedLDAPStatProp = "active-operations"
	ENUMPLUGININCLUDEDLDAPSTATPROP_NUM_CONNECTIONS      EnumpluginIncludedLDAPStatProp = "num-connections"
	ENUMPLUGININCLUDEDLDAPSTATPROP_OP_COUNT_AND_LATENCY EnumpluginIncludedLDAPStatProp = "op-count-and-latency"
	ENUMPLUGININCLUDEDLDAPSTATPROP_WORK_QUEUE           EnumpluginIncludedLDAPStatProp = "work-queue"
	ENUMPLUGININCLUDEDLDAPSTATPROP_LDAP_PROTOCOL        EnumpluginIncludedLDAPStatProp = "ldap-protocol"
)

// All allowed values of EnumpluginIncludedLDAPStatProp enum
var AllowedEnumpluginIncludedLDAPStatPropEnumValues = []EnumpluginIncludedLDAPStatProp{
	"active-operations",
	"num-connections",
	"op-count-and-latency",
	"work-queue",
	"ldap-protocol",
}

func (v *EnumpluginIncludedLDAPStatProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginIncludedLDAPStatProp(value)
	for _, existing := range AllowedEnumpluginIncludedLDAPStatPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginIncludedLDAPStatProp", value)
}

// NewEnumpluginIncludedLDAPStatPropFromValue returns a pointer to a valid EnumpluginIncludedLDAPStatProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginIncludedLDAPStatPropFromValue(v string) (*EnumpluginIncludedLDAPStatProp, error) {
	ev := EnumpluginIncludedLDAPStatProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginIncludedLDAPStatProp: valid values are %v", v, AllowedEnumpluginIncludedLDAPStatPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginIncludedLDAPStatProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginIncludedLDAPStatPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-includedLDAPStatProp value
func (v EnumpluginIncludedLDAPStatProp) Ptr() *EnumpluginIncludedLDAPStatProp {
	return &v
}

type NullableEnumpluginIncludedLDAPStatProp struct {
	value *EnumpluginIncludedLDAPStatProp
	isSet bool
}

func (v NullableEnumpluginIncludedLDAPStatProp) Get() *EnumpluginIncludedLDAPStatProp {
	return v.value
}

func (v *NullableEnumpluginIncludedLDAPStatProp) Set(val *EnumpluginIncludedLDAPStatProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginIncludedLDAPStatProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginIncludedLDAPStatProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginIncludedLDAPStatProp(val *EnumpluginIncludedLDAPStatProp) *NullableEnumpluginIncludedLDAPStatProp {
	return &NullableEnumpluginIncludedLDAPStatProp{value: val, isSet: true}
}

func (v NullableEnumpluginIncludedLDAPStatProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginIncludedLDAPStatProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
