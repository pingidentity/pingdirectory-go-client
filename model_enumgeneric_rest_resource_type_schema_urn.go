/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumgenericRestResourceTypeSchemaUrn the model 'EnumgenericRestResourceTypeSchemaUrn'
type EnumgenericRestResourceTypeSchemaUrn string

// List of Enumgeneric-rest-resource-typeSchemaUrn
const (
	ENUMGENERICRESTRESOURCETYPESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0REST_RESOURCE_TYPEGENERIC EnumgenericRestResourceTypeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:rest-resource-type:generic"
)

// All allowed values of EnumgenericRestResourceTypeSchemaUrn enum
var AllowedEnumgenericRestResourceTypeSchemaUrnEnumValues = []EnumgenericRestResourceTypeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:rest-resource-type:generic",
}

func (v *EnumgenericRestResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgenericRestResourceTypeSchemaUrn(value)
	for _, existing := range AllowedEnumgenericRestResourceTypeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgenericRestResourceTypeSchemaUrn", value)
}

// NewEnumgenericRestResourceTypeSchemaUrnFromValue returns a pointer to a valid EnumgenericRestResourceTypeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgenericRestResourceTypeSchemaUrnFromValue(v string) (*EnumgenericRestResourceTypeSchemaUrn, error) {
	ev := EnumgenericRestResourceTypeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgenericRestResourceTypeSchemaUrn: valid values are %v", v, AllowedEnumgenericRestResourceTypeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgenericRestResourceTypeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgenericRestResourceTypeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgeneric-rest-resource-typeSchemaUrn value
func (v EnumgenericRestResourceTypeSchemaUrn) Ptr() *EnumgenericRestResourceTypeSchemaUrn {
	return &v
}

type NullableEnumgenericRestResourceTypeSchemaUrn struct {
	value *EnumgenericRestResourceTypeSchemaUrn
	isSet bool
}

func (v NullableEnumgenericRestResourceTypeSchemaUrn) Get() *EnumgenericRestResourceTypeSchemaUrn {
	return v.value
}

func (v *NullableEnumgenericRestResourceTypeSchemaUrn) Set(val *EnumgenericRestResourceTypeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgenericRestResourceTypeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgenericRestResourceTypeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgenericRestResourceTypeSchemaUrn(val *EnumgenericRestResourceTypeSchemaUrn) *NullableEnumgenericRestResourceTypeSchemaUrn {
	return &NullableEnumgenericRestResourceTypeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgenericRestResourceTypeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgenericRestResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
