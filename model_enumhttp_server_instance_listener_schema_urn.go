/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpServerInstanceListenerSchemaUrn the model 'EnumhttpServerInstanceListenerSchemaUrn'
type EnumhttpServerInstanceListenerSchemaUrn string

// List of Enumhttp-server-instance-listenerSchemaUrn
const (
	ENUMHTTPSERVERINSTANCELISTENERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SERVER_INSTANCE_LISTENERHTTP EnumhttpServerInstanceListenerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:server-instance-listener:http"
)

// All allowed values of EnumhttpServerInstanceListenerSchemaUrn enum
var AllowedEnumhttpServerInstanceListenerSchemaUrnEnumValues = []EnumhttpServerInstanceListenerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:server-instance-listener:http",
}

func (v *EnumhttpServerInstanceListenerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpServerInstanceListenerSchemaUrn(value)
	for _, existing := range AllowedEnumhttpServerInstanceListenerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpServerInstanceListenerSchemaUrn", value)
}

// NewEnumhttpServerInstanceListenerSchemaUrnFromValue returns a pointer to a valid EnumhttpServerInstanceListenerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpServerInstanceListenerSchemaUrnFromValue(v string) (*EnumhttpServerInstanceListenerSchemaUrn, error) {
	ev := EnumhttpServerInstanceListenerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpServerInstanceListenerSchemaUrn: valid values are %v", v, AllowedEnumhttpServerInstanceListenerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpServerInstanceListenerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumhttpServerInstanceListenerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-server-instance-listenerSchemaUrn value
func (v EnumhttpServerInstanceListenerSchemaUrn) Ptr() *EnumhttpServerInstanceListenerSchemaUrn {
	return &v
}

type NullableEnumhttpServerInstanceListenerSchemaUrn struct {
	value *EnumhttpServerInstanceListenerSchemaUrn
	isSet bool
}

func (v NullableEnumhttpServerInstanceListenerSchemaUrn) Get() *EnumhttpServerInstanceListenerSchemaUrn {
	return v.value
}

func (v *NullableEnumhttpServerInstanceListenerSchemaUrn) Set(val *EnumhttpServerInstanceListenerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpServerInstanceListenerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpServerInstanceListenerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpServerInstanceListenerSchemaUrn(val *EnumhttpServerInstanceListenerSchemaUrn) *NullableEnumhttpServerInstanceListenerSchemaUrn {
	return &NullableEnumhttpServerInstanceListenerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumhttpServerInstanceListenerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpServerInstanceListenerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
