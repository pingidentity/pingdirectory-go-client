/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumtopologyAdminUserSchemaUrn the model 'EnumtopologyAdminUserSchemaUrn'
type EnumtopologyAdminUserSchemaUrn string

// List of Enumtopology-admin-userSchemaUrn
const (
	ENUMTOPOLOGYADMINUSERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0TOPOLOGY_ADMIN_USER EnumtopologyAdminUserSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:topology-admin-user"
)

// All allowed values of EnumtopologyAdminUserSchemaUrn enum
var AllowedEnumtopologyAdminUserSchemaUrnEnumValues = []EnumtopologyAdminUserSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:topology-admin-user",
}

func (v *EnumtopologyAdminUserSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumtopologyAdminUserSchemaUrn(value)
	for _, existing := range AllowedEnumtopologyAdminUserSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumtopologyAdminUserSchemaUrn", value)
}

// NewEnumtopologyAdminUserSchemaUrnFromValue returns a pointer to a valid EnumtopologyAdminUserSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumtopologyAdminUserSchemaUrnFromValue(v string) (*EnumtopologyAdminUserSchemaUrn, error) {
	ev := EnumtopologyAdminUserSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumtopologyAdminUserSchemaUrn: valid values are %v", v, AllowedEnumtopologyAdminUserSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumtopologyAdminUserSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumtopologyAdminUserSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumtopology-admin-userSchemaUrn value
func (v EnumtopologyAdminUserSchemaUrn) Ptr() *EnumtopologyAdminUserSchemaUrn {
	return &v
}

type NullableEnumtopologyAdminUserSchemaUrn struct {
	value *EnumtopologyAdminUserSchemaUrn
	isSet bool
}

func (v NullableEnumtopologyAdminUserSchemaUrn) Get() *EnumtopologyAdminUserSchemaUrn {
	return v.value
}

func (v *NullableEnumtopologyAdminUserSchemaUrn) Set(val *EnumtopologyAdminUserSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumtopologyAdminUserSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumtopologyAdminUserSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumtopologyAdminUserSchemaUrn(val *EnumtopologyAdminUserSchemaUrn) *NullableEnumtopologyAdminUserSchemaUrn {
	return &NullableEnumtopologyAdminUserSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumtopologyAdminUserSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumtopologyAdminUserSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

