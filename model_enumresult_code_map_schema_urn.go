/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCodeMapSchemaUrn the model 'EnumresultCodeMapSchemaUrn'
type EnumresultCodeMapSchemaUrn string

// List of Enumresult-code-mapSchemaUrn
const (
	ENUMRESULTCODEMAPSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RESULT_CODE_MAP EnumresultCodeMapSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:result-code-map"
)

// All allowed values of EnumresultCodeMapSchemaUrn enum
var AllowedEnumresultCodeMapSchemaUrnEnumValues = []EnumresultCodeMapSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:result-code-map",
}

func (v *EnumresultCodeMapSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCodeMapSchemaUrn(value)
	for _, existing := range AllowedEnumresultCodeMapSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCodeMapSchemaUrn", value)
}

// NewEnumresultCodeMapSchemaUrnFromValue returns a pointer to a valid EnumresultCodeMapSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCodeMapSchemaUrnFromValue(v string) (*EnumresultCodeMapSchemaUrn, error) {
	ev := EnumresultCodeMapSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCodeMapSchemaUrn: valid values are %v", v, AllowedEnumresultCodeMapSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCodeMapSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumresultCodeMapSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-code-mapSchemaUrn value
func (v EnumresultCodeMapSchemaUrn) Ptr() *EnumresultCodeMapSchemaUrn {
	return &v
}

type NullableEnumresultCodeMapSchemaUrn struct {
	value *EnumresultCodeMapSchemaUrn
	isSet bool
}

func (v NullableEnumresultCodeMapSchemaUrn) Get() *EnumresultCodeMapSchemaUrn {
	return v.value
}

func (v *NullableEnumresultCodeMapSchemaUrn) Set(val *EnumresultCodeMapSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCodeMapSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCodeMapSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCodeMapSchemaUrn(val *EnumresultCodeMapSchemaUrn) *NullableEnumresultCodeMapSchemaUrn {
	return &NullableEnumresultCodeMapSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumresultCodeMapSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCodeMapSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
