/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RandomPasswordGeneratorShared struct for RandomPasswordGeneratorShared
type RandomPasswordGeneratorShared struct {
	Schemas []EnumrandomPasswordGeneratorSchemaUrn `json:"schemas"`
	PasswordCharacterSet []string `json:"passwordCharacterSet"`
	// Specifies the format to use for the generated password.
	PasswordFormat string `json:"passwordFormat"`
	// A description for this Password Generator
	Description *string `json:"description,omitempty"`
	// Indicates whether the Password Generator is enabled for use.
	Enabled bool `json:"enabled"`
}

// NewRandomPasswordGeneratorShared instantiates a new RandomPasswordGeneratorShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRandomPasswordGeneratorShared(schemas []EnumrandomPasswordGeneratorSchemaUrn, passwordCharacterSet []string, passwordFormat string, enabled bool) *RandomPasswordGeneratorShared {
	this := RandomPasswordGeneratorShared{}
	this.Schemas = schemas
	this.PasswordCharacterSet = passwordCharacterSet
	this.PasswordFormat = passwordFormat
	this.Enabled = enabled
	return &this
}

// NewRandomPasswordGeneratorSharedWithDefaults instantiates a new RandomPasswordGeneratorShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRandomPasswordGeneratorSharedWithDefaults() *RandomPasswordGeneratorShared {
	this := RandomPasswordGeneratorShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *RandomPasswordGeneratorShared) GetSchemas() []EnumrandomPasswordGeneratorSchemaUrn {
	if o == nil {
		var ret []EnumrandomPasswordGeneratorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *RandomPasswordGeneratorShared) GetSchemasOk() ([]EnumrandomPasswordGeneratorSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *RandomPasswordGeneratorShared) SetSchemas(v []EnumrandomPasswordGeneratorSchemaUrn) {
	o.Schemas = v
}

// GetPasswordCharacterSet returns the PasswordCharacterSet field value
func (o *RandomPasswordGeneratorShared) GetPasswordCharacterSet() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PasswordCharacterSet
}

// GetPasswordCharacterSetOk returns a tuple with the PasswordCharacterSet field value
// and a boolean to check if the value has been set.
func (o *RandomPasswordGeneratorShared) GetPasswordCharacterSetOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PasswordCharacterSet, true
}

// SetPasswordCharacterSet sets field value
func (o *RandomPasswordGeneratorShared) SetPasswordCharacterSet(v []string) {
	o.PasswordCharacterSet = v
}

// GetPasswordFormat returns the PasswordFormat field value
func (o *RandomPasswordGeneratorShared) GetPasswordFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordFormat
}

// GetPasswordFormatOk returns a tuple with the PasswordFormat field value
// and a boolean to check if the value has been set.
func (o *RandomPasswordGeneratorShared) GetPasswordFormatOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PasswordFormat, true
}

// SetPasswordFormat sets field value
func (o *RandomPasswordGeneratorShared) SetPasswordFormat(v string) {
	o.PasswordFormat = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RandomPasswordGeneratorShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RandomPasswordGeneratorShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RandomPasswordGeneratorShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RandomPasswordGeneratorShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *RandomPasswordGeneratorShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *RandomPasswordGeneratorShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *RandomPasswordGeneratorShared) SetEnabled(v bool) {
	o.Enabled = v
}

func (o RandomPasswordGeneratorShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["passwordCharacterSet"] = o.PasswordCharacterSet
	}
	if true {
		toSerialize["passwordFormat"] = o.PasswordFormat
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableRandomPasswordGeneratorShared struct {
	value *RandomPasswordGeneratorShared
	isSet bool
}

func (v NullableRandomPasswordGeneratorShared) Get() *RandomPasswordGeneratorShared {
	return v.value
}

func (v *NullableRandomPasswordGeneratorShared) Set(val *RandomPasswordGeneratorShared) {
	v.value = val
	v.isSet = true
}

func (v NullableRandomPasswordGeneratorShared) IsSet() bool {
	return v.isSet
}

func (v *NullableRandomPasswordGeneratorShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRandomPasswordGeneratorShared(val *RandomPasswordGeneratorShared) *NullableRandomPasswordGeneratorShared {
	return &NullableRandomPasswordGeneratorShared{value: val, isSet: true}
}

func (v NullableRandomPasswordGeneratorShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRandomPasswordGeneratorShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


