/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn the model 'EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn'
type EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn string

// List of Enumgroovy-scripted-uncached-entry-criteriaSchemaUrn
const (
	ENUMGROOVYSCRIPTEDUNCACHEDENTRYCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0UNCACHED_ENTRY_CRITERIAGROOVY_SCRIPTED EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:uncached-entry-criteria:groovy-scripted"
)

// All allowed values of EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn enum
var AllowedEnumgroovyScriptedUncachedEntryCriteriaSchemaUrnEnumValues = []EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:uncached-entry-criteria:groovy-scripted",
}

func (v *EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumgroovyScriptedUncachedEntryCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn", value)
}

// NewEnumgroovyScriptedUncachedEntryCriteriaSchemaUrnFromValue returns a pointer to a valid EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgroovyScriptedUncachedEntryCriteriaSchemaUrnFromValue(v string) (*EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn, error) {
	ev := EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn: valid values are %v", v, AllowedEnumgroovyScriptedUncachedEntryCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgroovyScriptedUncachedEntryCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgroovy-scripted-uncached-entry-criteriaSchemaUrn value
func (v EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) Ptr() *EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn {
	return &v
}

type NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn struct {
	value *EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) Get() *EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) Set(val *EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn(val *EnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) *NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn {
	return &NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgroovyScriptedUncachedEntryCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

