/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClientConnectionPolicyShared struct for ClientConnectionPolicyShared
type ClientConnectionPolicyShared struct {
	Schemas []EnumclientConnectionPolicySchemaUrn `json:"schemas,omitempty"`
	// Specifies a name which uniquely identifies this Client Connection Policy in the server.
	PolicyID string `json:"policyID"`
	// A description for this Client Connection Policy
	Description *string `json:"description,omitempty"`
	// Indicates whether this Client Connection Policy is enabled for use in the server. If a Client Connection Policy is disabled, then no new client connections will be associated with it.
	Enabled bool `json:"enabled"`
	// Specifies the order in which Client Connection Policy definitions will be evaluated. A Client Connection Policy with a lower index will be evaluated before one with a higher index, and the first Client Connection Policy evaluated which may apply to a client connection will be used for that connection. Each Client Connection Policy must be assigned a unique evaluation order index value.
	EvaluationOrderIndex int32 `json:"evaluationOrderIndex"`
	// Specifies a set of connection criteria that must match the associated client connection for it to be associated with this Client Connection Policy.
	ConnectionCriteria *string `json:"connectionCriteria,omitempty"`
	// Indicates whether any client connection for which this Client Connection Policy is selected should be terminated. This makes it possible to define fine-grained criteria for clients that should not be allowed to connect to this Directory Server.
	TerminateConnection *bool `json:"terminateConnection,omitempty"`
	SensitiveAttribute []string `json:"sensitiveAttribute,omitempty"`
	ExcludeGlobalSensitiveAttribute []string `json:"excludeGlobalSensitiveAttribute,omitempty"`
	// Specifies the result code map that should be used for clients associated with this Client Connection Policy. If a value is defined for this property, then it will override any result code map referenced in the global configuration.
	ResultCodeMap *string `json:"resultCodeMap,omitempty"`
	IncludedBackendBaseDN []string `json:"includedBackendBaseDN,omitempty"`
	ExcludedBackendBaseDN []string `json:"excludedBackendBaseDN,omitempty"`
	AllowedOperation []EnumclientConnectionPolicyAllowedOperationProp `json:"allowedOperation"`
	// Specifies a request criteria object that will be required to match all requests submitted by clients associated with this Client Connection Policy. If a client submits a request that does not satisfy this request criteria object, then that request will be rejected.
	RequiredOperationRequestCriteria *string `json:"requiredOperationRequestCriteria,omitempty"`
	// Specifies a request criteria object that must not match any requests submitted by clients associated with this Client Connection Policy. If a client submits a request that satisfies this request criteria object, then that request will be rejected.
	ProhibitedOperationRequestCriteria *string `json:"prohibitedOperationRequestCriteria,omitempty"`
	AllowedRequestControl []string `json:"allowedRequestControl,omitempty"`
	DeniedRequestControl []string `json:"deniedRequestControl,omitempty"`
	AllowedExtendedOperation []string `json:"allowedExtendedOperation,omitempty"`
	DeniedExtendedOperation []string `json:"deniedExtendedOperation,omitempty"`
	AllowedAuthType []EnumclientConnectionPolicyAllowedAuthTypeProp `json:"allowedAuthType"`
	AllowedSASLMechanism []string `json:"allowedSASLMechanism,omitempty"`
	DeniedSASLMechanism []string `json:"deniedSASLMechanism,omitempty"`
	AllowedFilterType []EnumclientConnectionPolicyAllowedFilterTypeProp `json:"allowedFilterType,omitempty"`
	// Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the set of indexes defined in the corresponding backend. Note that even if this is false, some clients may be able to request unindexed searches if the allow-unindexed-searches-with-control property has a value of true and the necessary conditions are satisfied.
	AllowUnindexedSearches *bool `json:"allowUnindexedSearches,omitempty"`
	// Indicates whether clients will be allowed to request search operations that cannot be efficiently processed using the set of indexes defined in the corresponding backend, as long as the search request also includes the permit unindexed search request control and the requester has the unindexed-search-with-control privilege (or that privilege is disabled in the global configuration).
	AllowUnindexedSearchesWithControl *bool `json:"allowUnindexedSearchesWithControl,omitempty"`
	// Specifies the minimum number of consecutive bytes that must be present in any subInitial, subAny, or subFinal element of a substring filter component (i.e., the minimum number of consecutive bytes between wildcard characters in a substring filter). Any attempt to use a substring search with an element containing fewer than this number of bytes will be rejected.
	MinimumSubstringLength *int32 `json:"minimumSubstringLength,omitempty"`
	// Specifies the maximum number of client connections which may be associated with this Client Connection Policy at any given time.
	MaximumConcurrentConnections *int32 `json:"maximumConcurrentConnections,omitempty"`
	// Specifies the maximum length of time that a connection associated with this Client Connection Policy may be established. Any connection which is associated with this Client Connection Policy and has been established for longer than this period of time may be terminated.
	MaximumConnectionDuration *string `json:"maximumConnectionDuration,omitempty"`
	// Specifies the maximum length of time that a connection associated with this Client Connection Policy may remain established after the completion of the last operation processed on that connection. Any new operation requested on the connection will reset this timer. Any connection associated with this Client Connection Policy which has been idle for longer than this length of time may be terminated.
	MaximumIdleConnectionDuration *string `json:"maximumIdleConnectionDuration,omitempty"`
	// Specifies the maximum number of operations that may be requested by any client connection associated with this Client Connection Policy. If an attempt is made to process more than this number of operations on a client connection, then that connection will be terminated.
	MaximumOperationCountPerConnection *int32 `json:"maximumOperationCountPerConnection,omitempty"`
	// Specifies the maximum number of concurrent operations that can be in progress for any connection. This can help prevent a single client connection from monopolizing server processing resources by sending a large number of concurrent asynchronous requests. A value of zero indicates that no limit will be placed on the number of concurrent requests for a single client.
	MaximumConcurrentOperationsPerConnection *int32 `json:"maximumConcurrentOperationsPerConnection,omitempty"`
	// Specifies the maximum length of time that the server should wait for an outstanding operation to complete before rejecting a new request received when the maximum number of outstanding operations are already in progress on that connection. If an existing outstanding operation on the connection completes before this time, then the operation will be processed. Otherwise, the operation will be rejected with a \"busy\" result.
	MaximumConcurrentOperationWaitTimeBeforeRejecting *string `json:"maximumConcurrentOperationWaitTimeBeforeRejecting,omitempty"`
	MaximumConcurrentOperationsPerConnectionExceededBehavior *EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp `json:"maximumConcurrentOperationsPerConnectionExceededBehavior,omitempty"`
	MaximumConnectionOperationRate []string `json:"maximumConnectionOperationRate,omitempty"`
	ConnectionOperationRateExceededBehavior *EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp `json:"connectionOperationRateExceededBehavior,omitempty"`
	MaximumPolicyOperationRate []string `json:"maximumPolicyOperationRate,omitempty"`
	PolicyOperationRateExceededBehavior *EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp `json:"policyOperationRateExceededBehavior,omitempty"`
	// Specifies the maximum number of entries that may be returned for a search performed by a client associated with this Client Connection Policy.
	MaximumSearchSizeLimit *int32 `json:"maximumSearchSizeLimit,omitempty"`
	// Specifies the maximum length of time that the server should spend processing search operations requested by clients associated with this Client Connection Policy.
	MaximumSearchTimeLimit *string `json:"maximumSearchTimeLimit,omitempty"`
	// Specifies the maximum number of entries that may be examined by a backend in the course of processing a search requested by clients associated with this Client Connection Policy.
	MaximumSearchLookthroughLimit *int32 `json:"maximumSearchLookthroughLimit,omitempty"`
	// Specifies the maximum number of entries that may be joined with any single search result entry for a search request performed by a client associated with this Client Connection Policy.
	MaximumLDAPJoinSizeLimit *int32 `json:"maximumLDAPJoinSizeLimit,omitempty"`
	// Specifies the maximum number of entries that the server will attempt to sort without the benefit of a VLV index. A value of zero indicates that no limit should be enforced.
	MaximumSortSizeLimitWithoutVLVIndex *int32 `json:"maximumSortSizeLimitWithoutVLVIndex,omitempty"`
}

// NewClientConnectionPolicyShared instantiates a new ClientConnectionPolicyShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientConnectionPolicyShared(policyID string, enabled bool, evaluationOrderIndex int32, allowedOperation []EnumclientConnectionPolicyAllowedOperationProp, allowedAuthType []EnumclientConnectionPolicyAllowedAuthTypeProp) *ClientConnectionPolicyShared {
	this := ClientConnectionPolicyShared{}
	this.PolicyID = policyID
	this.Enabled = enabled
	this.EvaluationOrderIndex = evaluationOrderIndex
	this.AllowedOperation = allowedOperation
	this.AllowedAuthType = allowedAuthType
	return &this
}

// NewClientConnectionPolicySharedWithDefaults instantiates a new ClientConnectionPolicyShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientConnectionPolicySharedWithDefaults() *ClientConnectionPolicyShared {
	this := ClientConnectionPolicyShared{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetSchemas() []EnumclientConnectionPolicySchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumclientConnectionPolicySchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetSchemasOk() ([]EnumclientConnectionPolicySchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumclientConnectionPolicySchemaUrn and assigns it to the Schemas field.
func (o *ClientConnectionPolicyShared) SetSchemas(v []EnumclientConnectionPolicySchemaUrn) {
	o.Schemas = v
}

// GetPolicyID returns the PolicyID field value
func (o *ClientConnectionPolicyShared) GetPolicyID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyID
}

// GetPolicyIDOk returns a tuple with the PolicyID field value
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetPolicyIDOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PolicyID, true
}

// SetPolicyID sets field value
func (o *ClientConnectionPolicyShared) SetPolicyID(v string) {
	o.PolicyID = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ClientConnectionPolicyShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *ClientConnectionPolicyShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ClientConnectionPolicyShared) SetEnabled(v bool) {
	o.Enabled = v
}

// GetEvaluationOrderIndex returns the EvaluationOrderIndex field value
func (o *ClientConnectionPolicyShared) GetEvaluationOrderIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EvaluationOrderIndex
}

// GetEvaluationOrderIndexOk returns a tuple with the EvaluationOrderIndex field value
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetEvaluationOrderIndexOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EvaluationOrderIndex, true
}

// SetEvaluationOrderIndex sets field value
func (o *ClientConnectionPolicyShared) SetEvaluationOrderIndex(v int32) {
	o.EvaluationOrderIndex = v
}

// GetConnectionCriteria returns the ConnectionCriteria field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetConnectionCriteria() string {
	if o == nil || isNil(o.ConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.ConnectionCriteria
}

// GetConnectionCriteriaOk returns a tuple with the ConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetConnectionCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.ConnectionCriteria) {
    return nil, false
	}
	return o.ConnectionCriteria, true
}

// HasConnectionCriteria returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasConnectionCriteria() bool {
	if o != nil && !isNil(o.ConnectionCriteria) {
		return true
	}

	return false
}

// SetConnectionCriteria gets a reference to the given string and assigns it to the ConnectionCriteria field.
func (o *ClientConnectionPolicyShared) SetConnectionCriteria(v string) {
	o.ConnectionCriteria = &v
}

// GetTerminateConnection returns the TerminateConnection field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetTerminateConnection() bool {
	if o == nil || isNil(o.TerminateConnection) {
		var ret bool
		return ret
	}
	return *o.TerminateConnection
}

// GetTerminateConnectionOk returns a tuple with the TerminateConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetTerminateConnectionOk() (*bool, bool) {
	if o == nil || isNil(o.TerminateConnection) {
    return nil, false
	}
	return o.TerminateConnection, true
}

// HasTerminateConnection returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasTerminateConnection() bool {
	if o != nil && !isNil(o.TerminateConnection) {
		return true
	}

	return false
}

// SetTerminateConnection gets a reference to the given bool and assigns it to the TerminateConnection field.
func (o *ClientConnectionPolicyShared) SetTerminateConnection(v bool) {
	o.TerminateConnection = &v
}

// GetSensitiveAttribute returns the SensitiveAttribute field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetSensitiveAttribute() []string {
	if o == nil || isNil(o.SensitiveAttribute) {
		var ret []string
		return ret
	}
	return o.SensitiveAttribute
}

// GetSensitiveAttributeOk returns a tuple with the SensitiveAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetSensitiveAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.SensitiveAttribute) {
    return nil, false
	}
	return o.SensitiveAttribute, true
}

// HasSensitiveAttribute returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasSensitiveAttribute() bool {
	if o != nil && !isNil(o.SensitiveAttribute) {
		return true
	}

	return false
}

// SetSensitiveAttribute gets a reference to the given []string and assigns it to the SensitiveAttribute field.
func (o *ClientConnectionPolicyShared) SetSensitiveAttribute(v []string) {
	o.SensitiveAttribute = v
}

// GetExcludeGlobalSensitiveAttribute returns the ExcludeGlobalSensitiveAttribute field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetExcludeGlobalSensitiveAttribute() []string {
	if o == nil || isNil(o.ExcludeGlobalSensitiveAttribute) {
		var ret []string
		return ret
	}
	return o.ExcludeGlobalSensitiveAttribute
}

// GetExcludeGlobalSensitiveAttributeOk returns a tuple with the ExcludeGlobalSensitiveAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetExcludeGlobalSensitiveAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludeGlobalSensitiveAttribute) {
    return nil, false
	}
	return o.ExcludeGlobalSensitiveAttribute, true
}

// HasExcludeGlobalSensitiveAttribute returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasExcludeGlobalSensitiveAttribute() bool {
	if o != nil && !isNil(o.ExcludeGlobalSensitiveAttribute) {
		return true
	}

	return false
}

// SetExcludeGlobalSensitiveAttribute gets a reference to the given []string and assigns it to the ExcludeGlobalSensitiveAttribute field.
func (o *ClientConnectionPolicyShared) SetExcludeGlobalSensitiveAttribute(v []string) {
	o.ExcludeGlobalSensitiveAttribute = v
}

// GetResultCodeMap returns the ResultCodeMap field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetResultCodeMap() string {
	if o == nil || isNil(o.ResultCodeMap) {
		var ret string
		return ret
	}
	return *o.ResultCodeMap
}

// GetResultCodeMapOk returns a tuple with the ResultCodeMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetResultCodeMapOk() (*string, bool) {
	if o == nil || isNil(o.ResultCodeMap) {
    return nil, false
	}
	return o.ResultCodeMap, true
}

// HasResultCodeMap returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasResultCodeMap() bool {
	if o != nil && !isNil(o.ResultCodeMap) {
		return true
	}

	return false
}

// SetResultCodeMap gets a reference to the given string and assigns it to the ResultCodeMap field.
func (o *ClientConnectionPolicyShared) SetResultCodeMap(v string) {
	o.ResultCodeMap = &v
}

// GetIncludedBackendBaseDN returns the IncludedBackendBaseDN field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetIncludedBackendBaseDN() []string {
	if o == nil || isNil(o.IncludedBackendBaseDN) {
		var ret []string
		return ret
	}
	return o.IncludedBackendBaseDN
}

// GetIncludedBackendBaseDNOk returns a tuple with the IncludedBackendBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetIncludedBackendBaseDNOk() ([]string, bool) {
	if o == nil || isNil(o.IncludedBackendBaseDN) {
    return nil, false
	}
	return o.IncludedBackendBaseDN, true
}

// HasIncludedBackendBaseDN returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasIncludedBackendBaseDN() bool {
	if o != nil && !isNil(o.IncludedBackendBaseDN) {
		return true
	}

	return false
}

// SetIncludedBackendBaseDN gets a reference to the given []string and assigns it to the IncludedBackendBaseDN field.
func (o *ClientConnectionPolicyShared) SetIncludedBackendBaseDN(v []string) {
	o.IncludedBackendBaseDN = v
}

// GetExcludedBackendBaseDN returns the ExcludedBackendBaseDN field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetExcludedBackendBaseDN() []string {
	if o == nil || isNil(o.ExcludedBackendBaseDN) {
		var ret []string
		return ret
	}
	return o.ExcludedBackendBaseDN
}

// GetExcludedBackendBaseDNOk returns a tuple with the ExcludedBackendBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetExcludedBackendBaseDNOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludedBackendBaseDN) {
    return nil, false
	}
	return o.ExcludedBackendBaseDN, true
}

// HasExcludedBackendBaseDN returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasExcludedBackendBaseDN() bool {
	if o != nil && !isNil(o.ExcludedBackendBaseDN) {
		return true
	}

	return false
}

// SetExcludedBackendBaseDN gets a reference to the given []string and assigns it to the ExcludedBackendBaseDN field.
func (o *ClientConnectionPolicyShared) SetExcludedBackendBaseDN(v []string) {
	o.ExcludedBackendBaseDN = v
}

// GetAllowedOperation returns the AllowedOperation field value
func (o *ClientConnectionPolicyShared) GetAllowedOperation() []EnumclientConnectionPolicyAllowedOperationProp {
	if o == nil {
		var ret []EnumclientConnectionPolicyAllowedOperationProp
		return ret
	}

	return o.AllowedOperation
}

// GetAllowedOperationOk returns a tuple with the AllowedOperation field value
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowedOperationOk() ([]EnumclientConnectionPolicyAllowedOperationProp, bool) {
	if o == nil {
    return nil, false
	}
	return o.AllowedOperation, true
}

// SetAllowedOperation sets field value
func (o *ClientConnectionPolicyShared) SetAllowedOperation(v []EnumclientConnectionPolicyAllowedOperationProp) {
	o.AllowedOperation = v
}

// GetRequiredOperationRequestCriteria returns the RequiredOperationRequestCriteria field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetRequiredOperationRequestCriteria() string {
	if o == nil || isNil(o.RequiredOperationRequestCriteria) {
		var ret string
		return ret
	}
	return *o.RequiredOperationRequestCriteria
}

// GetRequiredOperationRequestCriteriaOk returns a tuple with the RequiredOperationRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetRequiredOperationRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.RequiredOperationRequestCriteria) {
    return nil, false
	}
	return o.RequiredOperationRequestCriteria, true
}

// HasRequiredOperationRequestCriteria returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasRequiredOperationRequestCriteria() bool {
	if o != nil && !isNil(o.RequiredOperationRequestCriteria) {
		return true
	}

	return false
}

// SetRequiredOperationRequestCriteria gets a reference to the given string and assigns it to the RequiredOperationRequestCriteria field.
func (o *ClientConnectionPolicyShared) SetRequiredOperationRequestCriteria(v string) {
	o.RequiredOperationRequestCriteria = &v
}

// GetProhibitedOperationRequestCriteria returns the ProhibitedOperationRequestCriteria field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetProhibitedOperationRequestCriteria() string {
	if o == nil || isNil(o.ProhibitedOperationRequestCriteria) {
		var ret string
		return ret
	}
	return *o.ProhibitedOperationRequestCriteria
}

// GetProhibitedOperationRequestCriteriaOk returns a tuple with the ProhibitedOperationRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetProhibitedOperationRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.ProhibitedOperationRequestCriteria) {
    return nil, false
	}
	return o.ProhibitedOperationRequestCriteria, true
}

// HasProhibitedOperationRequestCriteria returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasProhibitedOperationRequestCriteria() bool {
	if o != nil && !isNil(o.ProhibitedOperationRequestCriteria) {
		return true
	}

	return false
}

// SetProhibitedOperationRequestCriteria gets a reference to the given string and assigns it to the ProhibitedOperationRequestCriteria field.
func (o *ClientConnectionPolicyShared) SetProhibitedOperationRequestCriteria(v string) {
	o.ProhibitedOperationRequestCriteria = &v
}

// GetAllowedRequestControl returns the AllowedRequestControl field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetAllowedRequestControl() []string {
	if o == nil || isNil(o.AllowedRequestControl) {
		var ret []string
		return ret
	}
	return o.AllowedRequestControl
}

// GetAllowedRequestControlOk returns a tuple with the AllowedRequestControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowedRequestControlOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedRequestControl) {
    return nil, false
	}
	return o.AllowedRequestControl, true
}

// HasAllowedRequestControl returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasAllowedRequestControl() bool {
	if o != nil && !isNil(o.AllowedRequestControl) {
		return true
	}

	return false
}

// SetAllowedRequestControl gets a reference to the given []string and assigns it to the AllowedRequestControl field.
func (o *ClientConnectionPolicyShared) SetAllowedRequestControl(v []string) {
	o.AllowedRequestControl = v
}

// GetDeniedRequestControl returns the DeniedRequestControl field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetDeniedRequestControl() []string {
	if o == nil || isNil(o.DeniedRequestControl) {
		var ret []string
		return ret
	}
	return o.DeniedRequestControl
}

// GetDeniedRequestControlOk returns a tuple with the DeniedRequestControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetDeniedRequestControlOk() ([]string, bool) {
	if o == nil || isNil(o.DeniedRequestControl) {
    return nil, false
	}
	return o.DeniedRequestControl, true
}

// HasDeniedRequestControl returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasDeniedRequestControl() bool {
	if o != nil && !isNil(o.DeniedRequestControl) {
		return true
	}

	return false
}

// SetDeniedRequestControl gets a reference to the given []string and assigns it to the DeniedRequestControl field.
func (o *ClientConnectionPolicyShared) SetDeniedRequestControl(v []string) {
	o.DeniedRequestControl = v
}

// GetAllowedExtendedOperation returns the AllowedExtendedOperation field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetAllowedExtendedOperation() []string {
	if o == nil || isNil(o.AllowedExtendedOperation) {
		var ret []string
		return ret
	}
	return o.AllowedExtendedOperation
}

// GetAllowedExtendedOperationOk returns a tuple with the AllowedExtendedOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowedExtendedOperationOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedExtendedOperation) {
    return nil, false
	}
	return o.AllowedExtendedOperation, true
}

// HasAllowedExtendedOperation returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasAllowedExtendedOperation() bool {
	if o != nil && !isNil(o.AllowedExtendedOperation) {
		return true
	}

	return false
}

// SetAllowedExtendedOperation gets a reference to the given []string and assigns it to the AllowedExtendedOperation field.
func (o *ClientConnectionPolicyShared) SetAllowedExtendedOperation(v []string) {
	o.AllowedExtendedOperation = v
}

// GetDeniedExtendedOperation returns the DeniedExtendedOperation field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetDeniedExtendedOperation() []string {
	if o == nil || isNil(o.DeniedExtendedOperation) {
		var ret []string
		return ret
	}
	return o.DeniedExtendedOperation
}

// GetDeniedExtendedOperationOk returns a tuple with the DeniedExtendedOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetDeniedExtendedOperationOk() ([]string, bool) {
	if o == nil || isNil(o.DeniedExtendedOperation) {
    return nil, false
	}
	return o.DeniedExtendedOperation, true
}

// HasDeniedExtendedOperation returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasDeniedExtendedOperation() bool {
	if o != nil && !isNil(o.DeniedExtendedOperation) {
		return true
	}

	return false
}

// SetDeniedExtendedOperation gets a reference to the given []string and assigns it to the DeniedExtendedOperation field.
func (o *ClientConnectionPolicyShared) SetDeniedExtendedOperation(v []string) {
	o.DeniedExtendedOperation = v
}

// GetAllowedAuthType returns the AllowedAuthType field value
func (o *ClientConnectionPolicyShared) GetAllowedAuthType() []EnumclientConnectionPolicyAllowedAuthTypeProp {
	if o == nil {
		var ret []EnumclientConnectionPolicyAllowedAuthTypeProp
		return ret
	}

	return o.AllowedAuthType
}

// GetAllowedAuthTypeOk returns a tuple with the AllowedAuthType field value
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowedAuthTypeOk() ([]EnumclientConnectionPolicyAllowedAuthTypeProp, bool) {
	if o == nil {
    return nil, false
	}
	return o.AllowedAuthType, true
}

// SetAllowedAuthType sets field value
func (o *ClientConnectionPolicyShared) SetAllowedAuthType(v []EnumclientConnectionPolicyAllowedAuthTypeProp) {
	o.AllowedAuthType = v
}

// GetAllowedSASLMechanism returns the AllowedSASLMechanism field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetAllowedSASLMechanism() []string {
	if o == nil || isNil(o.AllowedSASLMechanism) {
		var ret []string
		return ret
	}
	return o.AllowedSASLMechanism
}

// GetAllowedSASLMechanismOk returns a tuple with the AllowedSASLMechanism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowedSASLMechanismOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedSASLMechanism) {
    return nil, false
	}
	return o.AllowedSASLMechanism, true
}

// HasAllowedSASLMechanism returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasAllowedSASLMechanism() bool {
	if o != nil && !isNil(o.AllowedSASLMechanism) {
		return true
	}

	return false
}

// SetAllowedSASLMechanism gets a reference to the given []string and assigns it to the AllowedSASLMechanism field.
func (o *ClientConnectionPolicyShared) SetAllowedSASLMechanism(v []string) {
	o.AllowedSASLMechanism = v
}

// GetDeniedSASLMechanism returns the DeniedSASLMechanism field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetDeniedSASLMechanism() []string {
	if o == nil || isNil(o.DeniedSASLMechanism) {
		var ret []string
		return ret
	}
	return o.DeniedSASLMechanism
}

// GetDeniedSASLMechanismOk returns a tuple with the DeniedSASLMechanism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetDeniedSASLMechanismOk() ([]string, bool) {
	if o == nil || isNil(o.DeniedSASLMechanism) {
    return nil, false
	}
	return o.DeniedSASLMechanism, true
}

// HasDeniedSASLMechanism returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasDeniedSASLMechanism() bool {
	if o != nil && !isNil(o.DeniedSASLMechanism) {
		return true
	}

	return false
}

// SetDeniedSASLMechanism gets a reference to the given []string and assigns it to the DeniedSASLMechanism field.
func (o *ClientConnectionPolicyShared) SetDeniedSASLMechanism(v []string) {
	o.DeniedSASLMechanism = v
}

// GetAllowedFilterType returns the AllowedFilterType field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetAllowedFilterType() []EnumclientConnectionPolicyAllowedFilterTypeProp {
	if o == nil || isNil(o.AllowedFilterType) {
		var ret []EnumclientConnectionPolicyAllowedFilterTypeProp
		return ret
	}
	return o.AllowedFilterType
}

// GetAllowedFilterTypeOk returns a tuple with the AllowedFilterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowedFilterTypeOk() ([]EnumclientConnectionPolicyAllowedFilterTypeProp, bool) {
	if o == nil || isNil(o.AllowedFilterType) {
    return nil, false
	}
	return o.AllowedFilterType, true
}

// HasAllowedFilterType returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasAllowedFilterType() bool {
	if o != nil && !isNil(o.AllowedFilterType) {
		return true
	}

	return false
}

// SetAllowedFilterType gets a reference to the given []EnumclientConnectionPolicyAllowedFilterTypeProp and assigns it to the AllowedFilterType field.
func (o *ClientConnectionPolicyShared) SetAllowedFilterType(v []EnumclientConnectionPolicyAllowedFilterTypeProp) {
	o.AllowedFilterType = v
}

// GetAllowUnindexedSearches returns the AllowUnindexedSearches field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetAllowUnindexedSearches() bool {
	if o == nil || isNil(o.AllowUnindexedSearches) {
		var ret bool
		return ret
	}
	return *o.AllowUnindexedSearches
}

// GetAllowUnindexedSearchesOk returns a tuple with the AllowUnindexedSearches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowUnindexedSearchesOk() (*bool, bool) {
	if o == nil || isNil(o.AllowUnindexedSearches) {
    return nil, false
	}
	return o.AllowUnindexedSearches, true
}

// HasAllowUnindexedSearches returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasAllowUnindexedSearches() bool {
	if o != nil && !isNil(o.AllowUnindexedSearches) {
		return true
	}

	return false
}

// SetAllowUnindexedSearches gets a reference to the given bool and assigns it to the AllowUnindexedSearches field.
func (o *ClientConnectionPolicyShared) SetAllowUnindexedSearches(v bool) {
	o.AllowUnindexedSearches = &v
}

// GetAllowUnindexedSearchesWithControl returns the AllowUnindexedSearchesWithControl field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetAllowUnindexedSearchesWithControl() bool {
	if o == nil || isNil(o.AllowUnindexedSearchesWithControl) {
		var ret bool
		return ret
	}
	return *o.AllowUnindexedSearchesWithControl
}

// GetAllowUnindexedSearchesWithControlOk returns a tuple with the AllowUnindexedSearchesWithControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetAllowUnindexedSearchesWithControlOk() (*bool, bool) {
	if o == nil || isNil(o.AllowUnindexedSearchesWithControl) {
    return nil, false
	}
	return o.AllowUnindexedSearchesWithControl, true
}

// HasAllowUnindexedSearchesWithControl returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasAllowUnindexedSearchesWithControl() bool {
	if o != nil && !isNil(o.AllowUnindexedSearchesWithControl) {
		return true
	}

	return false
}

// SetAllowUnindexedSearchesWithControl gets a reference to the given bool and assigns it to the AllowUnindexedSearchesWithControl field.
func (o *ClientConnectionPolicyShared) SetAllowUnindexedSearchesWithControl(v bool) {
	o.AllowUnindexedSearchesWithControl = &v
}

// GetMinimumSubstringLength returns the MinimumSubstringLength field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMinimumSubstringLength() int32 {
	if o == nil || isNil(o.MinimumSubstringLength) {
		var ret int32
		return ret
	}
	return *o.MinimumSubstringLength
}

// GetMinimumSubstringLengthOk returns a tuple with the MinimumSubstringLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMinimumSubstringLengthOk() (*int32, bool) {
	if o == nil || isNil(o.MinimumSubstringLength) {
    return nil, false
	}
	return o.MinimumSubstringLength, true
}

// HasMinimumSubstringLength returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMinimumSubstringLength() bool {
	if o != nil && !isNil(o.MinimumSubstringLength) {
		return true
	}

	return false
}

// SetMinimumSubstringLength gets a reference to the given int32 and assigns it to the MinimumSubstringLength field.
func (o *ClientConnectionPolicyShared) SetMinimumSubstringLength(v int32) {
	o.MinimumSubstringLength = &v
}

// GetMaximumConcurrentConnections returns the MaximumConcurrentConnections field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentConnections() int32 {
	if o == nil || isNil(o.MaximumConcurrentConnections) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentConnections
}

// GetMaximumConcurrentConnectionsOk returns a tuple with the MaximumConcurrentConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentConnectionsOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumConcurrentConnections) {
    return nil, false
	}
	return o.MaximumConcurrentConnections, true
}

// HasMaximumConcurrentConnections returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumConcurrentConnections() bool {
	if o != nil && !isNil(o.MaximumConcurrentConnections) {
		return true
	}

	return false
}

// SetMaximumConcurrentConnections gets a reference to the given int32 and assigns it to the MaximumConcurrentConnections field.
func (o *ClientConnectionPolicyShared) SetMaximumConcurrentConnections(v int32) {
	o.MaximumConcurrentConnections = &v
}

// GetMaximumConnectionDuration returns the MaximumConnectionDuration field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumConnectionDuration() string {
	if o == nil || isNil(o.MaximumConnectionDuration) {
		var ret string
		return ret
	}
	return *o.MaximumConnectionDuration
}

// GetMaximumConnectionDurationOk returns a tuple with the MaximumConnectionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumConnectionDurationOk() (*string, bool) {
	if o == nil || isNil(o.MaximumConnectionDuration) {
    return nil, false
	}
	return o.MaximumConnectionDuration, true
}

// HasMaximumConnectionDuration returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumConnectionDuration() bool {
	if o != nil && !isNil(o.MaximumConnectionDuration) {
		return true
	}

	return false
}

// SetMaximumConnectionDuration gets a reference to the given string and assigns it to the MaximumConnectionDuration field.
func (o *ClientConnectionPolicyShared) SetMaximumConnectionDuration(v string) {
	o.MaximumConnectionDuration = &v
}

// GetMaximumIdleConnectionDuration returns the MaximumIdleConnectionDuration field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumIdleConnectionDuration() string {
	if o == nil || isNil(o.MaximumIdleConnectionDuration) {
		var ret string
		return ret
	}
	return *o.MaximumIdleConnectionDuration
}

// GetMaximumIdleConnectionDurationOk returns a tuple with the MaximumIdleConnectionDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumIdleConnectionDurationOk() (*string, bool) {
	if o == nil || isNil(o.MaximumIdleConnectionDuration) {
    return nil, false
	}
	return o.MaximumIdleConnectionDuration, true
}

// HasMaximumIdleConnectionDuration returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumIdleConnectionDuration() bool {
	if o != nil && !isNil(o.MaximumIdleConnectionDuration) {
		return true
	}

	return false
}

// SetMaximumIdleConnectionDuration gets a reference to the given string and assigns it to the MaximumIdleConnectionDuration field.
func (o *ClientConnectionPolicyShared) SetMaximumIdleConnectionDuration(v string) {
	o.MaximumIdleConnectionDuration = &v
}

// GetMaximumOperationCountPerConnection returns the MaximumOperationCountPerConnection field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumOperationCountPerConnection() int32 {
	if o == nil || isNil(o.MaximumOperationCountPerConnection) {
		var ret int32
		return ret
	}
	return *o.MaximumOperationCountPerConnection
}

// GetMaximumOperationCountPerConnectionOk returns a tuple with the MaximumOperationCountPerConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumOperationCountPerConnectionOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumOperationCountPerConnection) {
    return nil, false
	}
	return o.MaximumOperationCountPerConnection, true
}

// HasMaximumOperationCountPerConnection returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumOperationCountPerConnection() bool {
	if o != nil && !isNil(o.MaximumOperationCountPerConnection) {
		return true
	}

	return false
}

// SetMaximumOperationCountPerConnection gets a reference to the given int32 and assigns it to the MaximumOperationCountPerConnection field.
func (o *ClientConnectionPolicyShared) SetMaximumOperationCountPerConnection(v int32) {
	o.MaximumOperationCountPerConnection = &v
}

// GetMaximumConcurrentOperationsPerConnection returns the MaximumConcurrentOperationsPerConnection field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentOperationsPerConnection() int32 {
	if o == nil || isNil(o.MaximumConcurrentOperationsPerConnection) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentOperationsPerConnection
}

// GetMaximumConcurrentOperationsPerConnectionOk returns a tuple with the MaximumConcurrentOperationsPerConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentOperationsPerConnectionOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumConcurrentOperationsPerConnection) {
    return nil, false
	}
	return o.MaximumConcurrentOperationsPerConnection, true
}

// HasMaximumConcurrentOperationsPerConnection returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumConcurrentOperationsPerConnection() bool {
	if o != nil && !isNil(o.MaximumConcurrentOperationsPerConnection) {
		return true
	}

	return false
}

// SetMaximumConcurrentOperationsPerConnection gets a reference to the given int32 and assigns it to the MaximumConcurrentOperationsPerConnection field.
func (o *ClientConnectionPolicyShared) SetMaximumConcurrentOperationsPerConnection(v int32) {
	o.MaximumConcurrentOperationsPerConnection = &v
}

// GetMaximumConcurrentOperationWaitTimeBeforeRejecting returns the MaximumConcurrentOperationWaitTimeBeforeRejecting field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentOperationWaitTimeBeforeRejecting() string {
	if o == nil || isNil(o.MaximumConcurrentOperationWaitTimeBeforeRejecting) {
		var ret string
		return ret
	}
	return *o.MaximumConcurrentOperationWaitTimeBeforeRejecting
}

// GetMaximumConcurrentOperationWaitTimeBeforeRejectingOk returns a tuple with the MaximumConcurrentOperationWaitTimeBeforeRejecting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentOperationWaitTimeBeforeRejectingOk() (*string, bool) {
	if o == nil || isNil(o.MaximumConcurrentOperationWaitTimeBeforeRejecting) {
    return nil, false
	}
	return o.MaximumConcurrentOperationWaitTimeBeforeRejecting, true
}

// HasMaximumConcurrentOperationWaitTimeBeforeRejecting returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumConcurrentOperationWaitTimeBeforeRejecting() bool {
	if o != nil && !isNil(o.MaximumConcurrentOperationWaitTimeBeforeRejecting) {
		return true
	}

	return false
}

// SetMaximumConcurrentOperationWaitTimeBeforeRejecting gets a reference to the given string and assigns it to the MaximumConcurrentOperationWaitTimeBeforeRejecting field.
func (o *ClientConnectionPolicyShared) SetMaximumConcurrentOperationWaitTimeBeforeRejecting(v string) {
	o.MaximumConcurrentOperationWaitTimeBeforeRejecting = &v
}

// GetMaximumConcurrentOperationsPerConnectionExceededBehavior returns the MaximumConcurrentOperationsPerConnectionExceededBehavior field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentOperationsPerConnectionExceededBehavior() EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp {
	if o == nil || isNil(o.MaximumConcurrentOperationsPerConnectionExceededBehavior) {
		var ret EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp
		return ret
	}
	return *o.MaximumConcurrentOperationsPerConnectionExceededBehavior
}

// GetMaximumConcurrentOperationsPerConnectionExceededBehaviorOk returns a tuple with the MaximumConcurrentOperationsPerConnectionExceededBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumConcurrentOperationsPerConnectionExceededBehaviorOk() (*EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp, bool) {
	if o == nil || isNil(o.MaximumConcurrentOperationsPerConnectionExceededBehavior) {
    return nil, false
	}
	return o.MaximumConcurrentOperationsPerConnectionExceededBehavior, true
}

// HasMaximumConcurrentOperationsPerConnectionExceededBehavior returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumConcurrentOperationsPerConnectionExceededBehavior() bool {
	if o != nil && !isNil(o.MaximumConcurrentOperationsPerConnectionExceededBehavior) {
		return true
	}

	return false
}

// SetMaximumConcurrentOperationsPerConnectionExceededBehavior gets a reference to the given EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp and assigns it to the MaximumConcurrentOperationsPerConnectionExceededBehavior field.
func (o *ClientConnectionPolicyShared) SetMaximumConcurrentOperationsPerConnectionExceededBehavior(v EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp) {
	o.MaximumConcurrentOperationsPerConnectionExceededBehavior = &v
}

// GetMaximumConnectionOperationRate returns the MaximumConnectionOperationRate field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumConnectionOperationRate() []string {
	if o == nil || isNil(o.MaximumConnectionOperationRate) {
		var ret []string
		return ret
	}
	return o.MaximumConnectionOperationRate
}

// GetMaximumConnectionOperationRateOk returns a tuple with the MaximumConnectionOperationRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumConnectionOperationRateOk() ([]string, bool) {
	if o == nil || isNil(o.MaximumConnectionOperationRate) {
    return nil, false
	}
	return o.MaximumConnectionOperationRate, true
}

// HasMaximumConnectionOperationRate returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumConnectionOperationRate() bool {
	if o != nil && !isNil(o.MaximumConnectionOperationRate) {
		return true
	}

	return false
}

// SetMaximumConnectionOperationRate gets a reference to the given []string and assigns it to the MaximumConnectionOperationRate field.
func (o *ClientConnectionPolicyShared) SetMaximumConnectionOperationRate(v []string) {
	o.MaximumConnectionOperationRate = v
}

// GetConnectionOperationRateExceededBehavior returns the ConnectionOperationRateExceededBehavior field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetConnectionOperationRateExceededBehavior() EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp {
	if o == nil || isNil(o.ConnectionOperationRateExceededBehavior) {
		var ret EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp
		return ret
	}
	return *o.ConnectionOperationRateExceededBehavior
}

// GetConnectionOperationRateExceededBehaviorOk returns a tuple with the ConnectionOperationRateExceededBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetConnectionOperationRateExceededBehaviorOk() (*EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp, bool) {
	if o == nil || isNil(o.ConnectionOperationRateExceededBehavior) {
    return nil, false
	}
	return o.ConnectionOperationRateExceededBehavior, true
}

// HasConnectionOperationRateExceededBehavior returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasConnectionOperationRateExceededBehavior() bool {
	if o != nil && !isNil(o.ConnectionOperationRateExceededBehavior) {
		return true
	}

	return false
}

// SetConnectionOperationRateExceededBehavior gets a reference to the given EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp and assigns it to the ConnectionOperationRateExceededBehavior field.
func (o *ClientConnectionPolicyShared) SetConnectionOperationRateExceededBehavior(v EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp) {
	o.ConnectionOperationRateExceededBehavior = &v
}

// GetMaximumPolicyOperationRate returns the MaximumPolicyOperationRate field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumPolicyOperationRate() []string {
	if o == nil || isNil(o.MaximumPolicyOperationRate) {
		var ret []string
		return ret
	}
	return o.MaximumPolicyOperationRate
}

// GetMaximumPolicyOperationRateOk returns a tuple with the MaximumPolicyOperationRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumPolicyOperationRateOk() ([]string, bool) {
	if o == nil || isNil(o.MaximumPolicyOperationRate) {
    return nil, false
	}
	return o.MaximumPolicyOperationRate, true
}

// HasMaximumPolicyOperationRate returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumPolicyOperationRate() bool {
	if o != nil && !isNil(o.MaximumPolicyOperationRate) {
		return true
	}

	return false
}

// SetMaximumPolicyOperationRate gets a reference to the given []string and assigns it to the MaximumPolicyOperationRate field.
func (o *ClientConnectionPolicyShared) SetMaximumPolicyOperationRate(v []string) {
	o.MaximumPolicyOperationRate = v
}

// GetPolicyOperationRateExceededBehavior returns the PolicyOperationRateExceededBehavior field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetPolicyOperationRateExceededBehavior() EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp {
	if o == nil || isNil(o.PolicyOperationRateExceededBehavior) {
		var ret EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp
		return ret
	}
	return *o.PolicyOperationRateExceededBehavior
}

// GetPolicyOperationRateExceededBehaviorOk returns a tuple with the PolicyOperationRateExceededBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetPolicyOperationRateExceededBehaviorOk() (*EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp, bool) {
	if o == nil || isNil(o.PolicyOperationRateExceededBehavior) {
    return nil, false
	}
	return o.PolicyOperationRateExceededBehavior, true
}

// HasPolicyOperationRateExceededBehavior returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasPolicyOperationRateExceededBehavior() bool {
	if o != nil && !isNil(o.PolicyOperationRateExceededBehavior) {
		return true
	}

	return false
}

// SetPolicyOperationRateExceededBehavior gets a reference to the given EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp and assigns it to the PolicyOperationRateExceededBehavior field.
func (o *ClientConnectionPolicyShared) SetPolicyOperationRateExceededBehavior(v EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp) {
	o.PolicyOperationRateExceededBehavior = &v
}

// GetMaximumSearchSizeLimit returns the MaximumSearchSizeLimit field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumSearchSizeLimit() int32 {
	if o == nil || isNil(o.MaximumSearchSizeLimit) {
		var ret int32
		return ret
	}
	return *o.MaximumSearchSizeLimit
}

// GetMaximumSearchSizeLimitOk returns a tuple with the MaximumSearchSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumSearchSizeLimitOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumSearchSizeLimit) {
    return nil, false
	}
	return o.MaximumSearchSizeLimit, true
}

// HasMaximumSearchSizeLimit returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumSearchSizeLimit() bool {
	if o != nil && !isNil(o.MaximumSearchSizeLimit) {
		return true
	}

	return false
}

// SetMaximumSearchSizeLimit gets a reference to the given int32 and assigns it to the MaximumSearchSizeLimit field.
func (o *ClientConnectionPolicyShared) SetMaximumSearchSizeLimit(v int32) {
	o.MaximumSearchSizeLimit = &v
}

// GetMaximumSearchTimeLimit returns the MaximumSearchTimeLimit field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumSearchTimeLimit() string {
	if o == nil || isNil(o.MaximumSearchTimeLimit) {
		var ret string
		return ret
	}
	return *o.MaximumSearchTimeLimit
}

// GetMaximumSearchTimeLimitOk returns a tuple with the MaximumSearchTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumSearchTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.MaximumSearchTimeLimit) {
    return nil, false
	}
	return o.MaximumSearchTimeLimit, true
}

// HasMaximumSearchTimeLimit returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumSearchTimeLimit() bool {
	if o != nil && !isNil(o.MaximumSearchTimeLimit) {
		return true
	}

	return false
}

// SetMaximumSearchTimeLimit gets a reference to the given string and assigns it to the MaximumSearchTimeLimit field.
func (o *ClientConnectionPolicyShared) SetMaximumSearchTimeLimit(v string) {
	o.MaximumSearchTimeLimit = &v
}

// GetMaximumSearchLookthroughLimit returns the MaximumSearchLookthroughLimit field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumSearchLookthroughLimit() int32 {
	if o == nil || isNil(o.MaximumSearchLookthroughLimit) {
		var ret int32
		return ret
	}
	return *o.MaximumSearchLookthroughLimit
}

// GetMaximumSearchLookthroughLimitOk returns a tuple with the MaximumSearchLookthroughLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumSearchLookthroughLimitOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumSearchLookthroughLimit) {
    return nil, false
	}
	return o.MaximumSearchLookthroughLimit, true
}

// HasMaximumSearchLookthroughLimit returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumSearchLookthroughLimit() bool {
	if o != nil && !isNil(o.MaximumSearchLookthroughLimit) {
		return true
	}

	return false
}

// SetMaximumSearchLookthroughLimit gets a reference to the given int32 and assigns it to the MaximumSearchLookthroughLimit field.
func (o *ClientConnectionPolicyShared) SetMaximumSearchLookthroughLimit(v int32) {
	o.MaximumSearchLookthroughLimit = &v
}

// GetMaximumLDAPJoinSizeLimit returns the MaximumLDAPJoinSizeLimit field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumLDAPJoinSizeLimit() int32 {
	if o == nil || isNil(o.MaximumLDAPJoinSizeLimit) {
		var ret int32
		return ret
	}
	return *o.MaximumLDAPJoinSizeLimit
}

// GetMaximumLDAPJoinSizeLimitOk returns a tuple with the MaximumLDAPJoinSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumLDAPJoinSizeLimitOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumLDAPJoinSizeLimit) {
    return nil, false
	}
	return o.MaximumLDAPJoinSizeLimit, true
}

// HasMaximumLDAPJoinSizeLimit returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumLDAPJoinSizeLimit() bool {
	if o != nil && !isNil(o.MaximumLDAPJoinSizeLimit) {
		return true
	}

	return false
}

// SetMaximumLDAPJoinSizeLimit gets a reference to the given int32 and assigns it to the MaximumLDAPJoinSizeLimit field.
func (o *ClientConnectionPolicyShared) SetMaximumLDAPJoinSizeLimit(v int32) {
	o.MaximumLDAPJoinSizeLimit = &v
}

// GetMaximumSortSizeLimitWithoutVLVIndex returns the MaximumSortSizeLimitWithoutVLVIndex field value if set, zero value otherwise.
func (o *ClientConnectionPolicyShared) GetMaximumSortSizeLimitWithoutVLVIndex() int32 {
	if o == nil || isNil(o.MaximumSortSizeLimitWithoutVLVIndex) {
		var ret int32
		return ret
	}
	return *o.MaximumSortSizeLimitWithoutVLVIndex
}

// GetMaximumSortSizeLimitWithoutVLVIndexOk returns a tuple with the MaximumSortSizeLimitWithoutVLVIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConnectionPolicyShared) GetMaximumSortSizeLimitWithoutVLVIndexOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumSortSizeLimitWithoutVLVIndex) {
    return nil, false
	}
	return o.MaximumSortSizeLimitWithoutVLVIndex, true
}

// HasMaximumSortSizeLimitWithoutVLVIndex returns a boolean if a field has been set.
func (o *ClientConnectionPolicyShared) HasMaximumSortSizeLimitWithoutVLVIndex() bool {
	if o != nil && !isNil(o.MaximumSortSizeLimitWithoutVLVIndex) {
		return true
	}

	return false
}

// SetMaximumSortSizeLimitWithoutVLVIndex gets a reference to the given int32 and assigns it to the MaximumSortSizeLimitWithoutVLVIndex field.
func (o *ClientConnectionPolicyShared) SetMaximumSortSizeLimitWithoutVLVIndex(v int32) {
	o.MaximumSortSizeLimitWithoutVLVIndex = &v
}

func (o ClientConnectionPolicyShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["policyID"] = o.PolicyID
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["evaluationOrderIndex"] = o.EvaluationOrderIndex
	}
	if !isNil(o.ConnectionCriteria) {
		toSerialize["connectionCriteria"] = o.ConnectionCriteria
	}
	if !isNil(o.TerminateConnection) {
		toSerialize["terminateConnection"] = o.TerminateConnection
	}
	if !isNil(o.SensitiveAttribute) {
		toSerialize["sensitiveAttribute"] = o.SensitiveAttribute
	}
	if !isNil(o.ExcludeGlobalSensitiveAttribute) {
		toSerialize["excludeGlobalSensitiveAttribute"] = o.ExcludeGlobalSensitiveAttribute
	}
	if !isNil(o.ResultCodeMap) {
		toSerialize["resultCodeMap"] = o.ResultCodeMap
	}
	if !isNil(o.IncludedBackendBaseDN) {
		toSerialize["includedBackendBaseDN"] = o.IncludedBackendBaseDN
	}
	if !isNil(o.ExcludedBackendBaseDN) {
		toSerialize["excludedBackendBaseDN"] = o.ExcludedBackendBaseDN
	}
	if true {
		toSerialize["allowedOperation"] = o.AllowedOperation
	}
	if !isNil(o.RequiredOperationRequestCriteria) {
		toSerialize["requiredOperationRequestCriteria"] = o.RequiredOperationRequestCriteria
	}
	if !isNil(o.ProhibitedOperationRequestCriteria) {
		toSerialize["prohibitedOperationRequestCriteria"] = o.ProhibitedOperationRequestCriteria
	}
	if !isNil(o.AllowedRequestControl) {
		toSerialize["allowedRequestControl"] = o.AllowedRequestControl
	}
	if !isNil(o.DeniedRequestControl) {
		toSerialize["deniedRequestControl"] = o.DeniedRequestControl
	}
	if !isNil(o.AllowedExtendedOperation) {
		toSerialize["allowedExtendedOperation"] = o.AllowedExtendedOperation
	}
	if !isNil(o.DeniedExtendedOperation) {
		toSerialize["deniedExtendedOperation"] = o.DeniedExtendedOperation
	}
	if true {
		toSerialize["allowedAuthType"] = o.AllowedAuthType
	}
	if !isNil(o.AllowedSASLMechanism) {
		toSerialize["allowedSASLMechanism"] = o.AllowedSASLMechanism
	}
	if !isNil(o.DeniedSASLMechanism) {
		toSerialize["deniedSASLMechanism"] = o.DeniedSASLMechanism
	}
	if !isNil(o.AllowedFilterType) {
		toSerialize["allowedFilterType"] = o.AllowedFilterType
	}
	if !isNil(o.AllowUnindexedSearches) {
		toSerialize["allowUnindexedSearches"] = o.AllowUnindexedSearches
	}
	if !isNil(o.AllowUnindexedSearchesWithControl) {
		toSerialize["allowUnindexedSearchesWithControl"] = o.AllowUnindexedSearchesWithControl
	}
	if !isNil(o.MinimumSubstringLength) {
		toSerialize["minimumSubstringLength"] = o.MinimumSubstringLength
	}
	if !isNil(o.MaximumConcurrentConnections) {
		toSerialize["maximumConcurrentConnections"] = o.MaximumConcurrentConnections
	}
	if !isNil(o.MaximumConnectionDuration) {
		toSerialize["maximumConnectionDuration"] = o.MaximumConnectionDuration
	}
	if !isNil(o.MaximumIdleConnectionDuration) {
		toSerialize["maximumIdleConnectionDuration"] = o.MaximumIdleConnectionDuration
	}
	if !isNil(o.MaximumOperationCountPerConnection) {
		toSerialize["maximumOperationCountPerConnection"] = o.MaximumOperationCountPerConnection
	}
	if !isNil(o.MaximumConcurrentOperationsPerConnection) {
		toSerialize["maximumConcurrentOperationsPerConnection"] = o.MaximumConcurrentOperationsPerConnection
	}
	if !isNil(o.MaximumConcurrentOperationWaitTimeBeforeRejecting) {
		toSerialize["maximumConcurrentOperationWaitTimeBeforeRejecting"] = o.MaximumConcurrentOperationWaitTimeBeforeRejecting
	}
	if !isNil(o.MaximumConcurrentOperationsPerConnectionExceededBehavior) {
		toSerialize["maximumConcurrentOperationsPerConnectionExceededBehavior"] = o.MaximumConcurrentOperationsPerConnectionExceededBehavior
	}
	if !isNil(o.MaximumConnectionOperationRate) {
		toSerialize["maximumConnectionOperationRate"] = o.MaximumConnectionOperationRate
	}
	if !isNil(o.ConnectionOperationRateExceededBehavior) {
		toSerialize["connectionOperationRateExceededBehavior"] = o.ConnectionOperationRateExceededBehavior
	}
	if !isNil(o.MaximumPolicyOperationRate) {
		toSerialize["maximumPolicyOperationRate"] = o.MaximumPolicyOperationRate
	}
	if !isNil(o.PolicyOperationRateExceededBehavior) {
		toSerialize["policyOperationRateExceededBehavior"] = o.PolicyOperationRateExceededBehavior
	}
	if !isNil(o.MaximumSearchSizeLimit) {
		toSerialize["maximumSearchSizeLimit"] = o.MaximumSearchSizeLimit
	}
	if !isNil(o.MaximumSearchTimeLimit) {
		toSerialize["maximumSearchTimeLimit"] = o.MaximumSearchTimeLimit
	}
	if !isNil(o.MaximumSearchLookthroughLimit) {
		toSerialize["maximumSearchLookthroughLimit"] = o.MaximumSearchLookthroughLimit
	}
	if !isNil(o.MaximumLDAPJoinSizeLimit) {
		toSerialize["maximumLDAPJoinSizeLimit"] = o.MaximumLDAPJoinSizeLimit
	}
	if !isNil(o.MaximumSortSizeLimitWithoutVLVIndex) {
		toSerialize["maximumSortSizeLimitWithoutVLVIndex"] = o.MaximumSortSizeLimitWithoutVLVIndex
	}
	return json.Marshal(toSerialize)
}

type NullableClientConnectionPolicyShared struct {
	value *ClientConnectionPolicyShared
	isSet bool
}

func (v NullableClientConnectionPolicyShared) Get() *ClientConnectionPolicyShared {
	return v.value
}

func (v *NullableClientConnectionPolicyShared) Set(val *ClientConnectionPolicyShared) {
	v.value = val
	v.isSet = true
}

func (v NullableClientConnectionPolicyShared) IsSet() bool {
	return v.isSet
}

func (v *NullableClientConnectionPolicyShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientConnectionPolicyShared(val *ClientConnectionPolicyShared) *NullableClientConnectionPolicyShared {
	return &NullableClientConnectionPolicyShared{value: val, isSet: true}
}

func (v NullableClientConnectionPolicyShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientConnectionPolicyShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


