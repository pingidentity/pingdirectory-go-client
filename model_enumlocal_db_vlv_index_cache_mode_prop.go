/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlocalDbVlvIndexCacheModeProp Specifies the cache mode that should be used when accessing the records in the database for this index.
type EnumlocalDbVlvIndexCacheModeProp string

// List of Enumlocal-db-vlv-index-cacheModeProp
const (
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_CACHE_KEYS_AND_VALUES  EnumlocalDbVlvIndexCacheModeProp = "cache-keys-and-values"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_CACHE_KEYS_ONLY        EnumlocalDbVlvIndexCacheModeProp = "cache-keys-only"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_NO_CACHING             EnumlocalDbVlvIndexCacheModeProp = "no-caching"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_KEEP_HOT               EnumlocalDbVlvIndexCacheModeProp = "keep-hot"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_DEFAULT                EnumlocalDbVlvIndexCacheModeProp = "default"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_MAKE_COLD              EnumlocalDbVlvIndexCacheModeProp = "make-cold"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_EVICT_LEAF_IMMEDIATELY EnumlocalDbVlvIndexCacheModeProp = "evict-leaf-immediately"
	ENUMLOCALDBVLVINDEXCACHEMODEPROP_EVICT_BIN_IMMEDIATELY  EnumlocalDbVlvIndexCacheModeProp = "evict-bin-immediately"
)

// All allowed values of EnumlocalDbVlvIndexCacheModeProp enum
var AllowedEnumlocalDbVlvIndexCacheModePropEnumValues = []EnumlocalDbVlvIndexCacheModeProp{
	"cache-keys-and-values",
	"cache-keys-only",
	"no-caching",
	"keep-hot",
	"default",
	"make-cold",
	"evict-leaf-immediately",
	"evict-bin-immediately",
}

func (v *EnumlocalDbVlvIndexCacheModeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlocalDbVlvIndexCacheModeProp(value)
	for _, existing := range AllowedEnumlocalDbVlvIndexCacheModePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlocalDbVlvIndexCacheModeProp", value)
}

// NewEnumlocalDbVlvIndexCacheModePropFromValue returns a pointer to a valid EnumlocalDbVlvIndexCacheModeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlocalDbVlvIndexCacheModePropFromValue(v string) (*EnumlocalDbVlvIndexCacheModeProp, error) {
	ev := EnumlocalDbVlvIndexCacheModeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlocalDbVlvIndexCacheModeProp: valid values are %v", v, AllowedEnumlocalDbVlvIndexCacheModePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlocalDbVlvIndexCacheModeProp) IsValid() bool {
	for _, existing := range AllowedEnumlocalDbVlvIndexCacheModePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlocal-db-vlv-index-cacheModeProp value
func (v EnumlocalDbVlvIndexCacheModeProp) Ptr() *EnumlocalDbVlvIndexCacheModeProp {
	return &v
}

type NullableEnumlocalDbVlvIndexCacheModeProp struct {
	value *EnumlocalDbVlvIndexCacheModeProp
	isSet bool
}

func (v NullableEnumlocalDbVlvIndexCacheModeProp) Get() *EnumlocalDbVlvIndexCacheModeProp {
	return v.value
}

func (v *NullableEnumlocalDbVlvIndexCacheModeProp) Set(val *EnumlocalDbVlvIndexCacheModeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlocalDbVlvIndexCacheModeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlocalDbVlvIndexCacheModeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlocalDbVlvIndexCacheModeProp(val *EnumlocalDbVlvIndexCacheModeProp) *NullableEnumlocalDbVlvIndexCacheModeProp {
	return &NullableEnumlocalDbVlvIndexCacheModeProp{value: val, isSet: true}
}

func (v NullableEnumlocalDbVlvIndexCacheModeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlocalDbVlvIndexCacheModeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
