/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumscimSubattributeSchemaUrn the model 'EnumscimSubattributeSchemaUrn'
type EnumscimSubattributeSchemaUrn string

// List of Enumscim-subattributeSchemaUrn
const (
	ENUMSCIMSUBATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SCIM_SUBATTRIBUTE EnumscimSubattributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:scim-subattribute"
)

// All allowed values of EnumscimSubattributeSchemaUrn enum
var AllowedEnumscimSubattributeSchemaUrnEnumValues = []EnumscimSubattributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:scim-subattribute",
}

func (v *EnumscimSubattributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumscimSubattributeSchemaUrn(value)
	for _, existing := range AllowedEnumscimSubattributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumscimSubattributeSchemaUrn", value)
}

// NewEnumscimSubattributeSchemaUrnFromValue returns a pointer to a valid EnumscimSubattributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscimSubattributeSchemaUrnFromValue(v string) (*EnumscimSubattributeSchemaUrn, error) {
	ev := EnumscimSubattributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumscimSubattributeSchemaUrn: valid values are %v", v, AllowedEnumscimSubattributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumscimSubattributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumscimSubattributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim-subattributeSchemaUrn value
func (v EnumscimSubattributeSchemaUrn) Ptr() *EnumscimSubattributeSchemaUrn {
	return &v
}

type NullableEnumscimSubattributeSchemaUrn struct {
	value *EnumscimSubattributeSchemaUrn
	isSet bool
}

func (v NullableEnumscimSubattributeSchemaUrn) Get() *EnumscimSubattributeSchemaUrn {
	return v.value
}

func (v *NullableEnumscimSubattributeSchemaUrn) Set(val *EnumscimSubattributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscimSubattributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscimSubattributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscimSubattributeSchemaUrn(val *EnumscimSubattributeSchemaUrn) *NullableEnumscimSubattributeSchemaUrn {
	return &NullableEnumscimSubattributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumscimSubattributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscimSubattributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
