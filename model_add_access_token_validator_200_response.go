/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddAccessTokenValidator200Response - struct for AddAccessTokenValidator200Response
type AddAccessTokenValidator200Response struct {
	JwtAccessTokenValidatorResponse          *JwtAccessTokenValidatorResponse
	MockAccessTokenValidatorResponse         *MockAccessTokenValidatorResponse
	PingFederateAccessTokenValidatorResponse *PingFederateAccessTokenValidatorResponse
	ThirdPartyAccessTokenValidatorResponse   *ThirdPartyAccessTokenValidatorResponse
}

// JwtAccessTokenValidatorResponseAsAddAccessTokenValidator200Response is a convenience function that returns JwtAccessTokenValidatorResponse wrapped in AddAccessTokenValidator200Response
func JwtAccessTokenValidatorResponseAsAddAccessTokenValidator200Response(v *JwtAccessTokenValidatorResponse) AddAccessTokenValidator200Response {
	return AddAccessTokenValidator200Response{
		JwtAccessTokenValidatorResponse: v,
	}
}

// MockAccessTokenValidatorResponseAsAddAccessTokenValidator200Response is a convenience function that returns MockAccessTokenValidatorResponse wrapped in AddAccessTokenValidator200Response
func MockAccessTokenValidatorResponseAsAddAccessTokenValidator200Response(v *MockAccessTokenValidatorResponse) AddAccessTokenValidator200Response {
	return AddAccessTokenValidator200Response{
		MockAccessTokenValidatorResponse: v,
	}
}

// PingFederateAccessTokenValidatorResponseAsAddAccessTokenValidator200Response is a convenience function that returns PingFederateAccessTokenValidatorResponse wrapped in AddAccessTokenValidator200Response
func PingFederateAccessTokenValidatorResponseAsAddAccessTokenValidator200Response(v *PingFederateAccessTokenValidatorResponse) AddAccessTokenValidator200Response {
	return AddAccessTokenValidator200Response{
		PingFederateAccessTokenValidatorResponse: v,
	}
}

// ThirdPartyAccessTokenValidatorResponseAsAddAccessTokenValidator200Response is a convenience function that returns ThirdPartyAccessTokenValidatorResponse wrapped in AddAccessTokenValidator200Response
func ThirdPartyAccessTokenValidatorResponseAsAddAccessTokenValidator200Response(v *ThirdPartyAccessTokenValidatorResponse) AddAccessTokenValidator200Response {
	return AddAccessTokenValidator200Response{
		ThirdPartyAccessTokenValidatorResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddAccessTokenValidator200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JwtAccessTokenValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.JwtAccessTokenValidatorResponse)
	if err == nil {
		jsonJwtAccessTokenValidatorResponse, _ := json.Marshal(dst.JwtAccessTokenValidatorResponse)
		if string(jsonJwtAccessTokenValidatorResponse) == "{}" { // empty struct
			dst.JwtAccessTokenValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.JwtAccessTokenValidatorResponse = nil
	}

	// try to unmarshal data into MockAccessTokenValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.MockAccessTokenValidatorResponse)
	if err == nil {
		jsonMockAccessTokenValidatorResponse, _ := json.Marshal(dst.MockAccessTokenValidatorResponse)
		if string(jsonMockAccessTokenValidatorResponse) == "{}" { // empty struct
			dst.MockAccessTokenValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.MockAccessTokenValidatorResponse = nil
	}

	// try to unmarshal data into PingFederateAccessTokenValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.PingFederateAccessTokenValidatorResponse)
	if err == nil {
		jsonPingFederateAccessTokenValidatorResponse, _ := json.Marshal(dst.PingFederateAccessTokenValidatorResponse)
		if string(jsonPingFederateAccessTokenValidatorResponse) == "{}" { // empty struct
			dst.PingFederateAccessTokenValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.PingFederateAccessTokenValidatorResponse = nil
	}

	// try to unmarshal data into ThirdPartyAccessTokenValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyAccessTokenValidatorResponse)
	if err == nil {
		jsonThirdPartyAccessTokenValidatorResponse, _ := json.Marshal(dst.ThirdPartyAccessTokenValidatorResponse)
		if string(jsonThirdPartyAccessTokenValidatorResponse) == "{}" { // empty struct
			dst.ThirdPartyAccessTokenValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyAccessTokenValidatorResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JwtAccessTokenValidatorResponse = nil
		dst.MockAccessTokenValidatorResponse = nil
		dst.PingFederateAccessTokenValidatorResponse = nil
		dst.ThirdPartyAccessTokenValidatorResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddAccessTokenValidator200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddAccessTokenValidator200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddAccessTokenValidator200Response) MarshalJSON() ([]byte, error) {
	if src.JwtAccessTokenValidatorResponse != nil {
		return json.Marshal(&src.JwtAccessTokenValidatorResponse)
	}

	if src.MockAccessTokenValidatorResponse != nil {
		return json.Marshal(&src.MockAccessTokenValidatorResponse)
	}

	if src.PingFederateAccessTokenValidatorResponse != nil {
		return json.Marshal(&src.PingFederateAccessTokenValidatorResponse)
	}

	if src.ThirdPartyAccessTokenValidatorResponse != nil {
		return json.Marshal(&src.ThirdPartyAccessTokenValidatorResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddAccessTokenValidator200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.JwtAccessTokenValidatorResponse != nil {
		return obj.JwtAccessTokenValidatorResponse
	}

	if obj.MockAccessTokenValidatorResponse != nil {
		return obj.MockAccessTokenValidatorResponse
	}

	if obj.PingFederateAccessTokenValidatorResponse != nil {
		return obj.PingFederateAccessTokenValidatorResponse
	}

	if obj.ThirdPartyAccessTokenValidatorResponse != nil {
		return obj.ThirdPartyAccessTokenValidatorResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddAccessTokenValidator200Response struct {
	value *AddAccessTokenValidator200Response
	isSet bool
}

func (v NullableAddAccessTokenValidator200Response) Get() *AddAccessTokenValidator200Response {
	return v.value
}

func (v *NullableAddAccessTokenValidator200Response) Set(val *AddAccessTokenValidator200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddAccessTokenValidator200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddAccessTokenValidator200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddAccessTokenValidator200Response(val *AddAccessTokenValidator200Response) *NullableAddAccessTokenValidator200Response {
	return &NullableAddAccessTokenValidator200Response{value: val, isSet: true}
}

func (v NullableAddAccessTokenValidator200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddAccessTokenValidator200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
