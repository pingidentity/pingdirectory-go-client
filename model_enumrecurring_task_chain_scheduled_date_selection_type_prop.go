/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumrecurringTaskChainScheduledDateSelectionTypeProp The mechanism used to determine the dates on which instances of this Recurring Task Chain may be scheduled to start.
type EnumrecurringTaskChainScheduledDateSelectionTypeProp string

// List of Enumrecurring-task-chain-scheduledDateSelectionTypeProp
const (
	EVERY_DAY EnumrecurringTaskChainScheduledDateSelectionTypeProp = "every-day"
	SELECTED_DAYS_OF_THE_WEEK EnumrecurringTaskChainScheduledDateSelectionTypeProp = "selected-days-of-the-week"
	SELECTED_DAYS_OF_THE_MONTH EnumrecurringTaskChainScheduledDateSelectionTypeProp = "selected-days-of-the-month"
)

// All allowed values of EnumrecurringTaskChainScheduledDateSelectionTypeProp enum
var AllowedEnumrecurringTaskChainScheduledDateSelectionTypePropEnumValues = []EnumrecurringTaskChainScheduledDateSelectionTypeProp{
	"every-day",
	"selected-days-of-the-week",
	"selected-days-of-the-month",
}

func (v *EnumrecurringTaskChainScheduledDateSelectionTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrecurringTaskChainScheduledDateSelectionTypeProp(value)
	for _, existing := range AllowedEnumrecurringTaskChainScheduledDateSelectionTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrecurringTaskChainScheduledDateSelectionTypeProp", value)
}

// NewEnumrecurringTaskChainScheduledDateSelectionTypePropFromValue returns a pointer to a valid EnumrecurringTaskChainScheduledDateSelectionTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrecurringTaskChainScheduledDateSelectionTypePropFromValue(v string) (*EnumrecurringTaskChainScheduledDateSelectionTypeProp, error) {
	ev := EnumrecurringTaskChainScheduledDateSelectionTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrecurringTaskChainScheduledDateSelectionTypeProp: valid values are %v", v, AllowedEnumrecurringTaskChainScheduledDateSelectionTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrecurringTaskChainScheduledDateSelectionTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumrecurringTaskChainScheduledDateSelectionTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumrecurring-task-chain-scheduledDateSelectionTypeProp value
func (v EnumrecurringTaskChainScheduledDateSelectionTypeProp) Ptr() *EnumrecurringTaskChainScheduledDateSelectionTypeProp {
	return &v
}

type NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp struct {
	value *EnumrecurringTaskChainScheduledDateSelectionTypeProp
	isSet bool
}

func (v NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp) Get() *EnumrecurringTaskChainScheduledDateSelectionTypeProp {
	return v.value
}

func (v *NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp) Set(val *EnumrecurringTaskChainScheduledDateSelectionTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrecurringTaskChainScheduledDateSelectionTypeProp(val *EnumrecurringTaskChainScheduledDateSelectionTypeProp) *NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp {
	return &NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp{value: val, isSet: true}
}

func (v NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrecurringTaskChainScheduledDateSelectionTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

