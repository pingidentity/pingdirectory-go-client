/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UniqueCharactersPasswordValidatorShared struct for UniqueCharactersPasswordValidatorShared
type UniqueCharactersPasswordValidatorShared struct {
	Schemas []EnumuniqueCharactersPasswordValidatorSchemaUrn `json:"schemas"`
	// Specifies the minimum number of unique characters that a password will be allowed to contain.
	MinUniqueCharacters int32 `json:"minUniqueCharacters"`
	// Indicates whether this password validator should treat password characters in a case-sensitive manner.
	CaseSensitiveValidation bool `json:"caseSensitiveValidation"`
	// A description for this Password Validator
	Description *string `json:"description,omitempty"`
	// Indicates whether the password validator is enabled for use.
	Enabled bool `json:"enabled"`
	// Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
	ValidatorRequirementDescription *string `json:"validatorRequirementDescription,omitempty"`
	// Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
	ValidatorFailureMessage *string `json:"validatorFailureMessage,omitempty"`
}

// NewUniqueCharactersPasswordValidatorShared instantiates a new UniqueCharactersPasswordValidatorShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniqueCharactersPasswordValidatorShared(schemas []EnumuniqueCharactersPasswordValidatorSchemaUrn, minUniqueCharacters int32, caseSensitiveValidation bool, enabled bool) *UniqueCharactersPasswordValidatorShared {
	this := UniqueCharactersPasswordValidatorShared{}
	this.Schemas = schemas
	this.MinUniqueCharacters = minUniqueCharacters
	this.CaseSensitiveValidation = caseSensitiveValidation
	this.Enabled = enabled
	return &this
}

// NewUniqueCharactersPasswordValidatorSharedWithDefaults instantiates a new UniqueCharactersPasswordValidatorShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniqueCharactersPasswordValidatorSharedWithDefaults() *UniqueCharactersPasswordValidatorShared {
	this := UniqueCharactersPasswordValidatorShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *UniqueCharactersPasswordValidatorShared) GetSchemas() []EnumuniqueCharactersPasswordValidatorSchemaUrn {
	if o == nil {
		var ret []EnumuniqueCharactersPasswordValidatorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetSchemasOk() ([]EnumuniqueCharactersPasswordValidatorSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *UniqueCharactersPasswordValidatorShared) SetSchemas(v []EnumuniqueCharactersPasswordValidatorSchemaUrn) {
	o.Schemas = v
}

// GetMinUniqueCharacters returns the MinUniqueCharacters field value
func (o *UniqueCharactersPasswordValidatorShared) GetMinUniqueCharacters() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinUniqueCharacters
}

// GetMinUniqueCharactersOk returns a tuple with the MinUniqueCharacters field value
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetMinUniqueCharactersOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MinUniqueCharacters, true
}

// SetMinUniqueCharacters sets field value
func (o *UniqueCharactersPasswordValidatorShared) SetMinUniqueCharacters(v int32) {
	o.MinUniqueCharacters = v
}

// GetCaseSensitiveValidation returns the CaseSensitiveValidation field value
func (o *UniqueCharactersPasswordValidatorShared) GetCaseSensitiveValidation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CaseSensitiveValidation
}

// GetCaseSensitiveValidationOk returns a tuple with the CaseSensitiveValidation field value
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetCaseSensitiveValidationOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CaseSensitiveValidation, true
}

// SetCaseSensitiveValidation sets field value
func (o *UniqueCharactersPasswordValidatorShared) SetCaseSensitiveValidation(v bool) {
	o.CaseSensitiveValidation = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UniqueCharactersPasswordValidatorShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UniqueCharactersPasswordValidatorShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UniqueCharactersPasswordValidatorShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *UniqueCharactersPasswordValidatorShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UniqueCharactersPasswordValidatorShared) SetEnabled(v bool) {
	o.Enabled = v
}

// GetValidatorRequirementDescription returns the ValidatorRequirementDescription field value if set, zero value otherwise.
func (o *UniqueCharactersPasswordValidatorShared) GetValidatorRequirementDescription() string {
	if o == nil || isNil(o.ValidatorRequirementDescription) {
		var ret string
		return ret
	}
	return *o.ValidatorRequirementDescription
}

// GetValidatorRequirementDescriptionOk returns a tuple with the ValidatorRequirementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetValidatorRequirementDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.ValidatorRequirementDescription) {
    return nil, false
	}
	return o.ValidatorRequirementDescription, true
}

// HasValidatorRequirementDescription returns a boolean if a field has been set.
func (o *UniqueCharactersPasswordValidatorShared) HasValidatorRequirementDescription() bool {
	if o != nil && !isNil(o.ValidatorRequirementDescription) {
		return true
	}

	return false
}

// SetValidatorRequirementDescription gets a reference to the given string and assigns it to the ValidatorRequirementDescription field.
func (o *UniqueCharactersPasswordValidatorShared) SetValidatorRequirementDescription(v string) {
	o.ValidatorRequirementDescription = &v
}

// GetValidatorFailureMessage returns the ValidatorFailureMessage field value if set, zero value otherwise.
func (o *UniqueCharactersPasswordValidatorShared) GetValidatorFailureMessage() string {
	if o == nil || isNil(o.ValidatorFailureMessage) {
		var ret string
		return ret
	}
	return *o.ValidatorFailureMessage
}

// GetValidatorFailureMessageOk returns a tuple with the ValidatorFailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueCharactersPasswordValidatorShared) GetValidatorFailureMessageOk() (*string, bool) {
	if o == nil || isNil(o.ValidatorFailureMessage) {
    return nil, false
	}
	return o.ValidatorFailureMessage, true
}

// HasValidatorFailureMessage returns a boolean if a field has been set.
func (o *UniqueCharactersPasswordValidatorShared) HasValidatorFailureMessage() bool {
	if o != nil && !isNil(o.ValidatorFailureMessage) {
		return true
	}

	return false
}

// SetValidatorFailureMessage gets a reference to the given string and assigns it to the ValidatorFailureMessage field.
func (o *UniqueCharactersPasswordValidatorShared) SetValidatorFailureMessage(v string) {
	o.ValidatorFailureMessage = &v
}

func (o UniqueCharactersPasswordValidatorShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["minUniqueCharacters"] = o.MinUniqueCharacters
	}
	if true {
		toSerialize["caseSensitiveValidation"] = o.CaseSensitiveValidation
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.ValidatorRequirementDescription) {
		toSerialize["validatorRequirementDescription"] = o.ValidatorRequirementDescription
	}
	if !isNil(o.ValidatorFailureMessage) {
		toSerialize["validatorFailureMessage"] = o.ValidatorFailureMessage
	}
	return json.Marshal(toSerialize)
}

type NullableUniqueCharactersPasswordValidatorShared struct {
	value *UniqueCharactersPasswordValidatorShared
	isSet bool
}

func (v NullableUniqueCharactersPasswordValidatorShared) Get() *UniqueCharactersPasswordValidatorShared {
	return v.value
}

func (v *NullableUniqueCharactersPasswordValidatorShared) Set(val *UniqueCharactersPasswordValidatorShared) {
	v.value = val
	v.isSet = true
}

func (v NullableUniqueCharactersPasswordValidatorShared) IsSet() bool {
	return v.isSet
}

func (v *NullableUniqueCharactersPasswordValidatorShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniqueCharactersPasswordValidatorShared(val *UniqueCharactersPasswordValidatorShared) *NullableUniqueCharactersPasswordValidatorShared {
	return &NullableUniqueCharactersPasswordValidatorShared{value: val, isSet: true}
}

func (v NullableUniqueCharactersPasswordValidatorShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniqueCharactersPasswordValidatorShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


