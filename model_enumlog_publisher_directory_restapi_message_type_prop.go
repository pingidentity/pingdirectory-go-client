/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherDirectoryRESTAPIMessageTypeProp Specifies the Directory REST API message types which can be logged.
type EnumlogPublisherDirectoryRESTAPIMessageTypeProp string

// List of Enumlog-publisher-directoryRESTAPIMessageTypeProp
const (
	ENUMLOGPUBLISHERDIRECTORYRESTAPIMESSAGETYPEPROP_ERROR EnumlogPublisherDirectoryRESTAPIMessageTypeProp = "error"
)

// All allowed values of EnumlogPublisherDirectoryRESTAPIMessageTypeProp enum
var AllowedEnumlogPublisherDirectoryRESTAPIMessageTypePropEnumValues = []EnumlogPublisherDirectoryRESTAPIMessageTypeProp{
	"error",
}

func (v *EnumlogPublisherDirectoryRESTAPIMessageTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherDirectoryRESTAPIMessageTypeProp(value)
	for _, existing := range AllowedEnumlogPublisherDirectoryRESTAPIMessageTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherDirectoryRESTAPIMessageTypeProp", value)
}

// NewEnumlogPublisherDirectoryRESTAPIMessageTypePropFromValue returns a pointer to a valid EnumlogPublisherDirectoryRESTAPIMessageTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherDirectoryRESTAPIMessageTypePropFromValue(v string) (*EnumlogPublisherDirectoryRESTAPIMessageTypeProp, error) {
	ev := EnumlogPublisherDirectoryRESTAPIMessageTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherDirectoryRESTAPIMessageTypeProp: valid values are %v", v, AllowedEnumlogPublisherDirectoryRESTAPIMessageTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherDirectoryRESTAPIMessageTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherDirectoryRESTAPIMessageTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-directoryRESTAPIMessageTypeProp value
func (v EnumlogPublisherDirectoryRESTAPIMessageTypeProp) Ptr() *EnumlogPublisherDirectoryRESTAPIMessageTypeProp {
	return &v
}

type NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp struct {
	value *EnumlogPublisherDirectoryRESTAPIMessageTypeProp
	isSet bool
}

func (v NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp) Get() *EnumlogPublisherDirectoryRESTAPIMessageTypeProp {
	return v.value
}

func (v *NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp) Set(val *EnumlogPublisherDirectoryRESTAPIMessageTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp(val *EnumlogPublisherDirectoryRESTAPIMessageTypeProp) *NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp {
	return &NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherDirectoryRESTAPIMessageTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
