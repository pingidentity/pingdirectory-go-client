/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdefaultUncachedAttributeCriteriaSchemaUrn the model 'EnumdefaultUncachedAttributeCriteriaSchemaUrn'
type EnumdefaultUncachedAttributeCriteriaSchemaUrn string

// List of Enumdefault-uncached-attribute-criteriaSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0UNCACHED_ATTRIBUTE_CRITERIADEFAULT EnumdefaultUncachedAttributeCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:uncached-attribute-criteria:default"
)

// All allowed values of EnumdefaultUncachedAttributeCriteriaSchemaUrn enum
var AllowedEnumdefaultUncachedAttributeCriteriaSchemaUrnEnumValues = []EnumdefaultUncachedAttributeCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:uncached-attribute-criteria:default",
}

func (v *EnumdefaultUncachedAttributeCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdefaultUncachedAttributeCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumdefaultUncachedAttributeCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdefaultUncachedAttributeCriteriaSchemaUrn", value)
}

// NewEnumdefaultUncachedAttributeCriteriaSchemaUrnFromValue returns a pointer to a valid EnumdefaultUncachedAttributeCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdefaultUncachedAttributeCriteriaSchemaUrnFromValue(v string) (*EnumdefaultUncachedAttributeCriteriaSchemaUrn, error) {
	ev := EnumdefaultUncachedAttributeCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdefaultUncachedAttributeCriteriaSchemaUrn: valid values are %v", v, AllowedEnumdefaultUncachedAttributeCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdefaultUncachedAttributeCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdefaultUncachedAttributeCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdefault-uncached-attribute-criteriaSchemaUrn value
func (v EnumdefaultUncachedAttributeCriteriaSchemaUrn) Ptr() *EnumdefaultUncachedAttributeCriteriaSchemaUrn {
	return &v
}

type NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn struct {
	value *EnumdefaultUncachedAttributeCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn) Get() *EnumdefaultUncachedAttributeCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn) Set(val *EnumdefaultUncachedAttributeCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdefaultUncachedAttributeCriteriaSchemaUrn(val *EnumdefaultUncachedAttributeCriteriaSchemaUrn) *NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn {
	return &NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdefaultUncachedAttributeCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

