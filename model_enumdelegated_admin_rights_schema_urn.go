/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelegatedAdminRightsSchemaUrn the model 'EnumdelegatedAdminRightsSchemaUrn'
type EnumdelegatedAdminRightsSchemaUrn string

// List of Enumdelegated-admin-rightsSchemaUrn
const (
	ENUMDELEGATEDADMINRIGHTSSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DELEGATED_ADMIN_RIGHTS EnumdelegatedAdminRightsSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:delegated-admin-rights"
)

// All allowed values of EnumdelegatedAdminRightsSchemaUrn enum
var AllowedEnumdelegatedAdminRightsSchemaUrnEnumValues = []EnumdelegatedAdminRightsSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:delegated-admin-rights",
}

func (v *EnumdelegatedAdminRightsSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelegatedAdminRightsSchemaUrn(value)
	for _, existing := range AllowedEnumdelegatedAdminRightsSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelegatedAdminRightsSchemaUrn", value)
}

// NewEnumdelegatedAdminRightsSchemaUrnFromValue returns a pointer to a valid EnumdelegatedAdminRightsSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelegatedAdminRightsSchemaUrnFromValue(v string) (*EnumdelegatedAdminRightsSchemaUrn, error) {
	ev := EnumdelegatedAdminRightsSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelegatedAdminRightsSchemaUrn: valid values are %v", v, AllowedEnumdelegatedAdminRightsSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelegatedAdminRightsSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdelegatedAdminRightsSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelegated-admin-rightsSchemaUrn value
func (v EnumdelegatedAdminRightsSchemaUrn) Ptr() *EnumdelegatedAdminRightsSchemaUrn {
	return &v
}

type NullableEnumdelegatedAdminRightsSchemaUrn struct {
	value *EnumdelegatedAdminRightsSchemaUrn
	isSet bool
}

func (v NullableEnumdelegatedAdminRightsSchemaUrn) Get() *EnumdelegatedAdminRightsSchemaUrn {
	return v.value
}

func (v *NullableEnumdelegatedAdminRightsSchemaUrn) Set(val *EnumdelegatedAdminRightsSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelegatedAdminRightsSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelegatedAdminRightsSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelegatedAdminRightsSchemaUrn(val *EnumdelegatedAdminRightsSchemaUrn) *NullableEnumdelegatedAdminRightsSchemaUrn {
	return &NullableEnumdelegatedAdminRightsSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdelegatedAdminRightsSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelegatedAdminRightsSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

