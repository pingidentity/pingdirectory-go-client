/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyIdentityMapperSchemaUrn the model 'EnumthirdPartyIdentityMapperSchemaUrn'
type EnumthirdPartyIdentityMapperSchemaUrn string

// List of Enumthird-party-identity-mapperSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0IDENTITY_MAPPERTHIRD_PARTY EnumthirdPartyIdentityMapperSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:identity-mapper:third-party"
)

// All allowed values of EnumthirdPartyIdentityMapperSchemaUrn enum
var AllowedEnumthirdPartyIdentityMapperSchemaUrnEnumValues = []EnumthirdPartyIdentityMapperSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:identity-mapper:third-party",
}

func (v *EnumthirdPartyIdentityMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyIdentityMapperSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyIdentityMapperSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyIdentityMapperSchemaUrn", value)
}

// NewEnumthirdPartyIdentityMapperSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyIdentityMapperSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyIdentityMapperSchemaUrnFromValue(v string) (*EnumthirdPartyIdentityMapperSchemaUrn, error) {
	ev := EnumthirdPartyIdentityMapperSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyIdentityMapperSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyIdentityMapperSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyIdentityMapperSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyIdentityMapperSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-identity-mapperSchemaUrn value
func (v EnumthirdPartyIdentityMapperSchemaUrn) Ptr() *EnumthirdPartyIdentityMapperSchemaUrn {
	return &v
}

type NullableEnumthirdPartyIdentityMapperSchemaUrn struct {
	value *EnumthirdPartyIdentityMapperSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyIdentityMapperSchemaUrn) Get() *EnumthirdPartyIdentityMapperSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyIdentityMapperSchemaUrn) Set(val *EnumthirdPartyIdentityMapperSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyIdentityMapperSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyIdentityMapperSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyIdentityMapperSchemaUrn(val *EnumthirdPartyIdentityMapperSchemaUrn) *NullableEnumthirdPartyIdentityMapperSchemaUrn {
	return &NullableEnumthirdPartyIdentityMapperSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyIdentityMapperSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyIdentityMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

