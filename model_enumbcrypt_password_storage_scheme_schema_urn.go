/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbcryptPasswordStorageSchemeSchemaUrn the model 'EnumbcryptPasswordStorageSchemeSchemaUrn'
type EnumbcryptPasswordStorageSchemeSchemaUrn string

// List of Enumbcrypt-password-storage-schemeSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEBCRYPT EnumbcryptPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:bcrypt"
)

// All allowed values of EnumbcryptPasswordStorageSchemeSchemaUrn enum
var AllowedEnumbcryptPasswordStorageSchemeSchemaUrnEnumValues = []EnumbcryptPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:bcrypt",
}

func (v *EnumbcryptPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbcryptPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumbcryptPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbcryptPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumbcryptPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumbcryptPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbcryptPasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumbcryptPasswordStorageSchemeSchemaUrn, error) {
	ev := EnumbcryptPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbcryptPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumbcryptPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbcryptPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumbcryptPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbcrypt-password-storage-schemeSchemaUrn value
func (v EnumbcryptPasswordStorageSchemeSchemaUrn) Ptr() *EnumbcryptPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumbcryptPasswordStorageSchemeSchemaUrn struct {
	value *EnumbcryptPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumbcryptPasswordStorageSchemeSchemaUrn) Get() *EnumbcryptPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumbcryptPasswordStorageSchemeSchemaUrn) Set(val *EnumbcryptPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbcryptPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbcryptPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbcryptPasswordStorageSchemeSchemaUrn(val *EnumbcryptPasswordStorageSchemeSchemaUrn) *NullableEnumbcryptPasswordStorageSchemeSchemaUrn {
	return &NullableEnumbcryptPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumbcryptPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbcryptPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

