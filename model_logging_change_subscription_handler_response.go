/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LoggingChangeSubscriptionHandlerResponse struct for LoggingChangeSubscriptionHandlerResponse
type LoggingChangeSubscriptionHandlerResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	// Name of the Change Subscription Handler
	Id      string                                          `json:"id"`
	Schemas []EnumloggingChangeSubscriptionHandlerSchemaUrn `json:"schemas"`
	// Specifies the log file in which the change notification messages will be written.
	LogFile string `json:"logFile"`
	// A description for this Change Subscription Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether this change subscription handler is enabled within the server.
	Enabled bool `json:"enabled"`
	// The set of change subscriptions for which this change subscription handler should be notified. If no values are provided then it will be notified for all change subscriptions defined in the server.
	ChangeSubscription []string `json:"changeSubscription,omitempty"`
}

// NewLoggingChangeSubscriptionHandlerResponse instantiates a new LoggingChangeSubscriptionHandlerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingChangeSubscriptionHandlerResponse(id string, schemas []EnumloggingChangeSubscriptionHandlerSchemaUrn, logFile string, enabled bool) *LoggingChangeSubscriptionHandlerResponse {
	this := LoggingChangeSubscriptionHandlerResponse{}
	this.Id = id
	this.Schemas = schemas
	this.LogFile = logFile
	this.Enabled = enabled
	return &this
}

// NewLoggingChangeSubscriptionHandlerResponseWithDefaults instantiates a new LoggingChangeSubscriptionHandlerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingChangeSubscriptionHandlerResponseWithDefaults() *LoggingChangeSubscriptionHandlerResponse {
	this := LoggingChangeSubscriptionHandlerResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *LoggingChangeSubscriptionHandlerResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *LoggingChangeSubscriptionHandlerResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *LoggingChangeSubscriptionHandlerResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *LoggingChangeSubscriptionHandlerResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetId returns the Id field value
func (o *LoggingChangeSubscriptionHandlerResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LoggingChangeSubscriptionHandlerResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *LoggingChangeSubscriptionHandlerResponse) GetSchemas() []EnumloggingChangeSubscriptionHandlerSchemaUrn {
	if o == nil {
		var ret []EnumloggingChangeSubscriptionHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetSchemasOk() ([]EnumloggingChangeSubscriptionHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *LoggingChangeSubscriptionHandlerResponse) SetSchemas(v []EnumloggingChangeSubscriptionHandlerSchemaUrn) {
	o.Schemas = v
}

// GetLogFile returns the LogFile field value
func (o *LoggingChangeSubscriptionHandlerResponse) GetLogFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetLogFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFile, true
}

// SetLogFile sets field value
func (o *LoggingChangeSubscriptionHandlerResponse) SetLogFile(v string) {
	o.LogFile = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LoggingChangeSubscriptionHandlerResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LoggingChangeSubscriptionHandlerResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *LoggingChangeSubscriptionHandlerResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LoggingChangeSubscriptionHandlerResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetChangeSubscription returns the ChangeSubscription field value if set, zero value otherwise.
func (o *LoggingChangeSubscriptionHandlerResponse) GetChangeSubscription() []string {
	if o == nil || isNil(o.ChangeSubscription) {
		var ret []string
		return ret
	}
	return o.ChangeSubscription
}

// GetChangeSubscriptionOk returns a tuple with the ChangeSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) GetChangeSubscriptionOk() ([]string, bool) {
	if o == nil || isNil(o.ChangeSubscription) {
		return nil, false
	}
	return o.ChangeSubscription, true
}

// HasChangeSubscription returns a boolean if a field has been set.
func (o *LoggingChangeSubscriptionHandlerResponse) HasChangeSubscription() bool {
	if o != nil && !isNil(o.ChangeSubscription) {
		return true
	}

	return false
}

// SetChangeSubscription gets a reference to the given []string and assigns it to the ChangeSubscription field.
func (o *LoggingChangeSubscriptionHandlerResponse) SetChangeSubscription(v []string) {
	o.ChangeSubscription = v
}

func (o LoggingChangeSubscriptionHandlerResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["logFile"] = o.LogFile
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.ChangeSubscription) {
		toSerialize["changeSubscription"] = o.ChangeSubscription
	}
	return json.Marshal(toSerialize)
}

type NullableLoggingChangeSubscriptionHandlerResponse struct {
	value *LoggingChangeSubscriptionHandlerResponse
	isSet bool
}

func (v NullableLoggingChangeSubscriptionHandlerResponse) Get() *LoggingChangeSubscriptionHandlerResponse {
	return v.value
}

func (v *NullableLoggingChangeSubscriptionHandlerResponse) Set(val *LoggingChangeSubscriptionHandlerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingChangeSubscriptionHandlerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingChangeSubscriptionHandlerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingChangeSubscriptionHandlerResponse(val *LoggingChangeSubscriptionHandlerResponse) *NullableLoggingChangeSubscriptionHandlerResponse {
	return &NullableLoggingChangeSubscriptionHandlerResponse{value: val, isSet: true}
}

func (v NullableLoggingChangeSubscriptionHandlerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingChangeSubscriptionHandlerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
