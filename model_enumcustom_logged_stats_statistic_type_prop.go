/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumcustomLoggedStatsStatisticTypeProp Specifies the type of statistic to include in the output for each monitored attribute.
type EnumcustomLoggedStatsStatisticTypeProp string

// List of Enumcustom-logged-stats-statisticTypeProp
const (
	ENUMCUSTOMLOGGEDSTATSSTATISTICTYPEPROP_RAW     EnumcustomLoggedStatsStatisticTypeProp = "raw"
	ENUMCUSTOMLOGGEDSTATSSTATISTICTYPEPROP_COUNTER EnumcustomLoggedStatsStatisticTypeProp = "counter"
	ENUMCUSTOMLOGGEDSTATSSTATISTICTYPEPROP_AVERAGE EnumcustomLoggedStatsStatisticTypeProp = "average"
	ENUMCUSTOMLOGGEDSTATSSTATISTICTYPEPROP_MINIMUM EnumcustomLoggedStatsStatisticTypeProp = "minimum"
	ENUMCUSTOMLOGGEDSTATSSTATISTICTYPEPROP_MAXIMUM EnumcustomLoggedStatsStatisticTypeProp = "maximum"
)

// All allowed values of EnumcustomLoggedStatsStatisticTypeProp enum
var AllowedEnumcustomLoggedStatsStatisticTypePropEnumValues = []EnumcustomLoggedStatsStatisticTypeProp{
	"raw",
	"counter",
	"average",
	"minimum",
	"maximum",
}

func (v *EnumcustomLoggedStatsStatisticTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcustomLoggedStatsStatisticTypeProp(value)
	for _, existing := range AllowedEnumcustomLoggedStatsStatisticTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcustomLoggedStatsStatisticTypeProp", value)
}

// NewEnumcustomLoggedStatsStatisticTypePropFromValue returns a pointer to a valid EnumcustomLoggedStatsStatisticTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcustomLoggedStatsStatisticTypePropFromValue(v string) (*EnumcustomLoggedStatsStatisticTypeProp, error) {
	ev := EnumcustomLoggedStatsStatisticTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcustomLoggedStatsStatisticTypeProp: valid values are %v", v, AllowedEnumcustomLoggedStatsStatisticTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcustomLoggedStatsStatisticTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumcustomLoggedStatsStatisticTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcustom-logged-stats-statisticTypeProp value
func (v EnumcustomLoggedStatsStatisticTypeProp) Ptr() *EnumcustomLoggedStatsStatisticTypeProp {
	return &v
}

type NullableEnumcustomLoggedStatsStatisticTypeProp struct {
	value *EnumcustomLoggedStatsStatisticTypeProp
	isSet bool
}

func (v NullableEnumcustomLoggedStatsStatisticTypeProp) Get() *EnumcustomLoggedStatsStatisticTypeProp {
	return v.value
}

func (v *NullableEnumcustomLoggedStatsStatisticTypeProp) Set(val *EnumcustomLoggedStatsStatisticTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcustomLoggedStatsStatisticTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcustomLoggedStatsStatisticTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcustomLoggedStatsStatisticTypeProp(val *EnumcustomLoggedStatsStatisticTypeProp) *NullableEnumcustomLoggedStatsStatisticTypeProp {
	return &NullableEnumcustomLoggedStatsStatisticTypeProp{value: val, isSet: true}
}

func (v NullableEnumcustomLoggedStatsStatisticTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcustomLoggedStatsStatisticTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
