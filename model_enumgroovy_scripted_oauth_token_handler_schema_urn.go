/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumgroovyScriptedOauthTokenHandlerSchemaUrn the model 'EnumgroovyScriptedOauthTokenHandlerSchemaUrn'
type EnumgroovyScriptedOauthTokenHandlerSchemaUrn string

// List of Enumgroovy-scripted-oauth-token-handlerSchemaUrn
const (
	ENUMGROOVYSCRIPTEDOAUTHTOKENHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0OAUTH_TOKEN_HANDLERGROOVY_SCRIPTED EnumgroovyScriptedOauthTokenHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:oauth-token-handler:groovy-scripted"
)

// All allowed values of EnumgroovyScriptedOauthTokenHandlerSchemaUrn enum
var AllowedEnumgroovyScriptedOauthTokenHandlerSchemaUrnEnumValues = []EnumgroovyScriptedOauthTokenHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:oauth-token-handler:groovy-scripted",
}

func (v *EnumgroovyScriptedOauthTokenHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgroovyScriptedOauthTokenHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumgroovyScriptedOauthTokenHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgroovyScriptedOauthTokenHandlerSchemaUrn", value)
}

// NewEnumgroovyScriptedOauthTokenHandlerSchemaUrnFromValue returns a pointer to a valid EnumgroovyScriptedOauthTokenHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgroovyScriptedOauthTokenHandlerSchemaUrnFromValue(v string) (*EnumgroovyScriptedOauthTokenHandlerSchemaUrn, error) {
	ev := EnumgroovyScriptedOauthTokenHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgroovyScriptedOauthTokenHandlerSchemaUrn: valid values are %v", v, AllowedEnumgroovyScriptedOauthTokenHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgroovyScriptedOauthTokenHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgroovyScriptedOauthTokenHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgroovy-scripted-oauth-token-handlerSchemaUrn value
func (v EnumgroovyScriptedOauthTokenHandlerSchemaUrn) Ptr() *EnumgroovyScriptedOauthTokenHandlerSchemaUrn {
	return &v
}

type NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn struct {
	value *EnumgroovyScriptedOauthTokenHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn) Get() *EnumgroovyScriptedOauthTokenHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn) Set(val *EnumgroovyScriptedOauthTokenHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn(val *EnumgroovyScriptedOauthTokenHandlerSchemaUrn) *NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn {
	return &NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgroovyScriptedOauthTokenHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
