/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumcertificateDelegatedAdminAttributeSchemaUrn the model 'EnumcertificateDelegatedAdminAttributeSchemaUrn'
type EnumcertificateDelegatedAdminAttributeSchemaUrn string

// List of Enumcertificate-delegated-admin-attributeSchemaUrn
const (
	ENUMCERTIFICATEDELEGATEDADMINATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DELEGATED_ADMIN_ATTRIBUTECERTIFICATE EnumcertificateDelegatedAdminAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:delegated-admin-attribute:certificate"
)

// All allowed values of EnumcertificateDelegatedAdminAttributeSchemaUrn enum
var AllowedEnumcertificateDelegatedAdminAttributeSchemaUrnEnumValues = []EnumcertificateDelegatedAdminAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:delegated-admin-attribute:certificate",
}

func (v *EnumcertificateDelegatedAdminAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcertificateDelegatedAdminAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumcertificateDelegatedAdminAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcertificateDelegatedAdminAttributeSchemaUrn", value)
}

// NewEnumcertificateDelegatedAdminAttributeSchemaUrnFromValue returns a pointer to a valid EnumcertificateDelegatedAdminAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcertificateDelegatedAdminAttributeSchemaUrnFromValue(v string) (*EnumcertificateDelegatedAdminAttributeSchemaUrn, error) {
	ev := EnumcertificateDelegatedAdminAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcertificateDelegatedAdminAttributeSchemaUrn: valid values are %v", v, AllowedEnumcertificateDelegatedAdminAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcertificateDelegatedAdminAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcertificateDelegatedAdminAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcertificate-delegated-admin-attributeSchemaUrn value
func (v EnumcertificateDelegatedAdminAttributeSchemaUrn) Ptr() *EnumcertificateDelegatedAdminAttributeSchemaUrn {
	return &v
}

type NullableEnumcertificateDelegatedAdminAttributeSchemaUrn struct {
	value *EnumcertificateDelegatedAdminAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumcertificateDelegatedAdminAttributeSchemaUrn) Get() *EnumcertificateDelegatedAdminAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumcertificateDelegatedAdminAttributeSchemaUrn) Set(val *EnumcertificateDelegatedAdminAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcertificateDelegatedAdminAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcertificateDelegatedAdminAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcertificateDelegatedAdminAttributeSchemaUrn(val *EnumcertificateDelegatedAdminAttributeSchemaUrn) *NullableEnumcertificateDelegatedAdminAttributeSchemaUrn {
	return &NullableEnumcertificateDelegatedAdminAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcertificateDelegatedAdminAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcertificateDelegatedAdminAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
