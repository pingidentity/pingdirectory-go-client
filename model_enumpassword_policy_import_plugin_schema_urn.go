/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordPolicyImportPluginSchemaUrn the model 'EnumpasswordPolicyImportPluginSchemaUrn'
type EnumpasswordPolicyImportPluginSchemaUrn string

// List of Enumpassword-policy-import-pluginSchemaUrn
const (
	ENUMPASSWORDPOLICYIMPORTPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINPASSWORD_POLICY_IMPORT EnumpasswordPolicyImportPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:password-policy-import"
)

// All allowed values of EnumpasswordPolicyImportPluginSchemaUrn enum
var AllowedEnumpasswordPolicyImportPluginSchemaUrnEnumValues = []EnumpasswordPolicyImportPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:password-policy-import",
}

func (v *EnumpasswordPolicyImportPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordPolicyImportPluginSchemaUrn(value)
	for _, existing := range AllowedEnumpasswordPolicyImportPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicyImportPluginSchemaUrn", value)
}

// NewEnumpasswordPolicyImportPluginSchemaUrnFromValue returns a pointer to a valid EnumpasswordPolicyImportPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicyImportPluginSchemaUrnFromValue(v string) (*EnumpasswordPolicyImportPluginSchemaUrn, error) {
	ev := EnumpasswordPolicyImportPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicyImportPluginSchemaUrn: valid values are %v", v, AllowedEnumpasswordPolicyImportPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicyImportPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicyImportPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policy-import-pluginSchemaUrn value
func (v EnumpasswordPolicyImportPluginSchemaUrn) Ptr() *EnumpasswordPolicyImportPluginSchemaUrn {
	return &v
}

type NullableEnumpasswordPolicyImportPluginSchemaUrn struct {
	value *EnumpasswordPolicyImportPluginSchemaUrn
	isSet bool
}

func (v NullableEnumpasswordPolicyImportPluginSchemaUrn) Get() *EnumpasswordPolicyImportPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumpasswordPolicyImportPluginSchemaUrn) Set(val *EnumpasswordPolicyImportPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicyImportPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicyImportPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicyImportPluginSchemaUrn(val *EnumpasswordPolicyImportPluginSchemaUrn) *NullableEnumpasswordPolicyImportPluginSchemaUrn {
	return &NullableEnumpasswordPolicyImportPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicyImportPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicyImportPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
