/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumencryptionSettingsBackendSchemaUrn the model 'EnumencryptionSettingsBackendSchemaUrn'
type EnumencryptionSettingsBackendSchemaUrn string

// List of Enumencryption-settings-backendSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDENCRYPTION_SETTINGS EnumencryptionSettingsBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:encryption-settings"
)

// All allowed values of EnumencryptionSettingsBackendSchemaUrn enum
var AllowedEnumencryptionSettingsBackendSchemaUrnEnumValues = []EnumencryptionSettingsBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:encryption-settings",
}

func (v *EnumencryptionSettingsBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumencryptionSettingsBackendSchemaUrn(value)
	for _, existing := range AllowedEnumencryptionSettingsBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumencryptionSettingsBackendSchemaUrn", value)
}

// NewEnumencryptionSettingsBackendSchemaUrnFromValue returns a pointer to a valid EnumencryptionSettingsBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumencryptionSettingsBackendSchemaUrnFromValue(v string) (*EnumencryptionSettingsBackendSchemaUrn, error) {
	ev := EnumencryptionSettingsBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumencryptionSettingsBackendSchemaUrn: valid values are %v", v, AllowedEnumencryptionSettingsBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumencryptionSettingsBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumencryptionSettingsBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumencryption-settings-backendSchemaUrn value
func (v EnumencryptionSettingsBackendSchemaUrn) Ptr() *EnumencryptionSettingsBackendSchemaUrn {
	return &v
}

type NullableEnumencryptionSettingsBackendSchemaUrn struct {
	value *EnumencryptionSettingsBackendSchemaUrn
	isSet bool
}

func (v NullableEnumencryptionSettingsBackendSchemaUrn) Get() *EnumencryptionSettingsBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumencryptionSettingsBackendSchemaUrn) Set(val *EnumencryptionSettingsBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumencryptionSettingsBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumencryptionSettingsBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumencryptionSettingsBackendSchemaUrn(val *EnumencryptionSettingsBackendSchemaUrn) *NullableEnumencryptionSettingsBackendSchemaUrn {
	return &NullableEnumencryptionSettingsBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumencryptionSettingsBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumencryptionSettingsBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

