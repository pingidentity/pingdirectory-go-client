/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumstatsdMonitoringEndpointSchemaUrn the model 'EnumstatsdMonitoringEndpointSchemaUrn'
type EnumstatsdMonitoringEndpointSchemaUrn string

// List of Enumstatsd-monitoring-endpointSchemaUrn
const (
	ENUMSTATSDMONITORINGENDPOINTSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0MONITORING_ENDPOINTSTATSD EnumstatsdMonitoringEndpointSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:monitoring-endpoint:statsd"
)

// All allowed values of EnumstatsdMonitoringEndpointSchemaUrn enum
var AllowedEnumstatsdMonitoringEndpointSchemaUrnEnumValues = []EnumstatsdMonitoringEndpointSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:monitoring-endpoint:statsd",
}

func (v *EnumstatsdMonitoringEndpointSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumstatsdMonitoringEndpointSchemaUrn(value)
	for _, existing := range AllowedEnumstatsdMonitoringEndpointSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumstatsdMonitoringEndpointSchemaUrn", value)
}

// NewEnumstatsdMonitoringEndpointSchemaUrnFromValue returns a pointer to a valid EnumstatsdMonitoringEndpointSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumstatsdMonitoringEndpointSchemaUrnFromValue(v string) (*EnumstatsdMonitoringEndpointSchemaUrn, error) {
	ev := EnumstatsdMonitoringEndpointSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumstatsdMonitoringEndpointSchemaUrn: valid values are %v", v, AllowedEnumstatsdMonitoringEndpointSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumstatsdMonitoringEndpointSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumstatsdMonitoringEndpointSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumstatsd-monitoring-endpointSchemaUrn value
func (v EnumstatsdMonitoringEndpointSchemaUrn) Ptr() *EnumstatsdMonitoringEndpointSchemaUrn {
	return &v
}

type NullableEnumstatsdMonitoringEndpointSchemaUrn struct {
	value *EnumstatsdMonitoringEndpointSchemaUrn
	isSet bool
}

func (v NullableEnumstatsdMonitoringEndpointSchemaUrn) Get() *EnumstatsdMonitoringEndpointSchemaUrn {
	return v.value
}

func (v *NullableEnumstatsdMonitoringEndpointSchemaUrn) Set(val *EnumstatsdMonitoringEndpointSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumstatsdMonitoringEndpointSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumstatsdMonitoringEndpointSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumstatsdMonitoringEndpointSchemaUrn(val *EnumstatsdMonitoringEndpointSchemaUrn) *NullableEnumstatsdMonitoringEndpointSchemaUrn {
	return &NullableEnumstatsdMonitoringEndpointSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumstatsdMonitoringEndpointSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumstatsdMonitoringEndpointSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

