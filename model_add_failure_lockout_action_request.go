/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddFailureLockoutActionRequest - struct for AddFailureLockoutActionRequest
type AddFailureLockoutActionRequest struct {
	AddDelayBindResponseFailureLockoutActionRequest *AddDelayBindResponseFailureLockoutActionRequest
	AddLockAccountFailureLockoutActionRequest       *AddLockAccountFailureLockoutActionRequest
	AddNoOperationFailureLockoutActionRequest       *AddNoOperationFailureLockoutActionRequest
}

// AddDelayBindResponseFailureLockoutActionRequestAsAddFailureLockoutActionRequest is a convenience function that returns AddDelayBindResponseFailureLockoutActionRequest wrapped in AddFailureLockoutActionRequest
func AddDelayBindResponseFailureLockoutActionRequestAsAddFailureLockoutActionRequest(v *AddDelayBindResponseFailureLockoutActionRequest) AddFailureLockoutActionRequest {
	return AddFailureLockoutActionRequest{
		AddDelayBindResponseFailureLockoutActionRequest: v,
	}
}

// AddLockAccountFailureLockoutActionRequestAsAddFailureLockoutActionRequest is a convenience function that returns AddLockAccountFailureLockoutActionRequest wrapped in AddFailureLockoutActionRequest
func AddLockAccountFailureLockoutActionRequestAsAddFailureLockoutActionRequest(v *AddLockAccountFailureLockoutActionRequest) AddFailureLockoutActionRequest {
	return AddFailureLockoutActionRequest{
		AddLockAccountFailureLockoutActionRequest: v,
	}
}

// AddNoOperationFailureLockoutActionRequestAsAddFailureLockoutActionRequest is a convenience function that returns AddNoOperationFailureLockoutActionRequest wrapped in AddFailureLockoutActionRequest
func AddNoOperationFailureLockoutActionRequestAsAddFailureLockoutActionRequest(v *AddNoOperationFailureLockoutActionRequest) AddFailureLockoutActionRequest {
	return AddFailureLockoutActionRequest{
		AddNoOperationFailureLockoutActionRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddFailureLockoutActionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddDelayBindResponseFailureLockoutActionRequest
	err = newStrictDecoder(data).Decode(&dst.AddDelayBindResponseFailureLockoutActionRequest)
	if err == nil {
		jsonAddDelayBindResponseFailureLockoutActionRequest, _ := json.Marshal(dst.AddDelayBindResponseFailureLockoutActionRequest)
		if string(jsonAddDelayBindResponseFailureLockoutActionRequest) == "{}" { // empty struct
			dst.AddDelayBindResponseFailureLockoutActionRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddDelayBindResponseFailureLockoutActionRequest = nil
	}

	// try to unmarshal data into AddLockAccountFailureLockoutActionRequest
	err = newStrictDecoder(data).Decode(&dst.AddLockAccountFailureLockoutActionRequest)
	if err == nil {
		jsonAddLockAccountFailureLockoutActionRequest, _ := json.Marshal(dst.AddLockAccountFailureLockoutActionRequest)
		if string(jsonAddLockAccountFailureLockoutActionRequest) == "{}" { // empty struct
			dst.AddLockAccountFailureLockoutActionRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddLockAccountFailureLockoutActionRequest = nil
	}

	// try to unmarshal data into AddNoOperationFailureLockoutActionRequest
	err = newStrictDecoder(data).Decode(&dst.AddNoOperationFailureLockoutActionRequest)
	if err == nil {
		jsonAddNoOperationFailureLockoutActionRequest, _ := json.Marshal(dst.AddNoOperationFailureLockoutActionRequest)
		if string(jsonAddNoOperationFailureLockoutActionRequest) == "{}" { // empty struct
			dst.AddNoOperationFailureLockoutActionRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddNoOperationFailureLockoutActionRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddDelayBindResponseFailureLockoutActionRequest = nil
		dst.AddLockAccountFailureLockoutActionRequest = nil
		dst.AddNoOperationFailureLockoutActionRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddFailureLockoutActionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddFailureLockoutActionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddFailureLockoutActionRequest) MarshalJSON() ([]byte, error) {
	if src.AddDelayBindResponseFailureLockoutActionRequest != nil {
		return json.Marshal(&src.AddDelayBindResponseFailureLockoutActionRequest)
	}

	if src.AddLockAccountFailureLockoutActionRequest != nil {
		return json.Marshal(&src.AddLockAccountFailureLockoutActionRequest)
	}

	if src.AddNoOperationFailureLockoutActionRequest != nil {
		return json.Marshal(&src.AddNoOperationFailureLockoutActionRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddFailureLockoutActionRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddDelayBindResponseFailureLockoutActionRequest != nil {
		return obj.AddDelayBindResponseFailureLockoutActionRequest
	}

	if obj.AddLockAccountFailureLockoutActionRequest != nil {
		return obj.AddLockAccountFailureLockoutActionRequest
	}

	if obj.AddNoOperationFailureLockoutActionRequest != nil {
		return obj.AddNoOperationFailureLockoutActionRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddFailureLockoutActionRequest struct {
	value *AddFailureLockoutActionRequest
	isSet bool
}

func (v NullableAddFailureLockoutActionRequest) Get() *AddFailureLockoutActionRequest {
	return v.value
}

func (v *NullableAddFailureLockoutActionRequest) Set(val *AddFailureLockoutActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddFailureLockoutActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddFailureLockoutActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddFailureLockoutActionRequest(val *AddFailureLockoutActionRequest) *NullableAddFailureLockoutActionRequest {
	return &NullableAddFailureLockoutActionRequest{value: val, isSet: true}
}

func (v NullableAddFailureLockoutActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddFailureLockoutActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
