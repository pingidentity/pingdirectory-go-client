/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn the model 'EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn'
type EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn string

// List of Enumvalidate-totp-password-extended-operation-handlerSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERVALIDATE_TOTP_PASSWORD EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:validate-totp-password"
)

// All allowed values of EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn enum
var AllowedEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrnEnumValues = []EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:validate-totp-password",
}

func (v *EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvalidate-totp-password-extended-operation-handlerSchemaUrn value
func (v EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) Ptr() *EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn struct {
	value *EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) Get() *EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) Set(val *EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn(val *EnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) *NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn {
	return &NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvalidateTotpPasswordExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

