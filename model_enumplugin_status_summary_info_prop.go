/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginStatusSummaryInfoProp Specifies the level of detail to include about the status summary monitor entry.
type EnumpluginStatusSummaryInfoProp string

// List of Enumplugin-statusSummaryInfoProp
const (
	ENUMPLUGINSTATUSSUMMARYINFOPROP_NONE    EnumpluginStatusSummaryInfoProp = "none"
	ENUMPLUGINSTATUSSUMMARYINFOPROP_BASIC   EnumpluginStatusSummaryInfoProp = "basic"
	ENUMPLUGINSTATUSSUMMARYINFOPROP_VERBOSE EnumpluginStatusSummaryInfoProp = "verbose"
)

// All allowed values of EnumpluginStatusSummaryInfoProp enum
var AllowedEnumpluginStatusSummaryInfoPropEnumValues = []EnumpluginStatusSummaryInfoProp{
	"none",
	"basic",
	"verbose",
}

func (v *EnumpluginStatusSummaryInfoProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginStatusSummaryInfoProp(value)
	for _, existing := range AllowedEnumpluginStatusSummaryInfoPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginStatusSummaryInfoProp", value)
}

// NewEnumpluginStatusSummaryInfoPropFromValue returns a pointer to a valid EnumpluginStatusSummaryInfoProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginStatusSummaryInfoPropFromValue(v string) (*EnumpluginStatusSummaryInfoProp, error) {
	ev := EnumpluginStatusSummaryInfoProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginStatusSummaryInfoProp: valid values are %v", v, AllowedEnumpluginStatusSummaryInfoPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginStatusSummaryInfoProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginStatusSummaryInfoPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-statusSummaryInfoProp value
func (v EnumpluginStatusSummaryInfoProp) Ptr() *EnumpluginStatusSummaryInfoProp {
	return &v
}

type NullableEnumpluginStatusSummaryInfoProp struct {
	value *EnumpluginStatusSummaryInfoProp
	isSet bool
}

func (v NullableEnumpluginStatusSummaryInfoProp) Get() *EnumpluginStatusSummaryInfoProp {
	return v.value
}

func (v *NullableEnumpluginStatusSummaryInfoProp) Set(val *EnumpluginStatusSummaryInfoProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginStatusSummaryInfoProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginStatusSummaryInfoProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginStatusSummaryInfoProp(val *EnumpluginStatusSummaryInfoProp) *NullableEnumpluginStatusSummaryInfoProp {
	return &NullableEnumpluginStatusSummaryInfoProp{value: val, isSet: true}
}

func (v NullableEnumpluginStatusSummaryInfoProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginStatusSummaryInfoProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
