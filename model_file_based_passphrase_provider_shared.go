/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FileBasedPassphraseProviderShared struct for FileBasedPassphraseProviderShared
type FileBasedPassphraseProviderShared struct {
	Schemas []EnumfileBasedPassphraseProviderSchemaUrn `json:"schemas"`
	// The path to the file containing the passphrase.
	PasswordFile string `json:"passwordFile"`
	// The maximum length of time that the passphrase provider may cache the passphrase that has been read from the target file. A value of zero seconds indicates that the provider should always attempt to read the passphrase from the file.
	MaxCacheDuration *string `json:"maxCacheDuration,omitempty"`
	// A description for this Passphrase Provider
	Description *string `json:"description,omitempty"`
	// Indicates whether this Passphrase Provider is enabled for use in the server.
	Enabled bool `json:"enabled"`
}

// NewFileBasedPassphraseProviderShared instantiates a new FileBasedPassphraseProviderShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileBasedPassphraseProviderShared(schemas []EnumfileBasedPassphraseProviderSchemaUrn, passwordFile string, enabled bool) *FileBasedPassphraseProviderShared {
	this := FileBasedPassphraseProviderShared{}
	this.Schemas = schemas
	this.PasswordFile = passwordFile
	this.Enabled = enabled
	return &this
}

// NewFileBasedPassphraseProviderSharedWithDefaults instantiates a new FileBasedPassphraseProviderShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileBasedPassphraseProviderSharedWithDefaults() *FileBasedPassphraseProviderShared {
	this := FileBasedPassphraseProviderShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *FileBasedPassphraseProviderShared) GetSchemas() []EnumfileBasedPassphraseProviderSchemaUrn {
	if o == nil {
		var ret []EnumfileBasedPassphraseProviderSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *FileBasedPassphraseProviderShared) GetSchemasOk() ([]EnumfileBasedPassphraseProviderSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *FileBasedPassphraseProviderShared) SetSchemas(v []EnumfileBasedPassphraseProviderSchemaUrn) {
	o.Schemas = v
}

// GetPasswordFile returns the PasswordFile field value
func (o *FileBasedPassphraseProviderShared) GetPasswordFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordFile
}

// GetPasswordFileOk returns a tuple with the PasswordFile field value
// and a boolean to check if the value has been set.
func (o *FileBasedPassphraseProviderShared) GetPasswordFileOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PasswordFile, true
}

// SetPasswordFile sets field value
func (o *FileBasedPassphraseProviderShared) SetPasswordFile(v string) {
	o.PasswordFile = v
}

// GetMaxCacheDuration returns the MaxCacheDuration field value if set, zero value otherwise.
func (o *FileBasedPassphraseProviderShared) GetMaxCacheDuration() string {
	if o == nil || isNil(o.MaxCacheDuration) {
		var ret string
		return ret
	}
	return *o.MaxCacheDuration
}

// GetMaxCacheDurationOk returns a tuple with the MaxCacheDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileBasedPassphraseProviderShared) GetMaxCacheDurationOk() (*string, bool) {
	if o == nil || isNil(o.MaxCacheDuration) {
    return nil, false
	}
	return o.MaxCacheDuration, true
}

// HasMaxCacheDuration returns a boolean if a field has been set.
func (o *FileBasedPassphraseProviderShared) HasMaxCacheDuration() bool {
	if o != nil && !isNil(o.MaxCacheDuration) {
		return true
	}

	return false
}

// SetMaxCacheDuration gets a reference to the given string and assigns it to the MaxCacheDuration field.
func (o *FileBasedPassphraseProviderShared) SetMaxCacheDuration(v string) {
	o.MaxCacheDuration = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FileBasedPassphraseProviderShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileBasedPassphraseProviderShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FileBasedPassphraseProviderShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FileBasedPassphraseProviderShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *FileBasedPassphraseProviderShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FileBasedPassphraseProviderShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FileBasedPassphraseProviderShared) SetEnabled(v bool) {
	o.Enabled = v
}

func (o FileBasedPassphraseProviderShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["passwordFile"] = o.PasswordFile
	}
	if !isNil(o.MaxCacheDuration) {
		toSerialize["maxCacheDuration"] = o.MaxCacheDuration
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableFileBasedPassphraseProviderShared struct {
	value *FileBasedPassphraseProviderShared
	isSet bool
}

func (v NullableFileBasedPassphraseProviderShared) Get() *FileBasedPassphraseProviderShared {
	return v.value
}

func (v *NullableFileBasedPassphraseProviderShared) Set(val *FileBasedPassphraseProviderShared) {
	v.value = val
	v.isSet = true
}

func (v NullableFileBasedPassphraseProviderShared) IsSet() bool {
	return v.isSet
}

func (v *NullableFileBasedPassphraseProviderShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileBasedPassphraseProviderShared(val *FileBasedPassphraseProviderShared) *NullableFileBasedPassphraseProviderShared {
	return &NullableFileBasedPassphraseProviderShared{value: val, isSet: true}
}

func (v NullableFileBasedPassphraseProviderShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileBasedPassphraseProviderShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


