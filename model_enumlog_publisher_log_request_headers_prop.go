/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherLogRequestHeadersProp Indicates whether request log messages should include information about HTTP headers included in the request.
type EnumlogPublisherLogRequestHeadersProp string

// List of Enumlog-publisher-logRequestHeadersProp
const (
	ENUMLOGPUBLISHERLOGREQUESTHEADERSPROP_NONE                    EnumlogPublisherLogRequestHeadersProp = "none"
	ENUMLOGPUBLISHERLOGREQUESTHEADERSPROP_HEADER_NAMES            EnumlogPublisherLogRequestHeadersProp = "header-names"
	ENUMLOGPUBLISHERLOGREQUESTHEADERSPROP_HEADER_NAMES_AND_VALUES EnumlogPublisherLogRequestHeadersProp = "header-names-and-values"
)

// All allowed values of EnumlogPublisherLogRequestHeadersProp enum
var AllowedEnumlogPublisherLogRequestHeadersPropEnumValues = []EnumlogPublisherLogRequestHeadersProp{
	"none",
	"header-names",
	"header-names-and-values",
}

func (v *EnumlogPublisherLogRequestHeadersProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherLogRequestHeadersProp(value)
	for _, existing := range AllowedEnumlogPublisherLogRequestHeadersPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherLogRequestHeadersProp", value)
}

// NewEnumlogPublisherLogRequestHeadersPropFromValue returns a pointer to a valid EnumlogPublisherLogRequestHeadersProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherLogRequestHeadersPropFromValue(v string) (*EnumlogPublisherLogRequestHeadersProp, error) {
	ev := EnumlogPublisherLogRequestHeadersProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherLogRequestHeadersProp: valid values are %v", v, AllowedEnumlogPublisherLogRequestHeadersPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherLogRequestHeadersProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherLogRequestHeadersPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-logRequestHeadersProp value
func (v EnumlogPublisherLogRequestHeadersProp) Ptr() *EnumlogPublisherLogRequestHeadersProp {
	return &v
}

type NullableEnumlogPublisherLogRequestHeadersProp struct {
	value *EnumlogPublisherLogRequestHeadersProp
	isSet bool
}

func (v NullableEnumlogPublisherLogRequestHeadersProp) Get() *EnumlogPublisherLogRequestHeadersProp {
	return v.value
}

func (v *NullableEnumlogPublisherLogRequestHeadersProp) Set(val *EnumlogPublisherLogRequestHeadersProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherLogRequestHeadersProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherLogRequestHeadersProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherLogRequestHeadersProp(val *EnumlogPublisherLogRequestHeadersProp) *NullableEnumlogPublisherLogRequestHeadersProp {
	return &NullableEnumlogPublisherLogRequestHeadersProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherLogRequestHeadersProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherLogRequestHeadersProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
