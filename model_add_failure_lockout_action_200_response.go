/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddFailureLockoutAction200Response - struct for AddFailureLockoutAction200Response
type AddFailureLockoutAction200Response struct {
	DelayBindResponseFailureLockoutActionResponse *DelayBindResponseFailureLockoutActionResponse
	LockAccountFailureLockoutActionResponse       *LockAccountFailureLockoutActionResponse
	NoOperationFailureLockoutActionResponse       *NoOperationFailureLockoutActionResponse
}

// DelayBindResponseFailureLockoutActionResponseAsAddFailureLockoutAction200Response is a convenience function that returns DelayBindResponseFailureLockoutActionResponse wrapped in AddFailureLockoutAction200Response
func DelayBindResponseFailureLockoutActionResponseAsAddFailureLockoutAction200Response(v *DelayBindResponseFailureLockoutActionResponse) AddFailureLockoutAction200Response {
	return AddFailureLockoutAction200Response{
		DelayBindResponseFailureLockoutActionResponse: v,
	}
}

// LockAccountFailureLockoutActionResponseAsAddFailureLockoutAction200Response is a convenience function that returns LockAccountFailureLockoutActionResponse wrapped in AddFailureLockoutAction200Response
func LockAccountFailureLockoutActionResponseAsAddFailureLockoutAction200Response(v *LockAccountFailureLockoutActionResponse) AddFailureLockoutAction200Response {
	return AddFailureLockoutAction200Response{
		LockAccountFailureLockoutActionResponse: v,
	}
}

// NoOperationFailureLockoutActionResponseAsAddFailureLockoutAction200Response is a convenience function that returns NoOperationFailureLockoutActionResponse wrapped in AddFailureLockoutAction200Response
func NoOperationFailureLockoutActionResponseAsAddFailureLockoutAction200Response(v *NoOperationFailureLockoutActionResponse) AddFailureLockoutAction200Response {
	return AddFailureLockoutAction200Response{
		NoOperationFailureLockoutActionResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddFailureLockoutAction200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DelayBindResponseFailureLockoutActionResponse
	err = newStrictDecoder(data).Decode(&dst.DelayBindResponseFailureLockoutActionResponse)
	if err == nil {
		jsonDelayBindResponseFailureLockoutActionResponse, _ := json.Marshal(dst.DelayBindResponseFailureLockoutActionResponse)
		if string(jsonDelayBindResponseFailureLockoutActionResponse) == "{}" { // empty struct
			dst.DelayBindResponseFailureLockoutActionResponse = nil
		} else {
			match++
		}
	} else {
		dst.DelayBindResponseFailureLockoutActionResponse = nil
	}

	// try to unmarshal data into LockAccountFailureLockoutActionResponse
	err = newStrictDecoder(data).Decode(&dst.LockAccountFailureLockoutActionResponse)
	if err == nil {
		jsonLockAccountFailureLockoutActionResponse, _ := json.Marshal(dst.LockAccountFailureLockoutActionResponse)
		if string(jsonLockAccountFailureLockoutActionResponse) == "{}" { // empty struct
			dst.LockAccountFailureLockoutActionResponse = nil
		} else {
			match++
		}
	} else {
		dst.LockAccountFailureLockoutActionResponse = nil
	}

	// try to unmarshal data into NoOperationFailureLockoutActionResponse
	err = newStrictDecoder(data).Decode(&dst.NoOperationFailureLockoutActionResponse)
	if err == nil {
		jsonNoOperationFailureLockoutActionResponse, _ := json.Marshal(dst.NoOperationFailureLockoutActionResponse)
		if string(jsonNoOperationFailureLockoutActionResponse) == "{}" { // empty struct
			dst.NoOperationFailureLockoutActionResponse = nil
		} else {
			match++
		}
	} else {
		dst.NoOperationFailureLockoutActionResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DelayBindResponseFailureLockoutActionResponse = nil
		dst.LockAccountFailureLockoutActionResponse = nil
		dst.NoOperationFailureLockoutActionResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddFailureLockoutAction200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddFailureLockoutAction200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddFailureLockoutAction200Response) MarshalJSON() ([]byte, error) {
	if src.DelayBindResponseFailureLockoutActionResponse != nil {
		return json.Marshal(&src.DelayBindResponseFailureLockoutActionResponse)
	}

	if src.LockAccountFailureLockoutActionResponse != nil {
		return json.Marshal(&src.LockAccountFailureLockoutActionResponse)
	}

	if src.NoOperationFailureLockoutActionResponse != nil {
		return json.Marshal(&src.NoOperationFailureLockoutActionResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddFailureLockoutAction200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DelayBindResponseFailureLockoutActionResponse != nil {
		return obj.DelayBindResponseFailureLockoutActionResponse
	}

	if obj.LockAccountFailureLockoutActionResponse != nil {
		return obj.LockAccountFailureLockoutActionResponse
	}

	if obj.NoOperationFailureLockoutActionResponse != nil {
		return obj.NoOperationFailureLockoutActionResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddFailureLockoutAction200Response struct {
	value *AddFailureLockoutAction200Response
	isSet bool
}

func (v NullableAddFailureLockoutAction200Response) Get() *AddFailureLockoutAction200Response {
	return v.value
}

func (v *NullableAddFailureLockoutAction200Response) Set(val *AddFailureLockoutAction200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddFailureLockoutAction200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddFailureLockoutAction200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddFailureLockoutAction200Response(val *AddFailureLockoutAction200Response) *NullableAddFailureLockoutAction200Response {
	return &NullableAddFailureLockoutAction200Response{value: val, isSet: true}
}

func (v NullableAddFailureLockoutAction200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddFailureLockoutAction200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
