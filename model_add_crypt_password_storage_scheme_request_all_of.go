/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddCryptPasswordStorageSchemeRequestAllOf struct for AddCryptPasswordStorageSchemeRequestAllOf
type AddCryptPasswordStorageSchemeRequestAllOf struct {
	// Name of the new Password Storage Scheme
	SchemeName string `json:"schemeName"`
}

// NewAddCryptPasswordStorageSchemeRequestAllOf instantiates a new AddCryptPasswordStorageSchemeRequestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCryptPasswordStorageSchemeRequestAllOf(schemeName string) *AddCryptPasswordStorageSchemeRequestAllOf {
	this := AddCryptPasswordStorageSchemeRequestAllOf{}
	this.SchemeName = schemeName
	return &this
}

// NewAddCryptPasswordStorageSchemeRequestAllOfWithDefaults instantiates a new AddCryptPasswordStorageSchemeRequestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCryptPasswordStorageSchemeRequestAllOfWithDefaults() *AddCryptPasswordStorageSchemeRequestAllOf {
	this := AddCryptPasswordStorageSchemeRequestAllOf{}
	return &this
}

// GetSchemeName returns the SchemeName field value
func (o *AddCryptPasswordStorageSchemeRequestAllOf) GetSchemeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemeName
}

// GetSchemeNameOk returns a tuple with the SchemeName field value
// and a boolean to check if the value has been set.
func (o *AddCryptPasswordStorageSchemeRequestAllOf) GetSchemeNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SchemeName, true
}

// SetSchemeName sets field value
func (o *AddCryptPasswordStorageSchemeRequestAllOf) SetSchemeName(v string) {
	o.SchemeName = v
}

func (o AddCryptPasswordStorageSchemeRequestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemeName"] = o.SchemeName
	}
	return json.Marshal(toSerialize)
}

type NullableAddCryptPasswordStorageSchemeRequestAllOf struct {
	value *AddCryptPasswordStorageSchemeRequestAllOf
	isSet bool
}

func (v NullableAddCryptPasswordStorageSchemeRequestAllOf) Get() *AddCryptPasswordStorageSchemeRequestAllOf {
	return v.value
}

func (v *NullableAddCryptPasswordStorageSchemeRequestAllOf) Set(val *AddCryptPasswordStorageSchemeRequestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCryptPasswordStorageSchemeRequestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCryptPasswordStorageSchemeRequestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCryptPasswordStorageSchemeRequestAllOf(val *AddCryptPasswordStorageSchemeRequestAllOf) *NullableAddCryptPasswordStorageSchemeRequestAllOf {
	return &NullableAddCryptPasswordStorageSchemeRequestAllOf{value: val, isSet: true}
}

func (v NullableAddCryptPasswordStorageSchemeRequestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCryptPasswordStorageSchemeRequestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


