/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumazureKeyVaultPasswordStorageSchemeSchemaUrn the model 'EnumazureKeyVaultPasswordStorageSchemeSchemaUrn'
type EnumazureKeyVaultPasswordStorageSchemeSchemaUrn string

// List of Enumazure-key-vault-password-storage-schemeSchemaUrn
const (
	ENUMAZUREKEYVAULTPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEAZURE_KEY_VAULT EnumazureKeyVaultPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:azure-key-vault"
)

// All allowed values of EnumazureKeyVaultPasswordStorageSchemeSchemaUrn enum
var AllowedEnumazureKeyVaultPasswordStorageSchemeSchemaUrnEnumValues = []EnumazureKeyVaultPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:azure-key-vault",
}

func (v *EnumazureKeyVaultPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumazureKeyVaultPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumazureKeyVaultPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumazureKeyVaultPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumazureKeyVaultPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumazureKeyVaultPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumazureKeyVaultPasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumazureKeyVaultPasswordStorageSchemeSchemaUrn, error) {
	ev := EnumazureKeyVaultPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumazureKeyVaultPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumazureKeyVaultPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumazureKeyVaultPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumazureKeyVaultPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumazure-key-vault-password-storage-schemeSchemaUrn value
func (v EnumazureKeyVaultPasswordStorageSchemeSchemaUrn) Ptr() *EnumazureKeyVaultPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn struct {
	value *EnumazureKeyVaultPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn) Get() *EnumazureKeyVaultPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn) Set(val *EnumazureKeyVaultPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn(val *EnumazureKeyVaultPasswordStorageSchemeSchemaUrn) *NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn {
	return &NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumazureKeyVaultPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
