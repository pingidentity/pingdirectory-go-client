/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReplaceCertificateExtendedOperationHandlerResponse struct for ReplaceCertificateExtendedOperationHandlerResponse
type ReplaceCertificateExtendedOperationHandlerResponse struct {
	// Name of the Extended Operation Handler
	Id string `json:"id"`
	Schemas []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn `json:"schemas"`
	// Indicates whether clients should be allowed to directly provide a new listener or inter-server certificate chain in the extended request.
	AllowRemotelyProvidedCertificates *bool `json:"allowRemotelyProvidedCertificates,omitempty"`
	AllowedOperation []EnumextendedOperationHandlerAllowedOperationProp `json:"allowedOperation,omitempty"`
	// A set of criteria that client connections must satisfy before they will be allowed to request the associated extended operations.
	ConnectionCriteria *string `json:"connectionCriteria,omitempty"`
	// A set of criteria that the extended requests must satisfy before they will be processed by the server.
	RequestCriteria *string `json:"requestCriteria,omitempty"`
	// A description for this Extended Operation Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether the Extended Operation Handler is enabled (that is, whether the types of extended operations are allowed in the server).
	Enabled bool `json:"enabled"`
	Meta *MetaMeta `json:"meta,omitempty"`
}

// NewReplaceCertificateExtendedOperationHandlerResponse instantiates a new ReplaceCertificateExtendedOperationHandlerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceCertificateExtendedOperationHandlerResponse(id string, schemas []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn, enabled bool) *ReplaceCertificateExtendedOperationHandlerResponse {
	this := ReplaceCertificateExtendedOperationHandlerResponse{}
	this.Id = id
	this.Schemas = schemas
	this.Enabled = enabled
	return &this
}

// NewReplaceCertificateExtendedOperationHandlerResponseWithDefaults instantiates a new ReplaceCertificateExtendedOperationHandlerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceCertificateExtendedOperationHandlerResponseWithDefaults() *ReplaceCertificateExtendedOperationHandlerResponse {
	this := ReplaceCertificateExtendedOperationHandlerResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetSchemas() []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn {
	if o == nil {
		var ret []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetSchemasOk() ([]EnumreplaceCertificateExtendedOperationHandlerSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetSchemas(v []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) {
	o.Schemas = v
}

// GetAllowRemotelyProvidedCertificates returns the AllowRemotelyProvidedCertificates field value if set, zero value otherwise.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetAllowRemotelyProvidedCertificates() bool {
	if o == nil || isNil(o.AllowRemotelyProvidedCertificates) {
		var ret bool
		return ret
	}
	return *o.AllowRemotelyProvidedCertificates
}

// GetAllowRemotelyProvidedCertificatesOk returns a tuple with the AllowRemotelyProvidedCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetAllowRemotelyProvidedCertificatesOk() (*bool, bool) {
	if o == nil || isNil(o.AllowRemotelyProvidedCertificates) {
    return nil, false
	}
	return o.AllowRemotelyProvidedCertificates, true
}

// HasAllowRemotelyProvidedCertificates returns a boolean if a field has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) HasAllowRemotelyProvidedCertificates() bool {
	if o != nil && !isNil(o.AllowRemotelyProvidedCertificates) {
		return true
	}

	return false
}

// SetAllowRemotelyProvidedCertificates gets a reference to the given bool and assigns it to the AllowRemotelyProvidedCertificates field.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetAllowRemotelyProvidedCertificates(v bool) {
	o.AllowRemotelyProvidedCertificates = &v
}

// GetAllowedOperation returns the AllowedOperation field value if set, zero value otherwise.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetAllowedOperation() []EnumextendedOperationHandlerAllowedOperationProp {
	if o == nil || isNil(o.AllowedOperation) {
		var ret []EnumextendedOperationHandlerAllowedOperationProp
		return ret
	}
	return o.AllowedOperation
}

// GetAllowedOperationOk returns a tuple with the AllowedOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetAllowedOperationOk() ([]EnumextendedOperationHandlerAllowedOperationProp, bool) {
	if o == nil || isNil(o.AllowedOperation) {
    return nil, false
	}
	return o.AllowedOperation, true
}

// HasAllowedOperation returns a boolean if a field has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) HasAllowedOperation() bool {
	if o != nil && !isNil(o.AllowedOperation) {
		return true
	}

	return false
}

// SetAllowedOperation gets a reference to the given []EnumextendedOperationHandlerAllowedOperationProp and assigns it to the AllowedOperation field.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetAllowedOperation(v []EnumextendedOperationHandlerAllowedOperationProp) {
	o.AllowedOperation = v
}

// GetConnectionCriteria returns the ConnectionCriteria field value if set, zero value otherwise.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetConnectionCriteria() string {
	if o == nil || isNil(o.ConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.ConnectionCriteria
}

// GetConnectionCriteriaOk returns a tuple with the ConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetConnectionCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.ConnectionCriteria) {
    return nil, false
	}
	return o.ConnectionCriteria, true
}

// HasConnectionCriteria returns a boolean if a field has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) HasConnectionCriteria() bool {
	if o != nil && !isNil(o.ConnectionCriteria) {
		return true
	}

	return false
}

// SetConnectionCriteria gets a reference to the given string and assigns it to the ConnectionCriteria field.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetConnectionCriteria(v string) {
	o.ConnectionCriteria = &v
}

// GetRequestCriteria returns the RequestCriteria field value if set, zero value otherwise.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetRequestCriteria() string {
	if o == nil || isNil(o.RequestCriteria) {
		var ret string
		return ret
	}
	return *o.RequestCriteria
}

// GetRequestCriteriaOk returns a tuple with the RequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.RequestCriteria) {
    return nil, false
	}
	return o.RequestCriteria, true
}

// HasRequestCriteria returns a boolean if a field has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) HasRequestCriteria() bool {
	if o != nil && !isNil(o.RequestCriteria) {
		return true
	}

	return false
}

// SetRequestCriteria gets a reference to the given string and assigns it to the RequestCriteria field.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetRequestCriteria(v string) {
	o.RequestCriteria = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
    return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *ReplaceCertificateExtendedOperationHandlerResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

func (o ReplaceCertificateExtendedOperationHandlerResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.AllowRemotelyProvidedCertificates) {
		toSerialize["allowRemotelyProvidedCertificates"] = o.AllowRemotelyProvidedCertificates
	}
	if !isNil(o.AllowedOperation) {
		toSerialize["allowedOperation"] = o.AllowedOperation
	}
	if !isNil(o.ConnectionCriteria) {
		toSerialize["connectionCriteria"] = o.ConnectionCriteria
	}
	if !isNil(o.RequestCriteria) {
		toSerialize["requestCriteria"] = o.RequestCriteria
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableReplaceCertificateExtendedOperationHandlerResponse struct {
	value *ReplaceCertificateExtendedOperationHandlerResponse
	isSet bool
}

func (v NullableReplaceCertificateExtendedOperationHandlerResponse) Get() *ReplaceCertificateExtendedOperationHandlerResponse {
	return v.value
}

func (v *NullableReplaceCertificateExtendedOperationHandlerResponse) Set(val *ReplaceCertificateExtendedOperationHandlerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceCertificateExtendedOperationHandlerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceCertificateExtendedOperationHandlerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceCertificateExtendedOperationHandlerResponse(val *ReplaceCertificateExtendedOperationHandlerResponse) *NullableReplaceCertificateExtendedOperationHandlerResponse {
	return &NullableReplaceCertificateExtendedOperationHandlerResponse{value: val, isSet: true}
}

func (v NullableReplaceCertificateExtendedOperationHandlerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceCertificateExtendedOperationHandlerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


