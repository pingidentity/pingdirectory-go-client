/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// AlertHandlerApiService AlertHandlerApi service
type AlertHandlerApiService service

type ApiAddAlertHandlerRequest struct {
	ctx                    context.Context
	ApiService             *AlertHandlerApiService
	addAlertHandlerRequest *AddAlertHandlerRequest
}

// Create a new Alert Handler in the config
func (r ApiAddAlertHandlerRequest) AddAlertHandlerRequest(addAlertHandlerRequest AddAlertHandlerRequest) ApiAddAlertHandlerRequest {
	r.addAlertHandlerRequest = &addAlertHandlerRequest
	return r
}

func (r ApiAddAlertHandlerRequest) Execute() (*AddAlertHandler200Response, *http.Response, error) {
	return r.ApiService.AddAlertHandlerExecute(r)
}

/*
AddAlertHandler Add a new Alert Handler to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddAlertHandlerRequest
*/
func (a *AlertHandlerApiService) AddAlertHandler(ctx context.Context) ApiAddAlertHandlerRequest {
	return ApiAddAlertHandlerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddAlertHandler200Response
func (a *AlertHandlerApiService) AddAlertHandlerExecute(r ApiAddAlertHandlerRequest) (*AddAlertHandler200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddAlertHandler200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertHandlerApiService.AddAlertHandler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-handlers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addAlertHandlerRequest == nil {
		return localVarReturnValue, nil, reportError("addAlertHandlerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addAlertHandlerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAlertHandlerRequest struct {
	ctx              context.Context
	ApiService       *AlertHandlerApiService
	alertHandlerName string
}

func (r ApiDeleteAlertHandlerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAlertHandlerExecute(r)
}

/*
DeleteAlertHandler Delete a Alert Handler

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param alertHandlerName Name of the Alert Handler
	@return ApiDeleteAlertHandlerRequest
*/
func (a *AlertHandlerApiService) DeleteAlertHandler(ctx context.Context, alertHandlerName string) ApiDeleteAlertHandlerRequest {
	return ApiDeleteAlertHandlerRequest{
		ApiService:       a,
		ctx:              ctx,
		alertHandlerName: alertHandlerName,
	}
}

// Execute executes the request
func (a *AlertHandlerApiService) DeleteAlertHandlerExecute(r ApiDeleteAlertHandlerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertHandlerApiService.DeleteAlertHandler")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-handlers/{alert-handler-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert-handler-name"+"}", url.PathEscape(parameterToString(r.alertHandlerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAlertHandlerRequest struct {
	ctx              context.Context
	ApiService       *AlertHandlerApiService
	alertHandlerName string
}

func (r ApiGetAlertHandlerRequest) Execute() (*GetAlertHandler200Response, *http.Response, error) {
	return r.ApiService.GetAlertHandlerExecute(r)
}

/*
GetAlertHandler Returns a single Alert Handler

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param alertHandlerName Name of the Alert Handler
	@return ApiGetAlertHandlerRequest
*/
func (a *AlertHandlerApiService) GetAlertHandler(ctx context.Context, alertHandlerName string) ApiGetAlertHandlerRequest {
	return ApiGetAlertHandlerRequest{
		ApiService:       a,
		ctx:              ctx,
		alertHandlerName: alertHandlerName,
	}
}

// Execute executes the request
//
//	@return GetAlertHandler200Response
func (a *AlertHandlerApiService) GetAlertHandlerExecute(r ApiGetAlertHandlerRequest) (*GetAlertHandler200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAlertHandler200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertHandlerApiService.GetAlertHandler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-handlers/{alert-handler-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert-handler-name"+"}", url.PathEscape(parameterToString(r.alertHandlerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAlertHandlerRequest struct {
	ctx              context.Context
	ApiService       *AlertHandlerApiService
	alertHandlerName string
	updateRequest    *UpdateRequest
}

// Update an existing Alert Handler
func (r ApiUpdateAlertHandlerRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateAlertHandlerRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateAlertHandlerRequest) Execute() (*GetAlertHandler200Response, *http.Response, error) {
	return r.ApiService.UpdateAlertHandlerExecute(r)
}

/*
UpdateAlertHandler Update an existing Alert Handler by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param alertHandlerName Name of the Alert Handler
	@return ApiUpdateAlertHandlerRequest
*/
func (a *AlertHandlerApiService) UpdateAlertHandler(ctx context.Context, alertHandlerName string) ApiUpdateAlertHandlerRequest {
	return ApiUpdateAlertHandlerRequest{
		ApiService:       a,
		ctx:              ctx,
		alertHandlerName: alertHandlerName,
	}
}

// Execute executes the request
//
//	@return GetAlertHandler200Response
func (a *AlertHandlerApiService) UpdateAlertHandlerExecute(r ApiUpdateAlertHandlerRequest) (*GetAlertHandler200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAlertHandler200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertHandlerApiService.UpdateAlertHandler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alert-handlers/{alert-handler-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"alert-handler-name"+"}", url.PathEscape(parameterToString(r.alertHandlerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
