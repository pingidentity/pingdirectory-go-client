/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordPolicySchemaUrn the model 'EnumpasswordPolicySchemaUrn'
type EnumpasswordPolicySchemaUrn string

// List of Enumpassword-policySchemaUrn
const (
	ENUMPASSWORDPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_POLICY EnumpasswordPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-policy"
)

// All allowed values of EnumpasswordPolicySchemaUrn enum
var AllowedEnumpasswordPolicySchemaUrnEnumValues = []EnumpasswordPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-policy",
}

func (v *EnumpasswordPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordPolicySchemaUrn(value)
	for _, existing := range AllowedEnumpasswordPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicySchemaUrn", value)
}

// NewEnumpasswordPolicySchemaUrnFromValue returns a pointer to a valid EnumpasswordPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicySchemaUrnFromValue(v string) (*EnumpasswordPolicySchemaUrn, error) {
	ev := EnumpasswordPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicySchemaUrn: valid values are %v", v, AllowedEnumpasswordPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policySchemaUrn value
func (v EnumpasswordPolicySchemaUrn) Ptr() *EnumpasswordPolicySchemaUrn {
	return &v
}

type NullableEnumpasswordPolicySchemaUrn struct {
	value *EnumpasswordPolicySchemaUrn
	isSet bool
}

func (v NullableEnumpasswordPolicySchemaUrn) Get() *EnumpasswordPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumpasswordPolicySchemaUrn) Set(val *EnumpasswordPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicySchemaUrn(val *EnumpasswordPolicySchemaUrn) *NullableEnumpasswordPolicySchemaUrn {
	return &NullableEnumpasswordPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

