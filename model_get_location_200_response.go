/*
PingData Location Config - OpenAPI 3.0

This is the PingData configuration API for the Location config object

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetLocation200Response struct for GetLocation200Response
type GetLocation200Response struct {
	// Name of the location
	Id *string `json:"id,omitempty"`
	// Description of the location
	Description *string `json:"description,omitempty"`
}

// NewGetLocation200Response instantiates a new GetLocation200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLocation200Response() *GetLocation200Response {
	this := GetLocation200Response{}
	return &this
}

// NewGetLocation200ResponseWithDefaults instantiates a new GetLocation200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLocation200ResponseWithDefaults() *GetLocation200Response {
	this := GetLocation200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetLocation200Response) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLocation200Response) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetLocation200Response) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetLocation200Response) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GetLocation200Response) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLocation200Response) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GetLocation200Response) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GetLocation200Response) SetDescription(v string) {
	o.Description = &v
}

func (o GetLocation200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableGetLocation200Response struct {
	value *GetLocation200Response
	isSet bool
}

func (v NullableGetLocation200Response) Get() *GetLocation200Response {
	return v.value
}

func (v *NullableGetLocation200Response) Set(val *GetLocation200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLocation200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLocation200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLocation200Response(val *GetLocation200Response) *NullableGetLocation200Response {
	return &NullableGetLocation200Response{value: val, isSet: true}
}

func (v NullableGetLocation200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLocation200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


