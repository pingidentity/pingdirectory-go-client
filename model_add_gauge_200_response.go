/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddGauge200Response - struct for AddGauge200Response
type AddGauge200Response struct {
	IndicatorGaugeResponse *IndicatorGaugeResponse
	NumericGaugeResponse   *NumericGaugeResponse
}

// IndicatorGaugeResponseAsAddGauge200Response is a convenience function that returns IndicatorGaugeResponse wrapped in AddGauge200Response
func IndicatorGaugeResponseAsAddGauge200Response(v *IndicatorGaugeResponse) AddGauge200Response {
	return AddGauge200Response{
		IndicatorGaugeResponse: v,
	}
}

// NumericGaugeResponseAsAddGauge200Response is a convenience function that returns NumericGaugeResponse wrapped in AddGauge200Response
func NumericGaugeResponseAsAddGauge200Response(v *NumericGaugeResponse) AddGauge200Response {
	return AddGauge200Response{
		NumericGaugeResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddGauge200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IndicatorGaugeResponse
	err = newStrictDecoder(data).Decode(&dst.IndicatorGaugeResponse)
	if err == nil {
		jsonIndicatorGaugeResponse, _ := json.Marshal(dst.IndicatorGaugeResponse)
		if string(jsonIndicatorGaugeResponse) == "{}" { // empty struct
			dst.IndicatorGaugeResponse = nil
		} else {
			match++
		}
	} else {
		dst.IndicatorGaugeResponse = nil
	}

	// try to unmarshal data into NumericGaugeResponse
	err = newStrictDecoder(data).Decode(&dst.NumericGaugeResponse)
	if err == nil {
		jsonNumericGaugeResponse, _ := json.Marshal(dst.NumericGaugeResponse)
		if string(jsonNumericGaugeResponse) == "{}" { // empty struct
			dst.NumericGaugeResponse = nil
		} else {
			match++
		}
	} else {
		dst.NumericGaugeResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IndicatorGaugeResponse = nil
		dst.NumericGaugeResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddGauge200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddGauge200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddGauge200Response) MarshalJSON() ([]byte, error) {
	if src.IndicatorGaugeResponse != nil {
		return json.Marshal(&src.IndicatorGaugeResponse)
	}

	if src.NumericGaugeResponse != nil {
		return json.Marshal(&src.NumericGaugeResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddGauge200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.IndicatorGaugeResponse != nil {
		return obj.IndicatorGaugeResponse
	}

	if obj.NumericGaugeResponse != nil {
		return obj.NumericGaugeResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddGauge200Response struct {
	value *AddGauge200Response
	isSet bool
}

func (v NullableAddGauge200Response) Get() *AddGauge200Response {
	return v.value
}

func (v *NullableAddGauge200Response) Set(val *AddGauge200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddGauge200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddGauge200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddGauge200Response(val *AddGauge200Response) *NullableAddGauge200Response {
	return &NullableAddGauge200Response{value: val, isSet: true}
}

func (v NullableAddGauge200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddGauge200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
