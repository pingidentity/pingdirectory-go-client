/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddConsentDefinitionRequestAllOf struct for AddConsentDefinitionRequestAllOf
type AddConsentDefinitionRequestAllOf struct {
	// Name of the new Consent Definition
	DefinitionName string `json:"definitionName"`
}

// NewAddConsentDefinitionRequestAllOf instantiates a new AddConsentDefinitionRequestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddConsentDefinitionRequestAllOf(definitionName string) *AddConsentDefinitionRequestAllOf {
	this := AddConsentDefinitionRequestAllOf{}
	this.DefinitionName = definitionName
	return &this
}

// NewAddConsentDefinitionRequestAllOfWithDefaults instantiates a new AddConsentDefinitionRequestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddConsentDefinitionRequestAllOfWithDefaults() *AddConsentDefinitionRequestAllOf {
	this := AddConsentDefinitionRequestAllOf{}
	return &this
}

// GetDefinitionName returns the DefinitionName field value
func (o *AddConsentDefinitionRequestAllOf) GetDefinitionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefinitionName
}

// GetDefinitionNameOk returns a tuple with the DefinitionName field value
// and a boolean to check if the value has been set.
func (o *AddConsentDefinitionRequestAllOf) GetDefinitionNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DefinitionName, true
}

// SetDefinitionName sets field value
func (o *AddConsentDefinitionRequestAllOf) SetDefinitionName(v string) {
	o.DefinitionName = v
}

func (o AddConsentDefinitionRequestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["definitionName"] = o.DefinitionName
	}
	return json.Marshal(toSerialize)
}

type NullableAddConsentDefinitionRequestAllOf struct {
	value *AddConsentDefinitionRequestAllOf
	isSet bool
}

func (v NullableAddConsentDefinitionRequestAllOf) Get() *AddConsentDefinitionRequestAllOf {
	return v.value
}

func (v *NullableAddConsentDefinitionRequestAllOf) Set(val *AddConsentDefinitionRequestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAddConsentDefinitionRequestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAddConsentDefinitionRequestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddConsentDefinitionRequestAllOf(val *AddConsentDefinitionRequestAllOf) *NullableAddConsentDefinitionRequestAllOf {
	return &NullableAddConsentDefinitionRequestAllOf{value: val, isSet: true}
}

func (v NullableAddConsentDefinitionRequestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddConsentDefinitionRequestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


