/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumfixedTimeLogRotationPolicySchemaUrn the model 'EnumfixedTimeLogRotationPolicySchemaUrn'
type EnumfixedTimeLogRotationPolicySchemaUrn string

// List of Enumfixed-time-log-rotation-policySchemaUrn
const (
	ENUMFIXEDTIMELOGROTATIONPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_ROTATION_POLICYFIXED_TIME EnumfixedTimeLogRotationPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:fixed-time"
)

// All allowed values of EnumfixedTimeLogRotationPolicySchemaUrn enum
var AllowedEnumfixedTimeLogRotationPolicySchemaUrnEnumValues = []EnumfixedTimeLogRotationPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:fixed-time",
}

func (v *EnumfixedTimeLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumfixedTimeLogRotationPolicySchemaUrn(value)
	for _, existing := range AllowedEnumfixedTimeLogRotationPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumfixedTimeLogRotationPolicySchemaUrn", value)
}

// NewEnumfixedTimeLogRotationPolicySchemaUrnFromValue returns a pointer to a valid EnumfixedTimeLogRotationPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumfixedTimeLogRotationPolicySchemaUrnFromValue(v string) (*EnumfixedTimeLogRotationPolicySchemaUrn, error) {
	ev := EnumfixedTimeLogRotationPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumfixedTimeLogRotationPolicySchemaUrn: valid values are %v", v, AllowedEnumfixedTimeLogRotationPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumfixedTimeLogRotationPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumfixedTimeLogRotationPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumfixed-time-log-rotation-policySchemaUrn value
func (v EnumfixedTimeLogRotationPolicySchemaUrn) Ptr() *EnumfixedTimeLogRotationPolicySchemaUrn {
	return &v
}

type NullableEnumfixedTimeLogRotationPolicySchemaUrn struct {
	value *EnumfixedTimeLogRotationPolicySchemaUrn
	isSet bool
}

func (v NullableEnumfixedTimeLogRotationPolicySchemaUrn) Get() *EnumfixedTimeLogRotationPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumfixedTimeLogRotationPolicySchemaUrn) Set(val *EnumfixedTimeLogRotationPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumfixedTimeLogRotationPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumfixedTimeLogRotationPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumfixedTimeLogRotationPolicySchemaUrn(val *EnumfixedTimeLogRotationPolicySchemaUrn) *NullableEnumfixedTimeLogRotationPolicySchemaUrn {
	return &NullableEnumfixedTimeLogRotationPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumfixedTimeLogRotationPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumfixedTimeLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
