/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumglobalConfigurationStartupErrorLoggerOutputLocationProp Specifies how the server should handle error log messages (which may include errors, warnings, and notices) generated during startup. All of these messages will be written to all configured error loggers, but they may also be written to other locations (like standard output, standard error, or the server.out log file) so that they are displayed on the console when the server is starting.
type EnumglobalConfigurationStartupErrorLoggerOutputLocationProp string

// List of Enumglobal-configuration-startupErrorLoggerOutputLocationProp
const (
	ENUMGLOBALCONFIGURATIONSTARTUPERRORLOGGEROUTPUTLOCATIONPROP_STANDARD_OUTPUT EnumglobalConfigurationStartupErrorLoggerOutputLocationProp = "standard-output"
	ENUMGLOBALCONFIGURATIONSTARTUPERRORLOGGEROUTPUTLOCATIONPROP_STANDARD_ERROR EnumglobalConfigurationStartupErrorLoggerOutputLocationProp = "standard-error"
	ENUMGLOBALCONFIGURATIONSTARTUPERRORLOGGEROUTPUTLOCATIONPROP_SERVER_OUT_FILE EnumglobalConfigurationStartupErrorLoggerOutputLocationProp = "server-out-file"
	ENUMGLOBALCONFIGURATIONSTARTUPERRORLOGGEROUTPUTLOCATIONPROP_STANDARD_OUTPUT_AND_SERVER_OUT_FILE EnumglobalConfigurationStartupErrorLoggerOutputLocationProp = "standard-output-and-server-out-file"
	ENUMGLOBALCONFIGURATIONSTARTUPERRORLOGGEROUTPUTLOCATIONPROP_STANDARD_ERROR_AND_SERVER_OUT_FILE EnumglobalConfigurationStartupErrorLoggerOutputLocationProp = "standard-error-and-server-out-file"
	ENUMGLOBALCONFIGURATIONSTARTUPERRORLOGGEROUTPUTLOCATIONPROP_DISABLED EnumglobalConfigurationStartupErrorLoggerOutputLocationProp = "disabled"
)

// All allowed values of EnumglobalConfigurationStartupErrorLoggerOutputLocationProp enum
var AllowedEnumglobalConfigurationStartupErrorLoggerOutputLocationPropEnumValues = []EnumglobalConfigurationStartupErrorLoggerOutputLocationProp{
	"standard-output",
	"standard-error",
	"server-out-file",
	"standard-output-and-server-out-file",
	"standard-error-and-server-out-file",
	"disabled",
}

func (v *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumglobalConfigurationStartupErrorLoggerOutputLocationProp(value)
	for _, existing := range AllowedEnumglobalConfigurationStartupErrorLoggerOutputLocationPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumglobalConfigurationStartupErrorLoggerOutputLocationProp", value)
}

// NewEnumglobalConfigurationStartupErrorLoggerOutputLocationPropFromValue returns a pointer to a valid EnumglobalConfigurationStartupErrorLoggerOutputLocationProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumglobalConfigurationStartupErrorLoggerOutputLocationPropFromValue(v string) (*EnumglobalConfigurationStartupErrorLoggerOutputLocationProp, error) {
	ev := EnumglobalConfigurationStartupErrorLoggerOutputLocationProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumglobalConfigurationStartupErrorLoggerOutputLocationProp: valid values are %v", v, AllowedEnumglobalConfigurationStartupErrorLoggerOutputLocationPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumglobalConfigurationStartupErrorLoggerOutputLocationProp) IsValid() bool {
	for _, existing := range AllowedEnumglobalConfigurationStartupErrorLoggerOutputLocationPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumglobal-configuration-startupErrorLoggerOutputLocationProp value
func (v EnumglobalConfigurationStartupErrorLoggerOutputLocationProp) Ptr() *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp {
	return &v
}

type NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp struct {
	value *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp
	isSet bool
}

func (v NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp) Get() *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp {
	return v.value
}

func (v *NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp) Set(val *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp(val *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp) *NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp {
	return &NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp{value: val, isSet: true}
}

func (v NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumglobalConfigurationStartupErrorLoggerOutputLocationProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

