/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalServerSmtpSecurityProp This property specifies type of connection security to use when connecting to the outgoing mail server.
type EnumexternalServerSmtpSecurityProp string

// List of Enumexternal-server-smtpSecurityProp
const (
	NONE EnumexternalServerSmtpSecurityProp = "none"
	STARTTLS EnumexternalServerSmtpSecurityProp = "starttls"
	SSL EnumexternalServerSmtpSecurityProp = "ssl"
)

// All allowed values of EnumexternalServerSmtpSecurityProp enum
var AllowedEnumexternalServerSmtpSecurityPropEnumValues = []EnumexternalServerSmtpSecurityProp{
	"none",
	"starttls",
	"ssl",
}

func (v *EnumexternalServerSmtpSecurityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalServerSmtpSecurityProp(value)
	for _, existing := range AllowedEnumexternalServerSmtpSecurityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalServerSmtpSecurityProp", value)
}

// NewEnumexternalServerSmtpSecurityPropFromValue returns a pointer to a valid EnumexternalServerSmtpSecurityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalServerSmtpSecurityPropFromValue(v string) (*EnumexternalServerSmtpSecurityProp, error) {
	ev := EnumexternalServerSmtpSecurityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalServerSmtpSecurityProp: valid values are %v", v, AllowedEnumexternalServerSmtpSecurityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalServerSmtpSecurityProp) IsValid() bool {
	for _, existing := range AllowedEnumexternalServerSmtpSecurityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-server-smtpSecurityProp value
func (v EnumexternalServerSmtpSecurityProp) Ptr() *EnumexternalServerSmtpSecurityProp {
	return &v
}

type NullableEnumexternalServerSmtpSecurityProp struct {
	value *EnumexternalServerSmtpSecurityProp
	isSet bool
}

func (v NullableEnumexternalServerSmtpSecurityProp) Get() *EnumexternalServerSmtpSecurityProp {
	return v.value
}

func (v *NullableEnumexternalServerSmtpSecurityProp) Set(val *EnumexternalServerSmtpSecurityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalServerSmtpSecurityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalServerSmtpSecurityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalServerSmtpSecurityProp(val *EnumexternalServerSmtpSecurityProp) *NullableEnumexternalServerSmtpSecurityProp {
	return &NullableEnumexternalServerSmtpSecurityProp{value: val, isSet: true}
}

func (v NullableEnumexternalServerSmtpSecurityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalServerSmtpSecurityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

