/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnummonitoringEndpointConnectionTypeProp Specifies the protocol and security that this StatsD Monitoring Endpoint should use to connect to the configured endpoint.
type EnummonitoringEndpointConnectionTypeProp string

// List of Enummonitoring-endpoint-connectionTypeProp
const (
	ENUMMONITORINGENDPOINTCONNECTIONTYPEPROP_UNENCRYPTED_UDP EnummonitoringEndpointConnectionTypeProp = "unencrypted-udp"
	ENUMMONITORINGENDPOINTCONNECTIONTYPEPROP_UNENCRYPTED_TCP EnummonitoringEndpointConnectionTypeProp = "unencrypted-tcp"
	ENUMMONITORINGENDPOINTCONNECTIONTYPEPROP_SSL_OVER_TCP    EnummonitoringEndpointConnectionTypeProp = "ssl-over-tcp"
)

// All allowed values of EnummonitoringEndpointConnectionTypeProp enum
var AllowedEnummonitoringEndpointConnectionTypePropEnumValues = []EnummonitoringEndpointConnectionTypeProp{
	"unencrypted-udp",
	"unencrypted-tcp",
	"ssl-over-tcp",
}

func (v *EnummonitoringEndpointConnectionTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummonitoringEndpointConnectionTypeProp(value)
	for _, existing := range AllowedEnummonitoringEndpointConnectionTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummonitoringEndpointConnectionTypeProp", value)
}

// NewEnummonitoringEndpointConnectionTypePropFromValue returns a pointer to a valid EnummonitoringEndpointConnectionTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummonitoringEndpointConnectionTypePropFromValue(v string) (*EnummonitoringEndpointConnectionTypeProp, error) {
	ev := EnummonitoringEndpointConnectionTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummonitoringEndpointConnectionTypeProp: valid values are %v", v, AllowedEnummonitoringEndpointConnectionTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummonitoringEndpointConnectionTypeProp) IsValid() bool {
	for _, existing := range AllowedEnummonitoringEndpointConnectionTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummonitoring-endpoint-connectionTypeProp value
func (v EnummonitoringEndpointConnectionTypeProp) Ptr() *EnummonitoringEndpointConnectionTypeProp {
	return &v
}

type NullableEnummonitoringEndpointConnectionTypeProp struct {
	value *EnummonitoringEndpointConnectionTypeProp
	isSet bool
}

func (v NullableEnummonitoringEndpointConnectionTypeProp) Get() *EnummonitoringEndpointConnectionTypeProp {
	return v.value
}

func (v *NullableEnummonitoringEndpointConnectionTypeProp) Set(val *EnummonitoringEndpointConnectionTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummonitoringEndpointConnectionTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummonitoringEndpointConnectionTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummonitoringEndpointConnectionTypeProp(val *EnummonitoringEndpointConnectionTypeProp) *NullableEnummonitoringEndpointConnectionTypeProp {
	return &NullableEnummonitoringEndpointConnectionTypeProp{value: val, isSet: true}
}

func (v NullableEnummonitoringEndpointConnectionTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummonitoringEndpointConnectionTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
