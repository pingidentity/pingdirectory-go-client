/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumgaugeOverrideSeverityProp When defined, causes this Gauge to assume the specified severity, overriding its computed severity. This is useful for testing alarms generated by Gauges as well as suppressing alarms for known conditions.
type EnumgaugeOverrideSeverityProp string

// List of Enumgauge-overrideSeverityProp
const (
	ENUMGAUGEOVERRIDESEVERITYPROP_NORMAL EnumgaugeOverrideSeverityProp = "normal"
	ENUMGAUGEOVERRIDESEVERITYPROP_WARNING EnumgaugeOverrideSeverityProp = "warning"
	ENUMGAUGEOVERRIDESEVERITYPROP_MINOR EnumgaugeOverrideSeverityProp = "minor"
	ENUMGAUGEOVERRIDESEVERITYPROP_MAJOR EnumgaugeOverrideSeverityProp = "major"
	ENUMGAUGEOVERRIDESEVERITYPROP_CRITICAL EnumgaugeOverrideSeverityProp = "critical"
)

// All allowed values of EnumgaugeOverrideSeverityProp enum
var AllowedEnumgaugeOverrideSeverityPropEnumValues = []EnumgaugeOverrideSeverityProp{
	"normal",
	"warning",
	"minor",
	"major",
	"critical",
}

func (v *EnumgaugeOverrideSeverityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgaugeOverrideSeverityProp(value)
	for _, existing := range AllowedEnumgaugeOverrideSeverityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgaugeOverrideSeverityProp", value)
}

// NewEnumgaugeOverrideSeverityPropFromValue returns a pointer to a valid EnumgaugeOverrideSeverityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgaugeOverrideSeverityPropFromValue(v string) (*EnumgaugeOverrideSeverityProp, error) {
	ev := EnumgaugeOverrideSeverityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgaugeOverrideSeverityProp: valid values are %v", v, AllowedEnumgaugeOverrideSeverityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgaugeOverrideSeverityProp) IsValid() bool {
	for _, existing := range AllowedEnumgaugeOverrideSeverityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgauge-overrideSeverityProp value
func (v EnumgaugeOverrideSeverityProp) Ptr() *EnumgaugeOverrideSeverityProp {
	return &v
}

type NullableEnumgaugeOverrideSeverityProp struct {
	value *EnumgaugeOverrideSeverityProp
	isSet bool
}

func (v NullableEnumgaugeOverrideSeverityProp) Get() *EnumgaugeOverrideSeverityProp {
	return v.value
}

func (v *NullableEnumgaugeOverrideSeverityProp) Set(val *EnumgaugeOverrideSeverityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgaugeOverrideSeverityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgaugeOverrideSeverityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgaugeOverrideSeverityProp(val *EnumgaugeOverrideSeverityProp) *NullableEnumgaugeOverrideSeverityProp {
	return &NullableEnumgaugeOverrideSeverityProp{value: val, isSet: true}
}

func (v NullableEnumgaugeOverrideSeverityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgaugeOverrideSeverityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

