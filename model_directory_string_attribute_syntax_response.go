/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DirectoryStringAttributeSyntaxResponse struct for DirectoryStringAttributeSyntaxResponse
type DirectoryStringAttributeSyntaxResponse struct {
	Schemas []EnumdirectoryStringAttributeSyntaxSchemaUrn `json:"schemas"`
	// Indicates whether zero-length (that is, an empty string) values are allowed.
	AllowZeroLengthValues *bool `json:"allowZeroLengthValues,omitempty"`
	// Indicates whether the Attribute Syntax is enabled.
	Enabled bool `json:"enabled"`
	// Indicates whether values of this attribute are required to have a \"binary\" transfer option as described in RFC 4522. Attributes with this syntax will generally be referenced with names including \";binary\" (e.g., \"userCertificate;binary\").
	RequireBinaryTransfer *bool `json:"requireBinaryTransfer,omitempty"`
}

// NewDirectoryStringAttributeSyntaxResponse instantiates a new DirectoryStringAttributeSyntaxResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectoryStringAttributeSyntaxResponse(schemas []EnumdirectoryStringAttributeSyntaxSchemaUrn, enabled bool) *DirectoryStringAttributeSyntaxResponse {
	this := DirectoryStringAttributeSyntaxResponse{}
	this.Schemas = schemas
	this.Enabled = enabled
	return &this
}

// NewDirectoryStringAttributeSyntaxResponseWithDefaults instantiates a new DirectoryStringAttributeSyntaxResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectoryStringAttributeSyntaxResponseWithDefaults() *DirectoryStringAttributeSyntaxResponse {
	this := DirectoryStringAttributeSyntaxResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *DirectoryStringAttributeSyntaxResponse) GetSchemas() []EnumdirectoryStringAttributeSyntaxSchemaUrn {
	if o == nil {
		var ret []EnumdirectoryStringAttributeSyntaxSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *DirectoryStringAttributeSyntaxResponse) GetSchemasOk() ([]EnumdirectoryStringAttributeSyntaxSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *DirectoryStringAttributeSyntaxResponse) SetSchemas(v []EnumdirectoryStringAttributeSyntaxSchemaUrn) {
	o.Schemas = v
}

// GetAllowZeroLengthValues returns the AllowZeroLengthValues field value if set, zero value otherwise.
func (o *DirectoryStringAttributeSyntaxResponse) GetAllowZeroLengthValues() bool {
	if o == nil || isNil(o.AllowZeroLengthValues) {
		var ret bool
		return ret
	}
	return *o.AllowZeroLengthValues
}

// GetAllowZeroLengthValuesOk returns a tuple with the AllowZeroLengthValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryStringAttributeSyntaxResponse) GetAllowZeroLengthValuesOk() (*bool, bool) {
	if o == nil || isNil(o.AllowZeroLengthValues) {
    return nil, false
	}
	return o.AllowZeroLengthValues, true
}

// HasAllowZeroLengthValues returns a boolean if a field has been set.
func (o *DirectoryStringAttributeSyntaxResponse) HasAllowZeroLengthValues() bool {
	if o != nil && !isNil(o.AllowZeroLengthValues) {
		return true
	}

	return false
}

// SetAllowZeroLengthValues gets a reference to the given bool and assigns it to the AllowZeroLengthValues field.
func (o *DirectoryStringAttributeSyntaxResponse) SetAllowZeroLengthValues(v bool) {
	o.AllowZeroLengthValues = &v
}

// GetEnabled returns the Enabled field value
func (o *DirectoryStringAttributeSyntaxResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DirectoryStringAttributeSyntaxResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DirectoryStringAttributeSyntaxResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRequireBinaryTransfer returns the RequireBinaryTransfer field value if set, zero value otherwise.
func (o *DirectoryStringAttributeSyntaxResponse) GetRequireBinaryTransfer() bool {
	if o == nil || isNil(o.RequireBinaryTransfer) {
		var ret bool
		return ret
	}
	return *o.RequireBinaryTransfer
}

// GetRequireBinaryTransferOk returns a tuple with the RequireBinaryTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectoryStringAttributeSyntaxResponse) GetRequireBinaryTransferOk() (*bool, bool) {
	if o == nil || isNil(o.RequireBinaryTransfer) {
    return nil, false
	}
	return o.RequireBinaryTransfer, true
}

// HasRequireBinaryTransfer returns a boolean if a field has been set.
func (o *DirectoryStringAttributeSyntaxResponse) HasRequireBinaryTransfer() bool {
	if o != nil && !isNil(o.RequireBinaryTransfer) {
		return true
	}

	return false
}

// SetRequireBinaryTransfer gets a reference to the given bool and assigns it to the RequireBinaryTransfer field.
func (o *DirectoryStringAttributeSyntaxResponse) SetRequireBinaryTransfer(v bool) {
	o.RequireBinaryTransfer = &v
}

func (o DirectoryStringAttributeSyntaxResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.AllowZeroLengthValues) {
		toSerialize["allowZeroLengthValues"] = o.AllowZeroLengthValues
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.RequireBinaryTransfer) {
		toSerialize["requireBinaryTransfer"] = o.RequireBinaryTransfer
	}
	return json.Marshal(toSerialize)
}

type NullableDirectoryStringAttributeSyntaxResponse struct {
	value *DirectoryStringAttributeSyntaxResponse
	isSet bool
}

func (v NullableDirectoryStringAttributeSyntaxResponse) Get() *DirectoryStringAttributeSyntaxResponse {
	return v.value
}

func (v *NullableDirectoryStringAttributeSyntaxResponse) Set(val *DirectoryStringAttributeSyntaxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectoryStringAttributeSyntaxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectoryStringAttributeSyntaxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectoryStringAttributeSyntaxResponse(val *DirectoryStringAttributeSyntaxResponse) *NullableDirectoryStringAttributeSyntaxResponse {
	return &NullableDirectoryStringAttributeSyntaxResponse{value: val, isSet: true}
}

func (v NullableDirectoryStringAttributeSyntaxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectoryStringAttributeSyntaxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


