/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackendSystemIndexToPrimeProp Specifies which system index(es) should be primed when the backend is initialized.
type EnumbackendSystemIndexToPrimeProp string

// List of Enumbackend-systemIndexToPrimeProp
const (
	ENUMBACKENDSYSTEMINDEXTOPRIMEPROP_DN2ID       EnumbackendSystemIndexToPrimeProp = "dn2id"
	ENUMBACKENDSYSTEMINDEXTOPRIMEPROP_ID2ENTRY    EnumbackendSystemIndexToPrimeProp = "id2entry"
	ENUMBACKENDSYSTEMINDEXTOPRIMEPROP_ID2CHILDREN EnumbackendSystemIndexToPrimeProp = "id2children"
	ENUMBACKENDSYSTEMINDEXTOPRIMEPROP_ID2SUBTREE  EnumbackendSystemIndexToPrimeProp = "id2subtree"
	ENUMBACKENDSYSTEMINDEXTOPRIMEPROP_DN2URI      EnumbackendSystemIndexToPrimeProp = "dn2uri"
)

// All allowed values of EnumbackendSystemIndexToPrimeProp enum
var AllowedEnumbackendSystemIndexToPrimePropEnumValues = []EnumbackendSystemIndexToPrimeProp{
	"dn2id",
	"id2entry",
	"id2children",
	"id2subtree",
	"dn2uri",
}

func (v *EnumbackendSystemIndexToPrimeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackendSystemIndexToPrimeProp(value)
	for _, existing := range AllowedEnumbackendSystemIndexToPrimePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackendSystemIndexToPrimeProp", value)
}

// NewEnumbackendSystemIndexToPrimePropFromValue returns a pointer to a valid EnumbackendSystemIndexToPrimeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackendSystemIndexToPrimePropFromValue(v string) (*EnumbackendSystemIndexToPrimeProp, error) {
	ev := EnumbackendSystemIndexToPrimeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackendSystemIndexToPrimeProp: valid values are %v", v, AllowedEnumbackendSystemIndexToPrimePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackendSystemIndexToPrimeProp) IsValid() bool {
	for _, existing := range AllowedEnumbackendSystemIndexToPrimePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackend-systemIndexToPrimeProp value
func (v EnumbackendSystemIndexToPrimeProp) Ptr() *EnumbackendSystemIndexToPrimeProp {
	return &v
}

type NullableEnumbackendSystemIndexToPrimeProp struct {
	value *EnumbackendSystemIndexToPrimeProp
	isSet bool
}

func (v NullableEnumbackendSystemIndexToPrimeProp) Get() *EnumbackendSystemIndexToPrimeProp {
	return v.value
}

func (v *NullableEnumbackendSystemIndexToPrimeProp) Set(val *EnumbackendSystemIndexToPrimeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackendSystemIndexToPrimeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackendSystemIndexToPrimeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackendSystemIndexToPrimeProp(val *EnumbackendSystemIndexToPrimeProp) *NullableEnumbackendSystemIndexToPrimeProp {
	return &NullableEnumbackendSystemIndexToPrimeProp{value: val, isSet: true}
}

func (v NullableEnumbackendSystemIndexToPrimeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackendSystemIndexToPrimeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
