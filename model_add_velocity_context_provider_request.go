/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddVelocityContextProviderRequest - struct for AddVelocityContextProviderRequest
type AddVelocityContextProviderRequest struct {
	AddThirdPartyVelocityContextProviderRequest    *AddThirdPartyVelocityContextProviderRequest
	AddVelocityToolsVelocityContextProviderRequest *AddVelocityToolsVelocityContextProviderRequest
}

// AddThirdPartyVelocityContextProviderRequestAsAddVelocityContextProviderRequest is a convenience function that returns AddThirdPartyVelocityContextProviderRequest wrapped in AddVelocityContextProviderRequest
func AddThirdPartyVelocityContextProviderRequestAsAddVelocityContextProviderRequest(v *AddThirdPartyVelocityContextProviderRequest) AddVelocityContextProviderRequest {
	return AddVelocityContextProviderRequest{
		AddThirdPartyVelocityContextProviderRequest: v,
	}
}

// AddVelocityToolsVelocityContextProviderRequestAsAddVelocityContextProviderRequest is a convenience function that returns AddVelocityToolsVelocityContextProviderRequest wrapped in AddVelocityContextProviderRequest
func AddVelocityToolsVelocityContextProviderRequestAsAddVelocityContextProviderRequest(v *AddVelocityToolsVelocityContextProviderRequest) AddVelocityContextProviderRequest {
	return AddVelocityContextProviderRequest{
		AddVelocityToolsVelocityContextProviderRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddVelocityContextProviderRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddThirdPartyVelocityContextProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyVelocityContextProviderRequest)
	if err == nil {
		jsonAddThirdPartyVelocityContextProviderRequest, _ := json.Marshal(dst.AddThirdPartyVelocityContextProviderRequest)
		if string(jsonAddThirdPartyVelocityContextProviderRequest) == "{}" { // empty struct
			dst.AddThirdPartyVelocityContextProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyVelocityContextProviderRequest = nil
	}

	// try to unmarshal data into AddVelocityToolsVelocityContextProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddVelocityToolsVelocityContextProviderRequest)
	if err == nil {
		jsonAddVelocityToolsVelocityContextProviderRequest, _ := json.Marshal(dst.AddVelocityToolsVelocityContextProviderRequest)
		if string(jsonAddVelocityToolsVelocityContextProviderRequest) == "{}" { // empty struct
			dst.AddVelocityToolsVelocityContextProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddVelocityToolsVelocityContextProviderRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddThirdPartyVelocityContextProviderRequest = nil
		dst.AddVelocityToolsVelocityContextProviderRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddVelocityContextProviderRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddVelocityContextProviderRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddVelocityContextProviderRequest) MarshalJSON() ([]byte, error) {
	if src.AddThirdPartyVelocityContextProviderRequest != nil {
		return json.Marshal(&src.AddThirdPartyVelocityContextProviderRequest)
	}

	if src.AddVelocityToolsVelocityContextProviderRequest != nil {
		return json.Marshal(&src.AddVelocityToolsVelocityContextProviderRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddVelocityContextProviderRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddThirdPartyVelocityContextProviderRequest != nil {
		return obj.AddThirdPartyVelocityContextProviderRequest
	}

	if obj.AddVelocityToolsVelocityContextProviderRequest != nil {
		return obj.AddVelocityToolsVelocityContextProviderRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddVelocityContextProviderRequest struct {
	value *AddVelocityContextProviderRequest
	isSet bool
}

func (v NullableAddVelocityContextProviderRequest) Get() *AddVelocityContextProviderRequest {
	return v.value
}

func (v *NullableAddVelocityContextProviderRequest) Set(val *AddVelocityContextProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVelocityContextProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVelocityContextProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVelocityContextProviderRequest(val *AddVelocityContextProviderRequest) *NullableAddVelocityContextProviderRequest {
	return &NullableAddVelocityContextProviderRequest{value: val, isSet: true}
}

func (v NullableAddVelocityContextProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVelocityContextProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
