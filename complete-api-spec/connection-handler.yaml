openapi: 3.0.3
info:
  description: This is the PingData Configuration API for the Connection Handler config object
  title: PingData Connection Handler Config - OpenAPI 3.0
  version: "0.1"
externalDocs:
  description: PingDirectory Configuration API Docs
  url: https://docs.pingidentity.com/r/en-us/pingdirectory-100/pd_ds_use_config_api
tags:
- description: Access connection-handlers
  name: connection-handler
paths:
  /connection-handlers:
    get:
      summary: Returns a list of all Connection Handler objects
      operationId: list-connection-handlers
      parameters:
      - in: query
        name: filter
        schema:
          type: string
        required: false
        description: SCIM filter
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connection-handlerListResponse'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "400":
          description: Bad request
      security:
      - basicAuth: []
      tags:
      - connection-handler
    post:
      summary: Add a new Connection Handler to the config
      operationId: add-connection-handler
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/add-jmx-connection-handler-request'
              - $ref: '#/components/schemas/add-ldap-connection-handler-request'
              - $ref: '#/components/schemas/add-ldif-connection-handler-request'
              - $ref: '#/components/schemas/add-http-connection-handler-request'
        description: Create a new Connection Handler in the config
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/jmx-connection-handler-response'
                - $ref: '#/components/schemas/ldap-connection-handler-response'
                - $ref: '#/components/schemas/ldif-connection-handler-response'
                - $ref: '#/components/schemas/http-connection-handler-response'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "400":
          description: Bad request
        "409":
          description: The Connection Handler already exists
      security:
      - basicAuth: []
      tags:
      - connection-handler
  /connection-handlers/{connection-handler-name}:
    delete:
      summary: Delete a Connection Handler
      operationId: delete-connection-handler
      parameters:
      - description: Name of the Connection Handler
        explode: false
        in: path
        name: connection-handler-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "404":
          description: The Connection Handler does not exist
        "409":
          description: The Connection Handler cannot be deleted
      security:
      - basicAuth: []
      tags:
      - connection-handler
    get:
      summary: Returns a single Connection Handler
      operationId: get-connection-handler
      parameters:
      - description: Name of the Connection Handler
        explode: false
        in: path
        name: connection-handler-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/jmx-connection-handler-response'
                - $ref: '#/components/schemas/ldap-connection-handler-response'
                - $ref: '#/components/schemas/ldif-connection-handler-response'
                - $ref: '#/components/schemas/http-connection-handler-response'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "404":
          description: The Connection Handler does not exist
      security:
      - basicAuth: []
      tags:
      - connection-handler
    patch:
      summary: Update an existing Connection Handler by name
      operationId: update-connection-handler
      parameters:
      - description: Name of the Connection Handler
        explode: false
        in: path
        name: connection-handler-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRequest'
        description: Update an existing Connection Handler
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/jmx-connection-handler-response'
                - $ref: '#/components/schemas/ldap-connection-handler-response'
                - $ref: '#/components/schemas/ldif-connection-handler-response'
                - $ref: '#/components/schemas/http-connection-handler-response'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "400":
          description: Invalid request
        "404":
          description: The Connection Handler does not exist
      security:
      - basicAuth: []
      tags:
      - connection-handler
components:
  schemas:
    Enumconnection-handler-sslClientAuthPolicyProp:
      type: string
      enum:
      - "disabled"
      - "optional"
      - "required"
      description: >-
          Specifies the policy that the HTTP Connection Handler should use regarding client SSL certificates. In order for a client certificate to be accepted it must be known to the trust-manager-provider associated with this HTTP Connection Handler. Client certificates received by the HTTP Connection Handler are by default used for TLS mutual authentication only, as there is no support for user authentication.
    add-http-connection-handler-request:
      allOf:
      - type: object
        properties:
          handlerName:
            type: string
            description: >-
                Name of the new Connection Handler
      - $ref: '#/components/schemas/http-connection-handler-shared'
      required:
      - handlerName
    http-connection-handler-response:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: >-
                Name of the Connection Handler
      - $ref: '#/components/schemas/http-connection-handler-shared'
      - $ref: '#/components/schemas/meta'
      required:
      - id
    http-connection-handler-shared:
      type: object
      properties:
        schemas:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/Enumhttp-connection-handlerSchemaUrn'
        listenAddress:
          type: string
          description: >-
              Specifies the address on which to listen for connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.
        listenPort:
          type: integer
          description: >-
              Specifies the port number on which the HTTP Connection Handler will listen for connections from clients.
        useSSL:
          type: boolean
          description: >-
              Indicates whether the HTTP Connection Handler should use SSL.
        sslCertNickname:
          type: string
          description: >-
              Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when performing SSL communication.
        httpServletExtension:
          type: array
          items:
            type: string
          description: >-
              Specifies information about servlets that will be provided via this connection handler.
        webApplicationExtension:
          type: array
          items:
            type: string
          description: >-
              Specifies information about web applications that will be provided via this connection handler.
        httpOperationLogPublisher:
          type: array
          items:
            type: string
          description: >-
              Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for operations processed through this HTTP Connection Handler.
        sslProtocol:
          type: array
          items:
            type: string
          description: >-
              Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.
        sslCipherSuite:
          type: array
          items:
            type: string
          description: >-
              Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.
        keyManagerProvider:
          type: string
          description: >-
              Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS clients.
        trustManagerProvider:
          type: string
          description: >-
              Specifies the trust manager provider that will be used to validate any certificates presented by HTTPS clients.
        numRequestHandlers:
          type: integer
          description: >-
              Specifies the number of threads that will be used for accepting connections and reading requests from clients.
        keepStats:
          type: boolean
          description: >-
              Indicates whether to enable statistics collection for this connection handler.
        acceptBacklog:
          type: integer
          description: >-
              Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish large numbers of connections simultaneously.
        allowTCPReuseAddress:
          type: boolean
          description: >-
              Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high rate of connection establishment and termination.
        idleTimeLimit:
          type: string
          description: >-
              Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.
        lowResourcesConnectionThreshold:
          type: integer
          description: >-
              Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different idle time limit is applied on the connections.
        lowResourcesIdleTimeLimit:
          type: string
          description: >-
              Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.
        enableMultipartMIMEParameters:
          type: boolean
          description: >-
              Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as request parameters.
        useForwardedHeaders:
          type: boolean
          description: >-
              Indicates whether to use "Forwarded" and "X-Forwarded-*" request headers to override corresponding HTTP request information available during request processing.
        httpRequestHeaderSize:
          type: integer
          description: >-
              Specifies the maximum buffer size of an http request including the request uri and all of the request headers.
        responseHeader:
          type: array
          items:
            type: string
          description: >-
              Specifies HTTP header fields and values added to response headers for all requests.
        useCorrelationIDHeader:
          type: boolean
          description: >-
              If enabled, a correlation ID header will be added to outgoing HTTP responses.
        correlationIDResponseHeader:
          type: string
          description: >-
              Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
        correlationIDRequestHeader:
          type: array
          items:
            type: string
          description: >-
              Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are "Correlation-Id", "X-Amzn-Trace-Id", and "X-Request-Id".
        sslClientAuthPolicy:
          $ref: '#/components/schemas/Enumconnection-handler-sslClientAuthPolicyProp'
        enableSniHostnameChecks:
          type: boolean
          description: >-
              Requires SNI hostnames to match or else throw an Invalid SNI error.
        description:
          type: string
          description: >-
              A description for this Connection Handler
        enabled:
          type: boolean
          description: >-
              Indicates whether the Connection Handler is enabled.
      required:
      - schemas
      - listenPort
      - enabled
    Enumhttp-connection-handlerSchemaUrn:
      type: string
      enum:
      - "urn:pingidentity:schemas:configuration:2.0:connection-handler:http"
    add-jmx-connection-handler-request:
      allOf:
      - type: object
        properties:
          handlerName:
            type: string
            description: >-
                Name of the new Connection Handler
      - $ref: '#/components/schemas/jmx-connection-handler-shared'
      required:
      - handlerName
    jmx-connection-handler-response:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: >-
                Name of the Connection Handler
      - $ref: '#/components/schemas/jmx-connection-handler-shared'
      - $ref: '#/components/schemas/meta'
      required:
      - id
    jmx-connection-handler-shared:
      type: object
      properties:
        schemas:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/Enumjmx-connection-handlerSchemaUrn'
        listenPort:
          type: integer
          description: >-
              Specifies the port number on which the JMX Connection Handler will listen for connections from clients.
        useSSL:
          type: boolean
          description: >-
              Indicates whether the JMX Connection Handler should use SSL.
        sslCertNickname:
          type: string
          description: >-
              Specifies the nickname (also called the alias) of the certificate that the JMX Connection Handler should use when performing SSL communication.
        keyManagerProvider:
          type: string
          description: >-
              Specifies the name of the key manager that should be used with this JMX Connection Handler .
        description:
          type: string
          description: >-
              A description for this Connection Handler
        enabled:
          type: boolean
          description: >-
              Indicates whether the Connection Handler is enabled.
        allowedClient:
          type: array
          items:
            type: string
          description: >-
              Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections to this connection handler.
        deniedClient:
          type: array
          items:
            type: string
          description: >-
              Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish connections to this connection handler.
      required:
      - schemas
      - listenPort
      - enabled
    Enumjmx-connection-handlerSchemaUrn:
      type: string
      enum:
      - "urn:pingidentity:schemas:configuration:2.0:connection-handler:jmx"
    add-ldap-connection-handler-request:
      allOf:
      - type: object
        properties:
          handlerName:
            type: string
            description: >-
                Name of the new Connection Handler
      - $ref: '#/components/schemas/ldap-connection-handler-shared'
      required:
      - handlerName
    ldap-connection-handler-response:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: >-
                Name of the Connection Handler
      - $ref: '#/components/schemas/ldap-connection-handler-shared'
      - $ref: '#/components/schemas/meta'
      required:
      - id
    ldap-connection-handler-shared:
      type: object
      properties:
        schemas:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/Enumldap-connection-handlerSchemaUrn'
        listenAddress:
          type: array
          items:
            type: string
          description: >-
              Specifies the address or set of addresses on which this LDAP Connection Handler should listen for connections from LDAP clients.
        listenPort:
          type: integer
          description: >-
              Specifies the port number on which the LDAP Connection Handler will listen for connections from clients.
        useSSL:
          type: boolean
          description: >-
              Indicates whether the LDAP Connection Handler should use SSL.
        allowStartTLS:
          type: boolean
          description: >-
              Indicates whether clients are allowed to use StartTLS.
        sslCertNickname:
          type: string
          description: >-
              Specifies the nickname (also called the alias) of the certificate that the LDAP Connection Handler should use when performing SSL communication.
        keyManagerProvider:
          type: string
          description: >-
              Specifies the name of the key manager that should be used with this LDAP Connection Handler .
        trustManagerProvider:
          type: string
          description: >-
              Specifies the name of the trust manager that should be used with the LDAP Connection Handler .
        allowLDAPV2:
          type: boolean
          description: >-
              Indicates whether connections from LDAPv2 clients are allowed.
        useTCPKeepAlive:
          type: boolean
          description: >-
              Indicates whether the LDAP Connection Handler should use TCP keep-alive.
        sendRejectionNotice:
          type: boolean
          description: >-
              Indicates whether the LDAP Connection Handler should send a notice of disconnection extended response message to the client if a new connection is rejected for some reason.
        failedBindResponseDelay:
          type: string
          description: >-
              Specifies the length of time that the server should delay the response to non-successful bind operations. A value of zero milliseconds indicates that non-successful bind operations should not be delayed.
        maxRequestSize:
          type: string
          description: >-
              Specifies the size of the largest LDAP request message that will be allowed by this LDAP Connection handler.
        maxCancelHandlers:
          type: integer
          description: >-
              Specifies the maximum number of threads that are used to process cancel and abandon requests from clients.
        numAcceptHandlers:
          type: integer
          description: >-
              Specifies the number of threads that are used to accept new client connections, and to perform any initial preparation on those connections that may be needed before the connection can be used to read requests and send responses.
        numRequestHandlers:
          type: integer
          description: >-
              Specifies the number of request handlers that are used to read requests from clients.
        requestHandlerPerConnection:
          type: boolean
          description: >-
              Indicates whether a separate request handler thread should be created for each client connection, which can help avoid starvation of client connections for cases in which one or more clients send large numbers of concurrent asynchronous requests. This should only be used for cases in which a relatively small number of connections will be established at any given time, the connections established will generally be long-lived, and at least one client may send high volumes of asynchronous requests. This property can be used to alleviate possible blocking during long-running TLS negotiation on a single request handler which can result in it being unable to acknowledge further client requests until the TLS negotation completes or times out.
        sslClientAuthPolicy:
          $ref: '#/components/schemas/Enumconnection-handler-sslClientAuthPolicyProp'
        acceptBacklog:
          type: integer
          description: >-
              Specifies the maximum number of pending connection attempts that are allowed to queue up in the accept backlog before the server starts rejecting new connection attempts.
        sslProtocol:
          type: array
          items:
            type: string
          description: >-
              Specifies the names of the TLS protocols that are allowed for use in SSL or StartTLS communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.
        sslCipherSuite:
          type: array
          items:
            type: string
          description: >-
              Specifies the names of the TLS cipher suites that are allowed for use in SSL or StartTLS communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.
        maxBlockedWriteTimeLimit:
          type: string
          description: >-
              Specifies the maximum length of time that attempts to write data to LDAP clients should be allowed to block.
        autoAuthenticateUsingClientCertificate:
          type: boolean
          description: >-
              Indicates whether to attempt to automatically authenticate a client connection that has established a secure communication channel (using either SSL or StartTLS) and presented its own client certificate. Generally, clients should use the SASL EXTERNAL mechanism to authenticate using a client certificate, but some clients may not support that capability and/or may expect automatic authentication.
        closeConnectionsWhenUnavailable:
          type: boolean
          description: >-
              Indicates whether all connections associated with this LDAP Connection Handler should be closed and no new connections accepted when the server has determined that it is "unavailable." This allows clients (or a network load balancer) to route requests to another server.
        closeConnectionsOnExplicitGC:
          type: boolean
          description: >-
              Indicates whether all connections associated with this LDAP Connection Handler should be closed before an explicit garbage collection is performed to allow clients to route requests to another server.
        description:
          type: string
          description: >-
              A description for this Connection Handler
        enabled:
          type: boolean
          description: >-
              Indicates whether the Connection Handler is enabled.
        allowedClient:
          type: array
          items:
            type: string
          description: >-
              Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections to this connection handler.
        deniedClient:
          type: array
          items:
            type: string
          description: >-
              Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish connections to this connection handler.
      required:
      - schemas
      - listenPort
      - enabled
    Enumldap-connection-handlerSchemaUrn:
      type: string
      enum:
      - "urn:pingidentity:schemas:configuration:2.0:connection-handler:ldap"
    add-ldif-connection-handler-request:
      allOf:
      - type: object
        properties:
          handlerName:
            type: string
            description: >-
                Name of the new Connection Handler
      - $ref: '#/components/schemas/ldif-connection-handler-shared'
      required:
      - handlerName
    ldif-connection-handler-response:
      allOf:
      - type: object
        properties:
          id:
            type: string
            description: >-
                Name of the Connection Handler
      - $ref: '#/components/schemas/ldif-connection-handler-shared'
      - $ref: '#/components/schemas/meta'
      required:
      - id
      - ldifDirectory
      - pollInterval
    ldif-connection-handler-shared:
      type: object
      properties:
        schemas:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/Enumldif-connection-handlerSchemaUrn'
        allowedClient:
          type: array
          items:
            type: string
          description: >-
              Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections to this connection handler.
        deniedClient:
          type: array
          items:
            type: string
          description: >-
              Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish connections to this connection handler.
        ldifDirectory:
          type: string
          description: >-
              Specifies the path to the directory in which the LDIF files should be placed.
        pollInterval:
          type: string
          description: >-
              Specifies how frequently the LDIF connection handler should check the LDIF directory to determine whether a new LDIF file has been added.
        description:
          type: string
          description: >-
              A description for this Connection Handler
        enabled:
          type: boolean
          description: >-
              Indicates whether the Connection Handler is enabled.
      required:
      - schemas
      - enabled
    Enumldif-connection-handlerSchemaUrn:
      type: string
      enum:
      - "urn:pingidentity:schemas:configuration:2.0:connection-handler:ldif"
    connection-handlerListResponse:
      type: object
      properties:
        schemas:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: string
        totalResults:
          type: number
        Resources:
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/http-connection-handler-response'
            - $ref: '#/components/schemas/jmx-connection-handler-response'
            - $ref: '#/components/schemas/ldap-connection-handler-response'
            - $ref: '#/components/schemas/ldif-connection-handler-response'
    updateRequest:
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
      required:
      - operations
    Operation:
      type: object
      properties:
        op:
          $ref: '#/components/schemas/EnumOperation'
        path:
          type: string
        value:
          type: string
      required:
      - op
      - path
    EnumOperation:
      type: string
      enum:
      - "add"
      - "remove"
      - "replace"
    meta:
      type: object
      properties:
        meta:
          type: object
          properties:
            resourceType:
              type: string
            location:
              type: string
        "urn:pingidentity:schemas:configuration:messages:2.0":
          type: object
          properties:
            notifications:
              type: array
              items:
                type: string
            requiredActions:
              type: array
              items:
                type: object
                properties:
                  property:
                    type: string
                  type:
                    type: string
                  synopsis:
                    type: string
                required:
                - type
                - synopsis
  securitySchemes:
    basicAuth:
      scheme: Basic
      type: http
