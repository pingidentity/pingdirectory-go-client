openapi: 3.0.3
info:
  description: This is the PingData Configuration API for the Replication Assurance Policy config object
  title: PingData Replication Assurance Policy Config - OpenAPI 3.0
  version: "0.1"
externalDocs:
  description: PingDirectory Configuration API Docs
  url: https://docs.pingidentity.com/bundle/pingdirectory-91/page/ddl1564011495095.html
tags:
- description: Access replication-assurance-policies
  name: replication-assurance-policy
paths:
  /replication-assurance-policies:
    post:
      summary: Add a new Replication Assurance Policy to the config
      operationId: add-replication-assurance-policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-replication-assurance-policy-request'
        description: Create a new Replication Assurance Policy in the config
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replication-assurance-policy-response'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "400":
          description: Bad request
        "409":
          description: The Replication Assurance Policy already exists
      security:
      - basicAuth: []
      tags:
      - replication-assurance-policy
  /replication-assurance-policies/{replication-assurance-policy-name}:
    delete:
      summary: Delete a Replication Assurance Policy
      operationId: delete-replication-assurance-policy
      parameters:
      - description: Name of the Replication Assurance Policy to be deleted
        explode: false
        in: path
        name: replication-assurance-policy-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "404":
          description: The Replication Assurance Policy does not exist
        "409":
          description: The Replication Assurance Policy cannot be deleted
      security:
      - basicAuth: []
      tags:
      - replication-assurance-policy
    get:
      summary: Returns a single Replication Assurance Policy
      operationId: get-replication-assurance-policy
      parameters:
      - description: Name of the Replication Assurance Policy to be read
        explode: false
        in: path
        name: replication-assurance-policy-name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replication-assurance-policy-response'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "404":
          description: The Replication Assurance Policy does not exist
      security:
      - basicAuth: []
      tags:
      - replication-assurance-policy
    patch:
      summary: Update an existing Replication Assurance Policy by name
      operationId: update-replication-assurance-policy
      parameters:
      - description: Name of the Replication Assurance Policy to be updated
        explode: false
        in: path
        name: replication-assurance-policy-name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateRequest'
        description: Update an existing Replication Assurance Policy
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replication-assurance-policy-response'
        "401":
          description: Requestor cannot be authenticated
        "403":
          description: Requestor does not have the required privileges
        "400":
          description: Invalid request
        "404":
          description: The Replication Assurance Policy does not exist
      security:
      - basicAuth: []
      tags:
      - replication-assurance-policy
components:
  schemas:
    add-replication-assurance-policy-request:
      allOf:
      - type: object
        properties:
          policyName:
            description: Name of the new Replication Assurance Policy
            type: string
        required:
        - policyName
      - $ref: '#/components/schemas/replication-assurance-policy-shared'
    replication-assurance-policy-response:
      allOf:
      - type: object
        properties:
          id:
            description: Name of the Replication Assurance Policy
            type: string
        required:
        - id
      - $ref: '#/components/schemas/replication-assurance-policy-shared'
      - $ref: '#/components/schemas/meta'
    replication-assurance-policy-shared:
      type: object
      properties:
        schemas:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/Enumreplication-assurance-policySchemaUrn'
        description:
          type: string
          description: >-
              Description of the Replication Assurance Policy.
        enabled:
          type: boolean
          description: >-
              Indicates whether this Replication Assurance Policy is enabled for use in the server. If a Replication Assurance Policy is disabled, then no new operations will be associated with it.
        evaluationOrderIndex:
          type: integer
          description: >-
              When multiple Replication Assurance Policies are defined, this property determines the evaluation order for finding a Replication Assurance Policy match against an operation. Policies are evaluated based on this index from least to greatest. Values of this property must be unique but not necessarily contiguous.
        localLevel:
          $ref: '#/components/schemas/Enumreplication-assurance-policy-localLevelProp'
        remoteLevel:
          $ref: '#/components/schemas/Enumreplication-assurance-policy-remoteLevelProp'
        timeout:
          type: string
          description: >-
              Specifies the maximum length of time to wait for the replication assurance requirements to be met before timing out and replying to the client.
        connectionCriteria:
          type: string
          description: >-
              Specifies a connection criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.
        requestCriteria:
          type: string
          description: >-
              Specifies a request criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.
      required:
      - enabled
      - evaluationOrderIndex
      - localLevel
      - remoteLevel
      - timeout
    Enumreplication-assurance-policySchemaUrn:
      type: string
      enum:
      - "urn:pingidentity:schemas:configuration:2.0:replication-assurance-policy"
    Enumreplication-assurance-policy-localLevelProp:
      type: string
      enum:
      - "none"
      - "received-any-server"
      - "processed-all-servers"
      description: >-
          Specifies the assurance level used to replicate to local servers. A local server is defined as one with the same value for the location setting in the global configuration.  The local-level must be set to an assurance level at least as strict as the remote-level. In other words, if remote-level is set to "received-any-remote-location" or "received-all-remote-locations", then local-level must be either "received-any-server" or "processed-all-servers". If remote-level is "processed-all-remote-servers", then local-level must be "processed-all-servers".
    Enumreplication-assurance-policy-remoteLevelProp:
      type: string
      enum:
      - "none"
      - "received-any-remote-location"
      - "received-all-remote-locations"
      - "processed-all-remote-servers"
      description: >-
          Specifies the assurance level used to replicate to remote servers. A remote server is defined as one with a different value for the location setting in the global configuration.
    updateRequest:
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
      required:
      - operations
    Operation:
      type: object
      properties:
        op:
          $ref: '#/components/schemas/EnumOperation'
        path:
          type: string
        value:
          type: string
      required:
      - op
      - path
    EnumOperation:
      type: string
      enum:
      - "add"
      - "remove"
      - "replace"
    meta:
      type: object
      properties:
        meta:
          type: object
          properties:
            resourceType:
              type: string
            location:
              type: string
  securitySchemes:
    basicAuth:
      scheme: Basic
      type: http
