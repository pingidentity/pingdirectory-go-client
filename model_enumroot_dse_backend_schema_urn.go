/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumrootDseBackendSchemaUrn the model 'EnumrootDseBackendSchemaUrn'
type EnumrootDseBackendSchemaUrn string

// List of Enumroot-dse-backendSchemaUrn
const (
	ENUMROOTDSEBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ROOT_DSE_BACKEND EnumrootDseBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:root-dse-backend"
)

// All allowed values of EnumrootDseBackendSchemaUrn enum
var AllowedEnumrootDseBackendSchemaUrnEnumValues = []EnumrootDseBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:root-dse-backend",
}

func (v *EnumrootDseBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrootDseBackendSchemaUrn(value)
	for _, existing := range AllowedEnumrootDseBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrootDseBackendSchemaUrn", value)
}

// NewEnumrootDseBackendSchemaUrnFromValue returns a pointer to a valid EnumrootDseBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrootDseBackendSchemaUrnFromValue(v string) (*EnumrootDseBackendSchemaUrn, error) {
	ev := EnumrootDseBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrootDseBackendSchemaUrn: valid values are %v", v, AllowedEnumrootDseBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrootDseBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumrootDseBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumroot-dse-backendSchemaUrn value
func (v EnumrootDseBackendSchemaUrn) Ptr() *EnumrootDseBackendSchemaUrn {
	return &v
}

type NullableEnumrootDseBackendSchemaUrn struct {
	value *EnumrootDseBackendSchemaUrn
	isSet bool
}

func (v NullableEnumrootDseBackendSchemaUrn) Get() *EnumrootDseBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumrootDseBackendSchemaUrn) Set(val *EnumrootDseBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrootDseBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrootDseBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrootDseBackendSchemaUrn(val *EnumrootDseBackendSchemaUrn) *NullableEnumrootDseBackendSchemaUrn {
	return &NullableEnumrootDseBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumrootDseBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrootDseBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

