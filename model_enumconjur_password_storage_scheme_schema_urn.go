/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumconjurPasswordStorageSchemeSchemaUrn the model 'EnumconjurPasswordStorageSchemeSchemaUrn'
type EnumconjurPasswordStorageSchemeSchemaUrn string

// List of Enumconjur-password-storage-schemeSchemaUrn
const (
	ENUMCONJURPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMECONJUR EnumconjurPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:conjur"
)

// All allowed values of EnumconjurPasswordStorageSchemeSchemaUrn enum
var AllowedEnumconjurPasswordStorageSchemeSchemaUrnEnumValues = []EnumconjurPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:conjur",
}

func (v *EnumconjurPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconjurPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumconjurPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconjurPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumconjurPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumconjurPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconjurPasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumconjurPasswordStorageSchemeSchemaUrn, error) {
	ev := EnumconjurPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconjurPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumconjurPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconjurPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconjurPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconjur-password-storage-schemeSchemaUrn value
func (v EnumconjurPasswordStorageSchemeSchemaUrn) Ptr() *EnumconjurPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumconjurPasswordStorageSchemeSchemaUrn struct {
	value *EnumconjurPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumconjurPasswordStorageSchemeSchemaUrn) Get() *EnumconjurPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumconjurPasswordStorageSchemeSchemaUrn) Set(val *EnumconjurPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconjurPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconjurPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconjurPasswordStorageSchemeSchemaUrn(val *EnumconjurPasswordStorageSchemeSchemaUrn) *NullableEnumconjurPasswordStorageSchemeSchemaUrn {
	return &NullableEnumconjurPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconjurPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconjurPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

