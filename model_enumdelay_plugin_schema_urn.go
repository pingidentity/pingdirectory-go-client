/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelayPluginSchemaUrn the model 'EnumdelayPluginSchemaUrn'
type EnumdelayPluginSchemaUrn string

// List of Enumdelay-pluginSchemaUrn
const (
	ENUMDELAYPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINDELAY EnumdelayPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:delay"
)

// All allowed values of EnumdelayPluginSchemaUrn enum
var AllowedEnumdelayPluginSchemaUrnEnumValues = []EnumdelayPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:delay",
}

func (v *EnumdelayPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelayPluginSchemaUrn(value)
	for _, existing := range AllowedEnumdelayPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelayPluginSchemaUrn", value)
}

// NewEnumdelayPluginSchemaUrnFromValue returns a pointer to a valid EnumdelayPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelayPluginSchemaUrnFromValue(v string) (*EnumdelayPluginSchemaUrn, error) {
	ev := EnumdelayPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelayPluginSchemaUrn: valid values are %v", v, AllowedEnumdelayPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelayPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdelayPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelay-pluginSchemaUrn value
func (v EnumdelayPluginSchemaUrn) Ptr() *EnumdelayPluginSchemaUrn {
	return &v
}

type NullableEnumdelayPluginSchemaUrn struct {
	value *EnumdelayPluginSchemaUrn
	isSet bool
}

func (v NullableEnumdelayPluginSchemaUrn) Get() *EnumdelayPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumdelayPluginSchemaUrn) Set(val *EnumdelayPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelayPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelayPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelayPluginSchemaUrn(val *EnumdelayPluginSchemaUrn) *NullableEnumdelayPluginSchemaUrn {
	return &NullableEnumdelayPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdelayPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelayPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
