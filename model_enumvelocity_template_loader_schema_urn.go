/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvelocityTemplateLoaderSchemaUrn the model 'EnumvelocityTemplateLoaderSchemaUrn'
type EnumvelocityTemplateLoaderSchemaUrn string

// List of Enumvelocity-template-loaderSchemaUrn
const (
	ENUMVELOCITYTEMPLATELOADERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VELOCITY_TEMPLATE_LOADER EnumvelocityTemplateLoaderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:velocity-template-loader"
)

// All allowed values of EnumvelocityTemplateLoaderSchemaUrn enum
var AllowedEnumvelocityTemplateLoaderSchemaUrnEnumValues = []EnumvelocityTemplateLoaderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:velocity-template-loader",
}

func (v *EnumvelocityTemplateLoaderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvelocityTemplateLoaderSchemaUrn(value)
	for _, existing := range AllowedEnumvelocityTemplateLoaderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvelocityTemplateLoaderSchemaUrn", value)
}

// NewEnumvelocityTemplateLoaderSchemaUrnFromValue returns a pointer to a valid EnumvelocityTemplateLoaderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvelocityTemplateLoaderSchemaUrnFromValue(v string) (*EnumvelocityTemplateLoaderSchemaUrn, error) {
	ev := EnumvelocityTemplateLoaderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvelocityTemplateLoaderSchemaUrn: valid values are %v", v, AllowedEnumvelocityTemplateLoaderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvelocityTemplateLoaderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvelocityTemplateLoaderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvelocity-template-loaderSchemaUrn value
func (v EnumvelocityTemplateLoaderSchemaUrn) Ptr() *EnumvelocityTemplateLoaderSchemaUrn {
	return &v
}

type NullableEnumvelocityTemplateLoaderSchemaUrn struct {
	value *EnumvelocityTemplateLoaderSchemaUrn
	isSet bool
}

func (v NullableEnumvelocityTemplateLoaderSchemaUrn) Get() *EnumvelocityTemplateLoaderSchemaUrn {
	return v.value
}

func (v *NullableEnumvelocityTemplateLoaderSchemaUrn) Set(val *EnumvelocityTemplateLoaderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvelocityTemplateLoaderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvelocityTemplateLoaderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvelocityTemplateLoaderSchemaUrn(val *EnumvelocityTemplateLoaderSchemaUrn) *NullableEnumvelocityTemplateLoaderSchemaUrn {
	return &NullableEnumvelocityTemplateLoaderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvelocityTemplateLoaderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvelocityTemplateLoaderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
