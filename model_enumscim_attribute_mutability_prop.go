/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumscimAttributeMutabilityProp Specifies the circumstances under which the values of the attribute can be written.
type EnumscimAttributeMutabilityProp string

// List of Enumscim-attribute-mutabilityProp
const (
	ENUMSCIMATTRIBUTEMUTABILITYPROP_READ_ONLY  EnumscimAttributeMutabilityProp = "read-only"
	ENUMSCIMATTRIBUTEMUTABILITYPROP_READ_WRITE EnumscimAttributeMutabilityProp = "read-write"
	ENUMSCIMATTRIBUTEMUTABILITYPROP_IMMUTABLE  EnumscimAttributeMutabilityProp = "immutable"
	ENUMSCIMATTRIBUTEMUTABILITYPROP_WRITE_ONLY EnumscimAttributeMutabilityProp = "write-only"
)

// All allowed values of EnumscimAttributeMutabilityProp enum
var AllowedEnumscimAttributeMutabilityPropEnumValues = []EnumscimAttributeMutabilityProp{
	"read-only",
	"read-write",
	"immutable",
	"write-only",
}

func (v *EnumscimAttributeMutabilityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumscimAttributeMutabilityProp(value)
	for _, existing := range AllowedEnumscimAttributeMutabilityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumscimAttributeMutabilityProp", value)
}

// NewEnumscimAttributeMutabilityPropFromValue returns a pointer to a valid EnumscimAttributeMutabilityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscimAttributeMutabilityPropFromValue(v string) (*EnumscimAttributeMutabilityProp, error) {
	ev := EnumscimAttributeMutabilityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumscimAttributeMutabilityProp: valid values are %v", v, AllowedEnumscimAttributeMutabilityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumscimAttributeMutabilityProp) IsValid() bool {
	for _, existing := range AllowedEnumscimAttributeMutabilityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim-attribute-mutabilityProp value
func (v EnumscimAttributeMutabilityProp) Ptr() *EnumscimAttributeMutabilityProp {
	return &v
}

type NullableEnumscimAttributeMutabilityProp struct {
	value *EnumscimAttributeMutabilityProp
	isSet bool
}

func (v NullableEnumscimAttributeMutabilityProp) Get() *EnumscimAttributeMutabilityProp {
	return v.value
}

func (v *NullableEnumscimAttributeMutabilityProp) Set(val *EnumscimAttributeMutabilityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscimAttributeMutabilityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscimAttributeMutabilityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscimAttributeMutabilityProp(val *EnumscimAttributeMutabilityProp) *NullableEnumscimAttributeMutabilityProp {
	return &NullableEnumscimAttributeMutabilityProp{value: val, isSet: true}
}

func (v NullableEnumscimAttributeMutabilityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscimAttributeMutabilityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
