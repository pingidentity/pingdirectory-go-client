/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationStateDetailVirtualAttributeSchemaUrn the model 'EnumreplicationStateDetailVirtualAttributeSchemaUrn'
type EnumreplicationStateDetailVirtualAttributeSchemaUrn string

// List of Enumreplication-state-detail-virtual-attributeSchemaUrn
const (
	ENUMREPLICATIONSTATEDETAILVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTEREPLICATION_STATE_DETAIL EnumreplicationStateDetailVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:replication-state-detail"
)

// All allowed values of EnumreplicationStateDetailVirtualAttributeSchemaUrn enum
var AllowedEnumreplicationStateDetailVirtualAttributeSchemaUrnEnumValues = []EnumreplicationStateDetailVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:replication-state-detail",
}

func (v *EnumreplicationStateDetailVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationStateDetailVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumreplicationStateDetailVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationStateDetailVirtualAttributeSchemaUrn", value)
}

// NewEnumreplicationStateDetailVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumreplicationStateDetailVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationStateDetailVirtualAttributeSchemaUrnFromValue(v string) (*EnumreplicationStateDetailVirtualAttributeSchemaUrn, error) {
	ev := EnumreplicationStateDetailVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationStateDetailVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumreplicationStateDetailVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationStateDetailVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumreplicationStateDetailVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-state-detail-virtual-attributeSchemaUrn value
func (v EnumreplicationStateDetailVirtualAttributeSchemaUrn) Ptr() *EnumreplicationStateDetailVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn struct {
	value *EnumreplicationStateDetailVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn) Get() *EnumreplicationStateDetailVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn) Set(val *EnumreplicationStateDetailVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationStateDetailVirtualAttributeSchemaUrn(val *EnumreplicationStateDetailVirtualAttributeSchemaUrn) *NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn {
	return &NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationStateDetailVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

