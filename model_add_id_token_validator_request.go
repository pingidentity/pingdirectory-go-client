/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddIdTokenValidatorRequest - struct for AddIdTokenValidatorRequest
type AddIdTokenValidatorRequest struct {
	AddOpenidConnectIdTokenValidatorRequest *AddOpenidConnectIdTokenValidatorRequest
	AddPingOneIdTokenValidatorRequest       *AddPingOneIdTokenValidatorRequest
}

// AddOpenidConnectIdTokenValidatorRequestAsAddIdTokenValidatorRequest is a convenience function that returns AddOpenidConnectIdTokenValidatorRequest wrapped in AddIdTokenValidatorRequest
func AddOpenidConnectIdTokenValidatorRequestAsAddIdTokenValidatorRequest(v *AddOpenidConnectIdTokenValidatorRequest) AddIdTokenValidatorRequest {
	return AddIdTokenValidatorRequest{
		AddOpenidConnectIdTokenValidatorRequest: v,
	}
}

// AddPingOneIdTokenValidatorRequestAsAddIdTokenValidatorRequest is a convenience function that returns AddPingOneIdTokenValidatorRequest wrapped in AddIdTokenValidatorRequest
func AddPingOneIdTokenValidatorRequestAsAddIdTokenValidatorRequest(v *AddPingOneIdTokenValidatorRequest) AddIdTokenValidatorRequest {
	return AddIdTokenValidatorRequest{
		AddPingOneIdTokenValidatorRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddIdTokenValidatorRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddOpenidConnectIdTokenValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddOpenidConnectIdTokenValidatorRequest)
	if err == nil {
		jsonAddOpenidConnectIdTokenValidatorRequest, _ := json.Marshal(dst.AddOpenidConnectIdTokenValidatorRequest)
		if string(jsonAddOpenidConnectIdTokenValidatorRequest) == "{}" { // empty struct
			dst.AddOpenidConnectIdTokenValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddOpenidConnectIdTokenValidatorRequest = nil
	}

	// try to unmarshal data into AddPingOneIdTokenValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddPingOneIdTokenValidatorRequest)
	if err == nil {
		jsonAddPingOneIdTokenValidatorRequest, _ := json.Marshal(dst.AddPingOneIdTokenValidatorRequest)
		if string(jsonAddPingOneIdTokenValidatorRequest) == "{}" { // empty struct
			dst.AddPingOneIdTokenValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddPingOneIdTokenValidatorRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddOpenidConnectIdTokenValidatorRequest = nil
		dst.AddPingOneIdTokenValidatorRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddIdTokenValidatorRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddIdTokenValidatorRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddIdTokenValidatorRequest) MarshalJSON() ([]byte, error) {
	if src.AddOpenidConnectIdTokenValidatorRequest != nil {
		return json.Marshal(&src.AddOpenidConnectIdTokenValidatorRequest)
	}

	if src.AddPingOneIdTokenValidatorRequest != nil {
		return json.Marshal(&src.AddPingOneIdTokenValidatorRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddIdTokenValidatorRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddOpenidConnectIdTokenValidatorRequest != nil {
		return obj.AddOpenidConnectIdTokenValidatorRequest
	}

	if obj.AddPingOneIdTokenValidatorRequest != nil {
		return obj.AddPingOneIdTokenValidatorRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddIdTokenValidatorRequest struct {
	value *AddIdTokenValidatorRequest
	isSet bool
}

func (v NullableAddIdTokenValidatorRequest) Get() *AddIdTokenValidatorRequest {
	return v.value
}

func (v *NullableAddIdTokenValidatorRequest) Set(val *AddIdTokenValidatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIdTokenValidatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIdTokenValidatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIdTokenValidatorRequest(val *AddIdTokenValidatorRequest) *NullableAddIdTokenValidatorRequest {
	return &NullableAddIdTokenValidatorRequest{value: val, isSet: true}
}

func (v NullableAddIdTokenValidatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIdTokenValidatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
