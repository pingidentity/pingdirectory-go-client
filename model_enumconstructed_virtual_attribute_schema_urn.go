/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumconstructedVirtualAttributeSchemaUrn the model 'EnumconstructedVirtualAttributeSchemaUrn'
type EnumconstructedVirtualAttributeSchemaUrn string

// List of Enumconstructed-virtual-attributeSchemaUrn
const (
	ENUMCONSTRUCTEDVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTECONSTRUCTED EnumconstructedVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:constructed"
)

// All allowed values of EnumconstructedVirtualAttributeSchemaUrn enum
var AllowedEnumconstructedVirtualAttributeSchemaUrnEnumValues = []EnumconstructedVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:constructed",
}

func (v *EnumconstructedVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconstructedVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumconstructedVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconstructedVirtualAttributeSchemaUrn", value)
}

// NewEnumconstructedVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumconstructedVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconstructedVirtualAttributeSchemaUrnFromValue(v string) (*EnumconstructedVirtualAttributeSchemaUrn, error) {
	ev := EnumconstructedVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconstructedVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumconstructedVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconstructedVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconstructedVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconstructed-virtual-attributeSchemaUrn value
func (v EnumconstructedVirtualAttributeSchemaUrn) Ptr() *EnumconstructedVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumconstructedVirtualAttributeSchemaUrn struct {
	value *EnumconstructedVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumconstructedVirtualAttributeSchemaUrn) Get() *EnumconstructedVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumconstructedVirtualAttributeSchemaUrn) Set(val *EnumconstructedVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconstructedVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconstructedVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconstructedVirtualAttributeSchemaUrn(val *EnumconstructedVirtualAttributeSchemaUrn) *NullableEnumconstructedVirtualAttributeSchemaUrn {
	return &NullableEnumconstructedVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconstructedVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconstructedVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
