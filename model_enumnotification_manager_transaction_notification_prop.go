/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumnotificationManagerTransactionNotificationProp Specifies how the operations in an external transaction (e.g. a multi-update extended operation or an LDAP transaction) are notified for this Notification Manager.
type EnumnotificationManagerTransactionNotificationProp string

// List of Enumnotification-manager-transactionNotificationProp
const (
	INDIVIDUAL EnumnotificationManagerTransactionNotificationProp = "individual"
	MATCHED_OPERATIONS EnumnotificationManagerTransactionNotificationProp = "matched-operations"
	ALL_OPERATIONS EnumnotificationManagerTransactionNotificationProp = "all-operations"
)

// All allowed values of EnumnotificationManagerTransactionNotificationProp enum
var AllowedEnumnotificationManagerTransactionNotificationPropEnumValues = []EnumnotificationManagerTransactionNotificationProp{
	"individual",
	"matched-operations",
	"all-operations",
}

func (v *EnumnotificationManagerTransactionNotificationProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumnotificationManagerTransactionNotificationProp(value)
	for _, existing := range AllowedEnumnotificationManagerTransactionNotificationPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumnotificationManagerTransactionNotificationProp", value)
}

// NewEnumnotificationManagerTransactionNotificationPropFromValue returns a pointer to a valid EnumnotificationManagerTransactionNotificationProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumnotificationManagerTransactionNotificationPropFromValue(v string) (*EnumnotificationManagerTransactionNotificationProp, error) {
	ev := EnumnotificationManagerTransactionNotificationProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumnotificationManagerTransactionNotificationProp: valid values are %v", v, AllowedEnumnotificationManagerTransactionNotificationPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumnotificationManagerTransactionNotificationProp) IsValid() bool {
	for _, existing := range AllowedEnumnotificationManagerTransactionNotificationPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumnotification-manager-transactionNotificationProp value
func (v EnumnotificationManagerTransactionNotificationProp) Ptr() *EnumnotificationManagerTransactionNotificationProp {
	return &v
}

type NullableEnumnotificationManagerTransactionNotificationProp struct {
	value *EnumnotificationManagerTransactionNotificationProp
	isSet bool
}

func (v NullableEnumnotificationManagerTransactionNotificationProp) Get() *EnumnotificationManagerTransactionNotificationProp {
	return v.value
}

func (v *NullableEnumnotificationManagerTransactionNotificationProp) Set(val *EnumnotificationManagerTransactionNotificationProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumnotificationManagerTransactionNotificationProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumnotificationManagerTransactionNotificationProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumnotificationManagerTransactionNotificationProp(val *EnumnotificationManagerTransactionNotificationProp) *NullableEnumnotificationManagerTransactionNotificationProp {
	return &NullableEnumnotificationManagerTransactionNotificationProp{value: val, isSet: true}
}

func (v NullableEnumnotificationManagerTransactionNotificationProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumnotificationManagerTransactionNotificationProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

