/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn the model 'EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn'
type EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn string

// List of Enumfile-based-json-http-operation-log-publisherSchemaUrn
const (
	ENUMFILEBASEDJSONHTTPOPERATIONLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERFILE_BASED_JSON_HTTP_OPERATION EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:file-based-json-http-operation"
)

// All allowed values of EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn enum
var AllowedEnumfileBasedJsonHttpOperationLogPublisherSchemaUrnEnumValues = []EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:file-based-json-http-operation",
}

func (v *EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumfileBasedJsonHttpOperationLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn", value)
}

// NewEnumfileBasedJsonHttpOperationLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumfileBasedJsonHttpOperationLogPublisherSchemaUrnFromValue(v string) (*EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn, error) {
	ev := EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumfileBasedJsonHttpOperationLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumfileBasedJsonHttpOperationLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumfile-based-json-http-operation-log-publisherSchemaUrn value
func (v EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) Ptr() *EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn {
	return &v
}

type NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn struct {
	value *EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) Get() *EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) Set(val *EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn(val *EnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) *NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn {
	return &NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumfileBasedJsonHttpOperationLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
