/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumazureKeyVaultPassphraseProviderSchemaUrn the model 'EnumazureKeyVaultPassphraseProviderSchemaUrn'
type EnumazureKeyVaultPassphraseProviderSchemaUrn string

// List of Enumazure-key-vault-passphrase-providerSchemaUrn
const (
	ENUMAZUREKEYVAULTPASSPHRASEPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSPHRASE_PROVIDERAZURE_KEY_VAULT EnumazureKeyVaultPassphraseProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:passphrase-provider:azure-key-vault"
)

// All allowed values of EnumazureKeyVaultPassphraseProviderSchemaUrn enum
var AllowedEnumazureKeyVaultPassphraseProviderSchemaUrnEnumValues = []EnumazureKeyVaultPassphraseProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:passphrase-provider:azure-key-vault",
}

func (v *EnumazureKeyVaultPassphraseProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumazureKeyVaultPassphraseProviderSchemaUrn(value)
	for _, existing := range AllowedEnumazureKeyVaultPassphraseProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumazureKeyVaultPassphraseProviderSchemaUrn", value)
}

// NewEnumazureKeyVaultPassphraseProviderSchemaUrnFromValue returns a pointer to a valid EnumazureKeyVaultPassphraseProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumazureKeyVaultPassphraseProviderSchemaUrnFromValue(v string) (*EnumazureKeyVaultPassphraseProviderSchemaUrn, error) {
	ev := EnumazureKeyVaultPassphraseProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumazureKeyVaultPassphraseProviderSchemaUrn: valid values are %v", v, AllowedEnumazureKeyVaultPassphraseProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumazureKeyVaultPassphraseProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumazureKeyVaultPassphraseProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumazure-key-vault-passphrase-providerSchemaUrn value
func (v EnumazureKeyVaultPassphraseProviderSchemaUrn) Ptr() *EnumazureKeyVaultPassphraseProviderSchemaUrn {
	return &v
}

type NullableEnumazureKeyVaultPassphraseProviderSchemaUrn struct {
	value *EnumazureKeyVaultPassphraseProviderSchemaUrn
	isSet bool
}

func (v NullableEnumazureKeyVaultPassphraseProviderSchemaUrn) Get() *EnumazureKeyVaultPassphraseProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumazureKeyVaultPassphraseProviderSchemaUrn) Set(val *EnumazureKeyVaultPassphraseProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumazureKeyVaultPassphraseProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumazureKeyVaultPassphraseProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumazureKeyVaultPassphraseProviderSchemaUrn(val *EnumazureKeyVaultPassphraseProviderSchemaUrn) *NullableEnumazureKeyVaultPassphraseProviderSchemaUrn {
	return &NullableEnumazureKeyVaultPassphraseProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumazureKeyVaultPassphraseProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumazureKeyVaultPassphraseProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

