/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumalertHandlerEnabledAlertSeverityProp Specifies the alert severities for which this alert handler should be used. If no values are provided, then this alert handler will be enabled for alerts with any severity.
type EnumalertHandlerEnabledAlertSeverityProp string

// List of Enumalert-handler-enabledAlertSeverityProp
const (
	ENUMALERTHANDLERENABLEDALERTSEVERITYPROP_INFO EnumalertHandlerEnabledAlertSeverityProp = "info"
	ENUMALERTHANDLERENABLEDALERTSEVERITYPROP_WARNING EnumalertHandlerEnabledAlertSeverityProp = "warning"
	ENUMALERTHANDLERENABLEDALERTSEVERITYPROP_ERROR EnumalertHandlerEnabledAlertSeverityProp = "error"
	ENUMALERTHANDLERENABLEDALERTSEVERITYPROP_FATAL EnumalertHandlerEnabledAlertSeverityProp = "fatal"
)

// All allowed values of EnumalertHandlerEnabledAlertSeverityProp enum
var AllowedEnumalertHandlerEnabledAlertSeverityPropEnumValues = []EnumalertHandlerEnabledAlertSeverityProp{
	"info",
	"warning",
	"error",
	"fatal",
}

func (v *EnumalertHandlerEnabledAlertSeverityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumalertHandlerEnabledAlertSeverityProp(value)
	for _, existing := range AllowedEnumalertHandlerEnabledAlertSeverityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumalertHandlerEnabledAlertSeverityProp", value)
}

// NewEnumalertHandlerEnabledAlertSeverityPropFromValue returns a pointer to a valid EnumalertHandlerEnabledAlertSeverityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumalertHandlerEnabledAlertSeverityPropFromValue(v string) (*EnumalertHandlerEnabledAlertSeverityProp, error) {
	ev := EnumalertHandlerEnabledAlertSeverityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumalertHandlerEnabledAlertSeverityProp: valid values are %v", v, AllowedEnumalertHandlerEnabledAlertSeverityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumalertHandlerEnabledAlertSeverityProp) IsValid() bool {
	for _, existing := range AllowedEnumalertHandlerEnabledAlertSeverityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumalert-handler-enabledAlertSeverityProp value
func (v EnumalertHandlerEnabledAlertSeverityProp) Ptr() *EnumalertHandlerEnabledAlertSeverityProp {
	return &v
}

type NullableEnumalertHandlerEnabledAlertSeverityProp struct {
	value *EnumalertHandlerEnabledAlertSeverityProp
	isSet bool
}

func (v NullableEnumalertHandlerEnabledAlertSeverityProp) Get() *EnumalertHandlerEnabledAlertSeverityProp {
	return v.value
}

func (v *NullableEnumalertHandlerEnabledAlertSeverityProp) Set(val *EnumalertHandlerEnabledAlertSeverityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumalertHandlerEnabledAlertSeverityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumalertHandlerEnabledAlertSeverityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumalertHandlerEnabledAlertSeverityProp(val *EnumalertHandlerEnabledAlertSeverityProp) *NullableEnumalertHandlerEnabledAlertSeverityProp {
	return &NullableEnumalertHandlerEnabledAlertSeverityProp{value: val, isSet: true}
}

func (v NullableEnumalertHandlerEnabledAlertSeverityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumalertHandlerEnabledAlertSeverityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

