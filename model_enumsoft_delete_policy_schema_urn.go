/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsoftDeletePolicySchemaUrn the model 'EnumsoftDeletePolicySchemaUrn'
type EnumsoftDeletePolicySchemaUrn string

// List of Enumsoft-delete-policySchemaUrn
const (
	ENUMSOFTDELETEPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SOFT_DELETE_POLICY EnumsoftDeletePolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:soft-delete-policy"
)

// All allowed values of EnumsoftDeletePolicySchemaUrn enum
var AllowedEnumsoftDeletePolicySchemaUrnEnumValues = []EnumsoftDeletePolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:soft-delete-policy",
}

func (v *EnumsoftDeletePolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsoftDeletePolicySchemaUrn(value)
	for _, existing := range AllowedEnumsoftDeletePolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsoftDeletePolicySchemaUrn", value)
}

// NewEnumsoftDeletePolicySchemaUrnFromValue returns a pointer to a valid EnumsoftDeletePolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsoftDeletePolicySchemaUrnFromValue(v string) (*EnumsoftDeletePolicySchemaUrn, error) {
	ev := EnumsoftDeletePolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsoftDeletePolicySchemaUrn: valid values are %v", v, AllowedEnumsoftDeletePolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsoftDeletePolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsoftDeletePolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsoft-delete-policySchemaUrn value
func (v EnumsoftDeletePolicySchemaUrn) Ptr() *EnumsoftDeletePolicySchemaUrn {
	return &v
}

type NullableEnumsoftDeletePolicySchemaUrn struct {
	value *EnumsoftDeletePolicySchemaUrn
	isSet bool
}

func (v NullableEnumsoftDeletePolicySchemaUrn) Get() *EnumsoftDeletePolicySchemaUrn {
	return v.value
}

func (v *NullableEnumsoftDeletePolicySchemaUrn) Set(val *EnumsoftDeletePolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsoftDeletePolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsoftDeletePolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsoftDeletePolicySchemaUrn(val *EnumsoftDeletePolicySchemaUrn) *NullableEnumsoftDeletePolicySchemaUrn {
	return &NullableEnumsoftDeletePolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsoftDeletePolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsoftDeletePolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
