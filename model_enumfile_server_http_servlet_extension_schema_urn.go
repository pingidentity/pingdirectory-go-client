/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumfileServerHttpServletExtensionSchemaUrn the model 'EnumfileServerHttpServletExtensionSchemaUrn'
type EnumfileServerHttpServletExtensionSchemaUrn string

// List of Enumfile-server-http-servlet-extensionSchemaUrn
const (
	ENUMFILESERVERHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONFILE_SERVER EnumfileServerHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:file-server"
)

// All allowed values of EnumfileServerHttpServletExtensionSchemaUrn enum
var AllowedEnumfileServerHttpServletExtensionSchemaUrnEnumValues = []EnumfileServerHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:file-server",
}

func (v *EnumfileServerHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumfileServerHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumfileServerHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumfileServerHttpServletExtensionSchemaUrn", value)
}

// NewEnumfileServerHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumfileServerHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumfileServerHttpServletExtensionSchemaUrnFromValue(v string) (*EnumfileServerHttpServletExtensionSchemaUrn, error) {
	ev := EnumfileServerHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumfileServerHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumfileServerHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumfileServerHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumfileServerHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumfile-server-http-servlet-extensionSchemaUrn value
func (v EnumfileServerHttpServletExtensionSchemaUrn) Ptr() *EnumfileServerHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumfileServerHttpServletExtensionSchemaUrn struct {
	value *EnumfileServerHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumfileServerHttpServletExtensionSchemaUrn) Get() *EnumfileServerHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumfileServerHttpServletExtensionSchemaUrn) Set(val *EnumfileServerHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumfileServerHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumfileServerHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumfileServerHttpServletExtensionSchemaUrn(val *EnumfileServerHttpServletExtensionSchemaUrn) *NullableEnumfileServerHttpServletExtensionSchemaUrn {
	return &NullableEnumfileServerHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumfileServerHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumfileServerHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

