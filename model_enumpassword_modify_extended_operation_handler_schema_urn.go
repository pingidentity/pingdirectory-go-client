/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordModifyExtendedOperationHandlerSchemaUrn the model 'EnumpasswordModifyExtendedOperationHandlerSchemaUrn'
type EnumpasswordModifyExtendedOperationHandlerSchemaUrn string

// List of Enumpassword-modify-extended-operation-handlerSchemaUrn
const (
	ENUMPASSWORDMODIFYEXTENDEDOPERATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERPASSWORD_MODIFY EnumpasswordModifyExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:password-modify"
)

// All allowed values of EnumpasswordModifyExtendedOperationHandlerSchemaUrn enum
var AllowedEnumpasswordModifyExtendedOperationHandlerSchemaUrnEnumValues = []EnumpasswordModifyExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:password-modify",
}

func (v *EnumpasswordModifyExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordModifyExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumpasswordModifyExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordModifyExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumpasswordModifyExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumpasswordModifyExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordModifyExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumpasswordModifyExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumpasswordModifyExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordModifyExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumpasswordModifyExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordModifyExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpasswordModifyExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-modify-extended-operation-handlerSchemaUrn value
func (v EnumpasswordModifyExtendedOperationHandlerSchemaUrn) Ptr() *EnumpasswordModifyExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn struct {
	value *EnumpasswordModifyExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn) Get() *EnumpasswordModifyExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn) Set(val *EnumpasswordModifyExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn(val *EnumpasswordModifyExtendedOperationHandlerSchemaUrn) *NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn {
	return &NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordModifyExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
