/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdnMapSchemaUrn the model 'EnumdnMapSchemaUrn'
type EnumdnMapSchemaUrn string

// List of Enumdn-mapSchemaUrn
const (
	ENUMDNMAPSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DN_MAP EnumdnMapSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:dn-map"
)

// All allowed values of EnumdnMapSchemaUrn enum
var AllowedEnumdnMapSchemaUrnEnumValues = []EnumdnMapSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:dn-map",
}

func (v *EnumdnMapSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdnMapSchemaUrn(value)
	for _, existing := range AllowedEnumdnMapSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdnMapSchemaUrn", value)
}

// NewEnumdnMapSchemaUrnFromValue returns a pointer to a valid EnumdnMapSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdnMapSchemaUrnFromValue(v string) (*EnumdnMapSchemaUrn, error) {
	ev := EnumdnMapSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdnMapSchemaUrn: valid values are %v", v, AllowedEnumdnMapSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdnMapSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdnMapSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdn-mapSchemaUrn value
func (v EnumdnMapSchemaUrn) Ptr() *EnumdnMapSchemaUrn {
	return &v
}

type NullableEnumdnMapSchemaUrn struct {
	value *EnumdnMapSchemaUrn
	isSet bool
}

func (v NullableEnumdnMapSchemaUrn) Get() *EnumdnMapSchemaUrn {
	return v.value
}

func (v *NullableEnumdnMapSchemaUrn) Set(val *EnumdnMapSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdnMapSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdnMapSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdnMapSchemaUrn(val *EnumdnMapSchemaUrn) *NullableEnumdnMapSchemaUrn {
	return &NullableEnumdnMapSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdnMapSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdnMapSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
