/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginIgnoredPasswordPolicyStateErrorConditionProp A set of password policy state error conditions that should not be enforced when authentication succeeds when attempted in the PingOne service. This option can only be used if try-local-bind is true.
type EnumpluginIgnoredPasswordPolicyStateErrorConditionProp string

// List of Enumplugin-ignoredPasswordPolicyStateErrorConditionProp
const (
	ENUMPLUGINIGNOREDPASSWORDPOLICYSTATEERRORCONDITIONPROP_TEMPORARILY_LOCKED_DUE_TO_FAILURES EnumpluginIgnoredPasswordPolicyStateErrorConditionProp = "temporarily-locked-due-to-failures"
	ENUMPLUGINIGNOREDPASSWORDPOLICYSTATEERRORCONDITIONPROP_PERMANENTLY_LOCKED_DUE_TO_FAILURES EnumpluginIgnoredPasswordPolicyStateErrorConditionProp = "permanently-locked-due-to-failures"
	ENUMPLUGINIGNOREDPASSWORDPOLICYSTATEERRORCONDITIONPROP_LOCKED_DUE_TO_IDLE_INTERVAL        EnumpluginIgnoredPasswordPolicyStateErrorConditionProp = "locked-due-to-idle-interval"
	ENUMPLUGINIGNOREDPASSWORDPOLICYSTATEERRORCONDITIONPROP_LOCKED_DUE_TO_MAXIMUM_RESET_AGE    EnumpluginIgnoredPasswordPolicyStateErrorConditionProp = "locked-due-to-maximum-reset-age"
	ENUMPLUGINIGNOREDPASSWORDPOLICYSTATEERRORCONDITIONPROP_LOCKED_DUE_TO_VALIDATION_FAILURE   EnumpluginIgnoredPasswordPolicyStateErrorConditionProp = "locked-due-to-validation-failure"
	ENUMPLUGINIGNOREDPASSWORDPOLICYSTATEERRORCONDITIONPROP_PASSWORD_IS_EXPIRED                EnumpluginIgnoredPasswordPolicyStateErrorConditionProp = "password-is-expired"
)

// All allowed values of EnumpluginIgnoredPasswordPolicyStateErrorConditionProp enum
var AllowedEnumpluginIgnoredPasswordPolicyStateErrorConditionPropEnumValues = []EnumpluginIgnoredPasswordPolicyStateErrorConditionProp{
	"temporarily-locked-due-to-failures",
	"permanently-locked-due-to-failures",
	"locked-due-to-idle-interval",
	"locked-due-to-maximum-reset-age",
	"locked-due-to-validation-failure",
	"password-is-expired",
}

func (v *EnumpluginIgnoredPasswordPolicyStateErrorConditionProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginIgnoredPasswordPolicyStateErrorConditionProp(value)
	for _, existing := range AllowedEnumpluginIgnoredPasswordPolicyStateErrorConditionPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginIgnoredPasswordPolicyStateErrorConditionProp", value)
}

// NewEnumpluginIgnoredPasswordPolicyStateErrorConditionPropFromValue returns a pointer to a valid EnumpluginIgnoredPasswordPolicyStateErrorConditionProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginIgnoredPasswordPolicyStateErrorConditionPropFromValue(v string) (*EnumpluginIgnoredPasswordPolicyStateErrorConditionProp, error) {
	ev := EnumpluginIgnoredPasswordPolicyStateErrorConditionProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginIgnoredPasswordPolicyStateErrorConditionProp: valid values are %v", v, AllowedEnumpluginIgnoredPasswordPolicyStateErrorConditionPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginIgnoredPasswordPolicyStateErrorConditionProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginIgnoredPasswordPolicyStateErrorConditionPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-ignoredPasswordPolicyStateErrorConditionProp value
func (v EnumpluginIgnoredPasswordPolicyStateErrorConditionProp) Ptr() *EnumpluginIgnoredPasswordPolicyStateErrorConditionProp {
	return &v
}

type NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp struct {
	value *EnumpluginIgnoredPasswordPolicyStateErrorConditionProp
	isSet bool
}

func (v NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp) Get() *EnumpluginIgnoredPasswordPolicyStateErrorConditionProp {
	return v.value
}

func (v *NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp) Set(val *EnumpluginIgnoredPasswordPolicyStateErrorConditionProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp(val *EnumpluginIgnoredPasswordPolicyStateErrorConditionProp) *NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp {
	return &NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp{value: val, isSet: true}
}

func (v NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginIgnoredPasswordPolicyStateErrorConditionProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
