/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddLogFieldMapping200Response - struct for AddLogFieldMapping200Response
type AddLogFieldMapping200Response struct {
	AccessLogFieldMappingResponse *AccessLogFieldMappingResponse
	ErrorLogFieldMappingResponse  *ErrorLogFieldMappingResponse
}

// AccessLogFieldMappingResponseAsAddLogFieldMapping200Response is a convenience function that returns AccessLogFieldMappingResponse wrapped in AddLogFieldMapping200Response
func AccessLogFieldMappingResponseAsAddLogFieldMapping200Response(v *AccessLogFieldMappingResponse) AddLogFieldMapping200Response {
	return AddLogFieldMapping200Response{
		AccessLogFieldMappingResponse: v,
	}
}

// ErrorLogFieldMappingResponseAsAddLogFieldMapping200Response is a convenience function that returns ErrorLogFieldMappingResponse wrapped in AddLogFieldMapping200Response
func ErrorLogFieldMappingResponseAsAddLogFieldMapping200Response(v *ErrorLogFieldMappingResponse) AddLogFieldMapping200Response {
	return AddLogFieldMapping200Response{
		ErrorLogFieldMappingResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogFieldMapping200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessLogFieldMappingResponse
	err = newStrictDecoder(data).Decode(&dst.AccessLogFieldMappingResponse)
	if err == nil {
		jsonAccessLogFieldMappingResponse, _ := json.Marshal(dst.AccessLogFieldMappingResponse)
		if string(jsonAccessLogFieldMappingResponse) == "{}" { // empty struct
			dst.AccessLogFieldMappingResponse = nil
		} else {
			match++
		}
	} else {
		dst.AccessLogFieldMappingResponse = nil
	}

	// try to unmarshal data into ErrorLogFieldMappingResponse
	err = newStrictDecoder(data).Decode(&dst.ErrorLogFieldMappingResponse)
	if err == nil {
		jsonErrorLogFieldMappingResponse, _ := json.Marshal(dst.ErrorLogFieldMappingResponse)
		if string(jsonErrorLogFieldMappingResponse) == "{}" { // empty struct
			dst.ErrorLogFieldMappingResponse = nil
		} else {
			match++
		}
	} else {
		dst.ErrorLogFieldMappingResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessLogFieldMappingResponse = nil
		dst.ErrorLogFieldMappingResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogFieldMapping200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogFieldMapping200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogFieldMapping200Response) MarshalJSON() ([]byte, error) {
	if src.AccessLogFieldMappingResponse != nil {
		return json.Marshal(&src.AccessLogFieldMappingResponse)
	}

	if src.ErrorLogFieldMappingResponse != nil {
		return json.Marshal(&src.ErrorLogFieldMappingResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogFieldMapping200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AccessLogFieldMappingResponse != nil {
		return obj.AccessLogFieldMappingResponse
	}

	if obj.ErrorLogFieldMappingResponse != nil {
		return obj.ErrorLogFieldMappingResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddLogFieldMapping200Response struct {
	value *AddLogFieldMapping200Response
	isSet bool
}

func (v NullableAddLogFieldMapping200Response) Get() *AddLogFieldMapping200Response {
	return v.value
}

func (v *NullableAddLogFieldMapping200Response) Set(val *AddLogFieldMapping200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogFieldMapping200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogFieldMapping200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogFieldMapping200Response(val *AddLogFieldMapping200Response) *NullableAddLogFieldMapping200Response {
	return &NullableAddLogFieldMapping200Response{value: val, isSet: true}
}

func (v NullableAddLogFieldMapping200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogFieldMapping200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
