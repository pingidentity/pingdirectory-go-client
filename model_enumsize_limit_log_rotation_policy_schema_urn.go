/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsizeLimitLogRotationPolicySchemaUrn the model 'EnumsizeLimitLogRotationPolicySchemaUrn'
type EnumsizeLimitLogRotationPolicySchemaUrn string

// List of Enumsize-limit-log-rotation-policySchemaUrn
const (
	ENUMSIZELIMITLOGROTATIONPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_ROTATION_POLICYSIZE_LIMIT EnumsizeLimitLogRotationPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:size-limit"
)

// All allowed values of EnumsizeLimitLogRotationPolicySchemaUrn enum
var AllowedEnumsizeLimitLogRotationPolicySchemaUrnEnumValues = []EnumsizeLimitLogRotationPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:size-limit",
}

func (v *EnumsizeLimitLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsizeLimitLogRotationPolicySchemaUrn(value)
	for _, existing := range AllowedEnumsizeLimitLogRotationPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsizeLimitLogRotationPolicySchemaUrn", value)
}

// NewEnumsizeLimitLogRotationPolicySchemaUrnFromValue returns a pointer to a valid EnumsizeLimitLogRotationPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsizeLimitLogRotationPolicySchemaUrnFromValue(v string) (*EnumsizeLimitLogRotationPolicySchemaUrn, error) {
	ev := EnumsizeLimitLogRotationPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsizeLimitLogRotationPolicySchemaUrn: valid values are %v", v, AllowedEnumsizeLimitLogRotationPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsizeLimitLogRotationPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsizeLimitLogRotationPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsize-limit-log-rotation-policySchemaUrn value
func (v EnumsizeLimitLogRotationPolicySchemaUrn) Ptr() *EnumsizeLimitLogRotationPolicySchemaUrn {
	return &v
}

type NullableEnumsizeLimitLogRotationPolicySchemaUrn struct {
	value *EnumsizeLimitLogRotationPolicySchemaUrn
	isSet bool
}

func (v NullableEnumsizeLimitLogRotationPolicySchemaUrn) Get() *EnumsizeLimitLogRotationPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumsizeLimitLogRotationPolicySchemaUrn) Set(val *EnumsizeLimitLogRotationPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsizeLimitLogRotationPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsizeLimitLogRotationPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsizeLimitLogRotationPolicySchemaUrn(val *EnumsizeLimitLogRotationPolicySchemaUrn) *NullableEnumsizeLimitLogRotationPolicySchemaUrn {
	return &NullableEnumsizeLimitLogRotationPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsizeLimitLogRotationPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsizeLimitLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

