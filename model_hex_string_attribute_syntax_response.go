/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// HexStringAttributeSyntaxResponse struct for HexStringAttributeSyntaxResponse
type HexStringAttributeSyntaxResponse struct {
	Schemas []EnumhexStringAttributeSyntaxSchemaUrn `json:"schemas"`
	// Indicates whether the Attribute Syntax is enabled.
	Enabled bool `json:"enabled"`
	// Indicates whether values of this attribute are required to have a \"binary\" transfer option as described in RFC 4522. Attributes with this syntax will generally be referenced with names including \";binary\" (e.g., \"userCertificate;binary\").
	RequireBinaryTransfer *bool `json:"requireBinaryTransfer,omitempty"`
}

// NewHexStringAttributeSyntaxResponse instantiates a new HexStringAttributeSyntaxResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHexStringAttributeSyntaxResponse(schemas []EnumhexStringAttributeSyntaxSchemaUrn, enabled bool) *HexStringAttributeSyntaxResponse {
	this := HexStringAttributeSyntaxResponse{}
	this.Schemas = schemas
	this.Enabled = enabled
	return &this
}

// NewHexStringAttributeSyntaxResponseWithDefaults instantiates a new HexStringAttributeSyntaxResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHexStringAttributeSyntaxResponseWithDefaults() *HexStringAttributeSyntaxResponse {
	this := HexStringAttributeSyntaxResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *HexStringAttributeSyntaxResponse) GetSchemas() []EnumhexStringAttributeSyntaxSchemaUrn {
	if o == nil {
		var ret []EnumhexStringAttributeSyntaxSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *HexStringAttributeSyntaxResponse) GetSchemasOk() ([]EnumhexStringAttributeSyntaxSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *HexStringAttributeSyntaxResponse) SetSchemas(v []EnumhexStringAttributeSyntaxSchemaUrn) {
	o.Schemas = v
}

// GetEnabled returns the Enabled field value
func (o *HexStringAttributeSyntaxResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *HexStringAttributeSyntaxResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *HexStringAttributeSyntaxResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetRequireBinaryTransfer returns the RequireBinaryTransfer field value if set, zero value otherwise.
func (o *HexStringAttributeSyntaxResponse) GetRequireBinaryTransfer() bool {
	if o == nil || isNil(o.RequireBinaryTransfer) {
		var ret bool
		return ret
	}
	return *o.RequireBinaryTransfer
}

// GetRequireBinaryTransferOk returns a tuple with the RequireBinaryTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HexStringAttributeSyntaxResponse) GetRequireBinaryTransferOk() (*bool, bool) {
	if o == nil || isNil(o.RequireBinaryTransfer) {
    return nil, false
	}
	return o.RequireBinaryTransfer, true
}

// HasRequireBinaryTransfer returns a boolean if a field has been set.
func (o *HexStringAttributeSyntaxResponse) HasRequireBinaryTransfer() bool {
	if o != nil && !isNil(o.RequireBinaryTransfer) {
		return true
	}

	return false
}

// SetRequireBinaryTransfer gets a reference to the given bool and assigns it to the RequireBinaryTransfer field.
func (o *HexStringAttributeSyntaxResponse) SetRequireBinaryTransfer(v bool) {
	o.RequireBinaryTransfer = &v
}

func (o HexStringAttributeSyntaxResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.RequireBinaryTransfer) {
		toSerialize["requireBinaryTransfer"] = o.RequireBinaryTransfer
	}
	return json.Marshal(toSerialize)
}

type NullableHexStringAttributeSyntaxResponse struct {
	value *HexStringAttributeSyntaxResponse
	isSet bool
}

func (v NullableHexStringAttributeSyntaxResponse) Get() *HexStringAttributeSyntaxResponse {
	return v.value
}

func (v *NullableHexStringAttributeSyntaxResponse) Set(val *HexStringAttributeSyntaxResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHexStringAttributeSyntaxResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHexStringAttributeSyntaxResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHexStringAttributeSyntaxResponse(val *HexStringAttributeSyntaxResponse) *NullableHexStringAttributeSyntaxResponse {
	return &NullableHexStringAttributeSyntaxResponse{value: val, isSet: true}
}

func (v NullableHexStringAttributeSyntaxResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHexStringAttributeSyntaxResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


