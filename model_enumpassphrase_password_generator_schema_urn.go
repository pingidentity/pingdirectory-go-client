/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpassphrasePasswordGeneratorSchemaUrn the model 'EnumpassphrasePasswordGeneratorSchemaUrn'
type EnumpassphrasePasswordGeneratorSchemaUrn string

// List of Enumpassphrase-password-generatorSchemaUrn
const (
	ENUMPASSPHRASEPASSWORDGENERATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_GENERATORPASSPHRASE EnumpassphrasePasswordGeneratorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-generator:passphrase"
)

// All allowed values of EnumpassphrasePasswordGeneratorSchemaUrn enum
var AllowedEnumpassphrasePasswordGeneratorSchemaUrnEnumValues = []EnumpassphrasePasswordGeneratorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-generator:passphrase",
}

func (v *EnumpassphrasePasswordGeneratorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpassphrasePasswordGeneratorSchemaUrn(value)
	for _, existing := range AllowedEnumpassphrasePasswordGeneratorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpassphrasePasswordGeneratorSchemaUrn", value)
}

// NewEnumpassphrasePasswordGeneratorSchemaUrnFromValue returns a pointer to a valid EnumpassphrasePasswordGeneratorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpassphrasePasswordGeneratorSchemaUrnFromValue(v string) (*EnumpassphrasePasswordGeneratorSchemaUrn, error) {
	ev := EnumpassphrasePasswordGeneratorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpassphrasePasswordGeneratorSchemaUrn: valid values are %v", v, AllowedEnumpassphrasePasswordGeneratorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpassphrasePasswordGeneratorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpassphrasePasswordGeneratorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassphrase-password-generatorSchemaUrn value
func (v EnumpassphrasePasswordGeneratorSchemaUrn) Ptr() *EnumpassphrasePasswordGeneratorSchemaUrn {
	return &v
}

type NullableEnumpassphrasePasswordGeneratorSchemaUrn struct {
	value *EnumpassphrasePasswordGeneratorSchemaUrn
	isSet bool
}

func (v NullableEnumpassphrasePasswordGeneratorSchemaUrn) Get() *EnumpassphrasePasswordGeneratorSchemaUrn {
	return v.value
}

func (v *NullableEnumpassphrasePasswordGeneratorSchemaUrn) Set(val *EnumpassphrasePasswordGeneratorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpassphrasePasswordGeneratorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpassphrasePasswordGeneratorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpassphrasePasswordGeneratorSchemaUrn(val *EnumpassphrasePasswordGeneratorSchemaUrn) *NullableEnumpassphrasePasswordGeneratorSchemaUrn {
	return &NullableEnumpassphrasePasswordGeneratorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpassphrasePasswordGeneratorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpassphrasePasswordGeneratorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

