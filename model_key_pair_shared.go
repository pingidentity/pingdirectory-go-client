/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KeyPairShared struct for KeyPairShared
type KeyPairShared struct {
	Schemas []EnumkeyPairSchemaUrn `json:"schemas,omitempty"`
	KeyAlgorithm EnumkeyPairKeyAlgorithmProp `json:"keyAlgorithm"`
	// The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate expired certificates. It is up to the administrator to do that when that happens.
	SelfSignedCertificateValidity *string `json:"selfSignedCertificateValidity,omitempty"`
	// The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not used when importing an existing key-pair.
	SubjectDN *string `json:"subjectDN,omitempty"`
	// The PEM-encoded X.509 certificate chain.
	CertificateChain *string `json:"certificateChain,omitempty"`
	// The base64-encoded private key that is encrypted using the preferred encryption settings definition.
	PrivateKey *string `json:"privateKey,omitempty"`
}

// NewKeyPairShared instantiates a new KeyPairShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPairShared(keyAlgorithm EnumkeyPairKeyAlgorithmProp) *KeyPairShared {
	this := KeyPairShared{}
	this.KeyAlgorithm = keyAlgorithm
	return &this
}

// NewKeyPairSharedWithDefaults instantiates a new KeyPairShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairSharedWithDefaults() *KeyPairShared {
	this := KeyPairShared{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *KeyPairShared) GetSchemas() []EnumkeyPairSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumkeyPairSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairShared) GetSchemasOk() ([]EnumkeyPairSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *KeyPairShared) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumkeyPairSchemaUrn and assigns it to the Schemas field.
func (o *KeyPairShared) SetSchemas(v []EnumkeyPairSchemaUrn) {
	o.Schemas = v
}

// GetKeyAlgorithm returns the KeyAlgorithm field value
func (o *KeyPairShared) GetKeyAlgorithm() EnumkeyPairKeyAlgorithmProp {
	if o == nil {
		var ret EnumkeyPairKeyAlgorithmProp
		return ret
	}

	return o.KeyAlgorithm
}

// GetKeyAlgorithmOk returns a tuple with the KeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *KeyPairShared) GetKeyAlgorithmOk() (*EnumkeyPairKeyAlgorithmProp, bool) {
	if o == nil {
    return nil, false
	}
	return &o.KeyAlgorithm, true
}

// SetKeyAlgorithm sets field value
func (o *KeyPairShared) SetKeyAlgorithm(v EnumkeyPairKeyAlgorithmProp) {
	o.KeyAlgorithm = v
}

// GetSelfSignedCertificateValidity returns the SelfSignedCertificateValidity field value if set, zero value otherwise.
func (o *KeyPairShared) GetSelfSignedCertificateValidity() string {
	if o == nil || isNil(o.SelfSignedCertificateValidity) {
		var ret string
		return ret
	}
	return *o.SelfSignedCertificateValidity
}

// GetSelfSignedCertificateValidityOk returns a tuple with the SelfSignedCertificateValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairShared) GetSelfSignedCertificateValidityOk() (*string, bool) {
	if o == nil || isNil(o.SelfSignedCertificateValidity) {
    return nil, false
	}
	return o.SelfSignedCertificateValidity, true
}

// HasSelfSignedCertificateValidity returns a boolean if a field has been set.
func (o *KeyPairShared) HasSelfSignedCertificateValidity() bool {
	if o != nil && !isNil(o.SelfSignedCertificateValidity) {
		return true
	}

	return false
}

// SetSelfSignedCertificateValidity gets a reference to the given string and assigns it to the SelfSignedCertificateValidity field.
func (o *KeyPairShared) SetSelfSignedCertificateValidity(v string) {
	o.SelfSignedCertificateValidity = &v
}

// GetSubjectDN returns the SubjectDN field value if set, zero value otherwise.
func (o *KeyPairShared) GetSubjectDN() string {
	if o == nil || isNil(o.SubjectDN) {
		var ret string
		return ret
	}
	return *o.SubjectDN
}

// GetSubjectDNOk returns a tuple with the SubjectDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairShared) GetSubjectDNOk() (*string, bool) {
	if o == nil || isNil(o.SubjectDN) {
    return nil, false
	}
	return o.SubjectDN, true
}

// HasSubjectDN returns a boolean if a field has been set.
func (o *KeyPairShared) HasSubjectDN() bool {
	if o != nil && !isNil(o.SubjectDN) {
		return true
	}

	return false
}

// SetSubjectDN gets a reference to the given string and assigns it to the SubjectDN field.
func (o *KeyPairShared) SetSubjectDN(v string) {
	o.SubjectDN = &v
}

// GetCertificateChain returns the CertificateChain field value if set, zero value otherwise.
func (o *KeyPairShared) GetCertificateChain() string {
	if o == nil || isNil(o.CertificateChain) {
		var ret string
		return ret
	}
	return *o.CertificateChain
}

// GetCertificateChainOk returns a tuple with the CertificateChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairShared) GetCertificateChainOk() (*string, bool) {
	if o == nil || isNil(o.CertificateChain) {
    return nil, false
	}
	return o.CertificateChain, true
}

// HasCertificateChain returns a boolean if a field has been set.
func (o *KeyPairShared) HasCertificateChain() bool {
	if o != nil && !isNil(o.CertificateChain) {
		return true
	}

	return false
}

// SetCertificateChain gets a reference to the given string and assigns it to the CertificateChain field.
func (o *KeyPairShared) SetCertificateChain(v string) {
	o.CertificateChain = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *KeyPairShared) GetPrivateKey() string {
	if o == nil || isNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPairShared) GetPrivateKeyOk() (*string, bool) {
	if o == nil || isNil(o.PrivateKey) {
    return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *KeyPairShared) HasPrivateKey() bool {
	if o != nil && !isNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *KeyPairShared) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

func (o KeyPairShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["keyAlgorithm"] = o.KeyAlgorithm
	}
	if !isNil(o.SelfSignedCertificateValidity) {
		toSerialize["selfSignedCertificateValidity"] = o.SelfSignedCertificateValidity
	}
	if !isNil(o.SubjectDN) {
		toSerialize["subjectDN"] = o.SubjectDN
	}
	if !isNil(o.CertificateChain) {
		toSerialize["certificateChain"] = o.CertificateChain
	}
	if !isNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	return json.Marshal(toSerialize)
}

type NullableKeyPairShared struct {
	value *KeyPairShared
	isSet bool
}

func (v NullableKeyPairShared) Get() *KeyPairShared {
	return v.value
}

func (v *NullableKeyPairShared) Set(val *KeyPairShared) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPairShared) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPairShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPairShared(val *KeyPairShared) *NullableKeyPairShared {
	return &NullableKeyPairShared{value: val, isSet: true}
}

func (v NullableKeyPairShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPairShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


