/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvirtualStaticGroupImplementationSchemaUrn the model 'EnumvirtualStaticGroupImplementationSchemaUrn'
type EnumvirtualStaticGroupImplementationSchemaUrn string

// List of Enumvirtual-static-group-implementationSchemaUrn
const (
	ENUMVIRTUALSTATICGROUPIMPLEMENTATIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0GROUP_IMPLEMENTATIONVIRTUAL_STATIC EnumvirtualStaticGroupImplementationSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:group-implementation:virtual-static"
)

// All allowed values of EnumvirtualStaticGroupImplementationSchemaUrn enum
var AllowedEnumvirtualStaticGroupImplementationSchemaUrnEnumValues = []EnumvirtualStaticGroupImplementationSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:group-implementation:virtual-static",
}

func (v *EnumvirtualStaticGroupImplementationSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvirtualStaticGroupImplementationSchemaUrn(value)
	for _, existing := range AllowedEnumvirtualStaticGroupImplementationSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvirtualStaticGroupImplementationSchemaUrn", value)
}

// NewEnumvirtualStaticGroupImplementationSchemaUrnFromValue returns a pointer to a valid EnumvirtualStaticGroupImplementationSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvirtualStaticGroupImplementationSchemaUrnFromValue(v string) (*EnumvirtualStaticGroupImplementationSchemaUrn, error) {
	ev := EnumvirtualStaticGroupImplementationSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvirtualStaticGroupImplementationSchemaUrn: valid values are %v", v, AllowedEnumvirtualStaticGroupImplementationSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvirtualStaticGroupImplementationSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvirtualStaticGroupImplementationSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvirtual-static-group-implementationSchemaUrn value
func (v EnumvirtualStaticGroupImplementationSchemaUrn) Ptr() *EnumvirtualStaticGroupImplementationSchemaUrn {
	return &v
}

type NullableEnumvirtualStaticGroupImplementationSchemaUrn struct {
	value *EnumvirtualStaticGroupImplementationSchemaUrn
	isSet bool
}

func (v NullableEnumvirtualStaticGroupImplementationSchemaUrn) Get() *EnumvirtualStaticGroupImplementationSchemaUrn {
	return v.value
}

func (v *NullableEnumvirtualStaticGroupImplementationSchemaUrn) Set(val *EnumvirtualStaticGroupImplementationSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvirtualStaticGroupImplementationSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvirtualStaticGroupImplementationSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvirtualStaticGroupImplementationSchemaUrn(val *EnumvirtualStaticGroupImplementationSchemaUrn) *NullableEnumvirtualStaticGroupImplementationSchemaUrn {
	return &NullableEnumvirtualStaticGroupImplementationSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvirtualStaticGroupImplementationSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvirtualStaticGroupImplementationSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
