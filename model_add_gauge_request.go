/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddGaugeRequest - struct for AddGaugeRequest
type AddGaugeRequest struct {
	AddIndicatorGaugeRequest *AddIndicatorGaugeRequest
	AddNumericGaugeRequest   *AddNumericGaugeRequest
}

// AddIndicatorGaugeRequestAsAddGaugeRequest is a convenience function that returns AddIndicatorGaugeRequest wrapped in AddGaugeRequest
func AddIndicatorGaugeRequestAsAddGaugeRequest(v *AddIndicatorGaugeRequest) AddGaugeRequest {
	return AddGaugeRequest{
		AddIndicatorGaugeRequest: v,
	}
}

// AddNumericGaugeRequestAsAddGaugeRequest is a convenience function that returns AddNumericGaugeRequest wrapped in AddGaugeRequest
func AddNumericGaugeRequestAsAddGaugeRequest(v *AddNumericGaugeRequest) AddGaugeRequest {
	return AddGaugeRequest{
		AddNumericGaugeRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddGaugeRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddIndicatorGaugeRequest
	err = newStrictDecoder(data).Decode(&dst.AddIndicatorGaugeRequest)
	if err == nil {
		jsonAddIndicatorGaugeRequest, _ := json.Marshal(dst.AddIndicatorGaugeRequest)
		if string(jsonAddIndicatorGaugeRequest) == "{}" { // empty struct
			dst.AddIndicatorGaugeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddIndicatorGaugeRequest = nil
	}

	// try to unmarshal data into AddNumericGaugeRequest
	err = newStrictDecoder(data).Decode(&dst.AddNumericGaugeRequest)
	if err == nil {
		jsonAddNumericGaugeRequest, _ := json.Marshal(dst.AddNumericGaugeRequest)
		if string(jsonAddNumericGaugeRequest) == "{}" { // empty struct
			dst.AddNumericGaugeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddNumericGaugeRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddIndicatorGaugeRequest = nil
		dst.AddNumericGaugeRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddGaugeRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddGaugeRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddGaugeRequest) MarshalJSON() ([]byte, error) {
	if src.AddIndicatorGaugeRequest != nil {
		return json.Marshal(&src.AddIndicatorGaugeRequest)
	}

	if src.AddNumericGaugeRequest != nil {
		return json.Marshal(&src.AddNumericGaugeRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddGaugeRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddIndicatorGaugeRequest != nil {
		return obj.AddIndicatorGaugeRequest
	}

	if obj.AddNumericGaugeRequest != nil {
		return obj.AddNumericGaugeRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddGaugeRequest struct {
	value *AddGaugeRequest
	isSet bool
}

func (v NullableAddGaugeRequest) Get() *AddGaugeRequest {
	return v.value
}

func (v *NullableAddGaugeRequest) Set(val *AddGaugeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddGaugeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddGaugeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddGaugeRequest(val *AddGaugeRequest) *NullableAddGaugeRequest {
	return &NullableAddGaugeRequest{value: val, isSet: true}
}

func (v NullableAddGaugeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddGaugeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
