/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpassThroughAuthenticationPluginSchemaUrn the model 'EnumpassThroughAuthenticationPluginSchemaUrn'
type EnumpassThroughAuthenticationPluginSchemaUrn string

// List of Enumpass-through-authentication-pluginSchemaUrn
const (
	ENUMPASSTHROUGHAUTHENTICATIONPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINPASS_THROUGH_AUTHENTICATION EnumpassThroughAuthenticationPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:pass-through-authentication"
)

// All allowed values of EnumpassThroughAuthenticationPluginSchemaUrn enum
var AllowedEnumpassThroughAuthenticationPluginSchemaUrnEnumValues = []EnumpassThroughAuthenticationPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:pass-through-authentication",
}

func (v *EnumpassThroughAuthenticationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpassThroughAuthenticationPluginSchemaUrn(value)
	for _, existing := range AllowedEnumpassThroughAuthenticationPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpassThroughAuthenticationPluginSchemaUrn", value)
}

// NewEnumpassThroughAuthenticationPluginSchemaUrnFromValue returns a pointer to a valid EnumpassThroughAuthenticationPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpassThroughAuthenticationPluginSchemaUrnFromValue(v string) (*EnumpassThroughAuthenticationPluginSchemaUrn, error) {
	ev := EnumpassThroughAuthenticationPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpassThroughAuthenticationPluginSchemaUrn: valid values are %v", v, AllowedEnumpassThroughAuthenticationPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpassThroughAuthenticationPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpassThroughAuthenticationPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpass-through-authentication-pluginSchemaUrn value
func (v EnumpassThroughAuthenticationPluginSchemaUrn) Ptr() *EnumpassThroughAuthenticationPluginSchemaUrn {
	return &v
}

type NullableEnumpassThroughAuthenticationPluginSchemaUrn struct {
	value *EnumpassThroughAuthenticationPluginSchemaUrn
	isSet bool
}

func (v NullableEnumpassThroughAuthenticationPluginSchemaUrn) Get() *EnumpassThroughAuthenticationPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumpassThroughAuthenticationPluginSchemaUrn) Set(val *EnumpassThroughAuthenticationPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpassThroughAuthenticationPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpassThroughAuthenticationPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpassThroughAuthenticationPluginSchemaUrn(val *EnumpassThroughAuthenticationPluginSchemaUrn) *NullableEnumpassThroughAuthenticationPluginSchemaUrn {
	return &NullableEnumpassThroughAuthenticationPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpassThroughAuthenticationPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpassThroughAuthenticationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
