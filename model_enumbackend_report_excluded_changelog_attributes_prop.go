/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackendReportExcludedChangelogAttributesProp Indicates whether changelog entries that have been altered by applying access controls should include additional information about any attributes that may have been removed.
type EnumbackendReportExcludedChangelogAttributesProp string

// List of Enumbackend-reportExcludedChangelogAttributesProp
const (
	ENUMBACKENDREPORTEXCLUDEDCHANGELOGATTRIBUTESPROP_NONE             EnumbackendReportExcludedChangelogAttributesProp = "none"
	ENUMBACKENDREPORTEXCLUDEDCHANGELOGATTRIBUTESPROP_ATTRIBUTE_COUNTS EnumbackendReportExcludedChangelogAttributesProp = "attribute-counts"
	ENUMBACKENDREPORTEXCLUDEDCHANGELOGATTRIBUTESPROP_ATTRIBUTE_NAMES  EnumbackendReportExcludedChangelogAttributesProp = "attribute-names"
)

// All allowed values of EnumbackendReportExcludedChangelogAttributesProp enum
var AllowedEnumbackendReportExcludedChangelogAttributesPropEnumValues = []EnumbackendReportExcludedChangelogAttributesProp{
	"none",
	"attribute-counts",
	"attribute-names",
}

func (v *EnumbackendReportExcludedChangelogAttributesProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackendReportExcludedChangelogAttributesProp(value)
	for _, existing := range AllowedEnumbackendReportExcludedChangelogAttributesPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackendReportExcludedChangelogAttributesProp", value)
}

// NewEnumbackendReportExcludedChangelogAttributesPropFromValue returns a pointer to a valid EnumbackendReportExcludedChangelogAttributesProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackendReportExcludedChangelogAttributesPropFromValue(v string) (*EnumbackendReportExcludedChangelogAttributesProp, error) {
	ev := EnumbackendReportExcludedChangelogAttributesProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackendReportExcludedChangelogAttributesProp: valid values are %v", v, AllowedEnumbackendReportExcludedChangelogAttributesPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackendReportExcludedChangelogAttributesProp) IsValid() bool {
	for _, existing := range AllowedEnumbackendReportExcludedChangelogAttributesPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackend-reportExcludedChangelogAttributesProp value
func (v EnumbackendReportExcludedChangelogAttributesProp) Ptr() *EnumbackendReportExcludedChangelogAttributesProp {
	return &v
}

type NullableEnumbackendReportExcludedChangelogAttributesProp struct {
	value *EnumbackendReportExcludedChangelogAttributesProp
	isSet bool
}

func (v NullableEnumbackendReportExcludedChangelogAttributesProp) Get() *EnumbackendReportExcludedChangelogAttributesProp {
	return v.value
}

func (v *NullableEnumbackendReportExcludedChangelogAttributesProp) Set(val *EnumbackendReportExcludedChangelogAttributesProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackendReportExcludedChangelogAttributesProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackendReportExcludedChangelogAttributesProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackendReportExcludedChangelogAttributesProp(val *EnumbackendReportExcludedChangelogAttributesProp) *NullableEnumbackendReportExcludedChangelogAttributesProp {
	return &NullableEnumbackendReportExcludedChangelogAttributesProp{value: val, isSet: true}
}

func (v NullableEnumbackendReportExcludedChangelogAttributesProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackendReportExcludedChangelogAttributesProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
