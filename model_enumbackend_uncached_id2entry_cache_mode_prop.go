/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackendUncachedId2entryCacheModeProp Specifies the cache mode that should be used when accessing the records in the uncached-id2entry database, which provides a way to store complete or partial encoded entries with a different (and presumably less memory-intensive) cache mode than records written to id2entry.
type EnumbackendUncachedId2entryCacheModeProp string

// List of Enumbackend-uncachedId2entryCacheModeProp
const (
	CACHE_KEYS_AND_VALUES EnumbackendUncachedId2entryCacheModeProp = "cache-keys-and-values"
	CACHE_KEYS_ONLY EnumbackendUncachedId2entryCacheModeProp = "cache-keys-only"
	NO_CACHING EnumbackendUncachedId2entryCacheModeProp = "no-caching"
	KEEP_HOT EnumbackendUncachedId2entryCacheModeProp = "keep-hot"
	DEFAULT EnumbackendUncachedId2entryCacheModeProp = "default"
	MAKE_COLD EnumbackendUncachedId2entryCacheModeProp = "make-cold"
	EVICT_LEAF_IMMEDIATELY EnumbackendUncachedId2entryCacheModeProp = "evict-leaf-immediately"
	EVICT_BIN_IMMEDIATELY EnumbackendUncachedId2entryCacheModeProp = "evict-bin-immediately"
)

// All allowed values of EnumbackendUncachedId2entryCacheModeProp enum
var AllowedEnumbackendUncachedId2entryCacheModePropEnumValues = []EnumbackendUncachedId2entryCacheModeProp{
	"cache-keys-and-values",
	"cache-keys-only",
	"no-caching",
	"keep-hot",
	"default",
	"make-cold",
	"evict-leaf-immediately",
	"evict-bin-immediately",
}

func (v *EnumbackendUncachedId2entryCacheModeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackendUncachedId2entryCacheModeProp(value)
	for _, existing := range AllowedEnumbackendUncachedId2entryCacheModePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackendUncachedId2entryCacheModeProp", value)
}

// NewEnumbackendUncachedId2entryCacheModePropFromValue returns a pointer to a valid EnumbackendUncachedId2entryCacheModeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackendUncachedId2entryCacheModePropFromValue(v string) (*EnumbackendUncachedId2entryCacheModeProp, error) {
	ev := EnumbackendUncachedId2entryCacheModeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackendUncachedId2entryCacheModeProp: valid values are %v", v, AllowedEnumbackendUncachedId2entryCacheModePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackendUncachedId2entryCacheModeProp) IsValid() bool {
	for _, existing := range AllowedEnumbackendUncachedId2entryCacheModePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackend-uncachedId2entryCacheModeProp value
func (v EnumbackendUncachedId2entryCacheModeProp) Ptr() *EnumbackendUncachedId2entryCacheModeProp {
	return &v
}

type NullableEnumbackendUncachedId2entryCacheModeProp struct {
	value *EnumbackendUncachedId2entryCacheModeProp
	isSet bool
}

func (v NullableEnumbackendUncachedId2entryCacheModeProp) Get() *EnumbackendUncachedId2entryCacheModeProp {
	return v.value
}

func (v *NullableEnumbackendUncachedId2entryCacheModeProp) Set(val *EnumbackendUncachedId2entryCacheModeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackendUncachedId2entryCacheModeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackendUncachedId2entryCacheModeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackendUncachedId2entryCacheModeProp(val *EnumbackendUncachedId2entryCacheModeProp) *NullableEnumbackendUncachedId2entryCacheModeProp {
	return &NullableEnumbackendUncachedId2entryCacheModeProp{value: val, isSet: true}
}

func (v NullableEnumbackendUncachedId2entryCacheModeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackendUncachedId2entryCacheModeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

