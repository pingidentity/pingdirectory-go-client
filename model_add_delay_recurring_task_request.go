/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddDelayRecurringTaskRequest struct for AddDelayRecurringTaskRequest
type AddDelayRecurringTaskRequest struct {
	// Name of the new Recurring Task
	TaskName string `json:"taskName"`
	Schemas []EnumdelayRecurringTaskSchemaUrn `json:"schemas"`
	// The length of time to sleep before the task completes.
	SleepDuration *string `json:"sleepDuration,omitempty"`
	// Indicates that task should wait for up to the specified length of time for the work queue to report that all worker threads are idle and there are no pending operations. Note that this primarily monitors operations that use worker threads, which does not include internal operations (for example, those invoked by extensions), and may not include requests from non-LDAP clients (for example, HTTP-based clients).
	DurationToWaitForWorkQueueIdle *string `json:"durationToWaitForWorkQueueIdle,omitempty"`
	LdapURLForSearchExpectedToReturnEntries []string `json:"ldapURLForSearchExpectedToReturnEntries,omitempty"`
	// The length of time the server should sleep between searches performed using the criteria from the ldap-url-for-search-expected-to-return-entries property.
	SearchInterval *string `json:"searchInterval,omitempty"`
	// The length of time that the server will wait for a response to each internal search performed using the criteria from the ldap-url-for-search-expected-to-return-entries property.
	SearchTimeLimit *string `json:"searchTimeLimit,omitempty"`
	// The maximum length of time that the server will continue to perform internal searches using the criteria from the ldap-url-for-search-expected-to-return-entries property.
	DurationToWaitForSearchToReturnEntries *string `json:"durationToWaitForSearchToReturnEntries,omitempty"`
	TaskReturnStateIfTimeoutIsEncountered *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp `json:"taskReturnStateIfTimeoutIsEncountered,omitempty"`
	// A description for this Recurring Task
	Description *string `json:"description,omitempty"`
	// Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
	CancelOnTaskDependencyFailure *bool `json:"cancelOnTaskDependencyFailure,omitempty"`
	EmailOnStart []string `json:"emailOnStart,omitempty"`
	EmailOnSuccess []string `json:"emailOnSuccess,omitempty"`
	EmailOnFailure []string `json:"emailOnFailure,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
	AlertOnStart *bool `json:"alertOnStart,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
	AlertOnSuccess *bool `json:"alertOnSuccess,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
	AlertOnFailure *bool `json:"alertOnFailure,omitempty"`
}

// NewAddDelayRecurringTaskRequest instantiates a new AddDelayRecurringTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDelayRecurringTaskRequest(taskName string, schemas []EnumdelayRecurringTaskSchemaUrn) *AddDelayRecurringTaskRequest {
	this := AddDelayRecurringTaskRequest{}
	this.TaskName = taskName
	this.Schemas = schemas
	return &this
}

// NewAddDelayRecurringTaskRequestWithDefaults instantiates a new AddDelayRecurringTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDelayRecurringTaskRequestWithDefaults() *AddDelayRecurringTaskRequest {
	this := AddDelayRecurringTaskRequest{}
	return &this
}

// GetTaskName returns the TaskName field value
func (o *AddDelayRecurringTaskRequest) GetTaskName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetTaskNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TaskName, true
}

// SetTaskName sets field value
func (o *AddDelayRecurringTaskRequest) SetTaskName(v string) {
	o.TaskName = v
}

// GetSchemas returns the Schemas field value
func (o *AddDelayRecurringTaskRequest) GetSchemas() []EnumdelayRecurringTaskSchemaUrn {
	if o == nil {
		var ret []EnumdelayRecurringTaskSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetSchemasOk() ([]EnumdelayRecurringTaskSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddDelayRecurringTaskRequest) SetSchemas(v []EnumdelayRecurringTaskSchemaUrn) {
	o.Schemas = v
}

// GetSleepDuration returns the SleepDuration field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetSleepDuration() string {
	if o == nil || isNil(o.SleepDuration) {
		var ret string
		return ret
	}
	return *o.SleepDuration
}

// GetSleepDurationOk returns a tuple with the SleepDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetSleepDurationOk() (*string, bool) {
	if o == nil || isNil(o.SleepDuration) {
    return nil, false
	}
	return o.SleepDuration, true
}

// HasSleepDuration returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasSleepDuration() bool {
	if o != nil && !isNil(o.SleepDuration) {
		return true
	}

	return false
}

// SetSleepDuration gets a reference to the given string and assigns it to the SleepDuration field.
func (o *AddDelayRecurringTaskRequest) SetSleepDuration(v string) {
	o.SleepDuration = &v
}

// GetDurationToWaitForWorkQueueIdle returns the DurationToWaitForWorkQueueIdle field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetDurationToWaitForWorkQueueIdle() string {
	if o == nil || isNil(o.DurationToWaitForWorkQueueIdle) {
		var ret string
		return ret
	}
	return *o.DurationToWaitForWorkQueueIdle
}

// GetDurationToWaitForWorkQueueIdleOk returns a tuple with the DurationToWaitForWorkQueueIdle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetDurationToWaitForWorkQueueIdleOk() (*string, bool) {
	if o == nil || isNil(o.DurationToWaitForWorkQueueIdle) {
    return nil, false
	}
	return o.DurationToWaitForWorkQueueIdle, true
}

// HasDurationToWaitForWorkQueueIdle returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasDurationToWaitForWorkQueueIdle() bool {
	if o != nil && !isNil(o.DurationToWaitForWorkQueueIdle) {
		return true
	}

	return false
}

// SetDurationToWaitForWorkQueueIdle gets a reference to the given string and assigns it to the DurationToWaitForWorkQueueIdle field.
func (o *AddDelayRecurringTaskRequest) SetDurationToWaitForWorkQueueIdle(v string) {
	o.DurationToWaitForWorkQueueIdle = &v
}

// GetLdapURLForSearchExpectedToReturnEntries returns the LdapURLForSearchExpectedToReturnEntries field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetLdapURLForSearchExpectedToReturnEntries() []string {
	if o == nil || isNil(o.LdapURLForSearchExpectedToReturnEntries) {
		var ret []string
		return ret
	}
	return o.LdapURLForSearchExpectedToReturnEntries
}

// GetLdapURLForSearchExpectedToReturnEntriesOk returns a tuple with the LdapURLForSearchExpectedToReturnEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetLdapURLForSearchExpectedToReturnEntriesOk() ([]string, bool) {
	if o == nil || isNil(o.LdapURLForSearchExpectedToReturnEntries) {
    return nil, false
	}
	return o.LdapURLForSearchExpectedToReturnEntries, true
}

// HasLdapURLForSearchExpectedToReturnEntries returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasLdapURLForSearchExpectedToReturnEntries() bool {
	if o != nil && !isNil(o.LdapURLForSearchExpectedToReturnEntries) {
		return true
	}

	return false
}

// SetLdapURLForSearchExpectedToReturnEntries gets a reference to the given []string and assigns it to the LdapURLForSearchExpectedToReturnEntries field.
func (o *AddDelayRecurringTaskRequest) SetLdapURLForSearchExpectedToReturnEntries(v []string) {
	o.LdapURLForSearchExpectedToReturnEntries = v
}

// GetSearchInterval returns the SearchInterval field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetSearchInterval() string {
	if o == nil || isNil(o.SearchInterval) {
		var ret string
		return ret
	}
	return *o.SearchInterval
}

// GetSearchIntervalOk returns a tuple with the SearchInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetSearchIntervalOk() (*string, bool) {
	if o == nil || isNil(o.SearchInterval) {
    return nil, false
	}
	return o.SearchInterval, true
}

// HasSearchInterval returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasSearchInterval() bool {
	if o != nil && !isNil(o.SearchInterval) {
		return true
	}

	return false
}

// SetSearchInterval gets a reference to the given string and assigns it to the SearchInterval field.
func (o *AddDelayRecurringTaskRequest) SetSearchInterval(v string) {
	o.SearchInterval = &v
}

// GetSearchTimeLimit returns the SearchTimeLimit field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetSearchTimeLimit() string {
	if o == nil || isNil(o.SearchTimeLimit) {
		var ret string
		return ret
	}
	return *o.SearchTimeLimit
}

// GetSearchTimeLimitOk returns a tuple with the SearchTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetSearchTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.SearchTimeLimit) {
    return nil, false
	}
	return o.SearchTimeLimit, true
}

// HasSearchTimeLimit returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasSearchTimeLimit() bool {
	if o != nil && !isNil(o.SearchTimeLimit) {
		return true
	}

	return false
}

// SetSearchTimeLimit gets a reference to the given string and assigns it to the SearchTimeLimit field.
func (o *AddDelayRecurringTaskRequest) SetSearchTimeLimit(v string) {
	o.SearchTimeLimit = &v
}

// GetDurationToWaitForSearchToReturnEntries returns the DurationToWaitForSearchToReturnEntries field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetDurationToWaitForSearchToReturnEntries() string {
	if o == nil || isNil(o.DurationToWaitForSearchToReturnEntries) {
		var ret string
		return ret
	}
	return *o.DurationToWaitForSearchToReturnEntries
}

// GetDurationToWaitForSearchToReturnEntriesOk returns a tuple with the DurationToWaitForSearchToReturnEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetDurationToWaitForSearchToReturnEntriesOk() (*string, bool) {
	if o == nil || isNil(o.DurationToWaitForSearchToReturnEntries) {
    return nil, false
	}
	return o.DurationToWaitForSearchToReturnEntries, true
}

// HasDurationToWaitForSearchToReturnEntries returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasDurationToWaitForSearchToReturnEntries() bool {
	if o != nil && !isNil(o.DurationToWaitForSearchToReturnEntries) {
		return true
	}

	return false
}

// SetDurationToWaitForSearchToReturnEntries gets a reference to the given string and assigns it to the DurationToWaitForSearchToReturnEntries field.
func (o *AddDelayRecurringTaskRequest) SetDurationToWaitForSearchToReturnEntries(v string) {
	o.DurationToWaitForSearchToReturnEntries = &v
}

// GetTaskReturnStateIfTimeoutIsEncountered returns the TaskReturnStateIfTimeoutIsEncountered field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetTaskReturnStateIfTimeoutIsEncountered() EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp {
	if o == nil || isNil(o.TaskReturnStateIfTimeoutIsEncountered) {
		var ret EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp
		return ret
	}
	return *o.TaskReturnStateIfTimeoutIsEncountered
}

// GetTaskReturnStateIfTimeoutIsEncounteredOk returns a tuple with the TaskReturnStateIfTimeoutIsEncountered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetTaskReturnStateIfTimeoutIsEncounteredOk() (*EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp, bool) {
	if o == nil || isNil(o.TaskReturnStateIfTimeoutIsEncountered) {
    return nil, false
	}
	return o.TaskReturnStateIfTimeoutIsEncountered, true
}

// HasTaskReturnStateIfTimeoutIsEncountered returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasTaskReturnStateIfTimeoutIsEncountered() bool {
	if o != nil && !isNil(o.TaskReturnStateIfTimeoutIsEncountered) {
		return true
	}

	return false
}

// SetTaskReturnStateIfTimeoutIsEncountered gets a reference to the given EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp and assigns it to the TaskReturnStateIfTimeoutIsEncountered field.
func (o *AddDelayRecurringTaskRequest) SetTaskReturnStateIfTimeoutIsEncountered(v EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) {
	o.TaskReturnStateIfTimeoutIsEncountered = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddDelayRecurringTaskRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCancelOnTaskDependencyFailure returns the CancelOnTaskDependencyFailure field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetCancelOnTaskDependencyFailure() bool {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
		var ret bool
		return ret
	}
	return *o.CancelOnTaskDependencyFailure
}

// GetCancelOnTaskDependencyFailureOk returns a tuple with the CancelOnTaskDependencyFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetCancelOnTaskDependencyFailureOk() (*bool, bool) {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
    return nil, false
	}
	return o.CancelOnTaskDependencyFailure, true
}

// HasCancelOnTaskDependencyFailure returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasCancelOnTaskDependencyFailure() bool {
	if o != nil && !isNil(o.CancelOnTaskDependencyFailure) {
		return true
	}

	return false
}

// SetCancelOnTaskDependencyFailure gets a reference to the given bool and assigns it to the CancelOnTaskDependencyFailure field.
func (o *AddDelayRecurringTaskRequest) SetCancelOnTaskDependencyFailure(v bool) {
	o.CancelOnTaskDependencyFailure = &v
}

// GetEmailOnStart returns the EmailOnStart field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetEmailOnStart() []string {
	if o == nil || isNil(o.EmailOnStart) {
		var ret []string
		return ret
	}
	return o.EmailOnStart
}

// GetEmailOnStartOk returns a tuple with the EmailOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetEmailOnStartOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnStart) {
    return nil, false
	}
	return o.EmailOnStart, true
}

// HasEmailOnStart returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasEmailOnStart() bool {
	if o != nil && !isNil(o.EmailOnStart) {
		return true
	}

	return false
}

// SetEmailOnStart gets a reference to the given []string and assigns it to the EmailOnStart field.
func (o *AddDelayRecurringTaskRequest) SetEmailOnStart(v []string) {
	o.EmailOnStart = v
}

// GetEmailOnSuccess returns the EmailOnSuccess field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetEmailOnSuccess() []string {
	if o == nil || isNil(o.EmailOnSuccess) {
		var ret []string
		return ret
	}
	return o.EmailOnSuccess
}

// GetEmailOnSuccessOk returns a tuple with the EmailOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetEmailOnSuccessOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnSuccess) {
    return nil, false
	}
	return o.EmailOnSuccess, true
}

// HasEmailOnSuccess returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasEmailOnSuccess() bool {
	if o != nil && !isNil(o.EmailOnSuccess) {
		return true
	}

	return false
}

// SetEmailOnSuccess gets a reference to the given []string and assigns it to the EmailOnSuccess field.
func (o *AddDelayRecurringTaskRequest) SetEmailOnSuccess(v []string) {
	o.EmailOnSuccess = v
}

// GetEmailOnFailure returns the EmailOnFailure field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetEmailOnFailure() []string {
	if o == nil || isNil(o.EmailOnFailure) {
		var ret []string
		return ret
	}
	return o.EmailOnFailure
}

// GetEmailOnFailureOk returns a tuple with the EmailOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetEmailOnFailureOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnFailure) {
    return nil, false
	}
	return o.EmailOnFailure, true
}

// HasEmailOnFailure returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasEmailOnFailure() bool {
	if o != nil && !isNil(o.EmailOnFailure) {
		return true
	}

	return false
}

// SetEmailOnFailure gets a reference to the given []string and assigns it to the EmailOnFailure field.
func (o *AddDelayRecurringTaskRequest) SetEmailOnFailure(v []string) {
	o.EmailOnFailure = v
}

// GetAlertOnStart returns the AlertOnStart field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetAlertOnStart() bool {
	if o == nil || isNil(o.AlertOnStart) {
		var ret bool
		return ret
	}
	return *o.AlertOnStart
}

// GetAlertOnStartOk returns a tuple with the AlertOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetAlertOnStartOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnStart) {
    return nil, false
	}
	return o.AlertOnStart, true
}

// HasAlertOnStart returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasAlertOnStart() bool {
	if o != nil && !isNil(o.AlertOnStart) {
		return true
	}

	return false
}

// SetAlertOnStart gets a reference to the given bool and assigns it to the AlertOnStart field.
func (o *AddDelayRecurringTaskRequest) SetAlertOnStart(v bool) {
	o.AlertOnStart = &v
}

// GetAlertOnSuccess returns the AlertOnSuccess field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetAlertOnSuccess() bool {
	if o == nil || isNil(o.AlertOnSuccess) {
		var ret bool
		return ret
	}
	return *o.AlertOnSuccess
}

// GetAlertOnSuccessOk returns a tuple with the AlertOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetAlertOnSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnSuccess) {
    return nil, false
	}
	return o.AlertOnSuccess, true
}

// HasAlertOnSuccess returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasAlertOnSuccess() bool {
	if o != nil && !isNil(o.AlertOnSuccess) {
		return true
	}

	return false
}

// SetAlertOnSuccess gets a reference to the given bool and assigns it to the AlertOnSuccess field.
func (o *AddDelayRecurringTaskRequest) SetAlertOnSuccess(v bool) {
	o.AlertOnSuccess = &v
}

// GetAlertOnFailure returns the AlertOnFailure field value if set, zero value otherwise.
func (o *AddDelayRecurringTaskRequest) GetAlertOnFailure() bool {
	if o == nil || isNil(o.AlertOnFailure) {
		var ret bool
		return ret
	}
	return *o.AlertOnFailure
}

// GetAlertOnFailureOk returns a tuple with the AlertOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDelayRecurringTaskRequest) GetAlertOnFailureOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnFailure) {
    return nil, false
	}
	return o.AlertOnFailure, true
}

// HasAlertOnFailure returns a boolean if a field has been set.
func (o *AddDelayRecurringTaskRequest) HasAlertOnFailure() bool {
	if o != nil && !isNil(o.AlertOnFailure) {
		return true
	}

	return false
}

// SetAlertOnFailure gets a reference to the given bool and assigns it to the AlertOnFailure field.
func (o *AddDelayRecurringTaskRequest) SetAlertOnFailure(v bool) {
	o.AlertOnFailure = &v
}

func (o AddDelayRecurringTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["taskName"] = o.TaskName
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.SleepDuration) {
		toSerialize["sleepDuration"] = o.SleepDuration
	}
	if !isNil(o.DurationToWaitForWorkQueueIdle) {
		toSerialize["durationToWaitForWorkQueueIdle"] = o.DurationToWaitForWorkQueueIdle
	}
	if !isNil(o.LdapURLForSearchExpectedToReturnEntries) {
		toSerialize["ldapURLForSearchExpectedToReturnEntries"] = o.LdapURLForSearchExpectedToReturnEntries
	}
	if !isNil(o.SearchInterval) {
		toSerialize["searchInterval"] = o.SearchInterval
	}
	if !isNil(o.SearchTimeLimit) {
		toSerialize["searchTimeLimit"] = o.SearchTimeLimit
	}
	if !isNil(o.DurationToWaitForSearchToReturnEntries) {
		toSerialize["durationToWaitForSearchToReturnEntries"] = o.DurationToWaitForSearchToReturnEntries
	}
	if !isNil(o.TaskReturnStateIfTimeoutIsEncountered) {
		toSerialize["taskReturnStateIfTimeoutIsEncountered"] = o.TaskReturnStateIfTimeoutIsEncountered
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CancelOnTaskDependencyFailure) {
		toSerialize["cancelOnTaskDependencyFailure"] = o.CancelOnTaskDependencyFailure
	}
	if !isNil(o.EmailOnStart) {
		toSerialize["emailOnStart"] = o.EmailOnStart
	}
	if !isNil(o.EmailOnSuccess) {
		toSerialize["emailOnSuccess"] = o.EmailOnSuccess
	}
	if !isNil(o.EmailOnFailure) {
		toSerialize["emailOnFailure"] = o.EmailOnFailure
	}
	if !isNil(o.AlertOnStart) {
		toSerialize["alertOnStart"] = o.AlertOnStart
	}
	if !isNil(o.AlertOnSuccess) {
		toSerialize["alertOnSuccess"] = o.AlertOnSuccess
	}
	if !isNil(o.AlertOnFailure) {
		toSerialize["alertOnFailure"] = o.AlertOnFailure
	}
	return json.Marshal(toSerialize)
}

type NullableAddDelayRecurringTaskRequest struct {
	value *AddDelayRecurringTaskRequest
	isSet bool
}

func (v NullableAddDelayRecurringTaskRequest) Get() *AddDelayRecurringTaskRequest {
	return v.value
}

func (v *NullableAddDelayRecurringTaskRequest) Set(val *AddDelayRecurringTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDelayRecurringTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDelayRecurringTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDelayRecurringTaskRequest(val *AddDelayRecurringTaskRequest) *NullableAddDelayRecurringTaskRequest {
	return &NullableAddDelayRecurringTaskRequest{value: val, isSet: true}
}

func (v NullableAddDelayRecurringTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDelayRecurringTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


