/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumprocessingTimeHistogramPluginSchemaUrn the model 'EnumprocessingTimeHistogramPluginSchemaUrn'
type EnumprocessingTimeHistogramPluginSchemaUrn string

// List of Enumprocessing-time-histogram-pluginSchemaUrn
const (
	ENUMPROCESSINGTIMEHISTOGRAMPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINPROCESSING_TIME_HISTOGRAM EnumprocessingTimeHistogramPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:processing-time-histogram"
)

// All allowed values of EnumprocessingTimeHistogramPluginSchemaUrn enum
var AllowedEnumprocessingTimeHistogramPluginSchemaUrnEnumValues = []EnumprocessingTimeHistogramPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:processing-time-histogram",
}

func (v *EnumprocessingTimeHistogramPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumprocessingTimeHistogramPluginSchemaUrn(value)
	for _, existing := range AllowedEnumprocessingTimeHistogramPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumprocessingTimeHistogramPluginSchemaUrn", value)
}

// NewEnumprocessingTimeHistogramPluginSchemaUrnFromValue returns a pointer to a valid EnumprocessingTimeHistogramPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumprocessingTimeHistogramPluginSchemaUrnFromValue(v string) (*EnumprocessingTimeHistogramPluginSchemaUrn, error) {
	ev := EnumprocessingTimeHistogramPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumprocessingTimeHistogramPluginSchemaUrn: valid values are %v", v, AllowedEnumprocessingTimeHistogramPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumprocessingTimeHistogramPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumprocessingTimeHistogramPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumprocessing-time-histogram-pluginSchemaUrn value
func (v EnumprocessingTimeHistogramPluginSchemaUrn) Ptr() *EnumprocessingTimeHistogramPluginSchemaUrn {
	return &v
}

type NullableEnumprocessingTimeHistogramPluginSchemaUrn struct {
	value *EnumprocessingTimeHistogramPluginSchemaUrn
	isSet bool
}

func (v NullableEnumprocessingTimeHistogramPluginSchemaUrn) Get() *EnumprocessingTimeHistogramPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumprocessingTimeHistogramPluginSchemaUrn) Set(val *EnumprocessingTimeHistogramPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumprocessingTimeHistogramPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumprocessingTimeHistogramPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumprocessingTimeHistogramPluginSchemaUrn(val *EnumprocessingTimeHistogramPluginSchemaUrn) *NullableEnumprocessingTimeHistogramPluginSchemaUrn {
	return &NullableEnumprocessingTimeHistogramPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumprocessingTimeHistogramPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumprocessingTimeHistogramPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
