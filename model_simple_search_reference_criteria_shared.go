/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SimpleSearchReferenceCriteriaShared struct for SimpleSearchReferenceCriteriaShared
type SimpleSearchReferenceCriteriaShared struct {
	Schemas []EnumsimpleSearchReferenceCriteriaSchemaUrn `json:"schemas"`
	// Specifies a request criteria object that must match the associated request for references included in this Simple Search Reference Criteria.
	RequestCriteria *string `json:"requestCriteria,omitempty"`
	AllIncludedReferenceControl []string `json:"allIncludedReferenceControl,omitempty"`
	AnyIncludedReferenceControl []string `json:"anyIncludedReferenceControl,omitempty"`
	NotAllIncludedReferenceControl []string `json:"notAllIncludedReferenceControl,omitempty"`
	NoneIncludedReferenceControl []string `json:"noneIncludedReferenceControl,omitempty"`
	// A description for this Search Reference Criteria
	Description *string `json:"description,omitempty"`
}

// NewSimpleSearchReferenceCriteriaShared instantiates a new SimpleSearchReferenceCriteriaShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleSearchReferenceCriteriaShared(schemas []EnumsimpleSearchReferenceCriteriaSchemaUrn) *SimpleSearchReferenceCriteriaShared {
	this := SimpleSearchReferenceCriteriaShared{}
	this.Schemas = schemas
	return &this
}

// NewSimpleSearchReferenceCriteriaSharedWithDefaults instantiates a new SimpleSearchReferenceCriteriaShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleSearchReferenceCriteriaSharedWithDefaults() *SimpleSearchReferenceCriteriaShared {
	this := SimpleSearchReferenceCriteriaShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *SimpleSearchReferenceCriteriaShared) GetSchemas() []EnumsimpleSearchReferenceCriteriaSchemaUrn {
	if o == nil {
		var ret []EnumsimpleSearchReferenceCriteriaSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetSchemasOk() ([]EnumsimpleSearchReferenceCriteriaSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *SimpleSearchReferenceCriteriaShared) SetSchemas(v []EnumsimpleSearchReferenceCriteriaSchemaUrn) {
	o.Schemas = v
}

// GetRequestCriteria returns the RequestCriteria field value if set, zero value otherwise.
func (o *SimpleSearchReferenceCriteriaShared) GetRequestCriteria() string {
	if o == nil || isNil(o.RequestCriteria) {
		var ret string
		return ret
	}
	return *o.RequestCriteria
}

// GetRequestCriteriaOk returns a tuple with the RequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.RequestCriteria) {
    return nil, false
	}
	return o.RequestCriteria, true
}

// HasRequestCriteria returns a boolean if a field has been set.
func (o *SimpleSearchReferenceCriteriaShared) HasRequestCriteria() bool {
	if o != nil && !isNil(o.RequestCriteria) {
		return true
	}

	return false
}

// SetRequestCriteria gets a reference to the given string and assigns it to the RequestCriteria field.
func (o *SimpleSearchReferenceCriteriaShared) SetRequestCriteria(v string) {
	o.RequestCriteria = &v
}

// GetAllIncludedReferenceControl returns the AllIncludedReferenceControl field value if set, zero value otherwise.
func (o *SimpleSearchReferenceCriteriaShared) GetAllIncludedReferenceControl() []string {
	if o == nil || isNil(o.AllIncludedReferenceControl) {
		var ret []string
		return ret
	}
	return o.AllIncludedReferenceControl
}

// GetAllIncludedReferenceControlOk returns a tuple with the AllIncludedReferenceControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetAllIncludedReferenceControlOk() ([]string, bool) {
	if o == nil || isNil(o.AllIncludedReferenceControl) {
    return nil, false
	}
	return o.AllIncludedReferenceControl, true
}

// HasAllIncludedReferenceControl returns a boolean if a field has been set.
func (o *SimpleSearchReferenceCriteriaShared) HasAllIncludedReferenceControl() bool {
	if o != nil && !isNil(o.AllIncludedReferenceControl) {
		return true
	}

	return false
}

// SetAllIncludedReferenceControl gets a reference to the given []string and assigns it to the AllIncludedReferenceControl field.
func (o *SimpleSearchReferenceCriteriaShared) SetAllIncludedReferenceControl(v []string) {
	o.AllIncludedReferenceControl = v
}

// GetAnyIncludedReferenceControl returns the AnyIncludedReferenceControl field value if set, zero value otherwise.
func (o *SimpleSearchReferenceCriteriaShared) GetAnyIncludedReferenceControl() []string {
	if o == nil || isNil(o.AnyIncludedReferenceControl) {
		var ret []string
		return ret
	}
	return o.AnyIncludedReferenceControl
}

// GetAnyIncludedReferenceControlOk returns a tuple with the AnyIncludedReferenceControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetAnyIncludedReferenceControlOk() ([]string, bool) {
	if o == nil || isNil(o.AnyIncludedReferenceControl) {
    return nil, false
	}
	return o.AnyIncludedReferenceControl, true
}

// HasAnyIncludedReferenceControl returns a boolean if a field has been set.
func (o *SimpleSearchReferenceCriteriaShared) HasAnyIncludedReferenceControl() bool {
	if o != nil && !isNil(o.AnyIncludedReferenceControl) {
		return true
	}

	return false
}

// SetAnyIncludedReferenceControl gets a reference to the given []string and assigns it to the AnyIncludedReferenceControl field.
func (o *SimpleSearchReferenceCriteriaShared) SetAnyIncludedReferenceControl(v []string) {
	o.AnyIncludedReferenceControl = v
}

// GetNotAllIncludedReferenceControl returns the NotAllIncludedReferenceControl field value if set, zero value otherwise.
func (o *SimpleSearchReferenceCriteriaShared) GetNotAllIncludedReferenceControl() []string {
	if o == nil || isNil(o.NotAllIncludedReferenceControl) {
		var ret []string
		return ret
	}
	return o.NotAllIncludedReferenceControl
}

// GetNotAllIncludedReferenceControlOk returns a tuple with the NotAllIncludedReferenceControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetNotAllIncludedReferenceControlOk() ([]string, bool) {
	if o == nil || isNil(o.NotAllIncludedReferenceControl) {
    return nil, false
	}
	return o.NotAllIncludedReferenceControl, true
}

// HasNotAllIncludedReferenceControl returns a boolean if a field has been set.
func (o *SimpleSearchReferenceCriteriaShared) HasNotAllIncludedReferenceControl() bool {
	if o != nil && !isNil(o.NotAllIncludedReferenceControl) {
		return true
	}

	return false
}

// SetNotAllIncludedReferenceControl gets a reference to the given []string and assigns it to the NotAllIncludedReferenceControl field.
func (o *SimpleSearchReferenceCriteriaShared) SetNotAllIncludedReferenceControl(v []string) {
	o.NotAllIncludedReferenceControl = v
}

// GetNoneIncludedReferenceControl returns the NoneIncludedReferenceControl field value if set, zero value otherwise.
func (o *SimpleSearchReferenceCriteriaShared) GetNoneIncludedReferenceControl() []string {
	if o == nil || isNil(o.NoneIncludedReferenceControl) {
		var ret []string
		return ret
	}
	return o.NoneIncludedReferenceControl
}

// GetNoneIncludedReferenceControlOk returns a tuple with the NoneIncludedReferenceControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetNoneIncludedReferenceControlOk() ([]string, bool) {
	if o == nil || isNil(o.NoneIncludedReferenceControl) {
    return nil, false
	}
	return o.NoneIncludedReferenceControl, true
}

// HasNoneIncludedReferenceControl returns a boolean if a field has been set.
func (o *SimpleSearchReferenceCriteriaShared) HasNoneIncludedReferenceControl() bool {
	if o != nil && !isNil(o.NoneIncludedReferenceControl) {
		return true
	}

	return false
}

// SetNoneIncludedReferenceControl gets a reference to the given []string and assigns it to the NoneIncludedReferenceControl field.
func (o *SimpleSearchReferenceCriteriaShared) SetNoneIncludedReferenceControl(v []string) {
	o.NoneIncludedReferenceControl = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SimpleSearchReferenceCriteriaShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleSearchReferenceCriteriaShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SimpleSearchReferenceCriteriaShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SimpleSearchReferenceCriteriaShared) SetDescription(v string) {
	o.Description = &v
}

func (o SimpleSearchReferenceCriteriaShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.RequestCriteria) {
		toSerialize["requestCriteria"] = o.RequestCriteria
	}
	if !isNil(o.AllIncludedReferenceControl) {
		toSerialize["allIncludedReferenceControl"] = o.AllIncludedReferenceControl
	}
	if !isNil(o.AnyIncludedReferenceControl) {
		toSerialize["anyIncludedReferenceControl"] = o.AnyIncludedReferenceControl
	}
	if !isNil(o.NotAllIncludedReferenceControl) {
		toSerialize["notAllIncludedReferenceControl"] = o.NotAllIncludedReferenceControl
	}
	if !isNil(o.NoneIncludedReferenceControl) {
		toSerialize["noneIncludedReferenceControl"] = o.NoneIncludedReferenceControl
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleSearchReferenceCriteriaShared struct {
	value *SimpleSearchReferenceCriteriaShared
	isSet bool
}

func (v NullableSimpleSearchReferenceCriteriaShared) Get() *SimpleSearchReferenceCriteriaShared {
	return v.value
}

func (v *NullableSimpleSearchReferenceCriteriaShared) Set(val *SimpleSearchReferenceCriteriaShared) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleSearchReferenceCriteriaShared) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleSearchReferenceCriteriaShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleSearchReferenceCriteriaShared(val *SimpleSearchReferenceCriteriaShared) *NullableSimpleSearchReferenceCriteriaShared {
	return &NullableSimpleSearchReferenceCriteriaShared{value: val, isSet: true}
}

func (v NullableSimpleSearchReferenceCriteriaShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleSearchReferenceCriteriaShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


