/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ChangelogBackendResponse struct for ChangelogBackendResponse
type ChangelogBackendResponse struct {
	Meta *MetaMeta `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas []EnumchangelogBackendSchemaUrn `json:"schemas"`
	// Name of the Backend
	Id string `json:"id"`
	// Specifies the base DN(s) for the data that the backend handles.
	BaseDN []string `json:"baseDN"`
	// Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.
	DbDirectory *string `json:"dbDirectory,omitempty"`
	// Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup of the backend.
	DbDirectoryPermissions *string `json:"dbDirectoryPermissions,omitempty"`
	// Specifies the percentage of JVM memory to allocate to the changelog database cache.
	DbCachePercent *int32 `json:"dbCachePercent,omitempty"`
	// Specifies the database and environment properties for the Berkeley DB Java Edition database for this changelog backend.
	JeProperty []string `json:"jeProperty,omitempty"`
	// Specifies the number of changelog entries written in a single database transaction.
	ChangelogWriteBatchSize *int32 `json:"changelogWriteBatchSize,omitempty"`
	// Specifies the number of changelog entries purged in a single database transaction.
	ChangelogPurgeBatchSize *int32 `json:"changelogPurgeBatchSize,omitempty"`
	// Specifies the capacity of the changelog write queue in number of changes.
	ChangelogWriteQueueCapacity *int32 `json:"changelogWriteQueueCapacity,omitempty"`
	// Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the changelog. If this property does not have any values then no attribute types are indexed.
	IndexIncludeAttribute []string `json:"indexIncludeAttribute,omitempty"`
	// Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the changelog. This property is useful when the index-include-attribute property contains one of the special values \"*\" and \"+\".
	IndexExcludeAttribute []string `json:"indexExcludeAttribute,omitempty"`
	// Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting target-database-size can allow additional changes to be maintained up to the configured size on disk.
	ChangelogMaximumAge string `json:"changelogMaximumAge"`
	// The changelog database is allowed to grow up to this size on disk even if changes are older than the configured changelog-maximum-age.
	TargetDatabaseSize *string `json:"targetDatabaseSize,omitempty"`
	// The base DNs for branches in the data for which to record changes in the changelog.
	ChangelogEntryIncludeBaseDN []string `json:"changelogEntryIncludeBaseDN,omitempty"`
	// The base DNs for branches in the data for which no changelog records should be generated.
	ChangelogEntryExcludeBaseDN []string `json:"changelogEntryExcludeBaseDN,omitempty"`
	// A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
	ChangelogEntryIncludeFilter []string `json:"changelogEntryIncludeFilter,omitempty"`
	// A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
	ChangelogEntryExcludeFilter []string `json:"changelogEntryExcludeFilter,omitempty"`
	// Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.
	ChangelogIncludeAttribute []string `json:"changelogIncludeAttribute,omitempty"`
	// Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.
	ChangelogExcludeAttribute []string `json:"changelogExcludeAttribute,omitempty"`
	// Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.
	ChangelogDeletedEntryIncludeAttribute []string `json:"changelogDeletedEntryIncludeAttribute,omitempty"`
	// Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.
	ChangelogDeletedEntryExcludeAttribute []string `json:"changelogDeletedEntryExcludeAttribute,omitempty"`
	// Specifies which attribute types will be included in a changelog entry on every change.
	ChangelogIncludeKeyAttribute []string `json:"changelogIncludeKeyAttribute,omitempty"`
	// This controls whether all attribute values for a modified attribute (even those values that have not changed) will be included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the modified attribute will be included in the changelog entry.
	ChangelogMaxBeforeAfterValues *int32 `json:"changelogMaxBeforeAfterValues,omitempty"`
	// Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written to changelog entries.
	WriteLastmodAttributes *bool `json:"writeLastmodAttributes,omitempty"`
	// Specifies whether the changelog should provide enough information to be able to revert the changes if desired.
	UseReversibleForm *bool `json:"useReversibleForm,omitempty"`
	IncludeVirtualAttributes []EnumbackendIncludeVirtualAttributesProp `json:"includeVirtualAttributes,omitempty"`
	// Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values, ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the target entry.
	ApplyAccessControlsToChangelogEntryContents *bool `json:"applyAccessControlsToChangelogEntryContents,omitempty"`
	ReportExcludedChangelogAttributes *EnumbackendReportExcludedChangelogAttributesProp `json:"reportExcludedChangelogAttributes,omitempty"`
	SoftDeleteEntryIncludedOperation []EnumbackendSoftDeleteEntryIncludedOperationProp `json:"softDeleteEntryIncludedOperation,omitempty"`
	// Specifies a name to identify the associated backend.
	BackendID string `json:"backendID"`
	// A description for this Backend
	Description *string `json:"description,omitempty"`
	// Indicates whether the backend is enabled in the server.
	Enabled bool `json:"enabled"`
	// Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
	SetDegradedAlertWhenDisabled *bool `json:"setDegradedAlertWhenDisabled,omitempty"`
	// Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
	ReturnUnavailableWhenDisabled *bool `json:"returnUnavailableWhenDisabled,omitempty"`
	// Specifies a notification manager for changes resulting from operations processed through this Backend
	NotificationManager *string `json:"notificationManager,omitempty"`
}

// NewChangelogBackendResponse instantiates a new ChangelogBackendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangelogBackendResponse(schemas []EnumchangelogBackendSchemaUrn, id string, baseDN []string, changelogMaximumAge string, backendID string, enabled bool) *ChangelogBackendResponse {
	this := ChangelogBackendResponse{}
	this.Schemas = schemas
	this.Id = id
	this.BaseDN = baseDN
	this.ChangelogMaximumAge = changelogMaximumAge
	this.BackendID = backendID
	this.Enabled = enabled
	return &this
}

// NewChangelogBackendResponseWithDefaults instantiates a new ChangelogBackendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangelogBackendResponseWithDefaults() *ChangelogBackendResponse {
	this := ChangelogBackendResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
    return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *ChangelogBackendResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
    return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *ChangelogBackendResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value
func (o *ChangelogBackendResponse) GetSchemas() []EnumchangelogBackendSchemaUrn {
	if o == nil {
		var ret []EnumchangelogBackendSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetSchemasOk() ([]EnumchangelogBackendSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ChangelogBackendResponse) SetSchemas(v []EnumchangelogBackendSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *ChangelogBackendResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChangelogBackendResponse) SetId(v string) {
	o.Id = v
}

// GetBaseDN returns the BaseDN field value
func (o *ChangelogBackendResponse) GetBaseDN() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetBaseDNOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BaseDN, true
}

// SetBaseDN sets field value
func (o *ChangelogBackendResponse) SetBaseDN(v []string) {
	o.BaseDN = v
}

// GetDbDirectory returns the DbDirectory field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetDbDirectory() string {
	if o == nil || isNil(o.DbDirectory) {
		var ret string
		return ret
	}
	return *o.DbDirectory
}

// GetDbDirectoryOk returns a tuple with the DbDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetDbDirectoryOk() (*string, bool) {
	if o == nil || isNil(o.DbDirectory) {
    return nil, false
	}
	return o.DbDirectory, true
}

// HasDbDirectory returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasDbDirectory() bool {
	if o != nil && !isNil(o.DbDirectory) {
		return true
	}

	return false
}

// SetDbDirectory gets a reference to the given string and assigns it to the DbDirectory field.
func (o *ChangelogBackendResponse) SetDbDirectory(v string) {
	o.DbDirectory = &v
}

// GetDbDirectoryPermissions returns the DbDirectoryPermissions field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetDbDirectoryPermissions() string {
	if o == nil || isNil(o.DbDirectoryPermissions) {
		var ret string
		return ret
	}
	return *o.DbDirectoryPermissions
}

// GetDbDirectoryPermissionsOk returns a tuple with the DbDirectoryPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetDbDirectoryPermissionsOk() (*string, bool) {
	if o == nil || isNil(o.DbDirectoryPermissions) {
    return nil, false
	}
	return o.DbDirectoryPermissions, true
}

// HasDbDirectoryPermissions returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasDbDirectoryPermissions() bool {
	if o != nil && !isNil(o.DbDirectoryPermissions) {
		return true
	}

	return false
}

// SetDbDirectoryPermissions gets a reference to the given string and assigns it to the DbDirectoryPermissions field.
func (o *ChangelogBackendResponse) SetDbDirectoryPermissions(v string) {
	o.DbDirectoryPermissions = &v
}

// GetDbCachePercent returns the DbCachePercent field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetDbCachePercent() int32 {
	if o == nil || isNil(o.DbCachePercent) {
		var ret int32
		return ret
	}
	return *o.DbCachePercent
}

// GetDbCachePercentOk returns a tuple with the DbCachePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetDbCachePercentOk() (*int32, bool) {
	if o == nil || isNil(o.DbCachePercent) {
    return nil, false
	}
	return o.DbCachePercent, true
}

// HasDbCachePercent returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasDbCachePercent() bool {
	if o != nil && !isNil(o.DbCachePercent) {
		return true
	}

	return false
}

// SetDbCachePercent gets a reference to the given int32 and assigns it to the DbCachePercent field.
func (o *ChangelogBackendResponse) SetDbCachePercent(v int32) {
	o.DbCachePercent = &v
}

// GetJeProperty returns the JeProperty field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetJeProperty() []string {
	if o == nil || isNil(o.JeProperty) {
		var ret []string
		return ret
	}
	return o.JeProperty
}

// GetJePropertyOk returns a tuple with the JeProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetJePropertyOk() ([]string, bool) {
	if o == nil || isNil(o.JeProperty) {
    return nil, false
	}
	return o.JeProperty, true
}

// HasJeProperty returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasJeProperty() bool {
	if o != nil && !isNil(o.JeProperty) {
		return true
	}

	return false
}

// SetJeProperty gets a reference to the given []string and assigns it to the JeProperty field.
func (o *ChangelogBackendResponse) SetJeProperty(v []string) {
	o.JeProperty = v
}

// GetChangelogWriteBatchSize returns the ChangelogWriteBatchSize field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogWriteBatchSize() int32 {
	if o == nil || isNil(o.ChangelogWriteBatchSize) {
		var ret int32
		return ret
	}
	return *o.ChangelogWriteBatchSize
}

// GetChangelogWriteBatchSizeOk returns a tuple with the ChangelogWriteBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogWriteBatchSizeOk() (*int32, bool) {
	if o == nil || isNil(o.ChangelogWriteBatchSize) {
    return nil, false
	}
	return o.ChangelogWriteBatchSize, true
}

// HasChangelogWriteBatchSize returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogWriteBatchSize() bool {
	if o != nil && !isNil(o.ChangelogWriteBatchSize) {
		return true
	}

	return false
}

// SetChangelogWriteBatchSize gets a reference to the given int32 and assigns it to the ChangelogWriteBatchSize field.
func (o *ChangelogBackendResponse) SetChangelogWriteBatchSize(v int32) {
	o.ChangelogWriteBatchSize = &v
}

// GetChangelogPurgeBatchSize returns the ChangelogPurgeBatchSize field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogPurgeBatchSize() int32 {
	if o == nil || isNil(o.ChangelogPurgeBatchSize) {
		var ret int32
		return ret
	}
	return *o.ChangelogPurgeBatchSize
}

// GetChangelogPurgeBatchSizeOk returns a tuple with the ChangelogPurgeBatchSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogPurgeBatchSizeOk() (*int32, bool) {
	if o == nil || isNil(o.ChangelogPurgeBatchSize) {
    return nil, false
	}
	return o.ChangelogPurgeBatchSize, true
}

// HasChangelogPurgeBatchSize returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogPurgeBatchSize() bool {
	if o != nil && !isNil(o.ChangelogPurgeBatchSize) {
		return true
	}

	return false
}

// SetChangelogPurgeBatchSize gets a reference to the given int32 and assigns it to the ChangelogPurgeBatchSize field.
func (o *ChangelogBackendResponse) SetChangelogPurgeBatchSize(v int32) {
	o.ChangelogPurgeBatchSize = &v
}

// GetChangelogWriteQueueCapacity returns the ChangelogWriteQueueCapacity field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogWriteQueueCapacity() int32 {
	if o == nil || isNil(o.ChangelogWriteQueueCapacity) {
		var ret int32
		return ret
	}
	return *o.ChangelogWriteQueueCapacity
}

// GetChangelogWriteQueueCapacityOk returns a tuple with the ChangelogWriteQueueCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogWriteQueueCapacityOk() (*int32, bool) {
	if o == nil || isNil(o.ChangelogWriteQueueCapacity) {
    return nil, false
	}
	return o.ChangelogWriteQueueCapacity, true
}

// HasChangelogWriteQueueCapacity returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogWriteQueueCapacity() bool {
	if o != nil && !isNil(o.ChangelogWriteQueueCapacity) {
		return true
	}

	return false
}

// SetChangelogWriteQueueCapacity gets a reference to the given int32 and assigns it to the ChangelogWriteQueueCapacity field.
func (o *ChangelogBackendResponse) SetChangelogWriteQueueCapacity(v int32) {
	o.ChangelogWriteQueueCapacity = &v
}

// GetIndexIncludeAttribute returns the IndexIncludeAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetIndexIncludeAttribute() []string {
	if o == nil || isNil(o.IndexIncludeAttribute) {
		var ret []string
		return ret
	}
	return o.IndexIncludeAttribute
}

// GetIndexIncludeAttributeOk returns a tuple with the IndexIncludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetIndexIncludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.IndexIncludeAttribute) {
    return nil, false
	}
	return o.IndexIncludeAttribute, true
}

// HasIndexIncludeAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasIndexIncludeAttribute() bool {
	if o != nil && !isNil(o.IndexIncludeAttribute) {
		return true
	}

	return false
}

// SetIndexIncludeAttribute gets a reference to the given []string and assigns it to the IndexIncludeAttribute field.
func (o *ChangelogBackendResponse) SetIndexIncludeAttribute(v []string) {
	o.IndexIncludeAttribute = v
}

// GetIndexExcludeAttribute returns the IndexExcludeAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetIndexExcludeAttribute() []string {
	if o == nil || isNil(o.IndexExcludeAttribute) {
		var ret []string
		return ret
	}
	return o.IndexExcludeAttribute
}

// GetIndexExcludeAttributeOk returns a tuple with the IndexExcludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetIndexExcludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.IndexExcludeAttribute) {
    return nil, false
	}
	return o.IndexExcludeAttribute, true
}

// HasIndexExcludeAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasIndexExcludeAttribute() bool {
	if o != nil && !isNil(o.IndexExcludeAttribute) {
		return true
	}

	return false
}

// SetIndexExcludeAttribute gets a reference to the given []string and assigns it to the IndexExcludeAttribute field.
func (o *ChangelogBackendResponse) SetIndexExcludeAttribute(v []string) {
	o.IndexExcludeAttribute = v
}

// GetChangelogMaximumAge returns the ChangelogMaximumAge field value
func (o *ChangelogBackendResponse) GetChangelogMaximumAge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangelogMaximumAge
}

// GetChangelogMaximumAgeOk returns a tuple with the ChangelogMaximumAge field value
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogMaximumAgeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ChangelogMaximumAge, true
}

// SetChangelogMaximumAge sets field value
func (o *ChangelogBackendResponse) SetChangelogMaximumAge(v string) {
	o.ChangelogMaximumAge = v
}

// GetTargetDatabaseSize returns the TargetDatabaseSize field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetTargetDatabaseSize() string {
	if o == nil || isNil(o.TargetDatabaseSize) {
		var ret string
		return ret
	}
	return *o.TargetDatabaseSize
}

// GetTargetDatabaseSizeOk returns a tuple with the TargetDatabaseSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetTargetDatabaseSizeOk() (*string, bool) {
	if o == nil || isNil(o.TargetDatabaseSize) {
    return nil, false
	}
	return o.TargetDatabaseSize, true
}

// HasTargetDatabaseSize returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasTargetDatabaseSize() bool {
	if o != nil && !isNil(o.TargetDatabaseSize) {
		return true
	}

	return false
}

// SetTargetDatabaseSize gets a reference to the given string and assigns it to the TargetDatabaseSize field.
func (o *ChangelogBackendResponse) SetTargetDatabaseSize(v string) {
	o.TargetDatabaseSize = &v
}

// GetChangelogEntryIncludeBaseDN returns the ChangelogEntryIncludeBaseDN field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogEntryIncludeBaseDN() []string {
	if o == nil || isNil(o.ChangelogEntryIncludeBaseDN) {
		var ret []string
		return ret
	}
	return o.ChangelogEntryIncludeBaseDN
}

// GetChangelogEntryIncludeBaseDNOk returns a tuple with the ChangelogEntryIncludeBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogEntryIncludeBaseDNOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogEntryIncludeBaseDN) {
    return nil, false
	}
	return o.ChangelogEntryIncludeBaseDN, true
}

// HasChangelogEntryIncludeBaseDN returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogEntryIncludeBaseDN() bool {
	if o != nil && !isNil(o.ChangelogEntryIncludeBaseDN) {
		return true
	}

	return false
}

// SetChangelogEntryIncludeBaseDN gets a reference to the given []string and assigns it to the ChangelogEntryIncludeBaseDN field.
func (o *ChangelogBackendResponse) SetChangelogEntryIncludeBaseDN(v []string) {
	o.ChangelogEntryIncludeBaseDN = v
}

// GetChangelogEntryExcludeBaseDN returns the ChangelogEntryExcludeBaseDN field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogEntryExcludeBaseDN() []string {
	if o == nil || isNil(o.ChangelogEntryExcludeBaseDN) {
		var ret []string
		return ret
	}
	return o.ChangelogEntryExcludeBaseDN
}

// GetChangelogEntryExcludeBaseDNOk returns a tuple with the ChangelogEntryExcludeBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogEntryExcludeBaseDNOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogEntryExcludeBaseDN) {
    return nil, false
	}
	return o.ChangelogEntryExcludeBaseDN, true
}

// HasChangelogEntryExcludeBaseDN returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogEntryExcludeBaseDN() bool {
	if o != nil && !isNil(o.ChangelogEntryExcludeBaseDN) {
		return true
	}

	return false
}

// SetChangelogEntryExcludeBaseDN gets a reference to the given []string and assigns it to the ChangelogEntryExcludeBaseDN field.
func (o *ChangelogBackendResponse) SetChangelogEntryExcludeBaseDN(v []string) {
	o.ChangelogEntryExcludeBaseDN = v
}

// GetChangelogEntryIncludeFilter returns the ChangelogEntryIncludeFilter field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogEntryIncludeFilter() []string {
	if o == nil || isNil(o.ChangelogEntryIncludeFilter) {
		var ret []string
		return ret
	}
	return o.ChangelogEntryIncludeFilter
}

// GetChangelogEntryIncludeFilterOk returns a tuple with the ChangelogEntryIncludeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogEntryIncludeFilterOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogEntryIncludeFilter) {
    return nil, false
	}
	return o.ChangelogEntryIncludeFilter, true
}

// HasChangelogEntryIncludeFilter returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogEntryIncludeFilter() bool {
	if o != nil && !isNil(o.ChangelogEntryIncludeFilter) {
		return true
	}

	return false
}

// SetChangelogEntryIncludeFilter gets a reference to the given []string and assigns it to the ChangelogEntryIncludeFilter field.
func (o *ChangelogBackendResponse) SetChangelogEntryIncludeFilter(v []string) {
	o.ChangelogEntryIncludeFilter = v
}

// GetChangelogEntryExcludeFilter returns the ChangelogEntryExcludeFilter field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogEntryExcludeFilter() []string {
	if o == nil || isNil(o.ChangelogEntryExcludeFilter) {
		var ret []string
		return ret
	}
	return o.ChangelogEntryExcludeFilter
}

// GetChangelogEntryExcludeFilterOk returns a tuple with the ChangelogEntryExcludeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogEntryExcludeFilterOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogEntryExcludeFilter) {
    return nil, false
	}
	return o.ChangelogEntryExcludeFilter, true
}

// HasChangelogEntryExcludeFilter returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogEntryExcludeFilter() bool {
	if o != nil && !isNil(o.ChangelogEntryExcludeFilter) {
		return true
	}

	return false
}

// SetChangelogEntryExcludeFilter gets a reference to the given []string and assigns it to the ChangelogEntryExcludeFilter field.
func (o *ChangelogBackendResponse) SetChangelogEntryExcludeFilter(v []string) {
	o.ChangelogEntryExcludeFilter = v
}

// GetChangelogIncludeAttribute returns the ChangelogIncludeAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogIncludeAttribute() []string {
	if o == nil || isNil(o.ChangelogIncludeAttribute) {
		var ret []string
		return ret
	}
	return o.ChangelogIncludeAttribute
}

// GetChangelogIncludeAttributeOk returns a tuple with the ChangelogIncludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogIncludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogIncludeAttribute) {
    return nil, false
	}
	return o.ChangelogIncludeAttribute, true
}

// HasChangelogIncludeAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogIncludeAttribute() bool {
	if o != nil && !isNil(o.ChangelogIncludeAttribute) {
		return true
	}

	return false
}

// SetChangelogIncludeAttribute gets a reference to the given []string and assigns it to the ChangelogIncludeAttribute field.
func (o *ChangelogBackendResponse) SetChangelogIncludeAttribute(v []string) {
	o.ChangelogIncludeAttribute = v
}

// GetChangelogExcludeAttribute returns the ChangelogExcludeAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogExcludeAttribute() []string {
	if o == nil || isNil(o.ChangelogExcludeAttribute) {
		var ret []string
		return ret
	}
	return o.ChangelogExcludeAttribute
}

// GetChangelogExcludeAttributeOk returns a tuple with the ChangelogExcludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogExcludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogExcludeAttribute) {
    return nil, false
	}
	return o.ChangelogExcludeAttribute, true
}

// HasChangelogExcludeAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogExcludeAttribute() bool {
	if o != nil && !isNil(o.ChangelogExcludeAttribute) {
		return true
	}

	return false
}

// SetChangelogExcludeAttribute gets a reference to the given []string and assigns it to the ChangelogExcludeAttribute field.
func (o *ChangelogBackendResponse) SetChangelogExcludeAttribute(v []string) {
	o.ChangelogExcludeAttribute = v
}

// GetChangelogDeletedEntryIncludeAttribute returns the ChangelogDeletedEntryIncludeAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogDeletedEntryIncludeAttribute() []string {
	if o == nil || isNil(o.ChangelogDeletedEntryIncludeAttribute) {
		var ret []string
		return ret
	}
	return o.ChangelogDeletedEntryIncludeAttribute
}

// GetChangelogDeletedEntryIncludeAttributeOk returns a tuple with the ChangelogDeletedEntryIncludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogDeletedEntryIncludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogDeletedEntryIncludeAttribute) {
    return nil, false
	}
	return o.ChangelogDeletedEntryIncludeAttribute, true
}

// HasChangelogDeletedEntryIncludeAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogDeletedEntryIncludeAttribute() bool {
	if o != nil && !isNil(o.ChangelogDeletedEntryIncludeAttribute) {
		return true
	}

	return false
}

// SetChangelogDeletedEntryIncludeAttribute gets a reference to the given []string and assigns it to the ChangelogDeletedEntryIncludeAttribute field.
func (o *ChangelogBackendResponse) SetChangelogDeletedEntryIncludeAttribute(v []string) {
	o.ChangelogDeletedEntryIncludeAttribute = v
}

// GetChangelogDeletedEntryExcludeAttribute returns the ChangelogDeletedEntryExcludeAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogDeletedEntryExcludeAttribute() []string {
	if o == nil || isNil(o.ChangelogDeletedEntryExcludeAttribute) {
		var ret []string
		return ret
	}
	return o.ChangelogDeletedEntryExcludeAttribute
}

// GetChangelogDeletedEntryExcludeAttributeOk returns a tuple with the ChangelogDeletedEntryExcludeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogDeletedEntryExcludeAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogDeletedEntryExcludeAttribute) {
    return nil, false
	}
	return o.ChangelogDeletedEntryExcludeAttribute, true
}

// HasChangelogDeletedEntryExcludeAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogDeletedEntryExcludeAttribute() bool {
	if o != nil && !isNil(o.ChangelogDeletedEntryExcludeAttribute) {
		return true
	}

	return false
}

// SetChangelogDeletedEntryExcludeAttribute gets a reference to the given []string and assigns it to the ChangelogDeletedEntryExcludeAttribute field.
func (o *ChangelogBackendResponse) SetChangelogDeletedEntryExcludeAttribute(v []string) {
	o.ChangelogDeletedEntryExcludeAttribute = v
}

// GetChangelogIncludeKeyAttribute returns the ChangelogIncludeKeyAttribute field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogIncludeKeyAttribute() []string {
	if o == nil || isNil(o.ChangelogIncludeKeyAttribute) {
		var ret []string
		return ret
	}
	return o.ChangelogIncludeKeyAttribute
}

// GetChangelogIncludeKeyAttributeOk returns a tuple with the ChangelogIncludeKeyAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogIncludeKeyAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ChangelogIncludeKeyAttribute) {
    return nil, false
	}
	return o.ChangelogIncludeKeyAttribute, true
}

// HasChangelogIncludeKeyAttribute returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogIncludeKeyAttribute() bool {
	if o != nil && !isNil(o.ChangelogIncludeKeyAttribute) {
		return true
	}

	return false
}

// SetChangelogIncludeKeyAttribute gets a reference to the given []string and assigns it to the ChangelogIncludeKeyAttribute field.
func (o *ChangelogBackendResponse) SetChangelogIncludeKeyAttribute(v []string) {
	o.ChangelogIncludeKeyAttribute = v
}

// GetChangelogMaxBeforeAfterValues returns the ChangelogMaxBeforeAfterValues field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetChangelogMaxBeforeAfterValues() int32 {
	if o == nil || isNil(o.ChangelogMaxBeforeAfterValues) {
		var ret int32
		return ret
	}
	return *o.ChangelogMaxBeforeAfterValues
}

// GetChangelogMaxBeforeAfterValuesOk returns a tuple with the ChangelogMaxBeforeAfterValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetChangelogMaxBeforeAfterValuesOk() (*int32, bool) {
	if o == nil || isNil(o.ChangelogMaxBeforeAfterValues) {
    return nil, false
	}
	return o.ChangelogMaxBeforeAfterValues, true
}

// HasChangelogMaxBeforeAfterValues returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasChangelogMaxBeforeAfterValues() bool {
	if o != nil && !isNil(o.ChangelogMaxBeforeAfterValues) {
		return true
	}

	return false
}

// SetChangelogMaxBeforeAfterValues gets a reference to the given int32 and assigns it to the ChangelogMaxBeforeAfterValues field.
func (o *ChangelogBackendResponse) SetChangelogMaxBeforeAfterValues(v int32) {
	o.ChangelogMaxBeforeAfterValues = &v
}

// GetWriteLastmodAttributes returns the WriteLastmodAttributes field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetWriteLastmodAttributes() bool {
	if o == nil || isNil(o.WriteLastmodAttributes) {
		var ret bool
		return ret
	}
	return *o.WriteLastmodAttributes
}

// GetWriteLastmodAttributesOk returns a tuple with the WriteLastmodAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetWriteLastmodAttributesOk() (*bool, bool) {
	if o == nil || isNil(o.WriteLastmodAttributes) {
    return nil, false
	}
	return o.WriteLastmodAttributes, true
}

// HasWriteLastmodAttributes returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasWriteLastmodAttributes() bool {
	if o != nil && !isNil(o.WriteLastmodAttributes) {
		return true
	}

	return false
}

// SetWriteLastmodAttributes gets a reference to the given bool and assigns it to the WriteLastmodAttributes field.
func (o *ChangelogBackendResponse) SetWriteLastmodAttributes(v bool) {
	o.WriteLastmodAttributes = &v
}

// GetUseReversibleForm returns the UseReversibleForm field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetUseReversibleForm() bool {
	if o == nil || isNil(o.UseReversibleForm) {
		var ret bool
		return ret
	}
	return *o.UseReversibleForm
}

// GetUseReversibleFormOk returns a tuple with the UseReversibleForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetUseReversibleFormOk() (*bool, bool) {
	if o == nil || isNil(o.UseReversibleForm) {
    return nil, false
	}
	return o.UseReversibleForm, true
}

// HasUseReversibleForm returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasUseReversibleForm() bool {
	if o != nil && !isNil(o.UseReversibleForm) {
		return true
	}

	return false
}

// SetUseReversibleForm gets a reference to the given bool and assigns it to the UseReversibleForm field.
func (o *ChangelogBackendResponse) SetUseReversibleForm(v bool) {
	o.UseReversibleForm = &v
}

// GetIncludeVirtualAttributes returns the IncludeVirtualAttributes field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetIncludeVirtualAttributes() []EnumbackendIncludeVirtualAttributesProp {
	if o == nil || isNil(o.IncludeVirtualAttributes) {
		var ret []EnumbackendIncludeVirtualAttributesProp
		return ret
	}
	return o.IncludeVirtualAttributes
}

// GetIncludeVirtualAttributesOk returns a tuple with the IncludeVirtualAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetIncludeVirtualAttributesOk() ([]EnumbackendIncludeVirtualAttributesProp, bool) {
	if o == nil || isNil(o.IncludeVirtualAttributes) {
    return nil, false
	}
	return o.IncludeVirtualAttributes, true
}

// HasIncludeVirtualAttributes returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasIncludeVirtualAttributes() bool {
	if o != nil && !isNil(o.IncludeVirtualAttributes) {
		return true
	}

	return false
}

// SetIncludeVirtualAttributes gets a reference to the given []EnumbackendIncludeVirtualAttributesProp and assigns it to the IncludeVirtualAttributes field.
func (o *ChangelogBackendResponse) SetIncludeVirtualAttributes(v []EnumbackendIncludeVirtualAttributesProp) {
	o.IncludeVirtualAttributes = v
}

// GetApplyAccessControlsToChangelogEntryContents returns the ApplyAccessControlsToChangelogEntryContents field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetApplyAccessControlsToChangelogEntryContents() bool {
	if o == nil || isNil(o.ApplyAccessControlsToChangelogEntryContents) {
		var ret bool
		return ret
	}
	return *o.ApplyAccessControlsToChangelogEntryContents
}

// GetApplyAccessControlsToChangelogEntryContentsOk returns a tuple with the ApplyAccessControlsToChangelogEntryContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetApplyAccessControlsToChangelogEntryContentsOk() (*bool, bool) {
	if o == nil || isNil(o.ApplyAccessControlsToChangelogEntryContents) {
    return nil, false
	}
	return o.ApplyAccessControlsToChangelogEntryContents, true
}

// HasApplyAccessControlsToChangelogEntryContents returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasApplyAccessControlsToChangelogEntryContents() bool {
	if o != nil && !isNil(o.ApplyAccessControlsToChangelogEntryContents) {
		return true
	}

	return false
}

// SetApplyAccessControlsToChangelogEntryContents gets a reference to the given bool and assigns it to the ApplyAccessControlsToChangelogEntryContents field.
func (o *ChangelogBackendResponse) SetApplyAccessControlsToChangelogEntryContents(v bool) {
	o.ApplyAccessControlsToChangelogEntryContents = &v
}

// GetReportExcludedChangelogAttributes returns the ReportExcludedChangelogAttributes field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetReportExcludedChangelogAttributes() EnumbackendReportExcludedChangelogAttributesProp {
	if o == nil || isNil(o.ReportExcludedChangelogAttributes) {
		var ret EnumbackendReportExcludedChangelogAttributesProp
		return ret
	}
	return *o.ReportExcludedChangelogAttributes
}

// GetReportExcludedChangelogAttributesOk returns a tuple with the ReportExcludedChangelogAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetReportExcludedChangelogAttributesOk() (*EnumbackendReportExcludedChangelogAttributesProp, bool) {
	if o == nil || isNil(o.ReportExcludedChangelogAttributes) {
    return nil, false
	}
	return o.ReportExcludedChangelogAttributes, true
}

// HasReportExcludedChangelogAttributes returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasReportExcludedChangelogAttributes() bool {
	if o != nil && !isNil(o.ReportExcludedChangelogAttributes) {
		return true
	}

	return false
}

// SetReportExcludedChangelogAttributes gets a reference to the given EnumbackendReportExcludedChangelogAttributesProp and assigns it to the ReportExcludedChangelogAttributes field.
func (o *ChangelogBackendResponse) SetReportExcludedChangelogAttributes(v EnumbackendReportExcludedChangelogAttributesProp) {
	o.ReportExcludedChangelogAttributes = &v
}

// GetSoftDeleteEntryIncludedOperation returns the SoftDeleteEntryIncludedOperation field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetSoftDeleteEntryIncludedOperation() []EnumbackendSoftDeleteEntryIncludedOperationProp {
	if o == nil || isNil(o.SoftDeleteEntryIncludedOperation) {
		var ret []EnumbackendSoftDeleteEntryIncludedOperationProp
		return ret
	}
	return o.SoftDeleteEntryIncludedOperation
}

// GetSoftDeleteEntryIncludedOperationOk returns a tuple with the SoftDeleteEntryIncludedOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetSoftDeleteEntryIncludedOperationOk() ([]EnumbackendSoftDeleteEntryIncludedOperationProp, bool) {
	if o == nil || isNil(o.SoftDeleteEntryIncludedOperation) {
    return nil, false
	}
	return o.SoftDeleteEntryIncludedOperation, true
}

// HasSoftDeleteEntryIncludedOperation returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasSoftDeleteEntryIncludedOperation() bool {
	if o != nil && !isNil(o.SoftDeleteEntryIncludedOperation) {
		return true
	}

	return false
}

// SetSoftDeleteEntryIncludedOperation gets a reference to the given []EnumbackendSoftDeleteEntryIncludedOperationProp and assigns it to the SoftDeleteEntryIncludedOperation field.
func (o *ChangelogBackendResponse) SetSoftDeleteEntryIncludedOperation(v []EnumbackendSoftDeleteEntryIncludedOperationProp) {
	o.SoftDeleteEntryIncludedOperation = v
}

// GetBackendID returns the BackendID field value
func (o *ChangelogBackendResponse) GetBackendID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackendID
}

// GetBackendIDOk returns a tuple with the BackendID field value
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetBackendIDOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BackendID, true
}

// SetBackendID sets field value
func (o *ChangelogBackendResponse) SetBackendID(v string) {
	o.BackendID = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ChangelogBackendResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *ChangelogBackendResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ChangelogBackendResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSetDegradedAlertWhenDisabled returns the SetDegradedAlertWhenDisabled field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetSetDegradedAlertWhenDisabled() bool {
	if o == nil || isNil(o.SetDegradedAlertWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.SetDegradedAlertWhenDisabled
}

// GetSetDegradedAlertWhenDisabledOk returns a tuple with the SetDegradedAlertWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetSetDegradedAlertWhenDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.SetDegradedAlertWhenDisabled) {
    return nil, false
	}
	return o.SetDegradedAlertWhenDisabled, true
}

// HasSetDegradedAlertWhenDisabled returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasSetDegradedAlertWhenDisabled() bool {
	if o != nil && !isNil(o.SetDegradedAlertWhenDisabled) {
		return true
	}

	return false
}

// SetSetDegradedAlertWhenDisabled gets a reference to the given bool and assigns it to the SetDegradedAlertWhenDisabled field.
func (o *ChangelogBackendResponse) SetSetDegradedAlertWhenDisabled(v bool) {
	o.SetDegradedAlertWhenDisabled = &v
}

// GetReturnUnavailableWhenDisabled returns the ReturnUnavailableWhenDisabled field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetReturnUnavailableWhenDisabled() bool {
	if o == nil || isNil(o.ReturnUnavailableWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.ReturnUnavailableWhenDisabled
}

// GetReturnUnavailableWhenDisabledOk returns a tuple with the ReturnUnavailableWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetReturnUnavailableWhenDisabledOk() (*bool, bool) {
	if o == nil || isNil(o.ReturnUnavailableWhenDisabled) {
    return nil, false
	}
	return o.ReturnUnavailableWhenDisabled, true
}

// HasReturnUnavailableWhenDisabled returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasReturnUnavailableWhenDisabled() bool {
	if o != nil && !isNil(o.ReturnUnavailableWhenDisabled) {
		return true
	}

	return false
}

// SetReturnUnavailableWhenDisabled gets a reference to the given bool and assigns it to the ReturnUnavailableWhenDisabled field.
func (o *ChangelogBackendResponse) SetReturnUnavailableWhenDisabled(v bool) {
	o.ReturnUnavailableWhenDisabled = &v
}

// GetNotificationManager returns the NotificationManager field value if set, zero value otherwise.
func (o *ChangelogBackendResponse) GetNotificationManager() string {
	if o == nil || isNil(o.NotificationManager) {
		var ret string
		return ret
	}
	return *o.NotificationManager
}

// GetNotificationManagerOk returns a tuple with the NotificationManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangelogBackendResponse) GetNotificationManagerOk() (*string, bool) {
	if o == nil || isNil(o.NotificationManager) {
    return nil, false
	}
	return o.NotificationManager, true
}

// HasNotificationManager returns a boolean if a field has been set.
func (o *ChangelogBackendResponse) HasNotificationManager() bool {
	if o != nil && !isNil(o.NotificationManager) {
		return true
	}

	return false
}

// SetNotificationManager gets a reference to the given string and assigns it to the NotificationManager field.
func (o *ChangelogBackendResponse) SetNotificationManager(v string) {
	o.NotificationManager = &v
}

func (o ChangelogBackendResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["baseDN"] = o.BaseDN
	}
	if !isNil(o.DbDirectory) {
		toSerialize["dbDirectory"] = o.DbDirectory
	}
	if !isNil(o.DbDirectoryPermissions) {
		toSerialize["dbDirectoryPermissions"] = o.DbDirectoryPermissions
	}
	if !isNil(o.DbCachePercent) {
		toSerialize["dbCachePercent"] = o.DbCachePercent
	}
	if !isNil(o.JeProperty) {
		toSerialize["jeProperty"] = o.JeProperty
	}
	if !isNil(o.ChangelogWriteBatchSize) {
		toSerialize["changelogWriteBatchSize"] = o.ChangelogWriteBatchSize
	}
	if !isNil(o.ChangelogPurgeBatchSize) {
		toSerialize["changelogPurgeBatchSize"] = o.ChangelogPurgeBatchSize
	}
	if !isNil(o.ChangelogWriteQueueCapacity) {
		toSerialize["changelogWriteQueueCapacity"] = o.ChangelogWriteQueueCapacity
	}
	if !isNil(o.IndexIncludeAttribute) {
		toSerialize["indexIncludeAttribute"] = o.IndexIncludeAttribute
	}
	if !isNil(o.IndexExcludeAttribute) {
		toSerialize["indexExcludeAttribute"] = o.IndexExcludeAttribute
	}
	if true {
		toSerialize["changelogMaximumAge"] = o.ChangelogMaximumAge
	}
	if !isNil(o.TargetDatabaseSize) {
		toSerialize["targetDatabaseSize"] = o.TargetDatabaseSize
	}
	if !isNil(o.ChangelogEntryIncludeBaseDN) {
		toSerialize["changelogEntryIncludeBaseDN"] = o.ChangelogEntryIncludeBaseDN
	}
	if !isNil(o.ChangelogEntryExcludeBaseDN) {
		toSerialize["changelogEntryExcludeBaseDN"] = o.ChangelogEntryExcludeBaseDN
	}
	if !isNil(o.ChangelogEntryIncludeFilter) {
		toSerialize["changelogEntryIncludeFilter"] = o.ChangelogEntryIncludeFilter
	}
	if !isNil(o.ChangelogEntryExcludeFilter) {
		toSerialize["changelogEntryExcludeFilter"] = o.ChangelogEntryExcludeFilter
	}
	if !isNil(o.ChangelogIncludeAttribute) {
		toSerialize["changelogIncludeAttribute"] = o.ChangelogIncludeAttribute
	}
	if !isNil(o.ChangelogExcludeAttribute) {
		toSerialize["changelogExcludeAttribute"] = o.ChangelogExcludeAttribute
	}
	if !isNil(o.ChangelogDeletedEntryIncludeAttribute) {
		toSerialize["changelogDeletedEntryIncludeAttribute"] = o.ChangelogDeletedEntryIncludeAttribute
	}
	if !isNil(o.ChangelogDeletedEntryExcludeAttribute) {
		toSerialize["changelogDeletedEntryExcludeAttribute"] = o.ChangelogDeletedEntryExcludeAttribute
	}
	if !isNil(o.ChangelogIncludeKeyAttribute) {
		toSerialize["changelogIncludeKeyAttribute"] = o.ChangelogIncludeKeyAttribute
	}
	if !isNil(o.ChangelogMaxBeforeAfterValues) {
		toSerialize["changelogMaxBeforeAfterValues"] = o.ChangelogMaxBeforeAfterValues
	}
	if !isNil(o.WriteLastmodAttributes) {
		toSerialize["writeLastmodAttributes"] = o.WriteLastmodAttributes
	}
	if !isNil(o.UseReversibleForm) {
		toSerialize["useReversibleForm"] = o.UseReversibleForm
	}
	if !isNil(o.IncludeVirtualAttributes) {
		toSerialize["includeVirtualAttributes"] = o.IncludeVirtualAttributes
	}
	if !isNil(o.ApplyAccessControlsToChangelogEntryContents) {
		toSerialize["applyAccessControlsToChangelogEntryContents"] = o.ApplyAccessControlsToChangelogEntryContents
	}
	if !isNil(o.ReportExcludedChangelogAttributes) {
		toSerialize["reportExcludedChangelogAttributes"] = o.ReportExcludedChangelogAttributes
	}
	if !isNil(o.SoftDeleteEntryIncludedOperation) {
		toSerialize["softDeleteEntryIncludedOperation"] = o.SoftDeleteEntryIncludedOperation
	}
	if true {
		toSerialize["backendID"] = o.BackendID
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.SetDegradedAlertWhenDisabled) {
		toSerialize["setDegradedAlertWhenDisabled"] = o.SetDegradedAlertWhenDisabled
	}
	if !isNil(o.ReturnUnavailableWhenDisabled) {
		toSerialize["returnUnavailableWhenDisabled"] = o.ReturnUnavailableWhenDisabled
	}
	if !isNil(o.NotificationManager) {
		toSerialize["notificationManager"] = o.NotificationManager
	}
	return json.Marshal(toSerialize)
}

type NullableChangelogBackendResponse struct {
	value *ChangelogBackendResponse
	isSet bool
}

func (v NullableChangelogBackendResponse) Get() *ChangelogBackendResponse {
	return v.value
}

func (v *NullableChangelogBackendResponse) Set(val *ChangelogBackendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChangelogBackendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChangelogBackendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangelogBackendResponse(val *ChangelogBackendResponse) *NullableChangelogBackendResponse {
	return &NullableChangelogBackendResponse{value: val, isSet: true}
}

func (v NullableChangelogBackendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangelogBackendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


