/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumconsoleJsonAuditLogPublisherSchemaUrn the model 'EnumconsoleJsonAuditLogPublisherSchemaUrn'
type EnumconsoleJsonAuditLogPublisherSchemaUrn string

// List of Enumconsole-json-audit-log-publisherSchemaUrn
const (
	ENUMCONSOLEJSONAUDITLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERCONSOLE_JSON_AUDIT EnumconsoleJsonAuditLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:console-json-audit"
)

// All allowed values of EnumconsoleJsonAuditLogPublisherSchemaUrn enum
var AllowedEnumconsoleJsonAuditLogPublisherSchemaUrnEnumValues = []EnumconsoleJsonAuditLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:console-json-audit",
}

func (v *EnumconsoleJsonAuditLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconsoleJsonAuditLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumconsoleJsonAuditLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconsoleJsonAuditLogPublisherSchemaUrn", value)
}

// NewEnumconsoleJsonAuditLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumconsoleJsonAuditLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconsoleJsonAuditLogPublisherSchemaUrnFromValue(v string) (*EnumconsoleJsonAuditLogPublisherSchemaUrn, error) {
	ev := EnumconsoleJsonAuditLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconsoleJsonAuditLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumconsoleJsonAuditLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconsoleJsonAuditLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconsoleJsonAuditLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconsole-json-audit-log-publisherSchemaUrn value
func (v EnumconsoleJsonAuditLogPublisherSchemaUrn) Ptr() *EnumconsoleJsonAuditLogPublisherSchemaUrn {
	return &v
}

type NullableEnumconsoleJsonAuditLogPublisherSchemaUrn struct {
	value *EnumconsoleJsonAuditLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumconsoleJsonAuditLogPublisherSchemaUrn) Get() *EnumconsoleJsonAuditLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumconsoleJsonAuditLogPublisherSchemaUrn) Set(val *EnumconsoleJsonAuditLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconsoleJsonAuditLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconsoleJsonAuditLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconsoleJsonAuditLogPublisherSchemaUrn(val *EnumconsoleJsonAuditLogPublisherSchemaUrn) *NullableEnumconsoleJsonAuditLogPublisherSchemaUrn {
	return &NullableEnumconsoleJsonAuditLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconsoleJsonAuditLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconsoleJsonAuditLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

