/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IndicatorGaugeShared struct for IndicatorGaugeShared
type IndicatorGaugeShared struct {
	Schemas []EnumindicatorGaugeSchemaUrn `json:"schemas"`
	// Specifies the source of data to use in determining this Indicator Gauge's severity and status.
	GaugeDataSource string `json:"gaugeDataSource"`
	// A regular expression pattern that is used to determine whether the current monitored value indicates this gauge's severity should be critical.
	CriticalValue *string `json:"criticalValue,omitempty"`
	// A regular expression pattern that is used to determine whether the current monitored value indicates this gauge's severity will be 'major'.
	MajorValue *string `json:"majorValue,omitempty"`
	// A regular expression pattern that is used to determine whether the current monitored value indicates this gauge's severity will be 'minor'.
	MinorValue *string `json:"minorValue,omitempty"`
	// A regular expression pattern that is used to determine whether the current monitored value indicates this gauge's severity will be 'warning'.
	WarningValue *string `json:"warningValue,omitempty"`
	// A description for this Gauge
	Description *string `json:"description,omitempty"`
	// Indicates whether this Gauge is enabled.
	Enabled bool `json:"enabled"`
	OverrideSeverity *EnumgaugeOverrideSeverityProp `json:"overrideSeverity,omitempty"`
	AlertLevel *EnumgaugeAlertLevelProp `json:"alertLevel,omitempty"`
	// The frequency with which this Gauge is updated.
	UpdateInterval *string `json:"updateInterval,omitempty"`
	// Indicates the number of times the monitor data source value will be collected during the update interval.
	SamplesPerUpdateInterval *int32 `json:"samplesPerUpdateInterval,omitempty"`
	IncludeResource []string `json:"includeResource,omitempty"`
	ExcludeResource []string `json:"excludeResource,omitempty"`
	ServerUnavailableSeverityLevel *EnumgaugeServerUnavailableSeverityLevelProp `json:"serverUnavailableSeverityLevel,omitempty"`
	ServerDegradedSeverityLevel *EnumgaugeServerDegradedSeverityLevelProp `json:"serverDegradedSeverityLevel,omitempty"`
}

// NewIndicatorGaugeShared instantiates a new IndicatorGaugeShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicatorGaugeShared(schemas []EnumindicatorGaugeSchemaUrn, gaugeDataSource string, enabled bool) *IndicatorGaugeShared {
	this := IndicatorGaugeShared{}
	this.Schemas = schemas
	this.GaugeDataSource = gaugeDataSource
	this.Enabled = enabled
	return &this
}

// NewIndicatorGaugeSharedWithDefaults instantiates a new IndicatorGaugeShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorGaugeSharedWithDefaults() *IndicatorGaugeShared {
	this := IndicatorGaugeShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *IndicatorGaugeShared) GetSchemas() []EnumindicatorGaugeSchemaUrn {
	if o == nil {
		var ret []EnumindicatorGaugeSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetSchemasOk() ([]EnumindicatorGaugeSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *IndicatorGaugeShared) SetSchemas(v []EnumindicatorGaugeSchemaUrn) {
	o.Schemas = v
}

// GetGaugeDataSource returns the GaugeDataSource field value
func (o *IndicatorGaugeShared) GetGaugeDataSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GaugeDataSource
}

// GetGaugeDataSourceOk returns a tuple with the GaugeDataSource field value
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetGaugeDataSourceOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GaugeDataSource, true
}

// SetGaugeDataSource sets field value
func (o *IndicatorGaugeShared) SetGaugeDataSource(v string) {
	o.GaugeDataSource = v
}

// GetCriticalValue returns the CriticalValue field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetCriticalValue() string {
	if o == nil || isNil(o.CriticalValue) {
		var ret string
		return ret
	}
	return *o.CriticalValue
}

// GetCriticalValueOk returns a tuple with the CriticalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetCriticalValueOk() (*string, bool) {
	if o == nil || isNil(o.CriticalValue) {
    return nil, false
	}
	return o.CriticalValue, true
}

// HasCriticalValue returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasCriticalValue() bool {
	if o != nil && !isNil(o.CriticalValue) {
		return true
	}

	return false
}

// SetCriticalValue gets a reference to the given string and assigns it to the CriticalValue field.
func (o *IndicatorGaugeShared) SetCriticalValue(v string) {
	o.CriticalValue = &v
}

// GetMajorValue returns the MajorValue field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetMajorValue() string {
	if o == nil || isNil(o.MajorValue) {
		var ret string
		return ret
	}
	return *o.MajorValue
}

// GetMajorValueOk returns a tuple with the MajorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetMajorValueOk() (*string, bool) {
	if o == nil || isNil(o.MajorValue) {
    return nil, false
	}
	return o.MajorValue, true
}

// HasMajorValue returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasMajorValue() bool {
	if o != nil && !isNil(o.MajorValue) {
		return true
	}

	return false
}

// SetMajorValue gets a reference to the given string and assigns it to the MajorValue field.
func (o *IndicatorGaugeShared) SetMajorValue(v string) {
	o.MajorValue = &v
}

// GetMinorValue returns the MinorValue field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetMinorValue() string {
	if o == nil || isNil(o.MinorValue) {
		var ret string
		return ret
	}
	return *o.MinorValue
}

// GetMinorValueOk returns a tuple with the MinorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetMinorValueOk() (*string, bool) {
	if o == nil || isNil(o.MinorValue) {
    return nil, false
	}
	return o.MinorValue, true
}

// HasMinorValue returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasMinorValue() bool {
	if o != nil && !isNil(o.MinorValue) {
		return true
	}

	return false
}

// SetMinorValue gets a reference to the given string and assigns it to the MinorValue field.
func (o *IndicatorGaugeShared) SetMinorValue(v string) {
	o.MinorValue = &v
}

// GetWarningValue returns the WarningValue field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetWarningValue() string {
	if o == nil || isNil(o.WarningValue) {
		var ret string
		return ret
	}
	return *o.WarningValue
}

// GetWarningValueOk returns a tuple with the WarningValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetWarningValueOk() (*string, bool) {
	if o == nil || isNil(o.WarningValue) {
    return nil, false
	}
	return o.WarningValue, true
}

// HasWarningValue returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasWarningValue() bool {
	if o != nil && !isNil(o.WarningValue) {
		return true
	}

	return false
}

// SetWarningValue gets a reference to the given string and assigns it to the WarningValue field.
func (o *IndicatorGaugeShared) SetWarningValue(v string) {
	o.WarningValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IndicatorGaugeShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *IndicatorGaugeShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *IndicatorGaugeShared) SetEnabled(v bool) {
	o.Enabled = v
}

// GetOverrideSeverity returns the OverrideSeverity field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetOverrideSeverity() EnumgaugeOverrideSeverityProp {
	if o == nil || isNil(o.OverrideSeverity) {
		var ret EnumgaugeOverrideSeverityProp
		return ret
	}
	return *o.OverrideSeverity
}

// GetOverrideSeverityOk returns a tuple with the OverrideSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetOverrideSeverityOk() (*EnumgaugeOverrideSeverityProp, bool) {
	if o == nil || isNil(o.OverrideSeverity) {
    return nil, false
	}
	return o.OverrideSeverity, true
}

// HasOverrideSeverity returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasOverrideSeverity() bool {
	if o != nil && !isNil(o.OverrideSeverity) {
		return true
	}

	return false
}

// SetOverrideSeverity gets a reference to the given EnumgaugeOverrideSeverityProp and assigns it to the OverrideSeverity field.
func (o *IndicatorGaugeShared) SetOverrideSeverity(v EnumgaugeOverrideSeverityProp) {
	o.OverrideSeverity = &v
}

// GetAlertLevel returns the AlertLevel field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetAlertLevel() EnumgaugeAlertLevelProp {
	if o == nil || isNil(o.AlertLevel) {
		var ret EnumgaugeAlertLevelProp
		return ret
	}
	return *o.AlertLevel
}

// GetAlertLevelOk returns a tuple with the AlertLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetAlertLevelOk() (*EnumgaugeAlertLevelProp, bool) {
	if o == nil || isNil(o.AlertLevel) {
    return nil, false
	}
	return o.AlertLevel, true
}

// HasAlertLevel returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasAlertLevel() bool {
	if o != nil && !isNil(o.AlertLevel) {
		return true
	}

	return false
}

// SetAlertLevel gets a reference to the given EnumgaugeAlertLevelProp and assigns it to the AlertLevel field.
func (o *IndicatorGaugeShared) SetAlertLevel(v EnumgaugeAlertLevelProp) {
	o.AlertLevel = &v
}

// GetUpdateInterval returns the UpdateInterval field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetUpdateInterval() string {
	if o == nil || isNil(o.UpdateInterval) {
		var ret string
		return ret
	}
	return *o.UpdateInterval
}

// GetUpdateIntervalOk returns a tuple with the UpdateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetUpdateIntervalOk() (*string, bool) {
	if o == nil || isNil(o.UpdateInterval) {
    return nil, false
	}
	return o.UpdateInterval, true
}

// HasUpdateInterval returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasUpdateInterval() bool {
	if o != nil && !isNil(o.UpdateInterval) {
		return true
	}

	return false
}

// SetUpdateInterval gets a reference to the given string and assigns it to the UpdateInterval field.
func (o *IndicatorGaugeShared) SetUpdateInterval(v string) {
	o.UpdateInterval = &v
}

// GetSamplesPerUpdateInterval returns the SamplesPerUpdateInterval field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetSamplesPerUpdateInterval() int32 {
	if o == nil || isNil(o.SamplesPerUpdateInterval) {
		var ret int32
		return ret
	}
	return *o.SamplesPerUpdateInterval
}

// GetSamplesPerUpdateIntervalOk returns a tuple with the SamplesPerUpdateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetSamplesPerUpdateIntervalOk() (*int32, bool) {
	if o == nil || isNil(o.SamplesPerUpdateInterval) {
    return nil, false
	}
	return o.SamplesPerUpdateInterval, true
}

// HasSamplesPerUpdateInterval returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasSamplesPerUpdateInterval() bool {
	if o != nil && !isNil(o.SamplesPerUpdateInterval) {
		return true
	}

	return false
}

// SetSamplesPerUpdateInterval gets a reference to the given int32 and assigns it to the SamplesPerUpdateInterval field.
func (o *IndicatorGaugeShared) SetSamplesPerUpdateInterval(v int32) {
	o.SamplesPerUpdateInterval = &v
}

// GetIncludeResource returns the IncludeResource field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetIncludeResource() []string {
	if o == nil || isNil(o.IncludeResource) {
		var ret []string
		return ret
	}
	return o.IncludeResource
}

// GetIncludeResourceOk returns a tuple with the IncludeResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetIncludeResourceOk() ([]string, bool) {
	if o == nil || isNil(o.IncludeResource) {
    return nil, false
	}
	return o.IncludeResource, true
}

// HasIncludeResource returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasIncludeResource() bool {
	if o != nil && !isNil(o.IncludeResource) {
		return true
	}

	return false
}

// SetIncludeResource gets a reference to the given []string and assigns it to the IncludeResource field.
func (o *IndicatorGaugeShared) SetIncludeResource(v []string) {
	o.IncludeResource = v
}

// GetExcludeResource returns the ExcludeResource field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetExcludeResource() []string {
	if o == nil || isNil(o.ExcludeResource) {
		var ret []string
		return ret
	}
	return o.ExcludeResource
}

// GetExcludeResourceOk returns a tuple with the ExcludeResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetExcludeResourceOk() ([]string, bool) {
	if o == nil || isNil(o.ExcludeResource) {
    return nil, false
	}
	return o.ExcludeResource, true
}

// HasExcludeResource returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasExcludeResource() bool {
	if o != nil && !isNil(o.ExcludeResource) {
		return true
	}

	return false
}

// SetExcludeResource gets a reference to the given []string and assigns it to the ExcludeResource field.
func (o *IndicatorGaugeShared) SetExcludeResource(v []string) {
	o.ExcludeResource = v
}

// GetServerUnavailableSeverityLevel returns the ServerUnavailableSeverityLevel field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetServerUnavailableSeverityLevel() EnumgaugeServerUnavailableSeverityLevelProp {
	if o == nil || isNil(o.ServerUnavailableSeverityLevel) {
		var ret EnumgaugeServerUnavailableSeverityLevelProp
		return ret
	}
	return *o.ServerUnavailableSeverityLevel
}

// GetServerUnavailableSeverityLevelOk returns a tuple with the ServerUnavailableSeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetServerUnavailableSeverityLevelOk() (*EnumgaugeServerUnavailableSeverityLevelProp, bool) {
	if o == nil || isNil(o.ServerUnavailableSeverityLevel) {
    return nil, false
	}
	return o.ServerUnavailableSeverityLevel, true
}

// HasServerUnavailableSeverityLevel returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasServerUnavailableSeverityLevel() bool {
	if o != nil && !isNil(o.ServerUnavailableSeverityLevel) {
		return true
	}

	return false
}

// SetServerUnavailableSeverityLevel gets a reference to the given EnumgaugeServerUnavailableSeverityLevelProp and assigns it to the ServerUnavailableSeverityLevel field.
func (o *IndicatorGaugeShared) SetServerUnavailableSeverityLevel(v EnumgaugeServerUnavailableSeverityLevelProp) {
	o.ServerUnavailableSeverityLevel = &v
}

// GetServerDegradedSeverityLevel returns the ServerDegradedSeverityLevel field value if set, zero value otherwise.
func (o *IndicatorGaugeShared) GetServerDegradedSeverityLevel() EnumgaugeServerDegradedSeverityLevelProp {
	if o == nil || isNil(o.ServerDegradedSeverityLevel) {
		var ret EnumgaugeServerDegradedSeverityLevelProp
		return ret
	}
	return *o.ServerDegradedSeverityLevel
}

// GetServerDegradedSeverityLevelOk returns a tuple with the ServerDegradedSeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicatorGaugeShared) GetServerDegradedSeverityLevelOk() (*EnumgaugeServerDegradedSeverityLevelProp, bool) {
	if o == nil || isNil(o.ServerDegradedSeverityLevel) {
    return nil, false
	}
	return o.ServerDegradedSeverityLevel, true
}

// HasServerDegradedSeverityLevel returns a boolean if a field has been set.
func (o *IndicatorGaugeShared) HasServerDegradedSeverityLevel() bool {
	if o != nil && !isNil(o.ServerDegradedSeverityLevel) {
		return true
	}

	return false
}

// SetServerDegradedSeverityLevel gets a reference to the given EnumgaugeServerDegradedSeverityLevelProp and assigns it to the ServerDegradedSeverityLevel field.
func (o *IndicatorGaugeShared) SetServerDegradedSeverityLevel(v EnumgaugeServerDegradedSeverityLevelProp) {
	o.ServerDegradedSeverityLevel = &v
}

func (o IndicatorGaugeShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["gaugeDataSource"] = o.GaugeDataSource
	}
	if !isNil(o.CriticalValue) {
		toSerialize["criticalValue"] = o.CriticalValue
	}
	if !isNil(o.MajorValue) {
		toSerialize["majorValue"] = o.MajorValue
	}
	if !isNil(o.MinorValue) {
		toSerialize["minorValue"] = o.MinorValue
	}
	if !isNil(o.WarningValue) {
		toSerialize["warningValue"] = o.WarningValue
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.OverrideSeverity) {
		toSerialize["overrideSeverity"] = o.OverrideSeverity
	}
	if !isNil(o.AlertLevel) {
		toSerialize["alertLevel"] = o.AlertLevel
	}
	if !isNil(o.UpdateInterval) {
		toSerialize["updateInterval"] = o.UpdateInterval
	}
	if !isNil(o.SamplesPerUpdateInterval) {
		toSerialize["samplesPerUpdateInterval"] = o.SamplesPerUpdateInterval
	}
	if !isNil(o.IncludeResource) {
		toSerialize["includeResource"] = o.IncludeResource
	}
	if !isNil(o.ExcludeResource) {
		toSerialize["excludeResource"] = o.ExcludeResource
	}
	if !isNil(o.ServerUnavailableSeverityLevel) {
		toSerialize["serverUnavailableSeverityLevel"] = o.ServerUnavailableSeverityLevel
	}
	if !isNil(o.ServerDegradedSeverityLevel) {
		toSerialize["serverDegradedSeverityLevel"] = o.ServerDegradedSeverityLevel
	}
	return json.Marshal(toSerialize)
}

type NullableIndicatorGaugeShared struct {
	value *IndicatorGaugeShared
	isSet bool
}

func (v NullableIndicatorGaugeShared) Get() *IndicatorGaugeShared {
	return v.value
}

func (v *NullableIndicatorGaugeShared) Set(val *IndicatorGaugeShared) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicatorGaugeShared) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicatorGaugeShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicatorGaugeShared(val *IndicatorGaugeShared) *NullableIndicatorGaugeShared {
	return &NullableIndicatorGaugeShared{value: val, isSet: true}
}

func (v NullableIndicatorGaugeShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicatorGaugeShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


