/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelegatedAdminResourceRightsSchemaUrn the model 'EnumdelegatedAdminResourceRightsSchemaUrn'
type EnumdelegatedAdminResourceRightsSchemaUrn string

// List of Enumdelegated-admin-resource-rightsSchemaUrn
const (
	ENUMDELEGATEDADMINRESOURCERIGHTSSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DELEGATED_ADMIN_RESOURCE_RIGHTS EnumdelegatedAdminResourceRightsSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:delegated-admin-resource-rights"
)

// All allowed values of EnumdelegatedAdminResourceRightsSchemaUrn enum
var AllowedEnumdelegatedAdminResourceRightsSchemaUrnEnumValues = []EnumdelegatedAdminResourceRightsSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:delegated-admin-resource-rights",
}

func (v *EnumdelegatedAdminResourceRightsSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelegatedAdminResourceRightsSchemaUrn(value)
	for _, existing := range AllowedEnumdelegatedAdminResourceRightsSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelegatedAdminResourceRightsSchemaUrn", value)
}

// NewEnumdelegatedAdminResourceRightsSchemaUrnFromValue returns a pointer to a valid EnumdelegatedAdminResourceRightsSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelegatedAdminResourceRightsSchemaUrnFromValue(v string) (*EnumdelegatedAdminResourceRightsSchemaUrn, error) {
	ev := EnumdelegatedAdminResourceRightsSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelegatedAdminResourceRightsSchemaUrn: valid values are %v", v, AllowedEnumdelegatedAdminResourceRightsSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelegatedAdminResourceRightsSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdelegatedAdminResourceRightsSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelegated-admin-resource-rightsSchemaUrn value
func (v EnumdelegatedAdminResourceRightsSchemaUrn) Ptr() *EnumdelegatedAdminResourceRightsSchemaUrn {
	return &v
}

type NullableEnumdelegatedAdminResourceRightsSchemaUrn struct {
	value *EnumdelegatedAdminResourceRightsSchemaUrn
	isSet bool
}

func (v NullableEnumdelegatedAdminResourceRightsSchemaUrn) Get() *EnumdelegatedAdminResourceRightsSchemaUrn {
	return v.value
}

func (v *NullableEnumdelegatedAdminResourceRightsSchemaUrn) Set(val *EnumdelegatedAdminResourceRightsSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelegatedAdminResourceRightsSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelegatedAdminResourceRightsSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelegatedAdminResourceRightsSchemaUrn(val *EnumdelegatedAdminResourceRightsSchemaUrn) *NullableEnumdelegatedAdminResourceRightsSchemaUrn {
	return &NullableEnumdelegatedAdminResourceRightsSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdelegatedAdminResourceRightsSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelegatedAdminResourceRightsSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
