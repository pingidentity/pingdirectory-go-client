/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ConnectionCriteriaApiService ConnectionCriteriaApi service
type ConnectionCriteriaApiService service

type ApiAddConnectionCriteriaRequest struct {
	ctx context.Context
	ApiService *ConnectionCriteriaApiService
	addConnectionCriteriaRequest *AddConnectionCriteriaRequest
}

// Create a new Connection Criteria in the config
func (r ApiAddConnectionCriteriaRequest) AddConnectionCriteriaRequest(addConnectionCriteriaRequest AddConnectionCriteriaRequest) ApiAddConnectionCriteriaRequest {
	r.addConnectionCriteriaRequest = &addConnectionCriteriaRequest
	return r
}

func (r ApiAddConnectionCriteriaRequest) Execute() (*AddConnectionCriteria200Response, *http.Response, error) {
	return r.ApiService.AddConnectionCriteriaExecute(r)
}

/*
AddConnectionCriteria Add a new Connection Criteria to the config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddConnectionCriteriaRequest
*/
func (a *ConnectionCriteriaApiService) AddConnectionCriteria(ctx context.Context) ApiAddConnectionCriteriaRequest {
	return ApiAddConnectionCriteriaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AddConnectionCriteria200Response
func (a *ConnectionCriteriaApiService) AddConnectionCriteriaExecute(r ApiAddConnectionCriteriaRequest) (*AddConnectionCriteria200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddConnectionCriteria200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionCriteriaApiService.AddConnectionCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connection-criteria"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addConnectionCriteriaRequest == nil {
		return localVarReturnValue, nil, reportError("addConnectionCriteriaRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addConnectionCriteriaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConnectionCriteriaRequest struct {
	ctx context.Context
	ApiService *ConnectionCriteriaApiService
	connectionCriteriaName string
}

func (r ApiDeleteConnectionCriteriaRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConnectionCriteriaExecute(r)
}

/*
DeleteConnectionCriteria Delete a Connection Criteria

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionCriteriaName Name of the Connection Criteria to be deleted
 @return ApiDeleteConnectionCriteriaRequest
*/
func (a *ConnectionCriteriaApiService) DeleteConnectionCriteria(ctx context.Context, connectionCriteriaName string) ApiDeleteConnectionCriteriaRequest {
	return ApiDeleteConnectionCriteriaRequest{
		ApiService: a,
		ctx: ctx,
		connectionCriteriaName: connectionCriteriaName,
	}
}

// Execute executes the request
func (a *ConnectionCriteriaApiService) DeleteConnectionCriteriaExecute(r ApiDeleteConnectionCriteriaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionCriteriaApiService.DeleteConnectionCriteria")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connection-criteria/{connection-criteria-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection-criteria-name"+"}", url.PathEscape(parameterToString(r.connectionCriteriaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConnectionCriteriaRequest struct {
	ctx context.Context
	ApiService *ConnectionCriteriaApiService
	connectionCriteriaName string
}

func (r ApiGetConnectionCriteriaRequest) Execute() (*AddConnectionCriteria200Response, *http.Response, error) {
	return r.ApiService.GetConnectionCriteriaExecute(r)
}

/*
GetConnectionCriteria Returns a single Connection Criteria

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionCriteriaName Name of the Connection Criteria to be read
 @return ApiGetConnectionCriteriaRequest
*/
func (a *ConnectionCriteriaApiService) GetConnectionCriteria(ctx context.Context, connectionCriteriaName string) ApiGetConnectionCriteriaRequest {
	return ApiGetConnectionCriteriaRequest{
		ApiService: a,
		ctx: ctx,
		connectionCriteriaName: connectionCriteriaName,
	}
}

// Execute executes the request
//  @return AddConnectionCriteria200Response
func (a *ConnectionCriteriaApiService) GetConnectionCriteriaExecute(r ApiGetConnectionCriteriaRequest) (*AddConnectionCriteria200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddConnectionCriteria200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionCriteriaApiService.GetConnectionCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connection-criteria/{connection-criteria-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection-criteria-name"+"}", url.PathEscape(parameterToString(r.connectionCriteriaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConnectionCriteriaRequest struct {
	ctx context.Context
	ApiService *ConnectionCriteriaApiService
	connectionCriteriaName string
	updateRequest *UpdateRequest
}

// Update an existing Connection Criteria
func (r ApiUpdateConnectionCriteriaRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateConnectionCriteriaRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateConnectionCriteriaRequest) Execute() (*AddConnectionCriteria200Response, *http.Response, error) {
	return r.ApiService.UpdateConnectionCriteriaExecute(r)
}

/*
UpdateConnectionCriteria Update an existing Connection Criteria by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionCriteriaName Name of the Connection Criteria to be updated
 @return ApiUpdateConnectionCriteriaRequest
*/
func (a *ConnectionCriteriaApiService) UpdateConnectionCriteria(ctx context.Context, connectionCriteriaName string) ApiUpdateConnectionCriteriaRequest {
	return ApiUpdateConnectionCriteriaRequest{
		ApiService: a,
		ctx: ctx,
		connectionCriteriaName: connectionCriteriaName,
	}
}

// Execute executes the request
//  @return AddConnectionCriteria200Response
func (a *ConnectionCriteriaApiService) UpdateConnectionCriteriaExecute(r ApiUpdateConnectionCriteriaRequest) (*AddConnectionCriteria200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddConnectionCriteria200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionCriteriaApiService.UpdateConnectionCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connection-criteria/{connection-criteria-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"connection-criteria-name"+"}", url.PathEscape(parameterToString(r.connectionCriteriaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
