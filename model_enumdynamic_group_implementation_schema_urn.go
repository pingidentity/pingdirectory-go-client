/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdynamicGroupImplementationSchemaUrn the model 'EnumdynamicGroupImplementationSchemaUrn'
type EnumdynamicGroupImplementationSchemaUrn string

// List of Enumdynamic-group-implementationSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0GROUP_IMPLEMENTATIONDYNAMIC EnumdynamicGroupImplementationSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:group-implementation:dynamic"
)

// All allowed values of EnumdynamicGroupImplementationSchemaUrn enum
var AllowedEnumdynamicGroupImplementationSchemaUrnEnumValues = []EnumdynamicGroupImplementationSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:group-implementation:dynamic",
}

func (v *EnumdynamicGroupImplementationSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdynamicGroupImplementationSchemaUrn(value)
	for _, existing := range AllowedEnumdynamicGroupImplementationSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdynamicGroupImplementationSchemaUrn", value)
}

// NewEnumdynamicGroupImplementationSchemaUrnFromValue returns a pointer to a valid EnumdynamicGroupImplementationSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdynamicGroupImplementationSchemaUrnFromValue(v string) (*EnumdynamicGroupImplementationSchemaUrn, error) {
	ev := EnumdynamicGroupImplementationSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdynamicGroupImplementationSchemaUrn: valid values are %v", v, AllowedEnumdynamicGroupImplementationSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdynamicGroupImplementationSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdynamicGroupImplementationSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdynamic-group-implementationSchemaUrn value
func (v EnumdynamicGroupImplementationSchemaUrn) Ptr() *EnumdynamicGroupImplementationSchemaUrn {
	return &v
}

type NullableEnumdynamicGroupImplementationSchemaUrn struct {
	value *EnumdynamicGroupImplementationSchemaUrn
	isSet bool
}

func (v NullableEnumdynamicGroupImplementationSchemaUrn) Get() *EnumdynamicGroupImplementationSchemaUrn {
	return v.value
}

func (v *NullableEnumdynamicGroupImplementationSchemaUrn) Set(val *EnumdynamicGroupImplementationSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdynamicGroupImplementationSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdynamicGroupImplementationSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdynamicGroupImplementationSchemaUrn(val *EnumdynamicGroupImplementationSchemaUrn) *NullableEnumdynamicGroupImplementationSchemaUrn {
	return &NullableEnumdynamicGroupImplementationSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdynamicGroupImplementationSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdynamicGroupImplementationSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

