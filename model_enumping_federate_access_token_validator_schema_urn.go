/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpingFederateAccessTokenValidatorSchemaUrn the model 'EnumpingFederateAccessTokenValidatorSchemaUrn'
type EnumpingFederateAccessTokenValidatorSchemaUrn string

// List of Enumping-federate-access-token-validatorSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0ACCESS_TOKEN_VALIDATORPING_FEDERATE EnumpingFederateAccessTokenValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:access-token-validator:ping-federate"
)

// All allowed values of EnumpingFederateAccessTokenValidatorSchemaUrn enum
var AllowedEnumpingFederateAccessTokenValidatorSchemaUrnEnumValues = []EnumpingFederateAccessTokenValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:access-token-validator:ping-federate",
}

func (v *EnumpingFederateAccessTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpingFederateAccessTokenValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumpingFederateAccessTokenValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpingFederateAccessTokenValidatorSchemaUrn", value)
}

// NewEnumpingFederateAccessTokenValidatorSchemaUrnFromValue returns a pointer to a valid EnumpingFederateAccessTokenValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpingFederateAccessTokenValidatorSchemaUrnFromValue(v string) (*EnumpingFederateAccessTokenValidatorSchemaUrn, error) {
	ev := EnumpingFederateAccessTokenValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpingFederateAccessTokenValidatorSchemaUrn: valid values are %v", v, AllowedEnumpingFederateAccessTokenValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpingFederateAccessTokenValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpingFederateAccessTokenValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumping-federate-access-token-validatorSchemaUrn value
func (v EnumpingFederateAccessTokenValidatorSchemaUrn) Ptr() *EnumpingFederateAccessTokenValidatorSchemaUrn {
	return &v
}

type NullableEnumpingFederateAccessTokenValidatorSchemaUrn struct {
	value *EnumpingFederateAccessTokenValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumpingFederateAccessTokenValidatorSchemaUrn) Get() *EnumpingFederateAccessTokenValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumpingFederateAccessTokenValidatorSchemaUrn) Set(val *EnumpingFederateAccessTokenValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpingFederateAccessTokenValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpingFederateAccessTokenValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpingFederateAccessTokenValidatorSchemaUrn(val *EnumpingFederateAccessTokenValidatorSchemaUrn) *NullableEnumpingFederateAccessTokenValidatorSchemaUrn {
	return &NullableEnumpingFederateAccessTokenValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpingFederateAccessTokenValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpingFederateAccessTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

