/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumldifConnectionHandlerSchemaUrn the model 'EnumldifConnectionHandlerSchemaUrn'
type EnumldifConnectionHandlerSchemaUrn string

// List of Enumldif-connection-handlerSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0CONNECTION_HANDLERLDIF EnumldifConnectionHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:connection-handler:ldif"
)

// All allowed values of EnumldifConnectionHandlerSchemaUrn enum
var AllowedEnumldifConnectionHandlerSchemaUrnEnumValues = []EnumldifConnectionHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:connection-handler:ldif",
}

func (v *EnumldifConnectionHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldifConnectionHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumldifConnectionHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldifConnectionHandlerSchemaUrn", value)
}

// NewEnumldifConnectionHandlerSchemaUrnFromValue returns a pointer to a valid EnumldifConnectionHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldifConnectionHandlerSchemaUrnFromValue(v string) (*EnumldifConnectionHandlerSchemaUrn, error) {
	ev := EnumldifConnectionHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldifConnectionHandlerSchemaUrn: valid values are %v", v, AllowedEnumldifConnectionHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldifConnectionHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldifConnectionHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldif-connection-handlerSchemaUrn value
func (v EnumldifConnectionHandlerSchemaUrn) Ptr() *EnumldifConnectionHandlerSchemaUrn {
	return &v
}

type NullableEnumldifConnectionHandlerSchemaUrn struct {
	value *EnumldifConnectionHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumldifConnectionHandlerSchemaUrn) Get() *EnumldifConnectionHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumldifConnectionHandlerSchemaUrn) Set(val *EnumldifConnectionHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldifConnectionHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldifConnectionHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldifConnectionHandlerSchemaUrn(val *EnumldifConnectionHandlerSchemaUrn) *NullableEnumldifConnectionHandlerSchemaUrn {
	return &NullableEnumldifConnectionHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldifConnectionHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldifConnectionHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

