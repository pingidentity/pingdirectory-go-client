/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonAccessLogPublisherSchemaUrn the model 'EnumjsonAccessLogPublisherSchemaUrn'
type EnumjsonAccessLogPublisherSchemaUrn string

// List of Enumjson-access-log-publisherSchemaUrn
const (
	ENUMJSONACCESSLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERJSON_ACCESS EnumjsonAccessLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:json-access"
)

// All allowed values of EnumjsonAccessLogPublisherSchemaUrn enum
var AllowedEnumjsonAccessLogPublisherSchemaUrnEnumValues = []EnumjsonAccessLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:json-access",
}

func (v *EnumjsonAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonAccessLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumjsonAccessLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonAccessLogPublisherSchemaUrn", value)
}

// NewEnumjsonAccessLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumjsonAccessLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonAccessLogPublisherSchemaUrnFromValue(v string) (*EnumjsonAccessLogPublisherSchemaUrn, error) {
	ev := EnumjsonAccessLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonAccessLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumjsonAccessLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonAccessLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjsonAccessLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-access-log-publisherSchemaUrn value
func (v EnumjsonAccessLogPublisherSchemaUrn) Ptr() *EnumjsonAccessLogPublisherSchemaUrn {
	return &v
}

type NullableEnumjsonAccessLogPublisherSchemaUrn struct {
	value *EnumjsonAccessLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumjsonAccessLogPublisherSchemaUrn) Get() *EnumjsonAccessLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumjsonAccessLogPublisherSchemaUrn) Set(val *EnumjsonAccessLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonAccessLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonAccessLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonAccessLogPublisherSchemaUrn(val *EnumjsonAccessLogPublisherSchemaUrn) *NullableEnumjsonAccessLogPublisherSchemaUrn {
	return &NullableEnumjsonAccessLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjsonAccessLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

