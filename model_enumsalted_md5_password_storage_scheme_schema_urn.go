/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsaltedMd5PasswordStorageSchemeSchemaUrn the model 'EnumsaltedMd5PasswordStorageSchemeSchemaUrn'
type EnumsaltedMd5PasswordStorageSchemeSchemaUrn string

// List of Enumsalted-md5-password-storage-schemeSchemaUrn
const (
	ENUMSALTEDMD5PASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMESALTED_MD5 EnumsaltedMd5PasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:salted-md5"
)

// All allowed values of EnumsaltedMd5PasswordStorageSchemeSchemaUrn enum
var AllowedEnumsaltedMd5PasswordStorageSchemeSchemaUrnEnumValues = []EnumsaltedMd5PasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:salted-md5",
}

func (v *EnumsaltedMd5PasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsaltedMd5PasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumsaltedMd5PasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsaltedMd5PasswordStorageSchemeSchemaUrn", value)
}

// NewEnumsaltedMd5PasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumsaltedMd5PasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsaltedMd5PasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumsaltedMd5PasswordStorageSchemeSchemaUrn, error) {
	ev := EnumsaltedMd5PasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsaltedMd5PasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumsaltedMd5PasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsaltedMd5PasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsaltedMd5PasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsalted-md5-password-storage-schemeSchemaUrn value
func (v EnumsaltedMd5PasswordStorageSchemeSchemaUrn) Ptr() *EnumsaltedMd5PasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn struct {
	value *EnumsaltedMd5PasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn) Get() *EnumsaltedMd5PasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn) Set(val *EnumsaltedMd5PasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn(val *EnumsaltedMd5PasswordStorageSchemeSchemaUrn) *NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn {
	return &NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsaltedMd5PasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

