/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginMultiValuedAttributeBehaviorProp The behavior to exhibit for source attributes that have multiple values.
type EnumpluginMultiValuedAttributeBehaviorProp string

// List of Enumplugin-multiValuedAttributeBehaviorProp
const (
	ENUMPLUGINMULTIVALUEDATTRIBUTEBEHAVIORPROP_USE_FIRST_VALUE                                        EnumpluginMultiValuedAttributeBehaviorProp = "use-first-value"
	ENUMPLUGINMULTIVALUEDATTRIBUTEBEHAVIORPROP_REJECT_ENTRIES_WITH_ANY_MULTIVALUED_SOURCE_ATTRIBUTE   EnumpluginMultiValuedAttributeBehaviorProp = "reject-entries-with-any-multivalued-source-attribute"
	ENUMPLUGINMULTIVALUEDATTRIBUTEBEHAVIORPROP_USE_ALL_VALUES_IF_POSSIBLE_BUT_REJECT_IF_NOT           EnumpluginMultiValuedAttributeBehaviorProp = "use-all-values-if-possible-but-reject-if-not"
	ENUMPLUGINMULTIVALUEDATTRIBUTEBEHAVIORPROP_USE_ALL_VALUES_IF_POSSIBLE_BUT_ONLY_FIRST_VALUE_IF_NOT EnumpluginMultiValuedAttributeBehaviorProp = "use-all-values-if-possible-but-only-first-value-if-not"
)

// All allowed values of EnumpluginMultiValuedAttributeBehaviorProp enum
var AllowedEnumpluginMultiValuedAttributeBehaviorPropEnumValues = []EnumpluginMultiValuedAttributeBehaviorProp{
	"use-first-value",
	"reject-entries-with-any-multivalued-source-attribute",
	"use-all-values-if-possible-but-reject-if-not",
	"use-all-values-if-possible-but-only-first-value-if-not",
}

func (v *EnumpluginMultiValuedAttributeBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginMultiValuedAttributeBehaviorProp(value)
	for _, existing := range AllowedEnumpluginMultiValuedAttributeBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginMultiValuedAttributeBehaviorProp", value)
}

// NewEnumpluginMultiValuedAttributeBehaviorPropFromValue returns a pointer to a valid EnumpluginMultiValuedAttributeBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginMultiValuedAttributeBehaviorPropFromValue(v string) (*EnumpluginMultiValuedAttributeBehaviorProp, error) {
	ev := EnumpluginMultiValuedAttributeBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginMultiValuedAttributeBehaviorProp: valid values are %v", v, AllowedEnumpluginMultiValuedAttributeBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginMultiValuedAttributeBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginMultiValuedAttributeBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-multiValuedAttributeBehaviorProp value
func (v EnumpluginMultiValuedAttributeBehaviorProp) Ptr() *EnumpluginMultiValuedAttributeBehaviorProp {
	return &v
}

type NullableEnumpluginMultiValuedAttributeBehaviorProp struct {
	value *EnumpluginMultiValuedAttributeBehaviorProp
	isSet bool
}

func (v NullableEnumpluginMultiValuedAttributeBehaviorProp) Get() *EnumpluginMultiValuedAttributeBehaviorProp {
	return v.value
}

func (v *NullableEnumpluginMultiValuedAttributeBehaviorProp) Set(val *EnumpluginMultiValuedAttributeBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginMultiValuedAttributeBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginMultiValuedAttributeBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginMultiValuedAttributeBehaviorProp(val *EnumpluginMultiValuedAttributeBehaviorProp) *NullableEnumpluginMultiValuedAttributeBehaviorProp {
	return &NullableEnumpluginMultiValuedAttributeBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpluginMultiValuedAttributeBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginMultiValuedAttributeBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
