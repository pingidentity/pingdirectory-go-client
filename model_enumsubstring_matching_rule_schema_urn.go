/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsubstringMatchingRuleSchemaUrn the model 'EnumsubstringMatchingRuleSchemaUrn'
type EnumsubstringMatchingRuleSchemaUrn string

// List of Enumsubstring-matching-ruleSchemaUrn
const (
	ENUMSUBSTRINGMATCHINGRULESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0MATCHING_RULESUBSTRING EnumsubstringMatchingRuleSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:matching-rule:substring"
)

// All allowed values of EnumsubstringMatchingRuleSchemaUrn enum
var AllowedEnumsubstringMatchingRuleSchemaUrnEnumValues = []EnumsubstringMatchingRuleSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:matching-rule:substring",
}

func (v *EnumsubstringMatchingRuleSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsubstringMatchingRuleSchemaUrn(value)
	for _, existing := range AllowedEnumsubstringMatchingRuleSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsubstringMatchingRuleSchemaUrn", value)
}

// NewEnumsubstringMatchingRuleSchemaUrnFromValue returns a pointer to a valid EnumsubstringMatchingRuleSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsubstringMatchingRuleSchemaUrnFromValue(v string) (*EnumsubstringMatchingRuleSchemaUrn, error) {
	ev := EnumsubstringMatchingRuleSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsubstringMatchingRuleSchemaUrn: valid values are %v", v, AllowedEnumsubstringMatchingRuleSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsubstringMatchingRuleSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsubstringMatchingRuleSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsubstring-matching-ruleSchemaUrn value
func (v EnumsubstringMatchingRuleSchemaUrn) Ptr() *EnumsubstringMatchingRuleSchemaUrn {
	return &v
}

type NullableEnumsubstringMatchingRuleSchemaUrn struct {
	value *EnumsubstringMatchingRuleSchemaUrn
	isSet bool
}

func (v NullableEnumsubstringMatchingRuleSchemaUrn) Get() *EnumsubstringMatchingRuleSchemaUrn {
	return v.value
}

func (v *NullableEnumsubstringMatchingRuleSchemaUrn) Set(val *EnumsubstringMatchingRuleSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsubstringMatchingRuleSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsubstringMatchingRuleSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsubstringMatchingRuleSchemaUrn(val *EnumsubstringMatchingRuleSchemaUrn) *NullableEnumsubstringMatchingRuleSchemaUrn {
	return &NullableEnumsubstringMatchingRuleSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsubstringMatchingRuleSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsubstringMatchingRuleSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

