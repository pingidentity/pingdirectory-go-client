/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumindicatorGaugeDataSourceSchemaUrn the model 'EnumindicatorGaugeDataSourceSchemaUrn'
type EnumindicatorGaugeDataSourceSchemaUrn string

// List of Enumindicator-gauge-data-sourceSchemaUrn
const (
	ENUMINDICATORGAUGEDATASOURCESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0GAUGE_DATA_SOURCEINDICATOR EnumindicatorGaugeDataSourceSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:gauge-data-source:indicator"
)

// All allowed values of EnumindicatorGaugeDataSourceSchemaUrn enum
var AllowedEnumindicatorGaugeDataSourceSchemaUrnEnumValues = []EnumindicatorGaugeDataSourceSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:gauge-data-source:indicator",
}

func (v *EnumindicatorGaugeDataSourceSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumindicatorGaugeDataSourceSchemaUrn(value)
	for _, existing := range AllowedEnumindicatorGaugeDataSourceSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumindicatorGaugeDataSourceSchemaUrn", value)
}

// NewEnumindicatorGaugeDataSourceSchemaUrnFromValue returns a pointer to a valid EnumindicatorGaugeDataSourceSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumindicatorGaugeDataSourceSchemaUrnFromValue(v string) (*EnumindicatorGaugeDataSourceSchemaUrn, error) {
	ev := EnumindicatorGaugeDataSourceSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumindicatorGaugeDataSourceSchemaUrn: valid values are %v", v, AllowedEnumindicatorGaugeDataSourceSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumindicatorGaugeDataSourceSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumindicatorGaugeDataSourceSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumindicator-gauge-data-sourceSchemaUrn value
func (v EnumindicatorGaugeDataSourceSchemaUrn) Ptr() *EnumindicatorGaugeDataSourceSchemaUrn {
	return &v
}

type NullableEnumindicatorGaugeDataSourceSchemaUrn struct {
	value *EnumindicatorGaugeDataSourceSchemaUrn
	isSet bool
}

func (v NullableEnumindicatorGaugeDataSourceSchemaUrn) Get() *EnumindicatorGaugeDataSourceSchemaUrn {
	return v.value
}

func (v *NullableEnumindicatorGaugeDataSourceSchemaUrn) Set(val *EnumindicatorGaugeDataSourceSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumindicatorGaugeDataSourceSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumindicatorGaugeDataSourceSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumindicatorGaugeDataSourceSchemaUrn(val *EnumindicatorGaugeDataSourceSchemaUrn) *NullableEnumindicatorGaugeDataSourceSchemaUrn {
	return &NullableEnumindicatorGaugeDataSourceSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumindicatorGaugeDataSourceSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumindicatorGaugeDataSourceSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

