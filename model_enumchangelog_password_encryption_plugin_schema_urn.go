/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumchangelogPasswordEncryptionPluginSchemaUrn the model 'EnumchangelogPasswordEncryptionPluginSchemaUrn'
type EnumchangelogPasswordEncryptionPluginSchemaUrn string

// List of Enumchangelog-password-encryption-pluginSchemaUrn
const (
	ENUMCHANGELOGPASSWORDENCRYPTIONPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINCHANGELOG_PASSWORD_ENCRYPTION EnumchangelogPasswordEncryptionPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:changelog-password-encryption"
)

// All allowed values of EnumchangelogPasswordEncryptionPluginSchemaUrn enum
var AllowedEnumchangelogPasswordEncryptionPluginSchemaUrnEnumValues = []EnumchangelogPasswordEncryptionPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:changelog-password-encryption",
}

func (v *EnumchangelogPasswordEncryptionPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumchangelogPasswordEncryptionPluginSchemaUrn(value)
	for _, existing := range AllowedEnumchangelogPasswordEncryptionPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumchangelogPasswordEncryptionPluginSchemaUrn", value)
}

// NewEnumchangelogPasswordEncryptionPluginSchemaUrnFromValue returns a pointer to a valid EnumchangelogPasswordEncryptionPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumchangelogPasswordEncryptionPluginSchemaUrnFromValue(v string) (*EnumchangelogPasswordEncryptionPluginSchemaUrn, error) {
	ev := EnumchangelogPasswordEncryptionPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumchangelogPasswordEncryptionPluginSchemaUrn: valid values are %v", v, AllowedEnumchangelogPasswordEncryptionPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumchangelogPasswordEncryptionPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumchangelogPasswordEncryptionPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumchangelog-password-encryption-pluginSchemaUrn value
func (v EnumchangelogPasswordEncryptionPluginSchemaUrn) Ptr() *EnumchangelogPasswordEncryptionPluginSchemaUrn {
	return &v
}

type NullableEnumchangelogPasswordEncryptionPluginSchemaUrn struct {
	value *EnumchangelogPasswordEncryptionPluginSchemaUrn
	isSet bool
}

func (v NullableEnumchangelogPasswordEncryptionPluginSchemaUrn) Get() *EnumchangelogPasswordEncryptionPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumchangelogPasswordEncryptionPluginSchemaUrn) Set(val *EnumchangelogPasswordEncryptionPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumchangelogPasswordEncryptionPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumchangelogPasswordEncryptionPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumchangelogPasswordEncryptionPluginSchemaUrn(val *EnumchangelogPasswordEncryptionPluginSchemaUrn) *NullableEnumchangelogPasswordEncryptionPluginSchemaUrn {
	return &NullableEnumchangelogPasswordEncryptionPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumchangelogPasswordEncryptionPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumchangelogPasswordEncryptionPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
