/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumcertificateMapperFingerprintAlgorithmProp Specifies the name of the digest algorithm to compute the fingerprint of client certificates.
type EnumcertificateMapperFingerprintAlgorithmProp string

// List of Enumcertificate-mapper-fingerprintAlgorithmProp
const (
	ENUMCERTIFICATEMAPPERFINGERPRINTALGORITHMPROP_MD5 EnumcertificateMapperFingerprintAlgorithmProp = "md5"
	ENUMCERTIFICATEMAPPERFINGERPRINTALGORITHMPROP_SHA1 EnumcertificateMapperFingerprintAlgorithmProp = "sha1"
	ENUMCERTIFICATEMAPPERFINGERPRINTALGORITHMPROP_SHA256 EnumcertificateMapperFingerprintAlgorithmProp = "sha256"
)

// All allowed values of EnumcertificateMapperFingerprintAlgorithmProp enum
var AllowedEnumcertificateMapperFingerprintAlgorithmPropEnumValues = []EnumcertificateMapperFingerprintAlgorithmProp{
	"md5",
	"sha1",
	"sha256",
}

func (v *EnumcertificateMapperFingerprintAlgorithmProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcertificateMapperFingerprintAlgorithmProp(value)
	for _, existing := range AllowedEnumcertificateMapperFingerprintAlgorithmPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcertificateMapperFingerprintAlgorithmProp", value)
}

// NewEnumcertificateMapperFingerprintAlgorithmPropFromValue returns a pointer to a valid EnumcertificateMapperFingerprintAlgorithmProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcertificateMapperFingerprintAlgorithmPropFromValue(v string) (*EnumcertificateMapperFingerprintAlgorithmProp, error) {
	ev := EnumcertificateMapperFingerprintAlgorithmProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcertificateMapperFingerprintAlgorithmProp: valid values are %v", v, AllowedEnumcertificateMapperFingerprintAlgorithmPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcertificateMapperFingerprintAlgorithmProp) IsValid() bool {
	for _, existing := range AllowedEnumcertificateMapperFingerprintAlgorithmPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcertificate-mapper-fingerprintAlgorithmProp value
func (v EnumcertificateMapperFingerprintAlgorithmProp) Ptr() *EnumcertificateMapperFingerprintAlgorithmProp {
	return &v
}

type NullableEnumcertificateMapperFingerprintAlgorithmProp struct {
	value *EnumcertificateMapperFingerprintAlgorithmProp
	isSet bool
}

func (v NullableEnumcertificateMapperFingerprintAlgorithmProp) Get() *EnumcertificateMapperFingerprintAlgorithmProp {
	return v.value
}

func (v *NullableEnumcertificateMapperFingerprintAlgorithmProp) Set(val *EnumcertificateMapperFingerprintAlgorithmProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcertificateMapperFingerprintAlgorithmProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcertificateMapperFingerprintAlgorithmProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcertificateMapperFingerprintAlgorithmProp(val *EnumcertificateMapperFingerprintAlgorithmProp) *NullableEnumcertificateMapperFingerprintAlgorithmProp {
	return &NullableEnumcertificateMapperFingerprintAlgorithmProp{value: val, isSet: true}
}

func (v NullableEnumcertificateMapperFingerprintAlgorithmProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcertificateMapperFingerprintAlgorithmProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

