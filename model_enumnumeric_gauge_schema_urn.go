/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumnumericGaugeSchemaUrn the model 'EnumnumericGaugeSchemaUrn'
type EnumnumericGaugeSchemaUrn string

// List of Enumnumeric-gaugeSchemaUrn
const (
	ENUMNUMERICGAUGESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0GAUGENUMERIC EnumnumericGaugeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:gauge:numeric"
)

// All allowed values of EnumnumericGaugeSchemaUrn enum
var AllowedEnumnumericGaugeSchemaUrnEnumValues = []EnumnumericGaugeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:gauge:numeric",
}

func (v *EnumnumericGaugeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumnumericGaugeSchemaUrn(value)
	for _, existing := range AllowedEnumnumericGaugeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumnumericGaugeSchemaUrn", value)
}

// NewEnumnumericGaugeSchemaUrnFromValue returns a pointer to a valid EnumnumericGaugeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumnumericGaugeSchemaUrnFromValue(v string) (*EnumnumericGaugeSchemaUrn, error) {
	ev := EnumnumericGaugeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumnumericGaugeSchemaUrn: valid values are %v", v, AllowedEnumnumericGaugeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumnumericGaugeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumnumericGaugeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumnumeric-gaugeSchemaUrn value
func (v EnumnumericGaugeSchemaUrn) Ptr() *EnumnumericGaugeSchemaUrn {
	return &v
}

type NullableEnumnumericGaugeSchemaUrn struct {
	value *EnumnumericGaugeSchemaUrn
	isSet bool
}

func (v NullableEnumnumericGaugeSchemaUrn) Get() *EnumnumericGaugeSchemaUrn {
	return v.value
}

func (v *NullableEnumnumericGaugeSchemaUrn) Set(val *EnumnumericGaugeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumnumericGaugeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumnumericGaugeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumnumericGaugeSchemaUrn(val *EnumnumericGaugeSchemaUrn) *NullableEnumnumericGaugeSchemaUrn {
	return &NullableEnumnumericGaugeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumnumericGaugeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumnumericGaugeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

