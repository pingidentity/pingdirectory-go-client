/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherDefaultDebugLevelProp The lowest severity level of debug messages to log when none of the defined targets match the message.
type EnumlogPublisherDefaultDebugLevelProp string

// List of Enumlog-publisher-defaultDebugLevelProp
const (
	DISABLED EnumlogPublisherDefaultDebugLevelProp = "disabled"
	ERROR EnumlogPublisherDefaultDebugLevelProp = "error"
	WARNING EnumlogPublisherDefaultDebugLevelProp = "warning"
	INFO EnumlogPublisherDefaultDebugLevelProp = "info"
	VERBOSE EnumlogPublisherDefaultDebugLevelProp = "verbose"
	ALL EnumlogPublisherDefaultDebugLevelProp = "all"
)

// All allowed values of EnumlogPublisherDefaultDebugLevelProp enum
var AllowedEnumlogPublisherDefaultDebugLevelPropEnumValues = []EnumlogPublisherDefaultDebugLevelProp{
	"disabled",
	"error",
	"warning",
	"info",
	"verbose",
	"all",
}

func (v *EnumlogPublisherDefaultDebugLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherDefaultDebugLevelProp(value)
	for _, existing := range AllowedEnumlogPublisherDefaultDebugLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherDefaultDebugLevelProp", value)
}

// NewEnumlogPublisherDefaultDebugLevelPropFromValue returns a pointer to a valid EnumlogPublisherDefaultDebugLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherDefaultDebugLevelPropFromValue(v string) (*EnumlogPublisherDefaultDebugLevelProp, error) {
	ev := EnumlogPublisherDefaultDebugLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherDefaultDebugLevelProp: valid values are %v", v, AllowedEnumlogPublisherDefaultDebugLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherDefaultDebugLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherDefaultDebugLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-defaultDebugLevelProp value
func (v EnumlogPublisherDefaultDebugLevelProp) Ptr() *EnumlogPublisherDefaultDebugLevelProp {
	return &v
}

type NullableEnumlogPublisherDefaultDebugLevelProp struct {
	value *EnumlogPublisherDefaultDebugLevelProp
	isSet bool
}

func (v NullableEnumlogPublisherDefaultDebugLevelProp) Get() *EnumlogPublisherDefaultDebugLevelProp {
	return v.value
}

func (v *NullableEnumlogPublisherDefaultDebugLevelProp) Set(val *EnumlogPublisherDefaultDebugLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherDefaultDebugLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherDefaultDebugLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherDefaultDebugLevelProp(val *EnumlogPublisherDefaultDebugLevelProp) *NullableEnumlogPublisherDefaultDebugLevelProp {
	return &NullableEnumlogPublisherDefaultDebugLevelProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherDefaultDebugLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherDefaultDebugLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

