/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaResultCodeCriteriaProp Specifies which operation result codes are allowed for operations included in this Simple Result Criteria.
type EnumresultCriteriaResultCodeCriteriaProp string

// List of Enumresult-criteria-resultCodeCriteriaProp
const (
	ENUMRESULTCRITERIARESULTCODECRITERIAPROP_ALL_RESULT_CODES         EnumresultCriteriaResultCodeCriteriaProp = "all-result-codes"
	ENUMRESULTCRITERIARESULTCODECRITERIAPROP_NON_FAILURE_RESULT_CODES EnumresultCriteriaResultCodeCriteriaProp = "non-failure-result-codes"
	ENUMRESULTCRITERIARESULTCODECRITERIAPROP_FAILURE_RESULT_CODES     EnumresultCriteriaResultCodeCriteriaProp = "failure-result-codes"
	ENUMRESULTCRITERIARESULTCODECRITERIAPROP_SELECTED_RESULT_CODES    EnumresultCriteriaResultCodeCriteriaProp = "selected-result-codes"
)

// All allowed values of EnumresultCriteriaResultCodeCriteriaProp enum
var AllowedEnumresultCriteriaResultCodeCriteriaPropEnumValues = []EnumresultCriteriaResultCodeCriteriaProp{
	"all-result-codes",
	"non-failure-result-codes",
	"failure-result-codes",
	"selected-result-codes",
}

func (v *EnumresultCriteriaResultCodeCriteriaProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaResultCodeCriteriaProp(value)
	for _, existing := range AllowedEnumresultCriteriaResultCodeCriteriaPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaResultCodeCriteriaProp", value)
}

// NewEnumresultCriteriaResultCodeCriteriaPropFromValue returns a pointer to a valid EnumresultCriteriaResultCodeCriteriaProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaResultCodeCriteriaPropFromValue(v string) (*EnumresultCriteriaResultCodeCriteriaProp, error) {
	ev := EnumresultCriteriaResultCodeCriteriaProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaResultCodeCriteriaProp: valid values are %v", v, AllowedEnumresultCriteriaResultCodeCriteriaPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaResultCodeCriteriaProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaResultCodeCriteriaPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-resultCodeCriteriaProp value
func (v EnumresultCriteriaResultCodeCriteriaProp) Ptr() *EnumresultCriteriaResultCodeCriteriaProp {
	return &v
}

type NullableEnumresultCriteriaResultCodeCriteriaProp struct {
	value *EnumresultCriteriaResultCodeCriteriaProp
	isSet bool
}

func (v NullableEnumresultCriteriaResultCodeCriteriaProp) Get() *EnumresultCriteriaResultCodeCriteriaProp {
	return v.value
}

func (v *NullableEnumresultCriteriaResultCodeCriteriaProp) Set(val *EnumresultCriteriaResultCodeCriteriaProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaResultCodeCriteriaProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaResultCodeCriteriaProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaResultCodeCriteriaProp(val *EnumresultCriteriaResultCodeCriteriaProp) *NullableEnumresultCriteriaResultCodeCriteriaProp {
	return &NullableEnumresultCriteriaResultCodeCriteriaProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaResultCodeCriteriaProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaResultCodeCriteriaProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
