/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumcurrentTimeVirtualAttributeSchemaUrn the model 'EnumcurrentTimeVirtualAttributeSchemaUrn'
type EnumcurrentTimeVirtualAttributeSchemaUrn string

// List of Enumcurrent-time-virtual-attributeSchemaUrn
const (
	ENUMCURRENTTIMEVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTECURRENT_TIME EnumcurrentTimeVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:current-time"
)

// All allowed values of EnumcurrentTimeVirtualAttributeSchemaUrn enum
var AllowedEnumcurrentTimeVirtualAttributeSchemaUrnEnumValues = []EnumcurrentTimeVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:current-time",
}

func (v *EnumcurrentTimeVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcurrentTimeVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumcurrentTimeVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcurrentTimeVirtualAttributeSchemaUrn", value)
}

// NewEnumcurrentTimeVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumcurrentTimeVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcurrentTimeVirtualAttributeSchemaUrnFromValue(v string) (*EnumcurrentTimeVirtualAttributeSchemaUrn, error) {
	ev := EnumcurrentTimeVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcurrentTimeVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumcurrentTimeVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcurrentTimeVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcurrentTimeVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcurrent-time-virtual-attributeSchemaUrn value
func (v EnumcurrentTimeVirtualAttributeSchemaUrn) Ptr() *EnumcurrentTimeVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumcurrentTimeVirtualAttributeSchemaUrn struct {
	value *EnumcurrentTimeVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumcurrentTimeVirtualAttributeSchemaUrn) Get() *EnumcurrentTimeVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumcurrentTimeVirtualAttributeSchemaUrn) Set(val *EnumcurrentTimeVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcurrentTimeVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcurrentTimeVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcurrentTimeVirtualAttributeSchemaUrn(val *EnumcurrentTimeVirtualAttributeSchemaUrn) *NullableEnumcurrentTimeVirtualAttributeSchemaUrn {
	return &NullableEnumcurrentTimeVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcurrentTimeVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcurrentTimeVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
