/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluggablePassThroughAuthenticationPluginSchemaUrn the model 'EnumpluggablePassThroughAuthenticationPluginSchemaUrn'
type EnumpluggablePassThroughAuthenticationPluginSchemaUrn string

// List of Enumpluggable-pass-through-authentication-pluginSchemaUrn
const (
	ENUMPLUGGABLEPASSTHROUGHAUTHENTICATIONPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINPLUGGABLE_PASS_THROUGH_AUTHENTICATION EnumpluggablePassThroughAuthenticationPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:pluggable-pass-through-authentication"
)

// All allowed values of EnumpluggablePassThroughAuthenticationPluginSchemaUrn enum
var AllowedEnumpluggablePassThroughAuthenticationPluginSchemaUrnEnumValues = []EnumpluggablePassThroughAuthenticationPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:pluggable-pass-through-authentication",
}

func (v *EnumpluggablePassThroughAuthenticationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluggablePassThroughAuthenticationPluginSchemaUrn(value)
	for _, existing := range AllowedEnumpluggablePassThroughAuthenticationPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluggablePassThroughAuthenticationPluginSchemaUrn", value)
}

// NewEnumpluggablePassThroughAuthenticationPluginSchemaUrnFromValue returns a pointer to a valid EnumpluggablePassThroughAuthenticationPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluggablePassThroughAuthenticationPluginSchemaUrnFromValue(v string) (*EnumpluggablePassThroughAuthenticationPluginSchemaUrn, error) {
	ev := EnumpluggablePassThroughAuthenticationPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluggablePassThroughAuthenticationPluginSchemaUrn: valid values are %v", v, AllowedEnumpluggablePassThroughAuthenticationPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluggablePassThroughAuthenticationPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpluggablePassThroughAuthenticationPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpluggable-pass-through-authentication-pluginSchemaUrn value
func (v EnumpluggablePassThroughAuthenticationPluginSchemaUrn) Ptr() *EnumpluggablePassThroughAuthenticationPluginSchemaUrn {
	return &v
}

type NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn struct {
	value *EnumpluggablePassThroughAuthenticationPluginSchemaUrn
	isSet bool
}

func (v NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn) Get() *EnumpluggablePassThroughAuthenticationPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn) Set(val *EnumpluggablePassThroughAuthenticationPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn(val *EnumpluggablePassThroughAuthenticationPluginSchemaUrn) *NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn {
	return &NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluggablePassThroughAuthenticationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
