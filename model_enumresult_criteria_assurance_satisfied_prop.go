/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaAssuranceSatisfiedProp Indicates whether this Replication Assurance Result Criteria should match operations based on whether the assurance requirements have been satisfied.
type EnumresultCriteriaAssuranceSatisfiedProp string

// List of Enumresult-criteria-assuranceSatisfiedProp
const (
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_ANY EnumresultCriteriaAssuranceSatisfiedProp = "any"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_BOTH_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "both-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_EITHER_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "either-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_AT_LEAST_LOCAL_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "at-least-local-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_AT_LEAST_REMOTE_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "at-least-remote-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_ONLY_LOCAL_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "only-local-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_ONLY_REMOTE_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "only-remote-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_EITHER_NOT_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "either-not-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_AT_LEAST_LOCAL_NOT_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "at-least-local-not-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_AT_LEAST_REMOTE_NOT_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "at-least-remote-not-satisfied"
	ENUMRESULTCRITERIAASSURANCESATISFIEDPROP_NEITHER_SATISFIED EnumresultCriteriaAssuranceSatisfiedProp = "neither-satisfied"
)

// All allowed values of EnumresultCriteriaAssuranceSatisfiedProp enum
var AllowedEnumresultCriteriaAssuranceSatisfiedPropEnumValues = []EnumresultCriteriaAssuranceSatisfiedProp{
	"any",
	"both-satisfied",
	"either-satisfied",
	"at-least-local-satisfied",
	"at-least-remote-satisfied",
	"only-local-satisfied",
	"only-remote-satisfied",
	"either-not-satisfied",
	"at-least-local-not-satisfied",
	"at-least-remote-not-satisfied",
	"neither-satisfied",
}

func (v *EnumresultCriteriaAssuranceSatisfiedProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaAssuranceSatisfiedProp(value)
	for _, existing := range AllowedEnumresultCriteriaAssuranceSatisfiedPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaAssuranceSatisfiedProp", value)
}

// NewEnumresultCriteriaAssuranceSatisfiedPropFromValue returns a pointer to a valid EnumresultCriteriaAssuranceSatisfiedProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaAssuranceSatisfiedPropFromValue(v string) (*EnumresultCriteriaAssuranceSatisfiedProp, error) {
	ev := EnumresultCriteriaAssuranceSatisfiedProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaAssuranceSatisfiedProp: valid values are %v", v, AllowedEnumresultCriteriaAssuranceSatisfiedPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaAssuranceSatisfiedProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaAssuranceSatisfiedPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-assuranceSatisfiedProp value
func (v EnumresultCriteriaAssuranceSatisfiedProp) Ptr() *EnumresultCriteriaAssuranceSatisfiedProp {
	return &v
}

type NullableEnumresultCriteriaAssuranceSatisfiedProp struct {
	value *EnumresultCriteriaAssuranceSatisfiedProp
	isSet bool
}

func (v NullableEnumresultCriteriaAssuranceSatisfiedProp) Get() *EnumresultCriteriaAssuranceSatisfiedProp {
	return v.value
}

func (v *NullableEnumresultCriteriaAssuranceSatisfiedProp) Set(val *EnumresultCriteriaAssuranceSatisfiedProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaAssuranceSatisfiedProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaAssuranceSatisfiedProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaAssuranceSatisfiedProp(val *EnumresultCriteriaAssuranceSatisfiedProp) *NullableEnumresultCriteriaAssuranceSatisfiedProp {
	return &NullableEnumresultCriteriaAssuranceSatisfiedProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaAssuranceSatisfiedProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaAssuranceSatisfiedProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

