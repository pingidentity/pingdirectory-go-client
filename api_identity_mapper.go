/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// IdentityMapperApiService IdentityMapperApi service
type IdentityMapperApiService service

type ApiAddIdentityMapperRequest struct {
	ctx context.Context
	ApiService *IdentityMapperApiService
	addIdentityMapperRequest *AddIdentityMapperRequest
}

// Create a new Identity Mapper in the config
func (r ApiAddIdentityMapperRequest) AddIdentityMapperRequest(addIdentityMapperRequest AddIdentityMapperRequest) ApiAddIdentityMapperRequest {
	r.addIdentityMapperRequest = &addIdentityMapperRequest
	return r
}

func (r ApiAddIdentityMapperRequest) Execute() (*AddIdentityMapper200Response, *http.Response, error) {
	return r.ApiService.AddIdentityMapperExecute(r)
}

/*
AddIdentityMapper Add a new Identity Mapper to the config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddIdentityMapperRequest
*/
func (a *IdentityMapperApiService) AddIdentityMapper(ctx context.Context) ApiAddIdentityMapperRequest {
	return ApiAddIdentityMapperRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AddIdentityMapper200Response
func (a *IdentityMapperApiService) AddIdentityMapperExecute(r ApiAddIdentityMapperRequest) (*AddIdentityMapper200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddIdentityMapper200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityMapperApiService.AddIdentityMapper")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity-mappers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addIdentityMapperRequest == nil {
		return localVarReturnValue, nil, reportError("addIdentityMapperRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addIdentityMapperRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteIdentityMapperRequest struct {
	ctx context.Context
	ApiService *IdentityMapperApiService
	identityMapperName string
}

func (r ApiDeleteIdentityMapperRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteIdentityMapperExecute(r)
}

/*
DeleteIdentityMapper Delete a Identity Mapper

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identityMapperName Name of the Identity Mapper to be deleted
 @return ApiDeleteIdentityMapperRequest
*/
func (a *IdentityMapperApiService) DeleteIdentityMapper(ctx context.Context, identityMapperName string) ApiDeleteIdentityMapperRequest {
	return ApiDeleteIdentityMapperRequest{
		ApiService: a,
		ctx: ctx,
		identityMapperName: identityMapperName,
	}
}

// Execute executes the request
func (a *IdentityMapperApiService) DeleteIdentityMapperExecute(r ApiDeleteIdentityMapperRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityMapperApiService.DeleteIdentityMapper")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity-mappers/{identity-mapper-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"identity-mapper-name"+"}", url.PathEscape(parameterToString(r.identityMapperName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetIdentityMapperRequest struct {
	ctx context.Context
	ApiService *IdentityMapperApiService
	identityMapperName string
}

func (r ApiGetIdentityMapperRequest) Execute() (*AddIdentityMapper200Response, *http.Response, error) {
	return r.ApiService.GetIdentityMapperExecute(r)
}

/*
GetIdentityMapper Returns a single Identity Mapper

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identityMapperName Name of the Identity Mapper to be read
 @return ApiGetIdentityMapperRequest
*/
func (a *IdentityMapperApiService) GetIdentityMapper(ctx context.Context, identityMapperName string) ApiGetIdentityMapperRequest {
	return ApiGetIdentityMapperRequest{
		ApiService: a,
		ctx: ctx,
		identityMapperName: identityMapperName,
	}
}

// Execute executes the request
//  @return AddIdentityMapper200Response
func (a *IdentityMapperApiService) GetIdentityMapperExecute(r ApiGetIdentityMapperRequest) (*AddIdentityMapper200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddIdentityMapper200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityMapperApiService.GetIdentityMapper")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity-mappers/{identity-mapper-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"identity-mapper-name"+"}", url.PathEscape(parameterToString(r.identityMapperName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateIdentityMapperRequest struct {
	ctx context.Context
	ApiService *IdentityMapperApiService
	identityMapperName string
	updateRequest *UpdateRequest
}

// Update an existing Identity Mapper
func (r ApiUpdateIdentityMapperRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateIdentityMapperRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateIdentityMapperRequest) Execute() (*AddIdentityMapper200Response, *http.Response, error) {
	return r.ApiService.UpdateIdentityMapperExecute(r)
}

/*
UpdateIdentityMapper Update an existing Identity Mapper by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identityMapperName Name of the Identity Mapper to be updated
 @return ApiUpdateIdentityMapperRequest
*/
func (a *IdentityMapperApiService) UpdateIdentityMapper(ctx context.Context, identityMapperName string) ApiUpdateIdentityMapperRequest {
	return ApiUpdateIdentityMapperRequest{
		ApiService: a,
		ctx: ctx,
		identityMapperName: identityMapperName,
	}
}

// Execute executes the request
//  @return AddIdentityMapper200Response
func (a *IdentityMapperApiService) UpdateIdentityMapperExecute(r ApiUpdateIdentityMapperRequest) (*AddIdentityMapper200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddIdentityMapper200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityMapperApiService.UpdateIdentityMapper")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity-mappers/{identity-mapper-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"identity-mapper-name"+"}", url.PathEscape(parameterToString(r.identityMapperName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
