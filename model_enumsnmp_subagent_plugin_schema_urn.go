/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsnmpSubagentPluginSchemaUrn the model 'EnumsnmpSubagentPluginSchemaUrn'
type EnumsnmpSubagentPluginSchemaUrn string

// List of Enumsnmp-subagent-pluginSchemaUrn
const (
	ENUMSNMPSUBAGENTPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSNMP_SUBAGENT EnumsnmpSubagentPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:snmp-subagent"
)

// All allowed values of EnumsnmpSubagentPluginSchemaUrn enum
var AllowedEnumsnmpSubagentPluginSchemaUrnEnumValues = []EnumsnmpSubagentPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:snmp-subagent",
}

func (v *EnumsnmpSubagentPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsnmpSubagentPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsnmpSubagentPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsnmpSubagentPluginSchemaUrn", value)
}

// NewEnumsnmpSubagentPluginSchemaUrnFromValue returns a pointer to a valid EnumsnmpSubagentPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsnmpSubagentPluginSchemaUrnFromValue(v string) (*EnumsnmpSubagentPluginSchemaUrn, error) {
	ev := EnumsnmpSubagentPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsnmpSubagentPluginSchemaUrn: valid values are %v", v, AllowedEnumsnmpSubagentPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsnmpSubagentPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsnmpSubagentPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsnmp-subagent-pluginSchemaUrn value
func (v EnumsnmpSubagentPluginSchemaUrn) Ptr() *EnumsnmpSubagentPluginSchemaUrn {
	return &v
}

type NullableEnumsnmpSubagentPluginSchemaUrn struct {
	value *EnumsnmpSubagentPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsnmpSubagentPluginSchemaUrn) Get() *EnumsnmpSubagentPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsnmpSubagentPluginSchemaUrn) Set(val *EnumsnmpSubagentPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsnmpSubagentPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsnmpSubagentPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsnmpSubagentPluginSchemaUrn(val *EnumsnmpSubagentPluginSchemaUrn) *NullableEnumsnmpSubagentPluginSchemaUrn {
	return &NullableEnumsnmpSubagentPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsnmpSubagentPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsnmpSubagentPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
