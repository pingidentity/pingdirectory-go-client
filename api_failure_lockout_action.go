/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// FailureLockoutActionApiService FailureLockoutActionApi service
type FailureLockoutActionApiService service

type ApiAddFailureLockoutActionRequest struct {
	ctx                            context.Context
	ApiService                     *FailureLockoutActionApiService
	addFailureLockoutActionRequest *AddFailureLockoutActionRequest
}

// Create a new Failure Lockout Action in the config
func (r ApiAddFailureLockoutActionRequest) AddFailureLockoutActionRequest(addFailureLockoutActionRequest AddFailureLockoutActionRequest) ApiAddFailureLockoutActionRequest {
	r.addFailureLockoutActionRequest = &addFailureLockoutActionRequest
	return r
}

func (r ApiAddFailureLockoutActionRequest) Execute() (*AddFailureLockoutAction200Response, *http.Response, error) {
	return r.ApiService.AddFailureLockoutActionExecute(r)
}

/*
AddFailureLockoutAction Add a new Failure Lockout Action to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddFailureLockoutActionRequest
*/
func (a *FailureLockoutActionApiService) AddFailureLockoutAction(ctx context.Context) ApiAddFailureLockoutActionRequest {
	return ApiAddFailureLockoutActionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddFailureLockoutAction200Response
func (a *FailureLockoutActionApiService) AddFailureLockoutActionExecute(r ApiAddFailureLockoutActionRequest) (*AddFailureLockoutAction200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddFailureLockoutAction200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FailureLockoutActionApiService.AddFailureLockoutAction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/failure-lockout-actions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addFailureLockoutActionRequest == nil {
		return localVarReturnValue, nil, reportError("addFailureLockoutActionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addFailureLockoutActionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteFailureLockoutActionRequest struct {
	ctx                      context.Context
	ApiService               *FailureLockoutActionApiService
	failureLockoutActionName string
}

func (r ApiDeleteFailureLockoutActionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFailureLockoutActionExecute(r)
}

/*
DeleteFailureLockoutAction Delete a Failure Lockout Action

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param failureLockoutActionName Name of the Failure Lockout Action
	@return ApiDeleteFailureLockoutActionRequest
*/
func (a *FailureLockoutActionApiService) DeleteFailureLockoutAction(ctx context.Context, failureLockoutActionName string) ApiDeleteFailureLockoutActionRequest {
	return ApiDeleteFailureLockoutActionRequest{
		ApiService:               a,
		ctx:                      ctx,
		failureLockoutActionName: failureLockoutActionName,
	}
}

// Execute executes the request
func (a *FailureLockoutActionApiService) DeleteFailureLockoutActionExecute(r ApiDeleteFailureLockoutActionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FailureLockoutActionApiService.DeleteFailureLockoutAction")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/failure-lockout-actions/{failure-lockout-action-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"failure-lockout-action-name"+"}", url.PathEscape(parameterToString(r.failureLockoutActionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFailureLockoutActionRequest struct {
	ctx                      context.Context
	ApiService               *FailureLockoutActionApiService
	failureLockoutActionName string
}

func (r ApiGetFailureLockoutActionRequest) Execute() (*AddFailureLockoutAction200Response, *http.Response, error) {
	return r.ApiService.GetFailureLockoutActionExecute(r)
}

/*
GetFailureLockoutAction Returns a single Failure Lockout Action

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param failureLockoutActionName Name of the Failure Lockout Action
	@return ApiGetFailureLockoutActionRequest
*/
func (a *FailureLockoutActionApiService) GetFailureLockoutAction(ctx context.Context, failureLockoutActionName string) ApiGetFailureLockoutActionRequest {
	return ApiGetFailureLockoutActionRequest{
		ApiService:               a,
		ctx:                      ctx,
		failureLockoutActionName: failureLockoutActionName,
	}
}

// Execute executes the request
//
//	@return AddFailureLockoutAction200Response
func (a *FailureLockoutActionApiService) GetFailureLockoutActionExecute(r ApiGetFailureLockoutActionRequest) (*AddFailureLockoutAction200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddFailureLockoutAction200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FailureLockoutActionApiService.GetFailureLockoutAction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/failure-lockout-actions/{failure-lockout-action-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"failure-lockout-action-name"+"}", url.PathEscape(parameterToString(r.failureLockoutActionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFailureLockoutActionRequest struct {
	ctx                      context.Context
	ApiService               *FailureLockoutActionApiService
	failureLockoutActionName string
	updateRequest            *UpdateRequest
}

// Update an existing Failure Lockout Action
func (r ApiUpdateFailureLockoutActionRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateFailureLockoutActionRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateFailureLockoutActionRequest) Execute() (*AddFailureLockoutAction200Response, *http.Response, error) {
	return r.ApiService.UpdateFailureLockoutActionExecute(r)
}

/*
UpdateFailureLockoutAction Update an existing Failure Lockout Action by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param failureLockoutActionName Name of the Failure Lockout Action
	@return ApiUpdateFailureLockoutActionRequest
*/
func (a *FailureLockoutActionApiService) UpdateFailureLockoutAction(ctx context.Context, failureLockoutActionName string) ApiUpdateFailureLockoutActionRequest {
	return ApiUpdateFailureLockoutActionRequest{
		ApiService:               a,
		ctx:                      ctx,
		failureLockoutActionName: failureLockoutActionName,
	}
}

// Execute executes the request
//
//	@return AddFailureLockoutAction200Response
func (a *FailureLockoutActionApiService) UpdateFailureLockoutActionExecute(r ApiUpdateFailureLockoutActionRequest) (*AddFailureLockoutAction200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddFailureLockoutAction200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FailureLockoutActionApiService.UpdateFailureLockoutAction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/failure-lockout-actions/{failure-lockout-action-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"failure-lockout-action-name"+"}", url.PathEscape(parameterToString(r.failureLockoutActionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
