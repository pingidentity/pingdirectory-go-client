/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CryptoManagerResponse struct for CryptoManagerResponse
type CryptoManagerResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas                                       []EnumcryptoManagerSchemaUrn                       `json:"schemas,omitempty"`
	// Specifies the preferred message digest algorithm for the Directory Server.
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty"`
	// Specifies the preferred MAC algorithm for the Directory Server.
	MacAlgorithm *string `json:"macAlgorithm,omitempty"`
	// Specifies the key length in bits for the preferred MAC algorithm.
	MacKeyLength *int32 `json:"macKeyLength,omitempty"`
	// Specifies the cipher for the Directory Server using the syntax algorithm/mode/padding.
	CipherTransformation *string `json:"cipherTransformation,omitempty"`
	// Specifies the key length in bits for the preferred cipher.
	CipherKeyLength *int32 `json:"cipherKeyLength,omitempty"`
	// The preferred key wrapping transformation for the Directory Server. This value must be the same for all server instances in a replication topology.
	KeyWrappingTransformation *string `json:"keyWrappingTransformation,omitempty"`
	// Specifies the names of TLS protocols that are allowed for use in secure communication.
	SslProtocol []string `json:"sslProtocol,omitempty"`
	// Specifies the names of the TLS cipher suites that are allowed for use in secure communication.
	SslCipherSuite []string `json:"sslCipherSuite,omitempty"`
	// Specifies the names of the TLS protocols that will be enabled for outbound connections initiated by the Directory Server.
	OutboundSSLProtocol []string `json:"outboundSSLProtocol,omitempty"`
	// Specifies the names of the TLS cipher suites that will be enabled for outbound connections initiated by the Directory Server.
	OutboundSSLCipherSuite []string `json:"outboundSSLCipherSuite,omitempty"`
	// Indicates whether to enable support for TLS cipher suites that use the SHA-1 digest algorithm. The SHA-1 digest algorithm is no longer considered secure and is not recommended for use.
	EnableSha1CipherSuites *bool `json:"enableSha1CipherSuites,omitempty"`
	// Indicates whether to enable support for TLS cipher suites that use the RSA key exchange algorithm. Cipher suites that rely on RSA key exchange are not recommended because they do not support forward secrecy, which means that if the private key is compromised, then any communication negotiated using that private key should also be considered compromised.
	EnableRsaKeyExchangeCipherSuites *bool `json:"enableRsaKeyExchangeCipherSuites,omitempty"`
	// Specifies the nickname (also called the alias) of the certificate that the Crypto Manager should use when performing SSL communication.
	SslCertNickname *string `json:"sslCertNickname,omitempty"`
}

// NewCryptoManagerResponse instantiates a new CryptoManagerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoManagerResponse() *CryptoManagerResponse {
	this := CryptoManagerResponse{}
	return &this
}

// NewCryptoManagerResponseWithDefaults instantiates a new CryptoManagerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoManagerResponseWithDefaults() *CryptoManagerResponse {
	this := CryptoManagerResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *CryptoManagerResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *CryptoManagerResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetSchemas() []EnumcryptoManagerSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumcryptoManagerSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetSchemasOk() ([]EnumcryptoManagerSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumcryptoManagerSchemaUrn and assigns it to the Schemas field.
func (o *CryptoManagerResponse) SetSchemas(v []EnumcryptoManagerSchemaUrn) {
	o.Schemas = v
}

// GetDigestAlgorithm returns the DigestAlgorithm field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetDigestAlgorithm() string {
	if o == nil || isNil(o.DigestAlgorithm) {
		var ret string
		return ret
	}
	return *o.DigestAlgorithm
}

// GetDigestAlgorithmOk returns a tuple with the DigestAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetDigestAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.DigestAlgorithm) {
		return nil, false
	}
	return o.DigestAlgorithm, true
}

// HasDigestAlgorithm returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasDigestAlgorithm() bool {
	if o != nil && !isNil(o.DigestAlgorithm) {
		return true
	}

	return false
}

// SetDigestAlgorithm gets a reference to the given string and assigns it to the DigestAlgorithm field.
func (o *CryptoManagerResponse) SetDigestAlgorithm(v string) {
	o.DigestAlgorithm = &v
}

// GetMacAlgorithm returns the MacAlgorithm field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetMacAlgorithm() string {
	if o == nil || isNil(o.MacAlgorithm) {
		var ret string
		return ret
	}
	return *o.MacAlgorithm
}

// GetMacAlgorithmOk returns a tuple with the MacAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetMacAlgorithmOk() (*string, bool) {
	if o == nil || isNil(o.MacAlgorithm) {
		return nil, false
	}
	return o.MacAlgorithm, true
}

// HasMacAlgorithm returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasMacAlgorithm() bool {
	if o != nil && !isNil(o.MacAlgorithm) {
		return true
	}

	return false
}

// SetMacAlgorithm gets a reference to the given string and assigns it to the MacAlgorithm field.
func (o *CryptoManagerResponse) SetMacAlgorithm(v string) {
	o.MacAlgorithm = &v
}

// GetMacKeyLength returns the MacKeyLength field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetMacKeyLength() int32 {
	if o == nil || isNil(o.MacKeyLength) {
		var ret int32
		return ret
	}
	return *o.MacKeyLength
}

// GetMacKeyLengthOk returns a tuple with the MacKeyLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetMacKeyLengthOk() (*int32, bool) {
	if o == nil || isNil(o.MacKeyLength) {
		return nil, false
	}
	return o.MacKeyLength, true
}

// HasMacKeyLength returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasMacKeyLength() bool {
	if o != nil && !isNil(o.MacKeyLength) {
		return true
	}

	return false
}

// SetMacKeyLength gets a reference to the given int32 and assigns it to the MacKeyLength field.
func (o *CryptoManagerResponse) SetMacKeyLength(v int32) {
	o.MacKeyLength = &v
}

// GetCipherTransformation returns the CipherTransformation field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetCipherTransformation() string {
	if o == nil || isNil(o.CipherTransformation) {
		var ret string
		return ret
	}
	return *o.CipherTransformation
}

// GetCipherTransformationOk returns a tuple with the CipherTransformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetCipherTransformationOk() (*string, bool) {
	if o == nil || isNil(o.CipherTransformation) {
		return nil, false
	}
	return o.CipherTransformation, true
}

// HasCipherTransformation returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasCipherTransformation() bool {
	if o != nil && !isNil(o.CipherTransformation) {
		return true
	}

	return false
}

// SetCipherTransformation gets a reference to the given string and assigns it to the CipherTransformation field.
func (o *CryptoManagerResponse) SetCipherTransformation(v string) {
	o.CipherTransformation = &v
}

// GetCipherKeyLength returns the CipherKeyLength field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetCipherKeyLength() int32 {
	if o == nil || isNil(o.CipherKeyLength) {
		var ret int32
		return ret
	}
	return *o.CipherKeyLength
}

// GetCipherKeyLengthOk returns a tuple with the CipherKeyLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetCipherKeyLengthOk() (*int32, bool) {
	if o == nil || isNil(o.CipherKeyLength) {
		return nil, false
	}
	return o.CipherKeyLength, true
}

// HasCipherKeyLength returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasCipherKeyLength() bool {
	if o != nil && !isNil(o.CipherKeyLength) {
		return true
	}

	return false
}

// SetCipherKeyLength gets a reference to the given int32 and assigns it to the CipherKeyLength field.
func (o *CryptoManagerResponse) SetCipherKeyLength(v int32) {
	o.CipherKeyLength = &v
}

// GetKeyWrappingTransformation returns the KeyWrappingTransformation field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetKeyWrappingTransformation() string {
	if o == nil || isNil(o.KeyWrappingTransformation) {
		var ret string
		return ret
	}
	return *o.KeyWrappingTransformation
}

// GetKeyWrappingTransformationOk returns a tuple with the KeyWrappingTransformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetKeyWrappingTransformationOk() (*string, bool) {
	if o == nil || isNil(o.KeyWrappingTransformation) {
		return nil, false
	}
	return o.KeyWrappingTransformation, true
}

// HasKeyWrappingTransformation returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasKeyWrappingTransformation() bool {
	if o != nil && !isNil(o.KeyWrappingTransformation) {
		return true
	}

	return false
}

// SetKeyWrappingTransformation gets a reference to the given string and assigns it to the KeyWrappingTransformation field.
func (o *CryptoManagerResponse) SetKeyWrappingTransformation(v string) {
	o.KeyWrappingTransformation = &v
}

// GetSslProtocol returns the SslProtocol field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetSslProtocol() []string {
	if o == nil || isNil(o.SslProtocol) {
		var ret []string
		return ret
	}
	return o.SslProtocol
}

// GetSslProtocolOk returns a tuple with the SslProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetSslProtocolOk() ([]string, bool) {
	if o == nil || isNil(o.SslProtocol) {
		return nil, false
	}
	return o.SslProtocol, true
}

// HasSslProtocol returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasSslProtocol() bool {
	if o != nil && !isNil(o.SslProtocol) {
		return true
	}

	return false
}

// SetSslProtocol gets a reference to the given []string and assigns it to the SslProtocol field.
func (o *CryptoManagerResponse) SetSslProtocol(v []string) {
	o.SslProtocol = v
}

// GetSslCipherSuite returns the SslCipherSuite field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetSslCipherSuite() []string {
	if o == nil || isNil(o.SslCipherSuite) {
		var ret []string
		return ret
	}
	return o.SslCipherSuite
}

// GetSslCipherSuiteOk returns a tuple with the SslCipherSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetSslCipherSuiteOk() ([]string, bool) {
	if o == nil || isNil(o.SslCipherSuite) {
		return nil, false
	}
	return o.SslCipherSuite, true
}

// HasSslCipherSuite returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasSslCipherSuite() bool {
	if o != nil && !isNil(o.SslCipherSuite) {
		return true
	}

	return false
}

// SetSslCipherSuite gets a reference to the given []string and assigns it to the SslCipherSuite field.
func (o *CryptoManagerResponse) SetSslCipherSuite(v []string) {
	o.SslCipherSuite = v
}

// GetOutboundSSLProtocol returns the OutboundSSLProtocol field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetOutboundSSLProtocol() []string {
	if o == nil || isNil(o.OutboundSSLProtocol) {
		var ret []string
		return ret
	}
	return o.OutboundSSLProtocol
}

// GetOutboundSSLProtocolOk returns a tuple with the OutboundSSLProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetOutboundSSLProtocolOk() ([]string, bool) {
	if o == nil || isNil(o.OutboundSSLProtocol) {
		return nil, false
	}
	return o.OutboundSSLProtocol, true
}

// HasOutboundSSLProtocol returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasOutboundSSLProtocol() bool {
	if o != nil && !isNil(o.OutboundSSLProtocol) {
		return true
	}

	return false
}

// SetOutboundSSLProtocol gets a reference to the given []string and assigns it to the OutboundSSLProtocol field.
func (o *CryptoManagerResponse) SetOutboundSSLProtocol(v []string) {
	o.OutboundSSLProtocol = v
}

// GetOutboundSSLCipherSuite returns the OutboundSSLCipherSuite field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetOutboundSSLCipherSuite() []string {
	if o == nil || isNil(o.OutboundSSLCipherSuite) {
		var ret []string
		return ret
	}
	return o.OutboundSSLCipherSuite
}

// GetOutboundSSLCipherSuiteOk returns a tuple with the OutboundSSLCipherSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetOutboundSSLCipherSuiteOk() ([]string, bool) {
	if o == nil || isNil(o.OutboundSSLCipherSuite) {
		return nil, false
	}
	return o.OutboundSSLCipherSuite, true
}

// HasOutboundSSLCipherSuite returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasOutboundSSLCipherSuite() bool {
	if o != nil && !isNil(o.OutboundSSLCipherSuite) {
		return true
	}

	return false
}

// SetOutboundSSLCipherSuite gets a reference to the given []string and assigns it to the OutboundSSLCipherSuite field.
func (o *CryptoManagerResponse) SetOutboundSSLCipherSuite(v []string) {
	o.OutboundSSLCipherSuite = v
}

// GetEnableSha1CipherSuites returns the EnableSha1CipherSuites field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetEnableSha1CipherSuites() bool {
	if o == nil || isNil(o.EnableSha1CipherSuites) {
		var ret bool
		return ret
	}
	return *o.EnableSha1CipherSuites
}

// GetEnableSha1CipherSuitesOk returns a tuple with the EnableSha1CipherSuites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetEnableSha1CipherSuitesOk() (*bool, bool) {
	if o == nil || isNil(o.EnableSha1CipherSuites) {
		return nil, false
	}
	return o.EnableSha1CipherSuites, true
}

// HasEnableSha1CipherSuites returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasEnableSha1CipherSuites() bool {
	if o != nil && !isNil(o.EnableSha1CipherSuites) {
		return true
	}

	return false
}

// SetEnableSha1CipherSuites gets a reference to the given bool and assigns it to the EnableSha1CipherSuites field.
func (o *CryptoManagerResponse) SetEnableSha1CipherSuites(v bool) {
	o.EnableSha1CipherSuites = &v
}

// GetEnableRsaKeyExchangeCipherSuites returns the EnableRsaKeyExchangeCipherSuites field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetEnableRsaKeyExchangeCipherSuites() bool {
	if o == nil || isNil(o.EnableRsaKeyExchangeCipherSuites) {
		var ret bool
		return ret
	}
	return *o.EnableRsaKeyExchangeCipherSuites
}

// GetEnableRsaKeyExchangeCipherSuitesOk returns a tuple with the EnableRsaKeyExchangeCipherSuites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetEnableRsaKeyExchangeCipherSuitesOk() (*bool, bool) {
	if o == nil || isNil(o.EnableRsaKeyExchangeCipherSuites) {
		return nil, false
	}
	return o.EnableRsaKeyExchangeCipherSuites, true
}

// HasEnableRsaKeyExchangeCipherSuites returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasEnableRsaKeyExchangeCipherSuites() bool {
	if o != nil && !isNil(o.EnableRsaKeyExchangeCipherSuites) {
		return true
	}

	return false
}

// SetEnableRsaKeyExchangeCipherSuites gets a reference to the given bool and assigns it to the EnableRsaKeyExchangeCipherSuites field.
func (o *CryptoManagerResponse) SetEnableRsaKeyExchangeCipherSuites(v bool) {
	o.EnableRsaKeyExchangeCipherSuites = &v
}

// GetSslCertNickname returns the SslCertNickname field value if set, zero value otherwise.
func (o *CryptoManagerResponse) GetSslCertNickname() string {
	if o == nil || isNil(o.SslCertNickname) {
		var ret string
		return ret
	}
	return *o.SslCertNickname
}

// GetSslCertNicknameOk returns a tuple with the SslCertNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoManagerResponse) GetSslCertNicknameOk() (*string, bool) {
	if o == nil || isNil(o.SslCertNickname) {
		return nil, false
	}
	return o.SslCertNickname, true
}

// HasSslCertNickname returns a boolean if a field has been set.
func (o *CryptoManagerResponse) HasSslCertNickname() bool {
	if o != nil && !isNil(o.SslCertNickname) {
		return true
	}

	return false
}

// SetSslCertNickname gets a reference to the given string and assigns it to the SslCertNickname field.
func (o *CryptoManagerResponse) SetSslCertNickname(v string) {
	o.SslCertNickname = &v
}

func (o CryptoManagerResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.DigestAlgorithm) {
		toSerialize["digestAlgorithm"] = o.DigestAlgorithm
	}
	if !isNil(o.MacAlgorithm) {
		toSerialize["macAlgorithm"] = o.MacAlgorithm
	}
	if !isNil(o.MacKeyLength) {
		toSerialize["macKeyLength"] = o.MacKeyLength
	}
	if !isNil(o.CipherTransformation) {
		toSerialize["cipherTransformation"] = o.CipherTransformation
	}
	if !isNil(o.CipherKeyLength) {
		toSerialize["cipherKeyLength"] = o.CipherKeyLength
	}
	if !isNil(o.KeyWrappingTransformation) {
		toSerialize["keyWrappingTransformation"] = o.KeyWrappingTransformation
	}
	if !isNil(o.SslProtocol) {
		toSerialize["sslProtocol"] = o.SslProtocol
	}
	if !isNil(o.SslCipherSuite) {
		toSerialize["sslCipherSuite"] = o.SslCipherSuite
	}
	if !isNil(o.OutboundSSLProtocol) {
		toSerialize["outboundSSLProtocol"] = o.OutboundSSLProtocol
	}
	if !isNil(o.OutboundSSLCipherSuite) {
		toSerialize["outboundSSLCipherSuite"] = o.OutboundSSLCipherSuite
	}
	if !isNil(o.EnableSha1CipherSuites) {
		toSerialize["enableSha1CipherSuites"] = o.EnableSha1CipherSuites
	}
	if !isNil(o.EnableRsaKeyExchangeCipherSuites) {
		toSerialize["enableRsaKeyExchangeCipherSuites"] = o.EnableRsaKeyExchangeCipherSuites
	}
	if !isNil(o.SslCertNickname) {
		toSerialize["sslCertNickname"] = o.SslCertNickname
	}
	return json.Marshal(toSerialize)
}

type NullableCryptoManagerResponse struct {
	value *CryptoManagerResponse
	isSet bool
}

func (v NullableCryptoManagerResponse) Get() *CryptoManagerResponse {
	return v.value
}

func (v *NullableCryptoManagerResponse) Set(val *CryptoManagerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoManagerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoManagerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoManagerResponse(val *CryptoManagerResponse) *NullableCryptoManagerResponse {
	return &NullableCryptoManagerResponse{value: val, isSet: true}
}

func (v NullableCryptoManagerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoManagerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
