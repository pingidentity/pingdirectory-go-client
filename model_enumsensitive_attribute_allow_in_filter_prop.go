/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsensitiveAttributeAllowInFilterProp Indicates whether clients will be allowed to include sensitive attributes in search filters. This also includes filters that may be used in other forms, including assertion and LDAP join request controls.
type EnumsensitiveAttributeAllowInFilterProp string

// List of Enumsensitive-attribute-allowInFilterProp
const (
	ALLOW EnumsensitiveAttributeAllowInFilterProp = "allow"
	REJECT EnumsensitiveAttributeAllowInFilterProp = "reject"
	SECURE_ONLY EnumsensitiveAttributeAllowInFilterProp = "secure-only"
)

// All allowed values of EnumsensitiveAttributeAllowInFilterProp enum
var AllowedEnumsensitiveAttributeAllowInFilterPropEnumValues = []EnumsensitiveAttributeAllowInFilterProp{
	"allow",
	"reject",
	"secure-only",
}

func (v *EnumsensitiveAttributeAllowInFilterProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsensitiveAttributeAllowInFilterProp(value)
	for _, existing := range AllowedEnumsensitiveAttributeAllowInFilterPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsensitiveAttributeAllowInFilterProp", value)
}

// NewEnumsensitiveAttributeAllowInFilterPropFromValue returns a pointer to a valid EnumsensitiveAttributeAllowInFilterProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsensitiveAttributeAllowInFilterPropFromValue(v string) (*EnumsensitiveAttributeAllowInFilterProp, error) {
	ev := EnumsensitiveAttributeAllowInFilterProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsensitiveAttributeAllowInFilterProp: valid values are %v", v, AllowedEnumsensitiveAttributeAllowInFilterPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsensitiveAttributeAllowInFilterProp) IsValid() bool {
	for _, existing := range AllowedEnumsensitiveAttributeAllowInFilterPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsensitive-attribute-allowInFilterProp value
func (v EnumsensitiveAttributeAllowInFilterProp) Ptr() *EnumsensitiveAttributeAllowInFilterProp {
	return &v
}

type NullableEnumsensitiveAttributeAllowInFilterProp struct {
	value *EnumsensitiveAttributeAllowInFilterProp
	isSet bool
}

func (v NullableEnumsensitiveAttributeAllowInFilterProp) Get() *EnumsensitiveAttributeAllowInFilterProp {
	return v.value
}

func (v *NullableEnumsensitiveAttributeAllowInFilterProp) Set(val *EnumsensitiveAttributeAllowInFilterProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsensitiveAttributeAllowInFilterProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsensitiveAttributeAllowInFilterProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsensitiveAttributeAllowInFilterProp(val *EnumsensitiveAttributeAllowInFilterProp) *NullableEnumsensitiveAttributeAllowInFilterProp {
	return &NullableEnumsensitiveAttributeAllowInFilterProp{value: val, isSet: true}
}

func (v NullableEnumsensitiveAttributeAllowInFilterProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsensitiveAttributeAllowInFilterProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

