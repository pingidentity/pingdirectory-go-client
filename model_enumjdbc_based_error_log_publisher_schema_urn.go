/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumjdbcBasedErrorLogPublisherSchemaUrn the model 'EnumjdbcBasedErrorLogPublisherSchemaUrn'
type EnumjdbcBasedErrorLogPublisherSchemaUrn string

// List of Enumjdbc-based-error-log-publisherSchemaUrn
const (
	ENUMJDBCBASEDERRORLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERJDBC_BASED_ERROR EnumjdbcBasedErrorLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:jdbc-based-error"
)

// All allowed values of EnumjdbcBasedErrorLogPublisherSchemaUrn enum
var AllowedEnumjdbcBasedErrorLogPublisherSchemaUrnEnumValues = []EnumjdbcBasedErrorLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:jdbc-based-error",
}

func (v *EnumjdbcBasedErrorLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjdbcBasedErrorLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumjdbcBasedErrorLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjdbcBasedErrorLogPublisherSchemaUrn", value)
}

// NewEnumjdbcBasedErrorLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumjdbcBasedErrorLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjdbcBasedErrorLogPublisherSchemaUrnFromValue(v string) (*EnumjdbcBasedErrorLogPublisherSchemaUrn, error) {
	ev := EnumjdbcBasedErrorLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjdbcBasedErrorLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumjdbcBasedErrorLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjdbcBasedErrorLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjdbcBasedErrorLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjdbc-based-error-log-publisherSchemaUrn value
func (v EnumjdbcBasedErrorLogPublisherSchemaUrn) Ptr() *EnumjdbcBasedErrorLogPublisherSchemaUrn {
	return &v
}

type NullableEnumjdbcBasedErrorLogPublisherSchemaUrn struct {
	value *EnumjdbcBasedErrorLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumjdbcBasedErrorLogPublisherSchemaUrn) Get() *EnumjdbcBasedErrorLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumjdbcBasedErrorLogPublisherSchemaUrn) Set(val *EnumjdbcBasedErrorLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjdbcBasedErrorLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjdbcBasedErrorLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjdbcBasedErrorLogPublisherSchemaUrn(val *EnumjdbcBasedErrorLogPublisherSchemaUrn) *NullableEnumjdbcBasedErrorLogPublisherSchemaUrn {
	return &NullableEnumjdbcBasedErrorLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjdbcBasedErrorLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjdbcBasedErrorLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

