/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp The return state to use if a timeout is encountered while waiting for the server work queue to become idle (if the duration-to-wait-for-work-queue-idle property has a value), or if the time specified by the duration-to-wait-for-search-to-return-entries elapses without the associated search returning any entries.
type EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp string

// List of Enumrecurring-task-taskReturnStateIfTimeoutIsEncounteredProp
const (
	ENUMRECURRINGTASKTASKRETURNSTATEIFTIMEOUTISENCOUNTEREDPROP_STOPPED_BY_ERROR       EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp = "stopped-by-error"
	ENUMRECURRINGTASKTASKRETURNSTATEIFTIMEOUTISENCOUNTEREDPROP_COMPLETED_WITH_ERRORS  EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp = "completed-with-errors"
	ENUMRECURRINGTASKTASKRETURNSTATEIFTIMEOUTISENCOUNTEREDPROP_COMPLETED_SUCCESSFULLY EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp = "completed-successfully"
)

// All allowed values of EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp enum
var AllowedEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredPropEnumValues = []EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp{
	"stopped-by-error",
	"completed-with-errors",
	"completed-successfully",
}

func (v *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp(value)
	for _, existing := range AllowedEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp", value)
}

// NewEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredPropFromValue returns a pointer to a valid EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredPropFromValue(v string) (*EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp, error) {
	ev := EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp: valid values are %v", v, AllowedEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) IsValid() bool {
	for _, existing := range AllowedEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumrecurring-task-taskReturnStateIfTimeoutIsEncounteredProp value
func (v EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) Ptr() *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp {
	return &v
}

type NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp struct {
	value *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp
	isSet bool
}

func (v NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) Get() *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp {
	return v.value
}

func (v *NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) Set(val *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp(val *EnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) *NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp {
	return &NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp{value: val, isSet: true}
}

func (v NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrecurringTaskTaskReturnStateIfTimeoutIsEncounteredProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
