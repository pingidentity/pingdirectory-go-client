/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp Indicates whether to validate the OAuth access token in addition to the OpenID Connect ID token in OAUTHBEARER bind requests that contain both types of tokens.
type EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp string

// List of Enumsasl-mechanism-handler-validateAccessTokenWhenIDTokenIsAlsoProvidedProp
const (
	ONLY_THE_ID_TOKEN EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp = "validate-only-the-id-token"
	BOTH_TOKENS_BUT_ONLY_MAP_THE_ID_TOKEN EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp = "validate-both-tokens-but-only-map-the-id-token"
	AND_MAP_BOTH_TOKENS EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp = "validate-and-map-both-tokens"
)

// All allowed values of EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp enum
var AllowedEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedPropEnumValues = []EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp{
	"validate-only-the-id-token",
	"validate-both-tokens-but-only-map-the-id-token",
	"validate-and-map-both-tokens",
}

func (v *EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp(value)
	for _, existing := range AllowedEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp", value)
}

// NewEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedPropFromValue returns a pointer to a valid EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedPropFromValue(v string) (*EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp, error) {
	ev := EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp: valid values are %v", v, AllowedEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) IsValid() bool {
	for _, existing := range AllowedEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsasl-mechanism-handler-validateAccessTokenWhenIDTokenIsAlsoProvidedProp value
func (v EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) Ptr() *EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp {
	return &v
}

type NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp struct {
	value *EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp
	isSet bool
}

func (v NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) Get() *EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp {
	return v.value
}

func (v *NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) Set(val *EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp(val *EnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) *NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp {
	return &NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp{value: val, isSet: true}
}

func (v NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsaslMechanismHandlerValidateAccessTokenWhenIDTokenIsAlsoProvidedProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

