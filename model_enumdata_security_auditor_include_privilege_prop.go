/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdataSecurityAuditorIncludePrivilegeProp If defined, only entries with the specified privileges will be reported. By default, entries with any privilege assigned will be reported.
type EnumdataSecurityAuditorIncludePrivilegeProp string

// List of Enumdata-security-auditor-includePrivilegeProp
const (
	AUDIT_DATA_SECURITY EnumdataSecurityAuditorIncludePrivilegeProp = "audit-data-security"
	BYPASS_ACL EnumdataSecurityAuditorIncludePrivilegeProp = "bypass-acl"
	BYPASS_READ_ACL EnumdataSecurityAuditorIncludePrivilegeProp = "bypass-read-acl"
	MODIFY_ACL EnumdataSecurityAuditorIncludePrivilegeProp = "modify-acl"
	CONFIG_READ EnumdataSecurityAuditorIncludePrivilegeProp = "config-read"
	CONFIG_WRITE EnumdataSecurityAuditorIncludePrivilegeProp = "config-write"
	JMX_READ EnumdataSecurityAuditorIncludePrivilegeProp = "jmx-read"
	JMX_WRITE EnumdataSecurityAuditorIncludePrivilegeProp = "jmx-write"
	JMX_NOTIFY EnumdataSecurityAuditorIncludePrivilegeProp = "jmx-notify"
	LDIF_IMPORT EnumdataSecurityAuditorIncludePrivilegeProp = "ldif-import"
	LDIF_EXPORT EnumdataSecurityAuditorIncludePrivilegeProp = "ldif-export"
	BACKEND_BACKUP EnumdataSecurityAuditorIncludePrivilegeProp = "backend-backup"
	BACKEND_RESTORE EnumdataSecurityAuditorIncludePrivilegeProp = "backend-restore"
	SERVER_SHUTDOWN EnumdataSecurityAuditorIncludePrivilegeProp = "server-shutdown"
	SERVER_RESTART EnumdataSecurityAuditorIncludePrivilegeProp = "server-restart"
	PROXIED_AUTH EnumdataSecurityAuditorIncludePrivilegeProp = "proxied-auth"
	DISCONNECT_CLIENT EnumdataSecurityAuditorIncludePrivilegeProp = "disconnect-client"
	PASSWORD_RESET EnumdataSecurityAuditorIncludePrivilegeProp = "password-reset"
	UPDATE_SCHEMA EnumdataSecurityAuditorIncludePrivilegeProp = "update-schema"
	PRIVILEGE_CHANGE EnumdataSecurityAuditorIncludePrivilegeProp = "privilege-change"
	UNINDEXED_SEARCH EnumdataSecurityAuditorIncludePrivilegeProp = "unindexed-search"
	UNINDEXED_SEARCH_WITH_CONTROL EnumdataSecurityAuditorIncludePrivilegeProp = "unindexed-search-with-control"
	BYPASS_PW_POLICY EnumdataSecurityAuditorIncludePrivilegeProp = "bypass-pw-policy"
	LOCKDOWN_MODE EnumdataSecurityAuditorIncludePrivilegeProp = "lockdown-mode"
	STREAM_VALUES EnumdataSecurityAuditorIncludePrivilegeProp = "stream-values"
	THIRD_PARTY_TASK EnumdataSecurityAuditorIncludePrivilegeProp = "third-party-task"
	SOFT_DELETE_READ EnumdataSecurityAuditorIncludePrivilegeProp = "soft-delete-read"
	METRICS_READ EnumdataSecurityAuditorIncludePrivilegeProp = "metrics-read"
	REMOTE_LOG_READ EnumdataSecurityAuditorIncludePrivilegeProp = "remote-log-read"
	MANAGE_TOPOLOGY EnumdataSecurityAuditorIncludePrivilegeProp = "manage-topology"
	PERMIT_GET_PASSWORD_POLICY_STATE_ISSUES EnumdataSecurityAuditorIncludePrivilegeProp = "permit-get-password-policy-state-issues"
	PERMIT_PROXIED_MSCHAPV2_DETAILS EnumdataSecurityAuditorIncludePrivilegeProp = "permit-proxied-mschapv2-details"
	PERMIT_FORWARDING_CLIENT_CONNECTION_POLICY EnumdataSecurityAuditorIncludePrivilegeProp = "permit-forwarding-client-connection-policy"
	EXEC_TASK EnumdataSecurityAuditorIncludePrivilegeProp = "exec-task"
	COLLECT_SUPPORT_DATA EnumdataSecurityAuditorIncludePrivilegeProp = "collect-support-data"
	FILE_SERVLET_ACCESS EnumdataSecurityAuditorIncludePrivilegeProp = "file-servlet-access"
	PERMIT_REPLACE_CERTIFICATE_REQUEST EnumdataSecurityAuditorIncludePrivilegeProp = "permit-replace-certificate-request"
)

// All allowed values of EnumdataSecurityAuditorIncludePrivilegeProp enum
var AllowedEnumdataSecurityAuditorIncludePrivilegePropEnumValues = []EnumdataSecurityAuditorIncludePrivilegeProp{
	"audit-data-security",
	"bypass-acl",
	"bypass-read-acl",
	"modify-acl",
	"config-read",
	"config-write",
	"jmx-read",
	"jmx-write",
	"jmx-notify",
	"ldif-import",
	"ldif-export",
	"backend-backup",
	"backend-restore",
	"server-shutdown",
	"server-restart",
	"proxied-auth",
	"disconnect-client",
	"password-reset",
	"update-schema",
	"privilege-change",
	"unindexed-search",
	"unindexed-search-with-control",
	"bypass-pw-policy",
	"lockdown-mode",
	"stream-values",
	"third-party-task",
	"soft-delete-read",
	"metrics-read",
	"remote-log-read",
	"manage-topology",
	"permit-get-password-policy-state-issues",
	"permit-proxied-mschapv2-details",
	"permit-forwarding-client-connection-policy",
	"exec-task",
	"collect-support-data",
	"file-servlet-access",
	"permit-replace-certificate-request",
}

func (v *EnumdataSecurityAuditorIncludePrivilegeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdataSecurityAuditorIncludePrivilegeProp(value)
	for _, existing := range AllowedEnumdataSecurityAuditorIncludePrivilegePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdataSecurityAuditorIncludePrivilegeProp", value)
}

// NewEnumdataSecurityAuditorIncludePrivilegePropFromValue returns a pointer to a valid EnumdataSecurityAuditorIncludePrivilegeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdataSecurityAuditorIncludePrivilegePropFromValue(v string) (*EnumdataSecurityAuditorIncludePrivilegeProp, error) {
	ev := EnumdataSecurityAuditorIncludePrivilegeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdataSecurityAuditorIncludePrivilegeProp: valid values are %v", v, AllowedEnumdataSecurityAuditorIncludePrivilegePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdataSecurityAuditorIncludePrivilegeProp) IsValid() bool {
	for _, existing := range AllowedEnumdataSecurityAuditorIncludePrivilegePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdata-security-auditor-includePrivilegeProp value
func (v EnumdataSecurityAuditorIncludePrivilegeProp) Ptr() *EnumdataSecurityAuditorIncludePrivilegeProp {
	return &v
}

type NullableEnumdataSecurityAuditorIncludePrivilegeProp struct {
	value *EnumdataSecurityAuditorIncludePrivilegeProp
	isSet bool
}

func (v NullableEnumdataSecurityAuditorIncludePrivilegeProp) Get() *EnumdataSecurityAuditorIncludePrivilegeProp {
	return v.value
}

func (v *NullableEnumdataSecurityAuditorIncludePrivilegeProp) Set(val *EnumdataSecurityAuditorIncludePrivilegeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdataSecurityAuditorIncludePrivilegeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdataSecurityAuditorIncludePrivilegeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdataSecurityAuditorIncludePrivilegeProp(val *EnumdataSecurityAuditorIncludePrivilegeProp) *NullableEnumdataSecurityAuditorIncludePrivilegeProp {
	return &NullableEnumdataSecurityAuditorIncludePrivilegeProp{value: val, isSet: true}
}

func (v NullableEnumdataSecurityAuditorIncludePrivilegeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdataSecurityAuditorIncludePrivilegeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

