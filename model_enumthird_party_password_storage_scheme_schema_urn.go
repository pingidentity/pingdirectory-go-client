/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyPasswordStorageSchemeSchemaUrn the model 'EnumthirdPartyPasswordStorageSchemeSchemaUrn'
type EnumthirdPartyPasswordStorageSchemeSchemaUrn string

// List of Enumthird-party-password-storage-schemeSchemaUrn
const (
	ENUMTHIRDPARTYPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMETHIRD_PARTY EnumthirdPartyPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:third-party"
)

// All allowed values of EnumthirdPartyPasswordStorageSchemeSchemaUrn enum
var AllowedEnumthirdPartyPasswordStorageSchemeSchemaUrnEnumValues = []EnumthirdPartyPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:third-party",
}

func (v *EnumthirdPartyPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumthirdPartyPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyPasswordStorageSchemeSchemaUrnFromValue(v string) (*EnumthirdPartyPasswordStorageSchemeSchemaUrn, error) {
	ev := EnumthirdPartyPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-password-storage-schemeSchemaUrn value
func (v EnumthirdPartyPasswordStorageSchemeSchemaUrn) Ptr() *EnumthirdPartyPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn struct {
	value *EnumthirdPartyPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn) Get() *EnumthirdPartyPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn) Set(val *EnumthirdPartyPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyPasswordStorageSchemeSchemaUrn(val *EnumthirdPartyPasswordStorageSchemeSchemaUrn) *NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn {
	return &NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
