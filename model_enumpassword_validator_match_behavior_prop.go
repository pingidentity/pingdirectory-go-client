/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordValidatorMatchBehaviorProp The behavior to exhibit if a user's proposed password matches the regular expression defined in the match-pattern property.
type EnumpasswordValidatorMatchBehaviorProp string

// List of Enumpassword-validator-matchBehaviorProp
const (
	ENUMPASSWORDVALIDATORMATCHBEHAVIORPROP_REQUIRE_MATCH EnumpasswordValidatorMatchBehaviorProp = "require-match"
	ENUMPASSWORDVALIDATORMATCHBEHAVIORPROP_REJECT_MATCH  EnumpasswordValidatorMatchBehaviorProp = "reject-match"
)

// All allowed values of EnumpasswordValidatorMatchBehaviorProp enum
var AllowedEnumpasswordValidatorMatchBehaviorPropEnumValues = []EnumpasswordValidatorMatchBehaviorProp{
	"require-match",
	"reject-match",
}

func (v *EnumpasswordValidatorMatchBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordValidatorMatchBehaviorProp(value)
	for _, existing := range AllowedEnumpasswordValidatorMatchBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordValidatorMatchBehaviorProp", value)
}

// NewEnumpasswordValidatorMatchBehaviorPropFromValue returns a pointer to a valid EnumpasswordValidatorMatchBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordValidatorMatchBehaviorPropFromValue(v string) (*EnumpasswordValidatorMatchBehaviorProp, error) {
	ev := EnumpasswordValidatorMatchBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordValidatorMatchBehaviorProp: valid values are %v", v, AllowedEnumpasswordValidatorMatchBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordValidatorMatchBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpasswordValidatorMatchBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-validator-matchBehaviorProp value
func (v EnumpasswordValidatorMatchBehaviorProp) Ptr() *EnumpasswordValidatorMatchBehaviorProp {
	return &v
}

type NullableEnumpasswordValidatorMatchBehaviorProp struct {
	value *EnumpasswordValidatorMatchBehaviorProp
	isSet bool
}

func (v NullableEnumpasswordValidatorMatchBehaviorProp) Get() *EnumpasswordValidatorMatchBehaviorProp {
	return v.value
}

func (v *NullableEnumpasswordValidatorMatchBehaviorProp) Set(val *EnumpasswordValidatorMatchBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordValidatorMatchBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordValidatorMatchBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordValidatorMatchBehaviorProp(val *EnumpasswordValidatorMatchBehaviorProp) *NullableEnumpasswordValidatorMatchBehaviorProp {
	return &NullableEnumpasswordValidatorMatchBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpasswordValidatorMatchBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordValidatorMatchBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
