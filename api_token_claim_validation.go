/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// TokenClaimValidationApiService TokenClaimValidationApi service
type TokenClaimValidationApiService service

type ApiAddTokenClaimValidationRequest struct {
	ctx                            context.Context
	ApiService                     *TokenClaimValidationApiService
	addTokenClaimValidationRequest *AddTokenClaimValidationRequest
}

// Create a new Token Claim Validation in the config
func (r ApiAddTokenClaimValidationRequest) AddTokenClaimValidationRequest(addTokenClaimValidationRequest AddTokenClaimValidationRequest) ApiAddTokenClaimValidationRequest {
	r.addTokenClaimValidationRequest = &addTokenClaimValidationRequest
	return r
}

func (r ApiAddTokenClaimValidationRequest) Execute() (*AddTokenClaimValidation200Response, *http.Response, error) {
	return r.ApiService.AddTokenClaimValidationExecute(r)
}

/*
AddTokenClaimValidation Add a new Token Claim Validation to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddTokenClaimValidationRequest
*/
func (a *TokenClaimValidationApiService) AddTokenClaimValidation(ctx context.Context) ApiAddTokenClaimValidationRequest {
	return ApiAddTokenClaimValidationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddTokenClaimValidation200Response
func (a *TokenClaimValidationApiService) AddTokenClaimValidationExecute(r ApiAddTokenClaimValidationRequest) (*AddTokenClaimValidation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddTokenClaimValidation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenClaimValidationApiService.AddTokenClaimValidation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/token-claim-validations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addTokenClaimValidationRequest == nil {
		return localVarReturnValue, nil, reportError("addTokenClaimValidationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addTokenClaimValidationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTokenClaimValidationRequest struct {
	ctx                      context.Context
	ApiService               *TokenClaimValidationApiService
	tokenClaimValidationName string
}

func (r ApiDeleteTokenClaimValidationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTokenClaimValidationExecute(r)
}

/*
DeleteTokenClaimValidation Delete a Token Claim Validation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tokenClaimValidationName Name of the Token Claim Validation to be deleted
	@return ApiDeleteTokenClaimValidationRequest
*/
func (a *TokenClaimValidationApiService) DeleteTokenClaimValidation(ctx context.Context, tokenClaimValidationName string) ApiDeleteTokenClaimValidationRequest {
	return ApiDeleteTokenClaimValidationRequest{
		ApiService:               a,
		ctx:                      ctx,
		tokenClaimValidationName: tokenClaimValidationName,
	}
}

// Execute executes the request
func (a *TokenClaimValidationApiService) DeleteTokenClaimValidationExecute(r ApiDeleteTokenClaimValidationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenClaimValidationApiService.DeleteTokenClaimValidation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/token-claim-validations/{token-claim-validation-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"token-claim-validation-name"+"}", url.PathEscape(parameterToString(r.tokenClaimValidationName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTokenClaimValidationRequest struct {
	ctx                      context.Context
	ApiService               *TokenClaimValidationApiService
	tokenClaimValidationName string
}

func (r ApiGetTokenClaimValidationRequest) Execute() (*AddTokenClaimValidation200Response, *http.Response, error) {
	return r.ApiService.GetTokenClaimValidationExecute(r)
}

/*
GetTokenClaimValidation Returns a single Token Claim Validation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tokenClaimValidationName Name of the Token Claim Validation to be read
	@return ApiGetTokenClaimValidationRequest
*/
func (a *TokenClaimValidationApiService) GetTokenClaimValidation(ctx context.Context, tokenClaimValidationName string) ApiGetTokenClaimValidationRequest {
	return ApiGetTokenClaimValidationRequest{
		ApiService:               a,
		ctx:                      ctx,
		tokenClaimValidationName: tokenClaimValidationName,
	}
}

// Execute executes the request
//
//	@return AddTokenClaimValidation200Response
func (a *TokenClaimValidationApiService) GetTokenClaimValidationExecute(r ApiGetTokenClaimValidationRequest) (*AddTokenClaimValidation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddTokenClaimValidation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenClaimValidationApiService.GetTokenClaimValidation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/token-claim-validations/{token-claim-validation-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"token-claim-validation-name"+"}", url.PathEscape(parameterToString(r.tokenClaimValidationName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTokenClaimValidationRequest struct {
	ctx                      context.Context
	ApiService               *TokenClaimValidationApiService
	tokenClaimValidationName string
	updateRequest            *UpdateRequest
}

// Update an existing Token Claim Validation
func (r ApiUpdateTokenClaimValidationRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateTokenClaimValidationRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateTokenClaimValidationRequest) Execute() (*AddTokenClaimValidation200Response, *http.Response, error) {
	return r.ApiService.UpdateTokenClaimValidationExecute(r)
}

/*
UpdateTokenClaimValidation Update an existing Token Claim Validation by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tokenClaimValidationName Name of the Token Claim Validation to be updated
	@return ApiUpdateTokenClaimValidationRequest
*/
func (a *TokenClaimValidationApiService) UpdateTokenClaimValidation(ctx context.Context, tokenClaimValidationName string) ApiUpdateTokenClaimValidationRequest {
	return ApiUpdateTokenClaimValidationRequest{
		ApiService:               a,
		ctx:                      ctx,
		tokenClaimValidationName: tokenClaimValidationName,
	}
}

// Execute executes the request
//
//	@return AddTokenClaimValidation200Response
func (a *TokenClaimValidationApiService) UpdateTokenClaimValidationExecute(r ApiUpdateTokenClaimValidationRequest) (*AddTokenClaimValidation200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddTokenClaimValidation200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TokenClaimValidationApiService.UpdateTokenClaimValidation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/token-claim-validations/{token-claim-validation-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"token-claim-validation-name"+"}", url.PathEscape(parameterToString(r.tokenClaimValidationName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
