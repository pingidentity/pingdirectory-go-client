/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddTrustManagerProviderRequest - struct for AddTrustManagerProviderRequest
type AddTrustManagerProviderRequest struct {
	AddBlindTrustManagerProviderRequest      *AddBlindTrustManagerProviderRequest
	AddFileBasedTrustManagerProviderRequest  *AddFileBasedTrustManagerProviderRequest
	AddJvmDefaultTrustManagerProviderRequest *AddJvmDefaultTrustManagerProviderRequest
	AddThirdPartyTrustManagerProviderRequest *AddThirdPartyTrustManagerProviderRequest
}

// AddBlindTrustManagerProviderRequestAsAddTrustManagerProviderRequest is a convenience function that returns AddBlindTrustManagerProviderRequest wrapped in AddTrustManagerProviderRequest
func AddBlindTrustManagerProviderRequestAsAddTrustManagerProviderRequest(v *AddBlindTrustManagerProviderRequest) AddTrustManagerProviderRequest {
	return AddTrustManagerProviderRequest{
		AddBlindTrustManagerProviderRequest: v,
	}
}

// AddFileBasedTrustManagerProviderRequestAsAddTrustManagerProviderRequest is a convenience function that returns AddFileBasedTrustManagerProviderRequest wrapped in AddTrustManagerProviderRequest
func AddFileBasedTrustManagerProviderRequestAsAddTrustManagerProviderRequest(v *AddFileBasedTrustManagerProviderRequest) AddTrustManagerProviderRequest {
	return AddTrustManagerProviderRequest{
		AddFileBasedTrustManagerProviderRequest: v,
	}
}

// AddJvmDefaultTrustManagerProviderRequestAsAddTrustManagerProviderRequest is a convenience function that returns AddJvmDefaultTrustManagerProviderRequest wrapped in AddTrustManagerProviderRequest
func AddJvmDefaultTrustManagerProviderRequestAsAddTrustManagerProviderRequest(v *AddJvmDefaultTrustManagerProviderRequest) AddTrustManagerProviderRequest {
	return AddTrustManagerProviderRequest{
		AddJvmDefaultTrustManagerProviderRequest: v,
	}
}

// AddThirdPartyTrustManagerProviderRequestAsAddTrustManagerProviderRequest is a convenience function that returns AddThirdPartyTrustManagerProviderRequest wrapped in AddTrustManagerProviderRequest
func AddThirdPartyTrustManagerProviderRequestAsAddTrustManagerProviderRequest(v *AddThirdPartyTrustManagerProviderRequest) AddTrustManagerProviderRequest {
	return AddTrustManagerProviderRequest{
		AddThirdPartyTrustManagerProviderRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddTrustManagerProviderRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddBlindTrustManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddBlindTrustManagerProviderRequest)
	if err == nil {
		jsonAddBlindTrustManagerProviderRequest, _ := json.Marshal(dst.AddBlindTrustManagerProviderRequest)
		if string(jsonAddBlindTrustManagerProviderRequest) == "{}" { // empty struct
			dst.AddBlindTrustManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddBlindTrustManagerProviderRequest = nil
	}

	// try to unmarshal data into AddFileBasedTrustManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddFileBasedTrustManagerProviderRequest)
	if err == nil {
		jsonAddFileBasedTrustManagerProviderRequest, _ := json.Marshal(dst.AddFileBasedTrustManagerProviderRequest)
		if string(jsonAddFileBasedTrustManagerProviderRequest) == "{}" { // empty struct
			dst.AddFileBasedTrustManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFileBasedTrustManagerProviderRequest = nil
	}

	// try to unmarshal data into AddJvmDefaultTrustManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddJvmDefaultTrustManagerProviderRequest)
	if err == nil {
		jsonAddJvmDefaultTrustManagerProviderRequest, _ := json.Marshal(dst.AddJvmDefaultTrustManagerProviderRequest)
		if string(jsonAddJvmDefaultTrustManagerProviderRequest) == "{}" { // empty struct
			dst.AddJvmDefaultTrustManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddJvmDefaultTrustManagerProviderRequest = nil
	}

	// try to unmarshal data into AddThirdPartyTrustManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyTrustManagerProviderRequest)
	if err == nil {
		jsonAddThirdPartyTrustManagerProviderRequest, _ := json.Marshal(dst.AddThirdPartyTrustManagerProviderRequest)
		if string(jsonAddThirdPartyTrustManagerProviderRequest) == "{}" { // empty struct
			dst.AddThirdPartyTrustManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyTrustManagerProviderRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddBlindTrustManagerProviderRequest = nil
		dst.AddFileBasedTrustManagerProviderRequest = nil
		dst.AddJvmDefaultTrustManagerProviderRequest = nil
		dst.AddThirdPartyTrustManagerProviderRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddTrustManagerProviderRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddTrustManagerProviderRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddTrustManagerProviderRequest) MarshalJSON() ([]byte, error) {
	if src.AddBlindTrustManagerProviderRequest != nil {
		return json.Marshal(&src.AddBlindTrustManagerProviderRequest)
	}

	if src.AddFileBasedTrustManagerProviderRequest != nil {
		return json.Marshal(&src.AddFileBasedTrustManagerProviderRequest)
	}

	if src.AddJvmDefaultTrustManagerProviderRequest != nil {
		return json.Marshal(&src.AddJvmDefaultTrustManagerProviderRequest)
	}

	if src.AddThirdPartyTrustManagerProviderRequest != nil {
		return json.Marshal(&src.AddThirdPartyTrustManagerProviderRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddTrustManagerProviderRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddBlindTrustManagerProviderRequest != nil {
		return obj.AddBlindTrustManagerProviderRequest
	}

	if obj.AddFileBasedTrustManagerProviderRequest != nil {
		return obj.AddFileBasedTrustManagerProviderRequest
	}

	if obj.AddJvmDefaultTrustManagerProviderRequest != nil {
		return obj.AddJvmDefaultTrustManagerProviderRequest
	}

	if obj.AddThirdPartyTrustManagerProviderRequest != nil {
		return obj.AddThirdPartyTrustManagerProviderRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddTrustManagerProviderRequest struct {
	value *AddTrustManagerProviderRequest
	isSet bool
}

func (v NullableAddTrustManagerProviderRequest) Get() *AddTrustManagerProviderRequest {
	return v.value
}

func (v *NullableAddTrustManagerProviderRequest) Set(val *AddTrustManagerProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTrustManagerProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTrustManagerProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTrustManagerProviderRequest(val *AddTrustManagerProviderRequest) *NullableAddTrustManagerProviderRequest {
	return &NullableAddTrustManagerProviderRequest{value: val, isSet: true}
}

func (v NullableAddTrustManagerProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTrustManagerProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
