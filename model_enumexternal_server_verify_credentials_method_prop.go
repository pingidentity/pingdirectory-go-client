/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalServerVerifyCredentialsMethodProp The mechanism to use to verify user credentials while ensuring that the ability to process other operations is not impacted by an alternate authorization identity.
type EnumexternalServerVerifyCredentialsMethodProp string

// List of Enumexternal-server-verifyCredentialsMethodProp
const (
	ENUMEXTERNALSERVERVERIFYCREDENTIALSMETHODPROP_SEPARATE_CONNECTIONS EnumexternalServerVerifyCredentialsMethodProp = "separate-connections"
	ENUMEXTERNALSERVERVERIFYCREDENTIALSMETHODPROP_RETAIN_IDENTITY_CONTROL EnumexternalServerVerifyCredentialsMethodProp = "retain-identity-control"
	ENUMEXTERNALSERVERVERIFYCREDENTIALSMETHODPROP_BIND_ON_EXISTING_CONNECTIONS EnumexternalServerVerifyCredentialsMethodProp = "bind-on-existing-connections"
)

// All allowed values of EnumexternalServerVerifyCredentialsMethodProp enum
var AllowedEnumexternalServerVerifyCredentialsMethodPropEnumValues = []EnumexternalServerVerifyCredentialsMethodProp{
	"separate-connections",
	"retain-identity-control",
	"bind-on-existing-connections",
}

func (v *EnumexternalServerVerifyCredentialsMethodProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalServerVerifyCredentialsMethodProp(value)
	for _, existing := range AllowedEnumexternalServerVerifyCredentialsMethodPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalServerVerifyCredentialsMethodProp", value)
}

// NewEnumexternalServerVerifyCredentialsMethodPropFromValue returns a pointer to a valid EnumexternalServerVerifyCredentialsMethodProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalServerVerifyCredentialsMethodPropFromValue(v string) (*EnumexternalServerVerifyCredentialsMethodProp, error) {
	ev := EnumexternalServerVerifyCredentialsMethodProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalServerVerifyCredentialsMethodProp: valid values are %v", v, AllowedEnumexternalServerVerifyCredentialsMethodPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalServerVerifyCredentialsMethodProp) IsValid() bool {
	for _, existing := range AllowedEnumexternalServerVerifyCredentialsMethodPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-server-verifyCredentialsMethodProp value
func (v EnumexternalServerVerifyCredentialsMethodProp) Ptr() *EnumexternalServerVerifyCredentialsMethodProp {
	return &v
}

type NullableEnumexternalServerVerifyCredentialsMethodProp struct {
	value *EnumexternalServerVerifyCredentialsMethodProp
	isSet bool
}

func (v NullableEnumexternalServerVerifyCredentialsMethodProp) Get() *EnumexternalServerVerifyCredentialsMethodProp {
	return v.value
}

func (v *NullableEnumexternalServerVerifyCredentialsMethodProp) Set(val *EnumexternalServerVerifyCredentialsMethodProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalServerVerifyCredentialsMethodProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalServerVerifyCredentialsMethodProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalServerVerifyCredentialsMethodProp(val *EnumexternalServerVerifyCredentialsMethodProp) *NullableEnumexternalServerVerifyCredentialsMethodProp {
	return &NullableEnumexternalServerVerifyCredentialsMethodProp{value: val, isSet: true}
}

func (v NullableEnumexternalServerVerifyCredentialsMethodProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalServerVerifyCredentialsMethodProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

