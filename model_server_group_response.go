/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerGroupResponse struct for ServerGroupResponse
type ServerGroupResponse struct {
	// Name of the Server Group
	Id string `json:"id"`
	Schemas []EnumserverGroupSchemaUrn `json:"schemas,omitempty"`
	Member []string `json:"member,omitempty"`
}

// NewServerGroupResponse instantiates a new ServerGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerGroupResponse(id string) *ServerGroupResponse {
	this := ServerGroupResponse{}
	this.Id = id
	return &this
}

// NewServerGroupResponseWithDefaults instantiates a new ServerGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerGroupResponseWithDefaults() *ServerGroupResponse {
	this := ServerGroupResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ServerGroupResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerGroupResponse) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerGroupResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ServerGroupResponse) GetSchemas() []EnumserverGroupSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumserverGroupSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerGroupResponse) GetSchemasOk() ([]EnumserverGroupSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ServerGroupResponse) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumserverGroupSchemaUrn and assigns it to the Schemas field.
func (o *ServerGroupResponse) SetSchemas(v []EnumserverGroupSchemaUrn) {
	o.Schemas = v
}

// GetMember returns the Member field value if set, zero value otherwise.
func (o *ServerGroupResponse) GetMember() []string {
	if o == nil || isNil(o.Member) {
		var ret []string
		return ret
	}
	return o.Member
}

// GetMemberOk returns a tuple with the Member field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerGroupResponse) GetMemberOk() ([]string, bool) {
	if o == nil || isNil(o.Member) {
    return nil, false
	}
	return o.Member, true
}

// HasMember returns a boolean if a field has been set.
func (o *ServerGroupResponse) HasMember() bool {
	if o != nil && !isNil(o.Member) {
		return true
	}

	return false
}

// SetMember gets a reference to the given []string and assigns it to the Member field.
func (o *ServerGroupResponse) SetMember(v []string) {
	o.Member = v
}

func (o ServerGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.Member) {
		toSerialize["member"] = o.Member
	}
	return json.Marshal(toSerialize)
}

type NullableServerGroupResponse struct {
	value *ServerGroupResponse
	isSet bool
}

func (v NullableServerGroupResponse) Get() *ServerGroupResponse {
	return v.value
}

func (v *NullableServerGroupResponse) Set(val *ServerGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerGroupResponse(val *ServerGroupResponse) *NullableServerGroupResponse {
	return &NullableServerGroupResponse{value: val, isSet: true}
}

func (v NullableServerGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


