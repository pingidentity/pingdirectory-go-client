#!/usr/bin/env python3
# coding: UTF-8
import glob

# Find all files in the repo starting with "model_enum"
enumModelFiles = glob.glob('model_enum*.go')

# Search in each of those files for the line corresponding to the enum name
enumNames = []
for enumFile in enumModelFiles:
    with open(enumFile) as file:
        for line in file:
            if line.startswith("type ") and line.rstrip().endswith(" string"):
                enumNames.append(line[5:-8])

# Create enum_conversion.go
with open("enum_conversion.go", 'w') as conversionFile:
    # Write header
    conversionFile.write("package openapi\n")
    conversionFile.write("\n")
    conversionFile.write("// Generated by scripts/generateEnumConversionFunctions.py. Implements Stringer interface for each enum in the client,\n")
    conversionFile.write("// and implements functions to convert a slice of a given enum to a slice of strings.")

    # Write Stringer implementations and slice conversion functions
    for enum in enumNames:
        conversionFile.write('\n')
        conversionFile.write(f'func (e {enum}) String() string {{\n')
        conversionFile.write('    return string(e)\n')
        conversionFile.write('}\n')
        conversionFile.write('\n')
        conversionFile.write(f'func StringSlice{enum}(values []{enum}) []string {{\n')
        conversionFile.write('    stringSlice := make([]string, len(values))\n')
        conversionFile.write('    for i := 0; i < len(values); i++ {\n')
        conversionFile.write('        stringSlice[i] = string(values[i])\n')
        conversionFile.write('    }\n')
        conversionFile.write('    return stringSlice\n')
        conversionFile.write('}\n')
