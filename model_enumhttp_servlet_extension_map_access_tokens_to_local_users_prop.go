/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpServletExtensionMapAccessTokensToLocalUsersProp Indicates whether the SCIM2 servlet should attempt to map the presented access token to a local user.
type EnumhttpServletExtensionMapAccessTokensToLocalUsersProp string

// List of Enumhttp-servlet-extension-mapAccessTokensToLocalUsersProp
const (
	ENUMHTTPSERVLETEXTENSIONMAPACCESSTOKENSTOLOCALUSERSPROP_DISABLED EnumhttpServletExtensionMapAccessTokensToLocalUsersProp = "disabled"
	ENUMHTTPSERVLETEXTENSIONMAPACCESSTOKENSTOLOCALUSERSPROP_OPTIONAL EnumhttpServletExtensionMapAccessTokensToLocalUsersProp = "optional"
	ENUMHTTPSERVLETEXTENSIONMAPACCESSTOKENSTOLOCALUSERSPROP_REQUIRED EnumhttpServletExtensionMapAccessTokensToLocalUsersProp = "required"
)

// All allowed values of EnumhttpServletExtensionMapAccessTokensToLocalUsersProp enum
var AllowedEnumhttpServletExtensionMapAccessTokensToLocalUsersPropEnumValues = []EnumhttpServletExtensionMapAccessTokensToLocalUsersProp{
	"disabled",
	"optional",
	"required",
}

func (v *EnumhttpServletExtensionMapAccessTokensToLocalUsersProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpServletExtensionMapAccessTokensToLocalUsersProp(value)
	for _, existing := range AllowedEnumhttpServletExtensionMapAccessTokensToLocalUsersPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpServletExtensionMapAccessTokensToLocalUsersProp", value)
}

// NewEnumhttpServletExtensionMapAccessTokensToLocalUsersPropFromValue returns a pointer to a valid EnumhttpServletExtensionMapAccessTokensToLocalUsersProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpServletExtensionMapAccessTokensToLocalUsersPropFromValue(v string) (*EnumhttpServletExtensionMapAccessTokensToLocalUsersProp, error) {
	ev := EnumhttpServletExtensionMapAccessTokensToLocalUsersProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpServletExtensionMapAccessTokensToLocalUsersProp: valid values are %v", v, AllowedEnumhttpServletExtensionMapAccessTokensToLocalUsersPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpServletExtensionMapAccessTokensToLocalUsersProp) IsValid() bool {
	for _, existing := range AllowedEnumhttpServletExtensionMapAccessTokensToLocalUsersPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-servlet-extension-mapAccessTokensToLocalUsersProp value
func (v EnumhttpServletExtensionMapAccessTokensToLocalUsersProp) Ptr() *EnumhttpServletExtensionMapAccessTokensToLocalUsersProp {
	return &v
}

type NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp struct {
	value *EnumhttpServletExtensionMapAccessTokensToLocalUsersProp
	isSet bool
}

func (v NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp) Get() *EnumhttpServletExtensionMapAccessTokensToLocalUsersProp {
	return v.value
}

func (v *NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp) Set(val *EnumhttpServletExtensionMapAccessTokensToLocalUsersProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp(val *EnumhttpServletExtensionMapAccessTokensToLocalUsersProp) *NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp {
	return &NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp{value: val, isSet: true}
}

func (v NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpServletExtensionMapAccessTokensToLocalUsersProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

