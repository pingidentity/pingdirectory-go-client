/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumconjurExternalServerSchemaUrn the model 'EnumconjurExternalServerSchemaUrn'
type EnumconjurExternalServerSchemaUrn string

// List of Enumconjur-external-serverSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERCONJUR EnumconjurExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:conjur"
)

// All allowed values of EnumconjurExternalServerSchemaUrn enum
var AllowedEnumconjurExternalServerSchemaUrnEnumValues = []EnumconjurExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:conjur",
}

func (v *EnumconjurExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconjurExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumconjurExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconjurExternalServerSchemaUrn", value)
}

// NewEnumconjurExternalServerSchemaUrnFromValue returns a pointer to a valid EnumconjurExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconjurExternalServerSchemaUrnFromValue(v string) (*EnumconjurExternalServerSchemaUrn, error) {
	ev := EnumconjurExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconjurExternalServerSchemaUrn: valid values are %v", v, AllowedEnumconjurExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconjurExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconjurExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconjur-external-serverSchemaUrn value
func (v EnumconjurExternalServerSchemaUrn) Ptr() *EnumconjurExternalServerSchemaUrn {
	return &v
}

type NullableEnumconjurExternalServerSchemaUrn struct {
	value *EnumconjurExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumconjurExternalServerSchemaUrn) Get() *EnumconjurExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumconjurExternalServerSchemaUrn) Set(val *EnumconjurExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconjurExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconjurExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconjurExternalServerSchemaUrn(val *EnumconjurExternalServerSchemaUrn) *NullableEnumconjurExternalServerSchemaUrn {
	return &NullableEnumconjurExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconjurExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconjurExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

