/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DelegatedAdminAttributeCategoryApiService DelegatedAdminAttributeCategoryApi service
type DelegatedAdminAttributeCategoryApiService service

type ApiAddDelegatedAdminAttributeCategoryRequest struct {
	ctx context.Context
	ApiService *DelegatedAdminAttributeCategoryApiService
	addDelegatedAdminAttributeCategoryRequest *AddDelegatedAdminAttributeCategoryRequest
}

// Create a new Delegated Admin Attribute Category in the config
func (r ApiAddDelegatedAdminAttributeCategoryRequest) AddDelegatedAdminAttributeCategoryRequest(addDelegatedAdminAttributeCategoryRequest AddDelegatedAdminAttributeCategoryRequest) ApiAddDelegatedAdminAttributeCategoryRequest {
	r.addDelegatedAdminAttributeCategoryRequest = &addDelegatedAdminAttributeCategoryRequest
	return r
}

func (r ApiAddDelegatedAdminAttributeCategoryRequest) Execute() (*DelegatedAdminAttributeCategoryResponse, *http.Response, error) {
	return r.ApiService.AddDelegatedAdminAttributeCategoryExecute(r)
}

/*
AddDelegatedAdminAttributeCategory Add a new Delegated Admin Attribute Category to the config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddDelegatedAdminAttributeCategoryRequest
*/
func (a *DelegatedAdminAttributeCategoryApiService) AddDelegatedAdminAttributeCategory(ctx context.Context) ApiAddDelegatedAdminAttributeCategoryRequest {
	return ApiAddDelegatedAdminAttributeCategoryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DelegatedAdminAttributeCategoryResponse
func (a *DelegatedAdminAttributeCategoryApiService) AddDelegatedAdminAttributeCategoryExecute(r ApiAddDelegatedAdminAttributeCategoryRequest) (*DelegatedAdminAttributeCategoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DelegatedAdminAttributeCategoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminAttributeCategoryApiService.AddDelegatedAdminAttributeCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-attribute-categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addDelegatedAdminAttributeCategoryRequest == nil {
		return localVarReturnValue, nil, reportError("addDelegatedAdminAttributeCategoryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addDelegatedAdminAttributeCategoryRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDelegatedAdminAttributeCategoryRequest struct {
	ctx context.Context
	ApiService *DelegatedAdminAttributeCategoryApiService
	delegatedAdminAttributeCategoryName string
}

func (r ApiDeleteDelegatedAdminAttributeCategoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDelegatedAdminAttributeCategoryExecute(r)
}

/*
DeleteDelegatedAdminAttributeCategory Delete a Delegated Admin Attribute Category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param delegatedAdminAttributeCategoryName Name of the Delegated Admin Attribute Category to be deleted
 @return ApiDeleteDelegatedAdminAttributeCategoryRequest
*/
func (a *DelegatedAdminAttributeCategoryApiService) DeleteDelegatedAdminAttributeCategory(ctx context.Context, delegatedAdminAttributeCategoryName string) ApiDeleteDelegatedAdminAttributeCategoryRequest {
	return ApiDeleteDelegatedAdminAttributeCategoryRequest{
		ApiService: a,
		ctx: ctx,
		delegatedAdminAttributeCategoryName: delegatedAdminAttributeCategoryName,
	}
}

// Execute executes the request
func (a *DelegatedAdminAttributeCategoryApiService) DeleteDelegatedAdminAttributeCategoryExecute(r ApiDeleteDelegatedAdminAttributeCategoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminAttributeCategoryApiService.DeleteDelegatedAdminAttributeCategory")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-attribute-categories/{delegated-admin-attribute-category-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-attribute-category-name"+"}", url.PathEscape(parameterToString(r.delegatedAdminAttributeCategoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDelegatedAdminAttributeCategoryRequest struct {
	ctx context.Context
	ApiService *DelegatedAdminAttributeCategoryApiService
	delegatedAdminAttributeCategoryName string
}

func (r ApiGetDelegatedAdminAttributeCategoryRequest) Execute() (*DelegatedAdminAttributeCategoryResponse, *http.Response, error) {
	return r.ApiService.GetDelegatedAdminAttributeCategoryExecute(r)
}

/*
GetDelegatedAdminAttributeCategory Returns a single Delegated Admin Attribute Category

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param delegatedAdminAttributeCategoryName Name of the Delegated Admin Attribute Category to be read
 @return ApiGetDelegatedAdminAttributeCategoryRequest
*/
func (a *DelegatedAdminAttributeCategoryApiService) GetDelegatedAdminAttributeCategory(ctx context.Context, delegatedAdminAttributeCategoryName string) ApiGetDelegatedAdminAttributeCategoryRequest {
	return ApiGetDelegatedAdminAttributeCategoryRequest{
		ApiService: a,
		ctx: ctx,
		delegatedAdminAttributeCategoryName: delegatedAdminAttributeCategoryName,
	}
}

// Execute executes the request
//  @return DelegatedAdminAttributeCategoryResponse
func (a *DelegatedAdminAttributeCategoryApiService) GetDelegatedAdminAttributeCategoryExecute(r ApiGetDelegatedAdminAttributeCategoryRequest) (*DelegatedAdminAttributeCategoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DelegatedAdminAttributeCategoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminAttributeCategoryApiService.GetDelegatedAdminAttributeCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-attribute-categories/{delegated-admin-attribute-category-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-attribute-category-name"+"}", url.PathEscape(parameterToString(r.delegatedAdminAttributeCategoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDelegatedAdminAttributeCategoryRequest struct {
	ctx context.Context
	ApiService *DelegatedAdminAttributeCategoryApiService
	delegatedAdminAttributeCategoryName string
	updateRequest *UpdateRequest
}

// Update an existing Delegated Admin Attribute Category
func (r ApiUpdateDelegatedAdminAttributeCategoryRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateDelegatedAdminAttributeCategoryRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateDelegatedAdminAttributeCategoryRequest) Execute() (*DelegatedAdminAttributeCategoryResponse, *http.Response, error) {
	return r.ApiService.UpdateDelegatedAdminAttributeCategoryExecute(r)
}

/*
UpdateDelegatedAdminAttributeCategory Update an existing Delegated Admin Attribute Category by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param delegatedAdminAttributeCategoryName Name of the Delegated Admin Attribute Category to be updated
 @return ApiUpdateDelegatedAdminAttributeCategoryRequest
*/
func (a *DelegatedAdminAttributeCategoryApiService) UpdateDelegatedAdminAttributeCategory(ctx context.Context, delegatedAdminAttributeCategoryName string) ApiUpdateDelegatedAdminAttributeCategoryRequest {
	return ApiUpdateDelegatedAdminAttributeCategoryRequest{
		ApiService: a,
		ctx: ctx,
		delegatedAdminAttributeCategoryName: delegatedAdminAttributeCategoryName,
	}
}

// Execute executes the request
//  @return DelegatedAdminAttributeCategoryResponse
func (a *DelegatedAdminAttributeCategoryApiService) UpdateDelegatedAdminAttributeCategoryExecute(r ApiUpdateDelegatedAdminAttributeCategoryRequest) (*DelegatedAdminAttributeCategoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DelegatedAdminAttributeCategoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminAttributeCategoryApiService.UpdateDelegatedAdminAttributeCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-attribute-categories/{delegated-admin-attribute-category-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-attribute-category-name"+"}", url.PathEscape(parameterToString(r.delegatedAdminAttributeCategoryName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
