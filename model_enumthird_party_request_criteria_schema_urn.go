/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyRequestCriteriaSchemaUrn the model 'EnumthirdPartyRequestCriteriaSchemaUrn'
type EnumthirdPartyRequestCriteriaSchemaUrn string

// List of Enumthird-party-request-criteriaSchemaUrn
const (
	ENUMTHIRDPARTYREQUESTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0REQUEST_CRITERIATHIRD_PARTY EnumthirdPartyRequestCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:request-criteria:third-party"
)

// All allowed values of EnumthirdPartyRequestCriteriaSchemaUrn enum
var AllowedEnumthirdPartyRequestCriteriaSchemaUrnEnumValues = []EnumthirdPartyRequestCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:request-criteria:third-party",
}

func (v *EnumthirdPartyRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyRequestCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyRequestCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyRequestCriteriaSchemaUrn", value)
}

// NewEnumthirdPartyRequestCriteriaSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyRequestCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyRequestCriteriaSchemaUrnFromValue(v string) (*EnumthirdPartyRequestCriteriaSchemaUrn, error) {
	ev := EnumthirdPartyRequestCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyRequestCriteriaSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyRequestCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyRequestCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyRequestCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-request-criteriaSchemaUrn value
func (v EnumthirdPartyRequestCriteriaSchemaUrn) Ptr() *EnumthirdPartyRequestCriteriaSchemaUrn {
	return &v
}

type NullableEnumthirdPartyRequestCriteriaSchemaUrn struct {
	value *EnumthirdPartyRequestCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyRequestCriteriaSchemaUrn) Get() *EnumthirdPartyRequestCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyRequestCriteriaSchemaUrn) Set(val *EnumthirdPartyRequestCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyRequestCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyRequestCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyRequestCriteriaSchemaUrn(val *EnumthirdPartyRequestCriteriaSchemaUrn) *NullableEnumthirdPartyRequestCriteriaSchemaUrn {
	return &NullableEnumthirdPartyRequestCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyRequestCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

