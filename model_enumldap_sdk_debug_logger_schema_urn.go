/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumldapSdkDebugLoggerSchemaUrn the model 'EnumldapSdkDebugLoggerSchemaUrn'
type EnumldapSdkDebugLoggerSchemaUrn string

// List of Enumldap-sdk-debug-loggerSchemaUrn
const (
	ENUMLDAPSDKDEBUGLOGGERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LDAP_SDK_DEBUG_LOGGER EnumldapSdkDebugLoggerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:ldap-sdk-debug-logger"
)

// All allowed values of EnumldapSdkDebugLoggerSchemaUrn enum
var AllowedEnumldapSdkDebugLoggerSchemaUrnEnumValues = []EnumldapSdkDebugLoggerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:ldap-sdk-debug-logger",
}

func (v *EnumldapSdkDebugLoggerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldapSdkDebugLoggerSchemaUrn(value)
	for _, existing := range AllowedEnumldapSdkDebugLoggerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldapSdkDebugLoggerSchemaUrn", value)
}

// NewEnumldapSdkDebugLoggerSchemaUrnFromValue returns a pointer to a valid EnumldapSdkDebugLoggerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldapSdkDebugLoggerSchemaUrnFromValue(v string) (*EnumldapSdkDebugLoggerSchemaUrn, error) {
	ev := EnumldapSdkDebugLoggerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldapSdkDebugLoggerSchemaUrn: valid values are %v", v, AllowedEnumldapSdkDebugLoggerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldapSdkDebugLoggerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldapSdkDebugLoggerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldap-sdk-debug-loggerSchemaUrn value
func (v EnumldapSdkDebugLoggerSchemaUrn) Ptr() *EnumldapSdkDebugLoggerSchemaUrn {
	return &v
}

type NullableEnumldapSdkDebugLoggerSchemaUrn struct {
	value *EnumldapSdkDebugLoggerSchemaUrn
	isSet bool
}

func (v NullableEnumldapSdkDebugLoggerSchemaUrn) Get() *EnumldapSdkDebugLoggerSchemaUrn {
	return v.value
}

func (v *NullableEnumldapSdkDebugLoggerSchemaUrn) Set(val *EnumldapSdkDebugLoggerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldapSdkDebugLoggerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldapSdkDebugLoggerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldapSdkDebugLoggerSchemaUrn(val *EnumldapSdkDebugLoggerSchemaUrn) *NullableEnumldapSdkDebugLoggerSchemaUrn {
	return &NullableEnumldapSdkDebugLoggerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldapSdkDebugLoggerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldapSdkDebugLoggerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

