/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddChangeSubscriptionHandlerRequest - struct for AddChangeSubscriptionHandlerRequest
type AddChangeSubscriptionHandlerRequest struct {
	AddGroovyScriptedChangeSubscriptionHandlerRequest *AddGroovyScriptedChangeSubscriptionHandlerRequest
	AddLoggingChangeSubscriptionHandlerRequest        *AddLoggingChangeSubscriptionHandlerRequest
	AddThirdPartyChangeSubscriptionHandlerRequest     *AddThirdPartyChangeSubscriptionHandlerRequest
}

// AddGroovyScriptedChangeSubscriptionHandlerRequestAsAddChangeSubscriptionHandlerRequest is a convenience function that returns AddGroovyScriptedChangeSubscriptionHandlerRequest wrapped in AddChangeSubscriptionHandlerRequest
func AddGroovyScriptedChangeSubscriptionHandlerRequestAsAddChangeSubscriptionHandlerRequest(v *AddGroovyScriptedChangeSubscriptionHandlerRequest) AddChangeSubscriptionHandlerRequest {
	return AddChangeSubscriptionHandlerRequest{
		AddGroovyScriptedChangeSubscriptionHandlerRequest: v,
	}
}

// AddLoggingChangeSubscriptionHandlerRequestAsAddChangeSubscriptionHandlerRequest is a convenience function that returns AddLoggingChangeSubscriptionHandlerRequest wrapped in AddChangeSubscriptionHandlerRequest
func AddLoggingChangeSubscriptionHandlerRequestAsAddChangeSubscriptionHandlerRequest(v *AddLoggingChangeSubscriptionHandlerRequest) AddChangeSubscriptionHandlerRequest {
	return AddChangeSubscriptionHandlerRequest{
		AddLoggingChangeSubscriptionHandlerRequest: v,
	}
}

// AddThirdPartyChangeSubscriptionHandlerRequestAsAddChangeSubscriptionHandlerRequest is a convenience function that returns AddThirdPartyChangeSubscriptionHandlerRequest wrapped in AddChangeSubscriptionHandlerRequest
func AddThirdPartyChangeSubscriptionHandlerRequestAsAddChangeSubscriptionHandlerRequest(v *AddThirdPartyChangeSubscriptionHandlerRequest) AddChangeSubscriptionHandlerRequest {
	return AddChangeSubscriptionHandlerRequest{
		AddThirdPartyChangeSubscriptionHandlerRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddChangeSubscriptionHandlerRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddGroovyScriptedChangeSubscriptionHandlerRequest
	err = newStrictDecoder(data).Decode(&dst.AddGroovyScriptedChangeSubscriptionHandlerRequest)
	if err == nil {
		jsonAddGroovyScriptedChangeSubscriptionHandlerRequest, _ := json.Marshal(dst.AddGroovyScriptedChangeSubscriptionHandlerRequest)
		if string(jsonAddGroovyScriptedChangeSubscriptionHandlerRequest) == "{}" { // empty struct
			dst.AddGroovyScriptedChangeSubscriptionHandlerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddGroovyScriptedChangeSubscriptionHandlerRequest = nil
	}

	// try to unmarshal data into AddLoggingChangeSubscriptionHandlerRequest
	err = newStrictDecoder(data).Decode(&dst.AddLoggingChangeSubscriptionHandlerRequest)
	if err == nil {
		jsonAddLoggingChangeSubscriptionHandlerRequest, _ := json.Marshal(dst.AddLoggingChangeSubscriptionHandlerRequest)
		if string(jsonAddLoggingChangeSubscriptionHandlerRequest) == "{}" { // empty struct
			dst.AddLoggingChangeSubscriptionHandlerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddLoggingChangeSubscriptionHandlerRequest = nil
	}

	// try to unmarshal data into AddThirdPartyChangeSubscriptionHandlerRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyChangeSubscriptionHandlerRequest)
	if err == nil {
		jsonAddThirdPartyChangeSubscriptionHandlerRequest, _ := json.Marshal(dst.AddThirdPartyChangeSubscriptionHandlerRequest)
		if string(jsonAddThirdPartyChangeSubscriptionHandlerRequest) == "{}" { // empty struct
			dst.AddThirdPartyChangeSubscriptionHandlerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyChangeSubscriptionHandlerRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddGroovyScriptedChangeSubscriptionHandlerRequest = nil
		dst.AddLoggingChangeSubscriptionHandlerRequest = nil
		dst.AddThirdPartyChangeSubscriptionHandlerRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddChangeSubscriptionHandlerRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddChangeSubscriptionHandlerRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddChangeSubscriptionHandlerRequest) MarshalJSON() ([]byte, error) {
	if src.AddGroovyScriptedChangeSubscriptionHandlerRequest != nil {
		return json.Marshal(&src.AddGroovyScriptedChangeSubscriptionHandlerRequest)
	}

	if src.AddLoggingChangeSubscriptionHandlerRequest != nil {
		return json.Marshal(&src.AddLoggingChangeSubscriptionHandlerRequest)
	}

	if src.AddThirdPartyChangeSubscriptionHandlerRequest != nil {
		return json.Marshal(&src.AddThirdPartyChangeSubscriptionHandlerRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddChangeSubscriptionHandlerRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddGroovyScriptedChangeSubscriptionHandlerRequest != nil {
		return obj.AddGroovyScriptedChangeSubscriptionHandlerRequest
	}

	if obj.AddLoggingChangeSubscriptionHandlerRequest != nil {
		return obj.AddLoggingChangeSubscriptionHandlerRequest
	}

	if obj.AddThirdPartyChangeSubscriptionHandlerRequest != nil {
		return obj.AddThirdPartyChangeSubscriptionHandlerRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddChangeSubscriptionHandlerRequest struct {
	value *AddChangeSubscriptionHandlerRequest
	isSet bool
}

func (v NullableAddChangeSubscriptionHandlerRequest) Get() *AddChangeSubscriptionHandlerRequest {
	return v.value
}

func (v *NullableAddChangeSubscriptionHandlerRequest) Set(val *AddChangeSubscriptionHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddChangeSubscriptionHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddChangeSubscriptionHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddChangeSubscriptionHandlerRequest(val *AddChangeSubscriptionHandlerRequest) *NullableAddChangeSubscriptionHandlerRequest {
	return &NullableAddChangeSubscriptionHandlerRequest{value: val, isSet: true}
}

func (v NullableAddChangeSubscriptionHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddChangeSubscriptionHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
