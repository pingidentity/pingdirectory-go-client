/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumextendedOperationHandlerAllowedOperationProp The types of replace certificate operations that clients will be allowed to request.
type EnumextendedOperationHandlerAllowedOperationProp string

// List of Enumextended-operation-handler-allowedOperationProp
const (
	ENUMEXTENDEDOPERATIONHANDLERALLOWEDOPERATIONPROP_REPLACE_LISTENER_CERTIFICATE EnumextendedOperationHandlerAllowedOperationProp = "replace-listener-certificate"
	ENUMEXTENDEDOPERATIONHANDLERALLOWEDOPERATIONPROP_REPLACE_INTER_SERVER_CERTIFICATE EnumextendedOperationHandlerAllowedOperationProp = "replace-inter-server-certificate"
	ENUMEXTENDEDOPERATIONHANDLERALLOWEDOPERATIONPROP_PURGE_RETIRED_LISTENER_CERTIFICATES EnumextendedOperationHandlerAllowedOperationProp = "purge-retired-listener-certificates"
	ENUMEXTENDEDOPERATIONHANDLERALLOWEDOPERATIONPROP_PURGE_RETIRED_INTER_SERVER_CERTIFICATES EnumextendedOperationHandlerAllowedOperationProp = "purge-retired-inter-server-certificates"
)

// All allowed values of EnumextendedOperationHandlerAllowedOperationProp enum
var AllowedEnumextendedOperationHandlerAllowedOperationPropEnumValues = []EnumextendedOperationHandlerAllowedOperationProp{
	"replace-listener-certificate",
	"replace-inter-server-certificate",
	"purge-retired-listener-certificates",
	"purge-retired-inter-server-certificates",
}

func (v *EnumextendedOperationHandlerAllowedOperationProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumextendedOperationHandlerAllowedOperationProp(value)
	for _, existing := range AllowedEnumextendedOperationHandlerAllowedOperationPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumextendedOperationHandlerAllowedOperationProp", value)
}

// NewEnumextendedOperationHandlerAllowedOperationPropFromValue returns a pointer to a valid EnumextendedOperationHandlerAllowedOperationProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumextendedOperationHandlerAllowedOperationPropFromValue(v string) (*EnumextendedOperationHandlerAllowedOperationProp, error) {
	ev := EnumextendedOperationHandlerAllowedOperationProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumextendedOperationHandlerAllowedOperationProp: valid values are %v", v, AllowedEnumextendedOperationHandlerAllowedOperationPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumextendedOperationHandlerAllowedOperationProp) IsValid() bool {
	for _, existing := range AllowedEnumextendedOperationHandlerAllowedOperationPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumextended-operation-handler-allowedOperationProp value
func (v EnumextendedOperationHandlerAllowedOperationProp) Ptr() *EnumextendedOperationHandlerAllowedOperationProp {
	return &v
}

type NullableEnumextendedOperationHandlerAllowedOperationProp struct {
	value *EnumextendedOperationHandlerAllowedOperationProp
	isSet bool
}

func (v NullableEnumextendedOperationHandlerAllowedOperationProp) Get() *EnumextendedOperationHandlerAllowedOperationProp {
	return v.value
}

func (v *NullableEnumextendedOperationHandlerAllowedOperationProp) Set(val *EnumextendedOperationHandlerAllowedOperationProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumextendedOperationHandlerAllowedOperationProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumextendedOperationHandlerAllowedOperationProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumextendedOperationHandlerAllowedOperationProp(val *EnumextendedOperationHandlerAllowedOperationProp) *NullableEnumextendedOperationHandlerAllowedOperationProp {
	return &NullableEnumextendedOperationHandlerAllowedOperationProp{value: val, isSet: true}
}

func (v NullableEnumextendedOperationHandlerAllowedOperationProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumextendedOperationHandlerAllowedOperationProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

