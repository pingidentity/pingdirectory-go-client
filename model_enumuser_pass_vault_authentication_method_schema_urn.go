/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumuserPassVaultAuthenticationMethodSchemaUrn the model 'EnumuserPassVaultAuthenticationMethodSchemaUrn'
type EnumuserPassVaultAuthenticationMethodSchemaUrn string

// List of Enumuser-pass-vault-authentication-methodSchemaUrn
const (
	ENUMUSERPASSVAULTAUTHENTICATIONMETHODSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VAULT_AUTHENTICATION_METHODUSER_PASS EnumuserPassVaultAuthenticationMethodSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:vault-authentication-method:user-pass"
)

// All allowed values of EnumuserPassVaultAuthenticationMethodSchemaUrn enum
var AllowedEnumuserPassVaultAuthenticationMethodSchemaUrnEnumValues = []EnumuserPassVaultAuthenticationMethodSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:vault-authentication-method:user-pass",
}

func (v *EnumuserPassVaultAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumuserPassVaultAuthenticationMethodSchemaUrn(value)
	for _, existing := range AllowedEnumuserPassVaultAuthenticationMethodSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumuserPassVaultAuthenticationMethodSchemaUrn", value)
}

// NewEnumuserPassVaultAuthenticationMethodSchemaUrnFromValue returns a pointer to a valid EnumuserPassVaultAuthenticationMethodSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumuserPassVaultAuthenticationMethodSchemaUrnFromValue(v string) (*EnumuserPassVaultAuthenticationMethodSchemaUrn, error) {
	ev := EnumuserPassVaultAuthenticationMethodSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumuserPassVaultAuthenticationMethodSchemaUrn: valid values are %v", v, AllowedEnumuserPassVaultAuthenticationMethodSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumuserPassVaultAuthenticationMethodSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumuserPassVaultAuthenticationMethodSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumuser-pass-vault-authentication-methodSchemaUrn value
func (v EnumuserPassVaultAuthenticationMethodSchemaUrn) Ptr() *EnumuserPassVaultAuthenticationMethodSchemaUrn {
	return &v
}

type NullableEnumuserPassVaultAuthenticationMethodSchemaUrn struct {
	value *EnumuserPassVaultAuthenticationMethodSchemaUrn
	isSet bool
}

func (v NullableEnumuserPassVaultAuthenticationMethodSchemaUrn) Get() *EnumuserPassVaultAuthenticationMethodSchemaUrn {
	return v.value
}

func (v *NullableEnumuserPassVaultAuthenticationMethodSchemaUrn) Set(val *EnumuserPassVaultAuthenticationMethodSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumuserPassVaultAuthenticationMethodSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumuserPassVaultAuthenticationMethodSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumuserPassVaultAuthenticationMethodSchemaUrn(val *EnumuserPassVaultAuthenticationMethodSchemaUrn) *NullableEnumuserPassVaultAuthenticationMethodSchemaUrn {
	return &NullableEnumuserPassVaultAuthenticationMethodSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumuserPassVaultAuthenticationMethodSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumuserPassVaultAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
