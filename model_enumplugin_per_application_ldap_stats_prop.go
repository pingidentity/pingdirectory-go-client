/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginPerApplicationLDAPStatsProp Controls whether per application LDAP statistics are included in the output for selected LDAP operation statistics.
type EnumpluginPerApplicationLDAPStatsProp string

// List of Enumplugin-perApplicationLDAPStatsProp
const (
	ENUMPLUGINPERAPPLICATIONLDAPSTATSPROP_AGGREGATE_ONLY       EnumpluginPerApplicationLDAPStatsProp = "aggregate-only"
	ENUMPLUGINPERAPPLICATIONLDAPSTATSPROP_PER_APPLICATION_ONLY EnumpluginPerApplicationLDAPStatsProp = "per-application-only"
)

// All allowed values of EnumpluginPerApplicationLDAPStatsProp enum
var AllowedEnumpluginPerApplicationLDAPStatsPropEnumValues = []EnumpluginPerApplicationLDAPStatsProp{
	"aggregate-only",
	"per-application-only",
}

func (v *EnumpluginPerApplicationLDAPStatsProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginPerApplicationLDAPStatsProp(value)
	for _, existing := range AllowedEnumpluginPerApplicationLDAPStatsPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginPerApplicationLDAPStatsProp", value)
}

// NewEnumpluginPerApplicationLDAPStatsPropFromValue returns a pointer to a valid EnumpluginPerApplicationLDAPStatsProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginPerApplicationLDAPStatsPropFromValue(v string) (*EnumpluginPerApplicationLDAPStatsProp, error) {
	ev := EnumpluginPerApplicationLDAPStatsProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginPerApplicationLDAPStatsProp: valid values are %v", v, AllowedEnumpluginPerApplicationLDAPStatsPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginPerApplicationLDAPStatsProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginPerApplicationLDAPStatsPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-perApplicationLDAPStatsProp value
func (v EnumpluginPerApplicationLDAPStatsProp) Ptr() *EnumpluginPerApplicationLDAPStatsProp {
	return &v
}

type NullableEnumpluginPerApplicationLDAPStatsProp struct {
	value *EnumpluginPerApplicationLDAPStatsProp
	isSet bool
}

func (v NullableEnumpluginPerApplicationLDAPStatsProp) Get() *EnumpluginPerApplicationLDAPStatsProp {
	return v.value
}

func (v *NullableEnumpluginPerApplicationLDAPStatsProp) Set(val *EnumpluginPerApplicationLDAPStatsProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginPerApplicationLDAPStatsProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginPerApplicationLDAPStatsProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginPerApplicationLDAPStatsProp(val *EnumpluginPerApplicationLDAPStatsProp) *NullableEnumpluginPerApplicationLDAPStatsProp {
	return &NullableEnumpluginPerApplicationLDAPStatsProp{value: val, isSet: true}
}

func (v NullableEnumpluginPerApplicationLDAPStatsProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginPerApplicationLDAPStatsProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
