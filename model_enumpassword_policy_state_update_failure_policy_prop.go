/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordPolicyStateUpdateFailurePolicyProp Specifies how the server deals with the inability to update password policy state information during an authentication attempt.
type EnumpasswordPolicyStateUpdateFailurePolicyProp string

// List of Enumpassword-policy-stateUpdateFailurePolicyProp
const (
	IGNORE EnumpasswordPolicyStateUpdateFailurePolicyProp = "ignore"
	REACTIVE EnumpasswordPolicyStateUpdateFailurePolicyProp = "reactive"
	PROACTIVE EnumpasswordPolicyStateUpdateFailurePolicyProp = "proactive"
)

// All allowed values of EnumpasswordPolicyStateUpdateFailurePolicyProp enum
var AllowedEnumpasswordPolicyStateUpdateFailurePolicyPropEnumValues = []EnumpasswordPolicyStateUpdateFailurePolicyProp{
	"ignore",
	"reactive",
	"proactive",
}

func (v *EnumpasswordPolicyStateUpdateFailurePolicyProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordPolicyStateUpdateFailurePolicyProp(value)
	for _, existing := range AllowedEnumpasswordPolicyStateUpdateFailurePolicyPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicyStateUpdateFailurePolicyProp", value)
}

// NewEnumpasswordPolicyStateUpdateFailurePolicyPropFromValue returns a pointer to a valid EnumpasswordPolicyStateUpdateFailurePolicyProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicyStateUpdateFailurePolicyPropFromValue(v string) (*EnumpasswordPolicyStateUpdateFailurePolicyProp, error) {
	ev := EnumpasswordPolicyStateUpdateFailurePolicyProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicyStateUpdateFailurePolicyProp: valid values are %v", v, AllowedEnumpasswordPolicyStateUpdateFailurePolicyPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicyStateUpdateFailurePolicyProp) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicyStateUpdateFailurePolicyPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policy-stateUpdateFailurePolicyProp value
func (v EnumpasswordPolicyStateUpdateFailurePolicyProp) Ptr() *EnumpasswordPolicyStateUpdateFailurePolicyProp {
	return &v
}

type NullableEnumpasswordPolicyStateUpdateFailurePolicyProp struct {
	value *EnumpasswordPolicyStateUpdateFailurePolicyProp
	isSet bool
}

func (v NullableEnumpasswordPolicyStateUpdateFailurePolicyProp) Get() *EnumpasswordPolicyStateUpdateFailurePolicyProp {
	return v.value
}

func (v *NullableEnumpasswordPolicyStateUpdateFailurePolicyProp) Set(val *EnumpasswordPolicyStateUpdateFailurePolicyProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicyStateUpdateFailurePolicyProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicyStateUpdateFailurePolicyProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicyStateUpdateFailurePolicyProp(val *EnumpasswordPolicyStateUpdateFailurePolicyProp) *NullableEnumpasswordPolicyStateUpdateFailurePolicyProp {
	return &NullableEnumpasswordPolicyStateUpdateFailurePolicyProp{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicyStateUpdateFailurePolicyProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicyStateUpdateFailurePolicyProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

