/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumrequestCriteriaIncludedSearchScopeProp Specifies the search scope values included in this Simple Request Criteria. This will only be taken into account for search requests and will be ignored for all other types of requests.
type EnumrequestCriteriaIncludedSearchScopeProp string

// List of Enumrequest-criteria-includedSearchScopeProp
const (
	ENUMREQUESTCRITERIAINCLUDEDSEARCHSCOPEPROP_BASE_OBJECT         EnumrequestCriteriaIncludedSearchScopeProp = "base-object"
	ENUMREQUESTCRITERIAINCLUDEDSEARCHSCOPEPROP_SINGLE_LEVEL        EnumrequestCriteriaIncludedSearchScopeProp = "single-level"
	ENUMREQUESTCRITERIAINCLUDEDSEARCHSCOPEPROP_WHOLE_SUBTREE       EnumrequestCriteriaIncludedSearchScopeProp = "whole-subtree"
	ENUMREQUESTCRITERIAINCLUDEDSEARCHSCOPEPROP_SUBORDINATE_SUBTREE EnumrequestCriteriaIncludedSearchScopeProp = "subordinate-subtree"
)

// All allowed values of EnumrequestCriteriaIncludedSearchScopeProp enum
var AllowedEnumrequestCriteriaIncludedSearchScopePropEnumValues = []EnumrequestCriteriaIncludedSearchScopeProp{
	"base-object",
	"single-level",
	"whole-subtree",
	"subordinate-subtree",
}

func (v *EnumrequestCriteriaIncludedSearchScopeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrequestCriteriaIncludedSearchScopeProp(value)
	for _, existing := range AllowedEnumrequestCriteriaIncludedSearchScopePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrequestCriteriaIncludedSearchScopeProp", value)
}

// NewEnumrequestCriteriaIncludedSearchScopePropFromValue returns a pointer to a valid EnumrequestCriteriaIncludedSearchScopeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrequestCriteriaIncludedSearchScopePropFromValue(v string) (*EnumrequestCriteriaIncludedSearchScopeProp, error) {
	ev := EnumrequestCriteriaIncludedSearchScopeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrequestCriteriaIncludedSearchScopeProp: valid values are %v", v, AllowedEnumrequestCriteriaIncludedSearchScopePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrequestCriteriaIncludedSearchScopeProp) IsValid() bool {
	for _, existing := range AllowedEnumrequestCriteriaIncludedSearchScopePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumrequest-criteria-includedSearchScopeProp value
func (v EnumrequestCriteriaIncludedSearchScopeProp) Ptr() *EnumrequestCriteriaIncludedSearchScopeProp {
	return &v
}

type NullableEnumrequestCriteriaIncludedSearchScopeProp struct {
	value *EnumrequestCriteriaIncludedSearchScopeProp
	isSet bool
}

func (v NullableEnumrequestCriteriaIncludedSearchScopeProp) Get() *EnumrequestCriteriaIncludedSearchScopeProp {
	return v.value
}

func (v *NullableEnumrequestCriteriaIncludedSearchScopeProp) Set(val *EnumrequestCriteriaIncludedSearchScopeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrequestCriteriaIncludedSearchScopeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrequestCriteriaIncludedSearchScopeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrequestCriteriaIncludedSearchScopeProp(val *EnumrequestCriteriaIncludedSearchScopeProp) *NullableEnumrequestCriteriaIncludedSearchScopeProp {
	return &NullableEnumrequestCriteriaIncludedSearchScopeProp{value: val, isSet: true}
}

func (v NullableEnumrequestCriteriaIncludedSearchScopeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrequestCriteriaIncludedSearchScopeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
