/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumstaticTokenVaultAuthenticationMethodSchemaUrn the model 'EnumstaticTokenVaultAuthenticationMethodSchemaUrn'
type EnumstaticTokenVaultAuthenticationMethodSchemaUrn string

// List of Enumstatic-token-vault-authentication-methodSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0VAULT_AUTHENTICATION_METHODSTATIC_TOKEN EnumstaticTokenVaultAuthenticationMethodSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:vault-authentication-method:static-token"
)

// All allowed values of EnumstaticTokenVaultAuthenticationMethodSchemaUrn enum
var AllowedEnumstaticTokenVaultAuthenticationMethodSchemaUrnEnumValues = []EnumstaticTokenVaultAuthenticationMethodSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:vault-authentication-method:static-token",
}

func (v *EnumstaticTokenVaultAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumstaticTokenVaultAuthenticationMethodSchemaUrn(value)
	for _, existing := range AllowedEnumstaticTokenVaultAuthenticationMethodSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumstaticTokenVaultAuthenticationMethodSchemaUrn", value)
}

// NewEnumstaticTokenVaultAuthenticationMethodSchemaUrnFromValue returns a pointer to a valid EnumstaticTokenVaultAuthenticationMethodSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumstaticTokenVaultAuthenticationMethodSchemaUrnFromValue(v string) (*EnumstaticTokenVaultAuthenticationMethodSchemaUrn, error) {
	ev := EnumstaticTokenVaultAuthenticationMethodSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumstaticTokenVaultAuthenticationMethodSchemaUrn: valid values are %v", v, AllowedEnumstaticTokenVaultAuthenticationMethodSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumstaticTokenVaultAuthenticationMethodSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumstaticTokenVaultAuthenticationMethodSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumstatic-token-vault-authentication-methodSchemaUrn value
func (v EnumstaticTokenVaultAuthenticationMethodSchemaUrn) Ptr() *EnumstaticTokenVaultAuthenticationMethodSchemaUrn {
	return &v
}

type NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn struct {
	value *EnumstaticTokenVaultAuthenticationMethodSchemaUrn
	isSet bool
}

func (v NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn) Get() *EnumstaticTokenVaultAuthenticationMethodSchemaUrn {
	return v.value
}

func (v *NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn) Set(val *EnumstaticTokenVaultAuthenticationMethodSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn(val *EnumstaticTokenVaultAuthenticationMethodSchemaUrn) *NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn {
	return &NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumstaticTokenVaultAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

