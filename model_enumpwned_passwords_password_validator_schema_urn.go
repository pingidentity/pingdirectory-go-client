/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpwnedPasswordsPasswordValidatorSchemaUrn the model 'EnumpwnedPasswordsPasswordValidatorSchemaUrn'
type EnumpwnedPasswordsPasswordValidatorSchemaUrn string

// List of Enumpwned-passwords-password-validatorSchemaUrn
const (
	ENUMPWNEDPASSWORDSPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORPWNED_PASSWORDS EnumpwnedPasswordsPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:pwned-passwords"
)

// All allowed values of EnumpwnedPasswordsPasswordValidatorSchemaUrn enum
var AllowedEnumpwnedPasswordsPasswordValidatorSchemaUrnEnumValues = []EnumpwnedPasswordsPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:pwned-passwords",
}

func (v *EnumpwnedPasswordsPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpwnedPasswordsPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumpwnedPasswordsPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpwnedPasswordsPasswordValidatorSchemaUrn", value)
}

// NewEnumpwnedPasswordsPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumpwnedPasswordsPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpwnedPasswordsPasswordValidatorSchemaUrnFromValue(v string) (*EnumpwnedPasswordsPasswordValidatorSchemaUrn, error) {
	ev := EnumpwnedPasswordsPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpwnedPasswordsPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumpwnedPasswordsPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpwnedPasswordsPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpwnedPasswordsPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpwned-passwords-password-validatorSchemaUrn value
func (v EnumpwnedPasswordsPasswordValidatorSchemaUrn) Ptr() *EnumpwnedPasswordsPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn struct {
	value *EnumpwnedPasswordsPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn) Get() *EnumpwnedPasswordsPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn) Set(val *EnumpwnedPasswordsPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpwnedPasswordsPasswordValidatorSchemaUrn(val *EnumpwnedPasswordsPasswordValidatorSchemaUrn) *NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn {
	return &NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpwnedPasswordsPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

