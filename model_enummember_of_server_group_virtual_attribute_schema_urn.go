/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnummemberOfServerGroupVirtualAttributeSchemaUrn the model 'EnummemberOfServerGroupVirtualAttributeSchemaUrn'
type EnummemberOfServerGroupVirtualAttributeSchemaUrn string

// List of Enummember-of-server-group-virtual-attributeSchemaUrn
const (
	ENUMMEMBEROFSERVERGROUPVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTEMEMBER_OF_SERVER_GROUP EnummemberOfServerGroupVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member-of-server-group"
)

// All allowed values of EnummemberOfServerGroupVirtualAttributeSchemaUrn enum
var AllowedEnummemberOfServerGroupVirtualAttributeSchemaUrnEnumValues = []EnummemberOfServerGroupVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:member-of-server-group",
}

func (v *EnummemberOfServerGroupVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummemberOfServerGroupVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnummemberOfServerGroupVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummemberOfServerGroupVirtualAttributeSchemaUrn", value)
}

// NewEnummemberOfServerGroupVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnummemberOfServerGroupVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummemberOfServerGroupVirtualAttributeSchemaUrnFromValue(v string) (*EnummemberOfServerGroupVirtualAttributeSchemaUrn, error) {
	ev := EnummemberOfServerGroupVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummemberOfServerGroupVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnummemberOfServerGroupVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummemberOfServerGroupVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummemberOfServerGroupVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummember-of-server-group-virtual-attributeSchemaUrn value
func (v EnummemberOfServerGroupVirtualAttributeSchemaUrn) Ptr() *EnummemberOfServerGroupVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn struct {
	value *EnummemberOfServerGroupVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn) Get() *EnummemberOfServerGroupVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn) Set(val *EnummemberOfServerGroupVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummemberOfServerGroupVirtualAttributeSchemaUrn(val *EnummemberOfServerGroupVirtualAttributeSchemaUrn) *NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn {
	return &NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummemberOfServerGroupVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

