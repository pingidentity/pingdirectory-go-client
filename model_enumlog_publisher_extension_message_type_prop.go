/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherExtensionMessageTypeProp Specifies the Server SDK extension message types that can be logged.
type EnumlogPublisherExtensionMessageTypeProp string

// List of Enumlog-publisher-extensionMessageTypeProp
const (
	ENUMLOGPUBLISHEREXTENSIONMESSAGETYPEPROP_ERROR   EnumlogPublisherExtensionMessageTypeProp = "error"
	ENUMLOGPUBLISHEREXTENSIONMESSAGETYPEPROP_WARNING EnumlogPublisherExtensionMessageTypeProp = "warning"
	ENUMLOGPUBLISHEREXTENSIONMESSAGETYPEPROP_NOTICE  EnumlogPublisherExtensionMessageTypeProp = "notice"
	ENUMLOGPUBLISHEREXTENSIONMESSAGETYPEPROP_INFO    EnumlogPublisherExtensionMessageTypeProp = "info"
)

// All allowed values of EnumlogPublisherExtensionMessageTypeProp enum
var AllowedEnumlogPublisherExtensionMessageTypePropEnumValues = []EnumlogPublisherExtensionMessageTypeProp{
	"error",
	"warning",
	"notice",
	"info",
}

func (v *EnumlogPublisherExtensionMessageTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherExtensionMessageTypeProp(value)
	for _, existing := range AllowedEnumlogPublisherExtensionMessageTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherExtensionMessageTypeProp", value)
}

// NewEnumlogPublisherExtensionMessageTypePropFromValue returns a pointer to a valid EnumlogPublisherExtensionMessageTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherExtensionMessageTypePropFromValue(v string) (*EnumlogPublisherExtensionMessageTypeProp, error) {
	ev := EnumlogPublisherExtensionMessageTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherExtensionMessageTypeProp: valid values are %v", v, AllowedEnumlogPublisherExtensionMessageTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherExtensionMessageTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherExtensionMessageTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-extensionMessageTypeProp value
func (v EnumlogPublisherExtensionMessageTypeProp) Ptr() *EnumlogPublisherExtensionMessageTypeProp {
	return &v
}

type NullableEnumlogPublisherExtensionMessageTypeProp struct {
	value *EnumlogPublisherExtensionMessageTypeProp
	isSet bool
}

func (v NullableEnumlogPublisherExtensionMessageTypeProp) Get() *EnumlogPublisherExtensionMessageTypeProp {
	return v.value
}

func (v *NullableEnumlogPublisherExtensionMessageTypeProp) Set(val *EnumlogPublisherExtensionMessageTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherExtensionMessageTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherExtensionMessageTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherExtensionMessageTypeProp(val *EnumlogPublisherExtensionMessageTypeProp) *NullableEnumlogPublisherExtensionMessageTypeProp {
	return &NullableEnumlogPublisherExtensionMessageTypeProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherExtensionMessageTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherExtensionMessageTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
