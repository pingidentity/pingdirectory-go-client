/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddSearchReferenceCriteriaRequest - struct for AddSearchReferenceCriteriaRequest
type AddSearchReferenceCriteriaRequest struct {
	AddAggregateSearchReferenceCriteriaRequest  *AddAggregateSearchReferenceCriteriaRequest
	AddSimpleSearchReferenceCriteriaRequest     *AddSimpleSearchReferenceCriteriaRequest
	AddThirdPartySearchReferenceCriteriaRequest *AddThirdPartySearchReferenceCriteriaRequest
}

// AddAggregateSearchReferenceCriteriaRequestAsAddSearchReferenceCriteriaRequest is a convenience function that returns AddAggregateSearchReferenceCriteriaRequest wrapped in AddSearchReferenceCriteriaRequest
func AddAggregateSearchReferenceCriteriaRequestAsAddSearchReferenceCriteriaRequest(v *AddAggregateSearchReferenceCriteriaRequest) AddSearchReferenceCriteriaRequest {
	return AddSearchReferenceCriteriaRequest{
		AddAggregateSearchReferenceCriteriaRequest: v,
	}
}

// AddSimpleSearchReferenceCriteriaRequestAsAddSearchReferenceCriteriaRequest is a convenience function that returns AddSimpleSearchReferenceCriteriaRequest wrapped in AddSearchReferenceCriteriaRequest
func AddSimpleSearchReferenceCriteriaRequestAsAddSearchReferenceCriteriaRequest(v *AddSimpleSearchReferenceCriteriaRequest) AddSearchReferenceCriteriaRequest {
	return AddSearchReferenceCriteriaRequest{
		AddSimpleSearchReferenceCriteriaRequest: v,
	}
}

// AddThirdPartySearchReferenceCriteriaRequestAsAddSearchReferenceCriteriaRequest is a convenience function that returns AddThirdPartySearchReferenceCriteriaRequest wrapped in AddSearchReferenceCriteriaRequest
func AddThirdPartySearchReferenceCriteriaRequestAsAddSearchReferenceCriteriaRequest(v *AddThirdPartySearchReferenceCriteriaRequest) AddSearchReferenceCriteriaRequest {
	return AddSearchReferenceCriteriaRequest{
		AddThirdPartySearchReferenceCriteriaRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddSearchReferenceCriteriaRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAggregateSearchReferenceCriteriaRequest
	err = newStrictDecoder(data).Decode(&dst.AddAggregateSearchReferenceCriteriaRequest)
	if err == nil {
		jsonAddAggregateSearchReferenceCriteriaRequest, _ := json.Marshal(dst.AddAggregateSearchReferenceCriteriaRequest)
		if string(jsonAddAggregateSearchReferenceCriteriaRequest) == "{}" { // empty struct
			dst.AddAggregateSearchReferenceCriteriaRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAggregateSearchReferenceCriteriaRequest = nil
	}

	// try to unmarshal data into AddSimpleSearchReferenceCriteriaRequest
	err = newStrictDecoder(data).Decode(&dst.AddSimpleSearchReferenceCriteriaRequest)
	if err == nil {
		jsonAddSimpleSearchReferenceCriteriaRequest, _ := json.Marshal(dst.AddSimpleSearchReferenceCriteriaRequest)
		if string(jsonAddSimpleSearchReferenceCriteriaRequest) == "{}" { // empty struct
			dst.AddSimpleSearchReferenceCriteriaRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddSimpleSearchReferenceCriteriaRequest = nil
	}

	// try to unmarshal data into AddThirdPartySearchReferenceCriteriaRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartySearchReferenceCriteriaRequest)
	if err == nil {
		jsonAddThirdPartySearchReferenceCriteriaRequest, _ := json.Marshal(dst.AddThirdPartySearchReferenceCriteriaRequest)
		if string(jsonAddThirdPartySearchReferenceCriteriaRequest) == "{}" { // empty struct
			dst.AddThirdPartySearchReferenceCriteriaRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartySearchReferenceCriteriaRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAggregateSearchReferenceCriteriaRequest = nil
		dst.AddSimpleSearchReferenceCriteriaRequest = nil
		dst.AddThirdPartySearchReferenceCriteriaRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddSearchReferenceCriteriaRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddSearchReferenceCriteriaRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddSearchReferenceCriteriaRequest) MarshalJSON() ([]byte, error) {
	if src.AddAggregateSearchReferenceCriteriaRequest != nil {
		return json.Marshal(&src.AddAggregateSearchReferenceCriteriaRequest)
	}

	if src.AddSimpleSearchReferenceCriteriaRequest != nil {
		return json.Marshal(&src.AddSimpleSearchReferenceCriteriaRequest)
	}

	if src.AddThirdPartySearchReferenceCriteriaRequest != nil {
		return json.Marshal(&src.AddThirdPartySearchReferenceCriteriaRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddSearchReferenceCriteriaRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddAggregateSearchReferenceCriteriaRequest != nil {
		return obj.AddAggregateSearchReferenceCriteriaRequest
	}

	if obj.AddSimpleSearchReferenceCriteriaRequest != nil {
		return obj.AddSimpleSearchReferenceCriteriaRequest
	}

	if obj.AddThirdPartySearchReferenceCriteriaRequest != nil {
		return obj.AddThirdPartySearchReferenceCriteriaRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddSearchReferenceCriteriaRequest struct {
	value *AddSearchReferenceCriteriaRequest
	isSet bool
}

func (v NullableAddSearchReferenceCriteriaRequest) Get() *AddSearchReferenceCriteriaRequest {
	return v.value
}

func (v *NullableAddSearchReferenceCriteriaRequest) Set(val *AddSearchReferenceCriteriaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSearchReferenceCriteriaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSearchReferenceCriteriaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSearchReferenceCriteriaRequest(val *AddSearchReferenceCriteriaRequest) *NullableAddSearchReferenceCriteriaRequest {
	return &NullableAddSearchReferenceCriteriaRequest{value: val, isSet: true}
}

func (v NullableAddSearchReferenceCriteriaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSearchReferenceCriteriaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
