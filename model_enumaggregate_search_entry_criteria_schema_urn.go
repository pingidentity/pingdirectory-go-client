/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumaggregateSearchEntryCriteriaSchemaUrn the model 'EnumaggregateSearchEntryCriteriaSchemaUrn'
type EnumaggregateSearchEntryCriteriaSchemaUrn string

// List of Enumaggregate-search-entry-criteriaSchemaUrn
const (
	ENUMAGGREGATESEARCHENTRYCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SEARCH_ENTRY_CRITERIAAGGREGATE EnumaggregateSearchEntryCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:search-entry-criteria:aggregate"
)

// All allowed values of EnumaggregateSearchEntryCriteriaSchemaUrn enum
var AllowedEnumaggregateSearchEntryCriteriaSchemaUrnEnumValues = []EnumaggregateSearchEntryCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:search-entry-criteria:aggregate",
}

func (v *EnumaggregateSearchEntryCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumaggregateSearchEntryCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumaggregateSearchEntryCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumaggregateSearchEntryCriteriaSchemaUrn", value)
}

// NewEnumaggregateSearchEntryCriteriaSchemaUrnFromValue returns a pointer to a valid EnumaggregateSearchEntryCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumaggregateSearchEntryCriteriaSchemaUrnFromValue(v string) (*EnumaggregateSearchEntryCriteriaSchemaUrn, error) {
	ev := EnumaggregateSearchEntryCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumaggregateSearchEntryCriteriaSchemaUrn: valid values are %v", v, AllowedEnumaggregateSearchEntryCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumaggregateSearchEntryCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumaggregateSearchEntryCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaggregate-search-entry-criteriaSchemaUrn value
func (v EnumaggregateSearchEntryCriteriaSchemaUrn) Ptr() *EnumaggregateSearchEntryCriteriaSchemaUrn {
	return &v
}

type NullableEnumaggregateSearchEntryCriteriaSchemaUrn struct {
	value *EnumaggregateSearchEntryCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumaggregateSearchEntryCriteriaSchemaUrn) Get() *EnumaggregateSearchEntryCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumaggregateSearchEntryCriteriaSchemaUrn) Set(val *EnumaggregateSearchEntryCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumaggregateSearchEntryCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumaggregateSearchEntryCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumaggregateSearchEntryCriteriaSchemaUrn(val *EnumaggregateSearchEntryCriteriaSchemaUrn) *NullableEnumaggregateSearchEntryCriteriaSchemaUrn {
	return &NullableEnumaggregateSearchEntryCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumaggregateSearchEntryCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumaggregateSearchEntryCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

