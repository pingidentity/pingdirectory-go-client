/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumenterLockdownModeRecurringTaskSchemaUrn the model 'EnumenterLockdownModeRecurringTaskSchemaUrn'
type EnumenterLockdownModeRecurringTaskSchemaUrn string

// List of Enumenter-lockdown-mode-recurring-taskSchemaUrn
const (
	ENUMENTERLOCKDOWNMODERECURRINGTASKSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RECURRING_TASKENTER_LOCKDOWN_MODE EnumenterLockdownModeRecurringTaskSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:recurring-task:enter-lockdown-mode"
)

// All allowed values of EnumenterLockdownModeRecurringTaskSchemaUrn enum
var AllowedEnumenterLockdownModeRecurringTaskSchemaUrnEnumValues = []EnumenterLockdownModeRecurringTaskSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:recurring-task:enter-lockdown-mode",
}

func (v *EnumenterLockdownModeRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumenterLockdownModeRecurringTaskSchemaUrn(value)
	for _, existing := range AllowedEnumenterLockdownModeRecurringTaskSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumenterLockdownModeRecurringTaskSchemaUrn", value)
}

// NewEnumenterLockdownModeRecurringTaskSchemaUrnFromValue returns a pointer to a valid EnumenterLockdownModeRecurringTaskSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumenterLockdownModeRecurringTaskSchemaUrnFromValue(v string) (*EnumenterLockdownModeRecurringTaskSchemaUrn, error) {
	ev := EnumenterLockdownModeRecurringTaskSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumenterLockdownModeRecurringTaskSchemaUrn: valid values are %v", v, AllowedEnumenterLockdownModeRecurringTaskSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumenterLockdownModeRecurringTaskSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumenterLockdownModeRecurringTaskSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumenter-lockdown-mode-recurring-taskSchemaUrn value
func (v EnumenterLockdownModeRecurringTaskSchemaUrn) Ptr() *EnumenterLockdownModeRecurringTaskSchemaUrn {
	return &v
}

type NullableEnumenterLockdownModeRecurringTaskSchemaUrn struct {
	value *EnumenterLockdownModeRecurringTaskSchemaUrn
	isSet bool
}

func (v NullableEnumenterLockdownModeRecurringTaskSchemaUrn) Get() *EnumenterLockdownModeRecurringTaskSchemaUrn {
	return v.value
}

func (v *NullableEnumenterLockdownModeRecurringTaskSchemaUrn) Set(val *EnumenterLockdownModeRecurringTaskSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumenterLockdownModeRecurringTaskSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumenterLockdownModeRecurringTaskSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumenterLockdownModeRecurringTaskSchemaUrn(val *EnumenterLockdownModeRecurringTaskSchemaUrn) *NullableEnumenterLockdownModeRecurringTaskSchemaUrn {
	return &NullableEnumenterLockdownModeRecurringTaskSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumenterLockdownModeRecurringTaskSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumenterLockdownModeRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

