/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ResultCodeMapApiService ResultCodeMapApi service
type ResultCodeMapApiService service

type ApiAddResultCodeMapRequest struct {
	ctx context.Context
	ApiService *ResultCodeMapApiService
	addResultCodeMapRequest *AddResultCodeMapRequest
}

// Create a new Result Code Map in the config
func (r ApiAddResultCodeMapRequest) AddResultCodeMapRequest(addResultCodeMapRequest AddResultCodeMapRequest) ApiAddResultCodeMapRequest {
	r.addResultCodeMapRequest = &addResultCodeMapRequest
	return r
}

func (r ApiAddResultCodeMapRequest) Execute() (*ResultCodeMapResponse, *http.Response, error) {
	return r.ApiService.AddResultCodeMapExecute(r)
}

/*
AddResultCodeMap Add a new Result Code Map to the config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddResultCodeMapRequest
*/
func (a *ResultCodeMapApiService) AddResultCodeMap(ctx context.Context) ApiAddResultCodeMapRequest {
	return ApiAddResultCodeMapRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResultCodeMapResponse
func (a *ResultCodeMapApiService) AddResultCodeMapExecute(r ApiAddResultCodeMapRequest) (*ResultCodeMapResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCodeMapResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResultCodeMapApiService.AddResultCodeMap")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/result-code-maps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addResultCodeMapRequest == nil {
		return localVarReturnValue, nil, reportError("addResultCodeMapRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addResultCodeMapRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteResultCodeMapRequest struct {
	ctx context.Context
	ApiService *ResultCodeMapApiService
	resultCodeMapName string
}

func (r ApiDeleteResultCodeMapRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteResultCodeMapExecute(r)
}

/*
DeleteResultCodeMap Delete a Result Code Map

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resultCodeMapName Name of the Result Code Map to be deleted
 @return ApiDeleteResultCodeMapRequest
*/
func (a *ResultCodeMapApiService) DeleteResultCodeMap(ctx context.Context, resultCodeMapName string) ApiDeleteResultCodeMapRequest {
	return ApiDeleteResultCodeMapRequest{
		ApiService: a,
		ctx: ctx,
		resultCodeMapName: resultCodeMapName,
	}
}

// Execute executes the request
func (a *ResultCodeMapApiService) DeleteResultCodeMapExecute(r ApiDeleteResultCodeMapRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResultCodeMapApiService.DeleteResultCodeMap")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/result-code-maps/{result-code-map-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"result-code-map-name"+"}", url.PathEscape(parameterToString(r.resultCodeMapName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetResultCodeMapRequest struct {
	ctx context.Context
	ApiService *ResultCodeMapApiService
	resultCodeMapName string
}

func (r ApiGetResultCodeMapRequest) Execute() (*ResultCodeMapResponse, *http.Response, error) {
	return r.ApiService.GetResultCodeMapExecute(r)
}

/*
GetResultCodeMap Returns a single Result Code Map

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resultCodeMapName Name of the Result Code Map to be read
 @return ApiGetResultCodeMapRequest
*/
func (a *ResultCodeMapApiService) GetResultCodeMap(ctx context.Context, resultCodeMapName string) ApiGetResultCodeMapRequest {
	return ApiGetResultCodeMapRequest{
		ApiService: a,
		ctx: ctx,
		resultCodeMapName: resultCodeMapName,
	}
}

// Execute executes the request
//  @return ResultCodeMapResponse
func (a *ResultCodeMapApiService) GetResultCodeMapExecute(r ApiGetResultCodeMapRequest) (*ResultCodeMapResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCodeMapResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResultCodeMapApiService.GetResultCodeMap")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/result-code-maps/{result-code-map-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"result-code-map-name"+"}", url.PathEscape(parameterToString(r.resultCodeMapName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateResultCodeMapRequest struct {
	ctx context.Context
	ApiService *ResultCodeMapApiService
	resultCodeMapName string
	updateRequest *UpdateRequest
}

// Update an existing Result Code Map
func (r ApiUpdateResultCodeMapRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateResultCodeMapRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateResultCodeMapRequest) Execute() (*ResultCodeMapResponse, *http.Response, error) {
	return r.ApiService.UpdateResultCodeMapExecute(r)
}

/*
UpdateResultCodeMap Update an existing Result Code Map by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resultCodeMapName Name of the Result Code Map to be updated
 @return ApiUpdateResultCodeMapRequest
*/
func (a *ResultCodeMapApiService) UpdateResultCodeMap(ctx context.Context, resultCodeMapName string) ApiUpdateResultCodeMapRequest {
	return ApiUpdateResultCodeMapRequest{
		ApiService: a,
		ctx: ctx,
		resultCodeMapName: resultCodeMapName,
	}
}

// Execute executes the request
//  @return ResultCodeMapResponse
func (a *ResultCodeMapApiService) UpdateResultCodeMapExecute(r ApiUpdateResultCodeMapRequest) (*ResultCodeMapResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResultCodeMapResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResultCodeMapApiService.UpdateResultCodeMap")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/result-code-maps/{result-code-map-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"result-code-map-name"+"}", url.PathEscape(parameterToString(r.resultCodeMapName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
