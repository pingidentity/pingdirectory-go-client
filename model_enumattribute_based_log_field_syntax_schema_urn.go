/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumattributeBasedLogFieldSyntaxSchemaUrn the model 'EnumattributeBasedLogFieldSyntaxSchemaUrn'
type EnumattributeBasedLogFieldSyntaxSchemaUrn string

// List of Enumattribute-based-log-field-syntaxSchemaUrn
const (
	ENUMATTRIBUTEBASEDLOGFIELDSYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_FIELD_SYNTAXATTRIBUTE_BASED EnumattributeBasedLogFieldSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-field-syntax:attribute-based"
)

// All allowed values of EnumattributeBasedLogFieldSyntaxSchemaUrn enum
var AllowedEnumattributeBasedLogFieldSyntaxSchemaUrnEnumValues = []EnumattributeBasedLogFieldSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-field-syntax:attribute-based",
}

func (v *EnumattributeBasedLogFieldSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumattributeBasedLogFieldSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumattributeBasedLogFieldSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumattributeBasedLogFieldSyntaxSchemaUrn", value)
}

// NewEnumattributeBasedLogFieldSyntaxSchemaUrnFromValue returns a pointer to a valid EnumattributeBasedLogFieldSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumattributeBasedLogFieldSyntaxSchemaUrnFromValue(v string) (*EnumattributeBasedLogFieldSyntaxSchemaUrn, error) {
	ev := EnumattributeBasedLogFieldSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumattributeBasedLogFieldSyntaxSchemaUrn: valid values are %v", v, AllowedEnumattributeBasedLogFieldSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumattributeBasedLogFieldSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumattributeBasedLogFieldSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumattribute-based-log-field-syntaxSchemaUrn value
func (v EnumattributeBasedLogFieldSyntaxSchemaUrn) Ptr() *EnumattributeBasedLogFieldSyntaxSchemaUrn {
	return &v
}

type NullableEnumattributeBasedLogFieldSyntaxSchemaUrn struct {
	value *EnumattributeBasedLogFieldSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumattributeBasedLogFieldSyntaxSchemaUrn) Get() *EnumattributeBasedLogFieldSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumattributeBasedLogFieldSyntaxSchemaUrn) Set(val *EnumattributeBasedLogFieldSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumattributeBasedLogFieldSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumattributeBasedLogFieldSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumattributeBasedLogFieldSyntaxSchemaUrn(val *EnumattributeBasedLogFieldSyntaxSchemaUrn) *NullableEnumattributeBasedLogFieldSyntaxSchemaUrn {
	return &NullableEnumattributeBasedLogFieldSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumattributeBasedLogFieldSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumattributeBasedLogFieldSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
