/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddSubjectAttributeToUserAttributeCertificateMapperRequest struct for AddSubjectAttributeToUserAttributeCertificateMapperRequest
type AddSubjectAttributeToUserAttributeCertificateMapperRequest struct {
	// Name of the new Certificate Mapper
	MapperName string `json:"mapperName"`
	Schemas []EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn `json:"schemas"`
	SubjectAttributeMapping []string `json:"subjectAttributeMapping"`
	UserBaseDN []string `json:"userBaseDN,omitempty"`
	// A description for this Certificate Mapper
	Description *string `json:"description,omitempty"`
	// Indicates whether the Certificate Mapper is enabled.
	Enabled bool `json:"enabled"`
}

// NewAddSubjectAttributeToUserAttributeCertificateMapperRequest instantiates a new AddSubjectAttributeToUserAttributeCertificateMapperRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddSubjectAttributeToUserAttributeCertificateMapperRequest(mapperName string, schemas []EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn, subjectAttributeMapping []string, enabled bool) *AddSubjectAttributeToUserAttributeCertificateMapperRequest {
	this := AddSubjectAttributeToUserAttributeCertificateMapperRequest{}
	this.MapperName = mapperName
	this.Schemas = schemas
	this.SubjectAttributeMapping = subjectAttributeMapping
	this.Enabled = enabled
	return &this
}

// NewAddSubjectAttributeToUserAttributeCertificateMapperRequestWithDefaults instantiates a new AddSubjectAttributeToUserAttributeCertificateMapperRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddSubjectAttributeToUserAttributeCertificateMapperRequestWithDefaults() *AddSubjectAttributeToUserAttributeCertificateMapperRequest {
	this := AddSubjectAttributeToUserAttributeCertificateMapperRequest{}
	return &this
}

// GetMapperName returns the MapperName field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetMapperName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MapperName
}

// GetMapperNameOk returns a tuple with the MapperName field value
// and a boolean to check if the value has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetMapperNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MapperName, true
}

// SetMapperName sets field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) SetMapperName(v string) {
	o.MapperName = v
}

// GetSchemas returns the Schemas field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetSchemas() []EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn {
	if o == nil {
		var ret []EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetSchemasOk() ([]EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) SetSchemas(v []EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) {
	o.Schemas = v
}

// GetSubjectAttributeMapping returns the SubjectAttributeMapping field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetSubjectAttributeMapping() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubjectAttributeMapping
}

// GetSubjectAttributeMappingOk returns a tuple with the SubjectAttributeMapping field value
// and a boolean to check if the value has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetSubjectAttributeMappingOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SubjectAttributeMapping, true
}

// SetSubjectAttributeMapping sets field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) SetSubjectAttributeMapping(v []string) {
	o.SubjectAttributeMapping = v
}

// GetUserBaseDN returns the UserBaseDN field value if set, zero value otherwise.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetUserBaseDN() []string {
	if o == nil || isNil(o.UserBaseDN) {
		var ret []string
		return ret
	}
	return o.UserBaseDN
}

// GetUserBaseDNOk returns a tuple with the UserBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetUserBaseDNOk() ([]string, bool) {
	if o == nil || isNil(o.UserBaseDN) {
    return nil, false
	}
	return o.UserBaseDN, true
}

// HasUserBaseDN returns a boolean if a field has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) HasUserBaseDN() bool {
	if o != nil && !isNil(o.UserBaseDN) {
		return true
	}

	return false
}

// SetUserBaseDN gets a reference to the given []string and assigns it to the UserBaseDN field.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) SetUserBaseDN(v []string) {
	o.UserBaseDN = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddSubjectAttributeToUserAttributeCertificateMapperRequest) SetEnabled(v bool) {
	o.Enabled = v
}

func (o AddSubjectAttributeToUserAttributeCertificateMapperRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mapperName"] = o.MapperName
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["subjectAttributeMapping"] = o.SubjectAttributeMapping
	}
	if !isNil(o.UserBaseDN) {
		toSerialize["userBaseDN"] = o.UserBaseDN
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest struct {
	value *AddSubjectAttributeToUserAttributeCertificateMapperRequest
	isSet bool
}

func (v NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest) Get() *AddSubjectAttributeToUserAttributeCertificateMapperRequest {
	return v.value
}

func (v *NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest) Set(val *AddSubjectAttributeToUserAttributeCertificateMapperRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSubjectAttributeToUserAttributeCertificateMapperRequest(val *AddSubjectAttributeToUserAttributeCertificateMapperRequest) *NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest {
	return &NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest{value: val, isSet: true}
}

func (v NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSubjectAttributeToUserAttributeCertificateMapperRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


