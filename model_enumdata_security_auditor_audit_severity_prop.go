/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdataSecurityAuditorAuditSeverityProp Specifies the severity of events to include in the report.
type EnumdataSecurityAuditorAuditSeverityProp string

// List of Enumdata-security-auditor-auditSeverityProp
const (
	ERROR EnumdataSecurityAuditorAuditSeverityProp = "error"
	WARNING EnumdataSecurityAuditorAuditSeverityProp = "warning"
	NOTICE EnumdataSecurityAuditorAuditSeverityProp = "notice"
	VERBOSE EnumdataSecurityAuditorAuditSeverityProp = "verbose"
)

// All allowed values of EnumdataSecurityAuditorAuditSeverityProp enum
var AllowedEnumdataSecurityAuditorAuditSeverityPropEnumValues = []EnumdataSecurityAuditorAuditSeverityProp{
	"error",
	"warning",
	"notice",
	"verbose",
}

func (v *EnumdataSecurityAuditorAuditSeverityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdataSecurityAuditorAuditSeverityProp(value)
	for _, existing := range AllowedEnumdataSecurityAuditorAuditSeverityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdataSecurityAuditorAuditSeverityProp", value)
}

// NewEnumdataSecurityAuditorAuditSeverityPropFromValue returns a pointer to a valid EnumdataSecurityAuditorAuditSeverityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdataSecurityAuditorAuditSeverityPropFromValue(v string) (*EnumdataSecurityAuditorAuditSeverityProp, error) {
	ev := EnumdataSecurityAuditorAuditSeverityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdataSecurityAuditorAuditSeverityProp: valid values are %v", v, AllowedEnumdataSecurityAuditorAuditSeverityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdataSecurityAuditorAuditSeverityProp) IsValid() bool {
	for _, existing := range AllowedEnumdataSecurityAuditorAuditSeverityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdata-security-auditor-auditSeverityProp value
func (v EnumdataSecurityAuditorAuditSeverityProp) Ptr() *EnumdataSecurityAuditorAuditSeverityProp {
	return &v
}

type NullableEnumdataSecurityAuditorAuditSeverityProp struct {
	value *EnumdataSecurityAuditorAuditSeverityProp
	isSet bool
}

func (v NullableEnumdataSecurityAuditorAuditSeverityProp) Get() *EnumdataSecurityAuditorAuditSeverityProp {
	return v.value
}

func (v *NullableEnumdataSecurityAuditorAuditSeverityProp) Set(val *EnumdataSecurityAuditorAuditSeverityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdataSecurityAuditorAuditSeverityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdataSecurityAuditorAuditSeverityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdataSecurityAuditorAuditSeverityProp(val *EnumdataSecurityAuditorAuditSeverityProp) *NullableEnumdataSecurityAuditorAuditSeverityProp {
	return &NullableEnumdataSecurityAuditorAuditSeverityProp{value: val, isSet: true}
}

func (v NullableEnumdataSecurityAuditorAuditSeverityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdataSecurityAuditorAuditSeverityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

