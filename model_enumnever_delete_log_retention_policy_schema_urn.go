/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumneverDeleteLogRetentionPolicySchemaUrn the model 'EnumneverDeleteLogRetentionPolicySchemaUrn'
type EnumneverDeleteLogRetentionPolicySchemaUrn string

// List of Enumnever-delete-log-retention-policySchemaUrn
const (
	ENUMNEVERDELETELOGRETENTIONPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_RETENTION_POLICYNEVER_DELETE EnumneverDeleteLogRetentionPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-retention-policy:never-delete"
)

// All allowed values of EnumneverDeleteLogRetentionPolicySchemaUrn enum
var AllowedEnumneverDeleteLogRetentionPolicySchemaUrnEnumValues = []EnumneverDeleteLogRetentionPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-retention-policy:never-delete",
}

func (v *EnumneverDeleteLogRetentionPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumneverDeleteLogRetentionPolicySchemaUrn(value)
	for _, existing := range AllowedEnumneverDeleteLogRetentionPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumneverDeleteLogRetentionPolicySchemaUrn", value)
}

// NewEnumneverDeleteLogRetentionPolicySchemaUrnFromValue returns a pointer to a valid EnumneverDeleteLogRetentionPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumneverDeleteLogRetentionPolicySchemaUrnFromValue(v string) (*EnumneverDeleteLogRetentionPolicySchemaUrn, error) {
	ev := EnumneverDeleteLogRetentionPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumneverDeleteLogRetentionPolicySchemaUrn: valid values are %v", v, AllowedEnumneverDeleteLogRetentionPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumneverDeleteLogRetentionPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumneverDeleteLogRetentionPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumnever-delete-log-retention-policySchemaUrn value
func (v EnumneverDeleteLogRetentionPolicySchemaUrn) Ptr() *EnumneverDeleteLogRetentionPolicySchemaUrn {
	return &v
}

type NullableEnumneverDeleteLogRetentionPolicySchemaUrn struct {
	value *EnumneverDeleteLogRetentionPolicySchemaUrn
	isSet bool
}

func (v NullableEnumneverDeleteLogRetentionPolicySchemaUrn) Get() *EnumneverDeleteLogRetentionPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumneverDeleteLogRetentionPolicySchemaUrn) Set(val *EnumneverDeleteLogRetentionPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumneverDeleteLogRetentionPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumneverDeleteLogRetentionPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumneverDeleteLogRetentionPolicySchemaUrn(val *EnumneverDeleteLogRetentionPolicySchemaUrn) *NullableEnumneverDeleteLogRetentionPolicySchemaUrn {
	return &NullableEnumneverDeleteLogRetentionPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumneverDeleteLogRetentionPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumneverDeleteLogRetentionPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

