/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumserverInstanceServerInstanceTypeProp Specifies the type of server installation.
type EnumserverInstanceServerInstanceTypeProp string

// List of Enumserver-instance-serverInstanceTypeProp
const (
	DS EnumserverInstanceServerInstanceTypeProp = "ds"
	PROXY EnumserverInstanceServerInstanceTypeProp = "proxy"
	AUTHORIZE EnumserverInstanceServerInstanceTypeProp = "authorize"
	METRICS EnumserverInstanceServerInstanceTypeProp = "metrics"
	SYNC EnumserverInstanceServerInstanceTypeProp = "sync"
)

// All allowed values of EnumserverInstanceServerInstanceTypeProp enum
var AllowedEnumserverInstanceServerInstanceTypePropEnumValues = []EnumserverInstanceServerInstanceTypeProp{
	"ds",
	"proxy",
	"authorize",
	"metrics",
	"sync",
}

func (v *EnumserverInstanceServerInstanceTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumserverInstanceServerInstanceTypeProp(value)
	for _, existing := range AllowedEnumserverInstanceServerInstanceTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumserverInstanceServerInstanceTypeProp", value)
}

// NewEnumserverInstanceServerInstanceTypePropFromValue returns a pointer to a valid EnumserverInstanceServerInstanceTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumserverInstanceServerInstanceTypePropFromValue(v string) (*EnumserverInstanceServerInstanceTypeProp, error) {
	ev := EnumserverInstanceServerInstanceTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumserverInstanceServerInstanceTypeProp: valid values are %v", v, AllowedEnumserverInstanceServerInstanceTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumserverInstanceServerInstanceTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumserverInstanceServerInstanceTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumserver-instance-serverInstanceTypeProp value
func (v EnumserverInstanceServerInstanceTypeProp) Ptr() *EnumserverInstanceServerInstanceTypeProp {
	return &v
}

type NullableEnumserverInstanceServerInstanceTypeProp struct {
	value *EnumserverInstanceServerInstanceTypeProp
	isSet bool
}

func (v NullableEnumserverInstanceServerInstanceTypeProp) Get() *EnumserverInstanceServerInstanceTypeProp {
	return v.value
}

func (v *NullableEnumserverInstanceServerInstanceTypeProp) Set(val *EnumserverInstanceServerInstanceTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumserverInstanceServerInstanceTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumserverInstanceServerInstanceTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumserverInstanceServerInstanceTypeProp(val *EnumserverInstanceServerInstanceTypeProp) *NullableEnumserverInstanceServerInstanceTypeProp {
	return &NullableEnumserverInstanceServerInstanceTypeProp{value: val, isSet: true}
}

func (v NullableEnumserverInstanceServerInstanceTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumserverInstanceServerInstanceTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

