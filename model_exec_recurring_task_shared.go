/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecRecurringTaskShared struct for ExecRecurringTaskShared
type ExecRecurringTaskShared struct {
	Schemas []EnumexecRecurringTaskSchemaUrn `json:"schemas"`
	// The absolute path to the command to execute. It must be an absolute path, the corresponding file must exist, and it must be listed in the config/exec-command-whitelist.txt file.
	CommandPath string `json:"commandPath"`
	// A string containing the arguments to provide to the command. If the command should be run without arguments, this property should be left undefined. If there should be multiple arguments, then they should be separated with spaces.
	CommandArguments *string `json:"commandArguments,omitempty"`
	// The path and base name for a file to which the command output (both standard output and standard error) should be written. This may be left undefined if the command output should not be recorded into a file.
	CommandOutputFileBaseName *string `json:"commandOutputFileBaseName,omitempty"`
	// The minimum number of previous command output files that should be preserved after a new instance of the command is invoked.
	RetainPreviousOutputFileCount *int32 `json:"retainPreviousOutputFileCount,omitempty"`
	// The minimum age of previous command output files that should be preserved after a new instance of the command is invoked.
	RetainPreviousOutputFileAge *string `json:"retainPreviousOutputFileAge,omitempty"`
	// Indicates whether the command's output (both standard output and standard error) should be recorded in the server's error log.
	LogCommandOutput *bool `json:"logCommandOutput,omitempty"`
	TaskCompletionStateForNonzeroExitCode *EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp `json:"taskCompletionStateForNonzeroExitCode,omitempty"`
	// The absolute path to a working directory where the command should be executed. It must be an absolute path and the corresponding directory must exist.
	WorkingDirectory *string `json:"workingDirectory,omitempty"`
	// A description for this Recurring Task
	Description *string `json:"description,omitempty"`
	// Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
	CancelOnTaskDependencyFailure *bool `json:"cancelOnTaskDependencyFailure,omitempty"`
	EmailOnStart []string `json:"emailOnStart,omitempty"`
	EmailOnSuccess []string `json:"emailOnSuccess,omitempty"`
	EmailOnFailure []string `json:"emailOnFailure,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
	AlertOnStart *bool `json:"alertOnStart,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
	AlertOnSuccess *bool `json:"alertOnSuccess,omitempty"`
	// Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
	AlertOnFailure *bool `json:"alertOnFailure,omitempty"`
}

// NewExecRecurringTaskShared instantiates a new ExecRecurringTaskShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecRecurringTaskShared(schemas []EnumexecRecurringTaskSchemaUrn, commandPath string) *ExecRecurringTaskShared {
	this := ExecRecurringTaskShared{}
	this.Schemas = schemas
	this.CommandPath = commandPath
	return &this
}

// NewExecRecurringTaskSharedWithDefaults instantiates a new ExecRecurringTaskShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecRecurringTaskSharedWithDefaults() *ExecRecurringTaskShared {
	this := ExecRecurringTaskShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *ExecRecurringTaskShared) GetSchemas() []EnumexecRecurringTaskSchemaUrn {
	if o == nil {
		var ret []EnumexecRecurringTaskSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetSchemasOk() ([]EnumexecRecurringTaskSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ExecRecurringTaskShared) SetSchemas(v []EnumexecRecurringTaskSchemaUrn) {
	o.Schemas = v
}

// GetCommandPath returns the CommandPath field value
func (o *ExecRecurringTaskShared) GetCommandPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandPath
}

// GetCommandPathOk returns a tuple with the CommandPath field value
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetCommandPathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CommandPath, true
}

// SetCommandPath sets field value
func (o *ExecRecurringTaskShared) SetCommandPath(v string) {
	o.CommandPath = v
}

// GetCommandArguments returns the CommandArguments field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetCommandArguments() string {
	if o == nil || isNil(o.CommandArguments) {
		var ret string
		return ret
	}
	return *o.CommandArguments
}

// GetCommandArgumentsOk returns a tuple with the CommandArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetCommandArgumentsOk() (*string, bool) {
	if o == nil || isNil(o.CommandArguments) {
    return nil, false
	}
	return o.CommandArguments, true
}

// HasCommandArguments returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasCommandArguments() bool {
	if o != nil && !isNil(o.CommandArguments) {
		return true
	}

	return false
}

// SetCommandArguments gets a reference to the given string and assigns it to the CommandArguments field.
func (o *ExecRecurringTaskShared) SetCommandArguments(v string) {
	o.CommandArguments = &v
}

// GetCommandOutputFileBaseName returns the CommandOutputFileBaseName field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetCommandOutputFileBaseName() string {
	if o == nil || isNil(o.CommandOutputFileBaseName) {
		var ret string
		return ret
	}
	return *o.CommandOutputFileBaseName
}

// GetCommandOutputFileBaseNameOk returns a tuple with the CommandOutputFileBaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetCommandOutputFileBaseNameOk() (*string, bool) {
	if o == nil || isNil(o.CommandOutputFileBaseName) {
    return nil, false
	}
	return o.CommandOutputFileBaseName, true
}

// HasCommandOutputFileBaseName returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasCommandOutputFileBaseName() bool {
	if o != nil && !isNil(o.CommandOutputFileBaseName) {
		return true
	}

	return false
}

// SetCommandOutputFileBaseName gets a reference to the given string and assigns it to the CommandOutputFileBaseName field.
func (o *ExecRecurringTaskShared) SetCommandOutputFileBaseName(v string) {
	o.CommandOutputFileBaseName = &v
}

// GetRetainPreviousOutputFileCount returns the RetainPreviousOutputFileCount field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetRetainPreviousOutputFileCount() int32 {
	if o == nil || isNil(o.RetainPreviousOutputFileCount) {
		var ret int32
		return ret
	}
	return *o.RetainPreviousOutputFileCount
}

// GetRetainPreviousOutputFileCountOk returns a tuple with the RetainPreviousOutputFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetRetainPreviousOutputFileCountOk() (*int32, bool) {
	if o == nil || isNil(o.RetainPreviousOutputFileCount) {
    return nil, false
	}
	return o.RetainPreviousOutputFileCount, true
}

// HasRetainPreviousOutputFileCount returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasRetainPreviousOutputFileCount() bool {
	if o != nil && !isNil(o.RetainPreviousOutputFileCount) {
		return true
	}

	return false
}

// SetRetainPreviousOutputFileCount gets a reference to the given int32 and assigns it to the RetainPreviousOutputFileCount field.
func (o *ExecRecurringTaskShared) SetRetainPreviousOutputFileCount(v int32) {
	o.RetainPreviousOutputFileCount = &v
}

// GetRetainPreviousOutputFileAge returns the RetainPreviousOutputFileAge field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetRetainPreviousOutputFileAge() string {
	if o == nil || isNil(o.RetainPreviousOutputFileAge) {
		var ret string
		return ret
	}
	return *o.RetainPreviousOutputFileAge
}

// GetRetainPreviousOutputFileAgeOk returns a tuple with the RetainPreviousOutputFileAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetRetainPreviousOutputFileAgeOk() (*string, bool) {
	if o == nil || isNil(o.RetainPreviousOutputFileAge) {
    return nil, false
	}
	return o.RetainPreviousOutputFileAge, true
}

// HasRetainPreviousOutputFileAge returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasRetainPreviousOutputFileAge() bool {
	if o != nil && !isNil(o.RetainPreviousOutputFileAge) {
		return true
	}

	return false
}

// SetRetainPreviousOutputFileAge gets a reference to the given string and assigns it to the RetainPreviousOutputFileAge field.
func (o *ExecRecurringTaskShared) SetRetainPreviousOutputFileAge(v string) {
	o.RetainPreviousOutputFileAge = &v
}

// GetLogCommandOutput returns the LogCommandOutput field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetLogCommandOutput() bool {
	if o == nil || isNil(o.LogCommandOutput) {
		var ret bool
		return ret
	}
	return *o.LogCommandOutput
}

// GetLogCommandOutputOk returns a tuple with the LogCommandOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetLogCommandOutputOk() (*bool, bool) {
	if o == nil || isNil(o.LogCommandOutput) {
    return nil, false
	}
	return o.LogCommandOutput, true
}

// HasLogCommandOutput returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasLogCommandOutput() bool {
	if o != nil && !isNil(o.LogCommandOutput) {
		return true
	}

	return false
}

// SetLogCommandOutput gets a reference to the given bool and assigns it to the LogCommandOutput field.
func (o *ExecRecurringTaskShared) SetLogCommandOutput(v bool) {
	o.LogCommandOutput = &v
}

// GetTaskCompletionStateForNonzeroExitCode returns the TaskCompletionStateForNonzeroExitCode field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetTaskCompletionStateForNonzeroExitCode() EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp {
	if o == nil || isNil(o.TaskCompletionStateForNonzeroExitCode) {
		var ret EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp
		return ret
	}
	return *o.TaskCompletionStateForNonzeroExitCode
}

// GetTaskCompletionStateForNonzeroExitCodeOk returns a tuple with the TaskCompletionStateForNonzeroExitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetTaskCompletionStateForNonzeroExitCodeOk() (*EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp, bool) {
	if o == nil || isNil(o.TaskCompletionStateForNonzeroExitCode) {
    return nil, false
	}
	return o.TaskCompletionStateForNonzeroExitCode, true
}

// HasTaskCompletionStateForNonzeroExitCode returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasTaskCompletionStateForNonzeroExitCode() bool {
	if o != nil && !isNil(o.TaskCompletionStateForNonzeroExitCode) {
		return true
	}

	return false
}

// SetTaskCompletionStateForNonzeroExitCode gets a reference to the given EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp and assigns it to the TaskCompletionStateForNonzeroExitCode field.
func (o *ExecRecurringTaskShared) SetTaskCompletionStateForNonzeroExitCode(v EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp) {
	o.TaskCompletionStateForNonzeroExitCode = &v
}

// GetWorkingDirectory returns the WorkingDirectory field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetWorkingDirectory() string {
	if o == nil || isNil(o.WorkingDirectory) {
		var ret string
		return ret
	}
	return *o.WorkingDirectory
}

// GetWorkingDirectoryOk returns a tuple with the WorkingDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetWorkingDirectoryOk() (*string, bool) {
	if o == nil || isNil(o.WorkingDirectory) {
    return nil, false
	}
	return o.WorkingDirectory, true
}

// HasWorkingDirectory returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasWorkingDirectory() bool {
	if o != nil && !isNil(o.WorkingDirectory) {
		return true
	}

	return false
}

// SetWorkingDirectory gets a reference to the given string and assigns it to the WorkingDirectory field.
func (o *ExecRecurringTaskShared) SetWorkingDirectory(v string) {
	o.WorkingDirectory = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExecRecurringTaskShared) SetDescription(v string) {
	o.Description = &v
}

// GetCancelOnTaskDependencyFailure returns the CancelOnTaskDependencyFailure field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetCancelOnTaskDependencyFailure() bool {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
		var ret bool
		return ret
	}
	return *o.CancelOnTaskDependencyFailure
}

// GetCancelOnTaskDependencyFailureOk returns a tuple with the CancelOnTaskDependencyFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetCancelOnTaskDependencyFailureOk() (*bool, bool) {
	if o == nil || isNil(o.CancelOnTaskDependencyFailure) {
    return nil, false
	}
	return o.CancelOnTaskDependencyFailure, true
}

// HasCancelOnTaskDependencyFailure returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasCancelOnTaskDependencyFailure() bool {
	if o != nil && !isNil(o.CancelOnTaskDependencyFailure) {
		return true
	}

	return false
}

// SetCancelOnTaskDependencyFailure gets a reference to the given bool and assigns it to the CancelOnTaskDependencyFailure field.
func (o *ExecRecurringTaskShared) SetCancelOnTaskDependencyFailure(v bool) {
	o.CancelOnTaskDependencyFailure = &v
}

// GetEmailOnStart returns the EmailOnStart field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetEmailOnStart() []string {
	if o == nil || isNil(o.EmailOnStart) {
		var ret []string
		return ret
	}
	return o.EmailOnStart
}

// GetEmailOnStartOk returns a tuple with the EmailOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetEmailOnStartOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnStart) {
    return nil, false
	}
	return o.EmailOnStart, true
}

// HasEmailOnStart returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasEmailOnStart() bool {
	if o != nil && !isNil(o.EmailOnStart) {
		return true
	}

	return false
}

// SetEmailOnStart gets a reference to the given []string and assigns it to the EmailOnStart field.
func (o *ExecRecurringTaskShared) SetEmailOnStart(v []string) {
	o.EmailOnStart = v
}

// GetEmailOnSuccess returns the EmailOnSuccess field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetEmailOnSuccess() []string {
	if o == nil || isNil(o.EmailOnSuccess) {
		var ret []string
		return ret
	}
	return o.EmailOnSuccess
}

// GetEmailOnSuccessOk returns a tuple with the EmailOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetEmailOnSuccessOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnSuccess) {
    return nil, false
	}
	return o.EmailOnSuccess, true
}

// HasEmailOnSuccess returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasEmailOnSuccess() bool {
	if o != nil && !isNil(o.EmailOnSuccess) {
		return true
	}

	return false
}

// SetEmailOnSuccess gets a reference to the given []string and assigns it to the EmailOnSuccess field.
func (o *ExecRecurringTaskShared) SetEmailOnSuccess(v []string) {
	o.EmailOnSuccess = v
}

// GetEmailOnFailure returns the EmailOnFailure field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetEmailOnFailure() []string {
	if o == nil || isNil(o.EmailOnFailure) {
		var ret []string
		return ret
	}
	return o.EmailOnFailure
}

// GetEmailOnFailureOk returns a tuple with the EmailOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetEmailOnFailureOk() ([]string, bool) {
	if o == nil || isNil(o.EmailOnFailure) {
    return nil, false
	}
	return o.EmailOnFailure, true
}

// HasEmailOnFailure returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasEmailOnFailure() bool {
	if o != nil && !isNil(o.EmailOnFailure) {
		return true
	}

	return false
}

// SetEmailOnFailure gets a reference to the given []string and assigns it to the EmailOnFailure field.
func (o *ExecRecurringTaskShared) SetEmailOnFailure(v []string) {
	o.EmailOnFailure = v
}

// GetAlertOnStart returns the AlertOnStart field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetAlertOnStart() bool {
	if o == nil || isNil(o.AlertOnStart) {
		var ret bool
		return ret
	}
	return *o.AlertOnStart
}

// GetAlertOnStartOk returns a tuple with the AlertOnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetAlertOnStartOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnStart) {
    return nil, false
	}
	return o.AlertOnStart, true
}

// HasAlertOnStart returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasAlertOnStart() bool {
	if o != nil && !isNil(o.AlertOnStart) {
		return true
	}

	return false
}

// SetAlertOnStart gets a reference to the given bool and assigns it to the AlertOnStart field.
func (o *ExecRecurringTaskShared) SetAlertOnStart(v bool) {
	o.AlertOnStart = &v
}

// GetAlertOnSuccess returns the AlertOnSuccess field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetAlertOnSuccess() bool {
	if o == nil || isNil(o.AlertOnSuccess) {
		var ret bool
		return ret
	}
	return *o.AlertOnSuccess
}

// GetAlertOnSuccessOk returns a tuple with the AlertOnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetAlertOnSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnSuccess) {
    return nil, false
	}
	return o.AlertOnSuccess, true
}

// HasAlertOnSuccess returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasAlertOnSuccess() bool {
	if o != nil && !isNil(o.AlertOnSuccess) {
		return true
	}

	return false
}

// SetAlertOnSuccess gets a reference to the given bool and assigns it to the AlertOnSuccess field.
func (o *ExecRecurringTaskShared) SetAlertOnSuccess(v bool) {
	o.AlertOnSuccess = &v
}

// GetAlertOnFailure returns the AlertOnFailure field value if set, zero value otherwise.
func (o *ExecRecurringTaskShared) GetAlertOnFailure() bool {
	if o == nil || isNil(o.AlertOnFailure) {
		var ret bool
		return ret
	}
	return *o.AlertOnFailure
}

// GetAlertOnFailureOk returns a tuple with the AlertOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecRecurringTaskShared) GetAlertOnFailureOk() (*bool, bool) {
	if o == nil || isNil(o.AlertOnFailure) {
    return nil, false
	}
	return o.AlertOnFailure, true
}

// HasAlertOnFailure returns a boolean if a field has been set.
func (o *ExecRecurringTaskShared) HasAlertOnFailure() bool {
	if o != nil && !isNil(o.AlertOnFailure) {
		return true
	}

	return false
}

// SetAlertOnFailure gets a reference to the given bool and assigns it to the AlertOnFailure field.
func (o *ExecRecurringTaskShared) SetAlertOnFailure(v bool) {
	o.AlertOnFailure = &v
}

func (o ExecRecurringTaskShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["commandPath"] = o.CommandPath
	}
	if !isNil(o.CommandArguments) {
		toSerialize["commandArguments"] = o.CommandArguments
	}
	if !isNil(o.CommandOutputFileBaseName) {
		toSerialize["commandOutputFileBaseName"] = o.CommandOutputFileBaseName
	}
	if !isNil(o.RetainPreviousOutputFileCount) {
		toSerialize["retainPreviousOutputFileCount"] = o.RetainPreviousOutputFileCount
	}
	if !isNil(o.RetainPreviousOutputFileAge) {
		toSerialize["retainPreviousOutputFileAge"] = o.RetainPreviousOutputFileAge
	}
	if !isNil(o.LogCommandOutput) {
		toSerialize["logCommandOutput"] = o.LogCommandOutput
	}
	if !isNil(o.TaskCompletionStateForNonzeroExitCode) {
		toSerialize["taskCompletionStateForNonzeroExitCode"] = o.TaskCompletionStateForNonzeroExitCode
	}
	if !isNil(o.WorkingDirectory) {
		toSerialize["workingDirectory"] = o.WorkingDirectory
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.CancelOnTaskDependencyFailure) {
		toSerialize["cancelOnTaskDependencyFailure"] = o.CancelOnTaskDependencyFailure
	}
	if !isNil(o.EmailOnStart) {
		toSerialize["emailOnStart"] = o.EmailOnStart
	}
	if !isNil(o.EmailOnSuccess) {
		toSerialize["emailOnSuccess"] = o.EmailOnSuccess
	}
	if !isNil(o.EmailOnFailure) {
		toSerialize["emailOnFailure"] = o.EmailOnFailure
	}
	if !isNil(o.AlertOnStart) {
		toSerialize["alertOnStart"] = o.AlertOnStart
	}
	if !isNil(o.AlertOnSuccess) {
		toSerialize["alertOnSuccess"] = o.AlertOnSuccess
	}
	if !isNil(o.AlertOnFailure) {
		toSerialize["alertOnFailure"] = o.AlertOnFailure
	}
	return json.Marshal(toSerialize)
}

type NullableExecRecurringTaskShared struct {
	value *ExecRecurringTaskShared
	isSet bool
}

func (v NullableExecRecurringTaskShared) Get() *ExecRecurringTaskShared {
	return v.value
}

func (v *NullableExecRecurringTaskShared) Set(val *ExecRecurringTaskShared) {
	v.value = val
	v.isSet = true
}

func (v NullableExecRecurringTaskShared) IsSet() bool {
	return v.isSet
}

func (v *NullableExecRecurringTaskShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecRecurringTaskShared(val *ExecRecurringTaskShared) *NullableExecRecurringTaskShared {
	return &NullableExecRecurringTaskShared{value: val, isSet: true}
}

func (v NullableExecRecurringTaskShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecRecurringTaskShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


