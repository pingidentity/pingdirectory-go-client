/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsensitiveAttributeAllowInModifyProp Indicates whether clients will be allowed to target sensitive attributes with modify requests.
type EnumsensitiveAttributeAllowInModifyProp string

// List of Enumsensitive-attribute-allowInModifyProp
const (
	ENUMSENSITIVEATTRIBUTEALLOWINMODIFYPROP_ALLOW EnumsensitiveAttributeAllowInModifyProp = "allow"
	ENUMSENSITIVEATTRIBUTEALLOWINMODIFYPROP_REJECT EnumsensitiveAttributeAllowInModifyProp = "reject"
	ENUMSENSITIVEATTRIBUTEALLOWINMODIFYPROP_SECURE_ONLY EnumsensitiveAttributeAllowInModifyProp = "secure-only"
)

// All allowed values of EnumsensitiveAttributeAllowInModifyProp enum
var AllowedEnumsensitiveAttributeAllowInModifyPropEnumValues = []EnumsensitiveAttributeAllowInModifyProp{
	"allow",
	"reject",
	"secure-only",
}

func (v *EnumsensitiveAttributeAllowInModifyProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsensitiveAttributeAllowInModifyProp(value)
	for _, existing := range AllowedEnumsensitiveAttributeAllowInModifyPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsensitiveAttributeAllowInModifyProp", value)
}

// NewEnumsensitiveAttributeAllowInModifyPropFromValue returns a pointer to a valid EnumsensitiveAttributeAllowInModifyProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsensitiveAttributeAllowInModifyPropFromValue(v string) (*EnumsensitiveAttributeAllowInModifyProp, error) {
	ev := EnumsensitiveAttributeAllowInModifyProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsensitiveAttributeAllowInModifyProp: valid values are %v", v, AllowedEnumsensitiveAttributeAllowInModifyPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsensitiveAttributeAllowInModifyProp) IsValid() bool {
	for _, existing := range AllowedEnumsensitiveAttributeAllowInModifyPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsensitive-attribute-allowInModifyProp value
func (v EnumsensitiveAttributeAllowInModifyProp) Ptr() *EnumsensitiveAttributeAllowInModifyProp {
	return &v
}

type NullableEnumsensitiveAttributeAllowInModifyProp struct {
	value *EnumsensitiveAttributeAllowInModifyProp
	isSet bool
}

func (v NullableEnumsensitiveAttributeAllowInModifyProp) Get() *EnumsensitiveAttributeAllowInModifyProp {
	return v.value
}

func (v *NullableEnumsensitiveAttributeAllowInModifyProp) Set(val *EnumsensitiveAttributeAllowInModifyProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsensitiveAttributeAllowInModifyProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsensitiveAttributeAllowInModifyProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsensitiveAttributeAllowInModifyProp(val *EnumsensitiveAttributeAllowInModifyProp) *NullableEnumsensitiveAttributeAllowInModifyProp {
	return &NullableEnumsensitiveAttributeAllowInModifyProp{value: val, isSet: true}
}

func (v NullableEnumsensitiveAttributeAllowInModifyProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsensitiveAttributeAllowInModifyProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

