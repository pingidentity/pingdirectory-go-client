/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DnMapShared struct for DnMapShared
type DnMapShared struct {
	Schemas []EnumdnMapSchemaUrn `json:"schemas,omitempty"`
	// A description for this DN Map
	Description *string `json:"description,omitempty"`
	// Specifies the DN pattern to match when determining whether this map applies to a specific source DN. If the provided bind DN matches this pattern, then the to-dn-pattern will be used to perform the mapping. If the provided bind DN does not match this pattern, then no mapping will be performed.
	FromDNPattern string `json:"fromDNPattern"`
	// Specifies a pattern for constructing the DN value using fixed text, DN components matching wild-card values in from-dn-pattern, and attribute values from the source entry.
	ToDNPattern string `json:"toDNPattern"`
}

// NewDnMapShared instantiates a new DnMapShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnMapShared(fromDNPattern string, toDNPattern string) *DnMapShared {
	this := DnMapShared{}
	this.FromDNPattern = fromDNPattern
	this.ToDNPattern = toDNPattern
	return &this
}

// NewDnMapSharedWithDefaults instantiates a new DnMapShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnMapSharedWithDefaults() *DnMapShared {
	this := DnMapShared{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *DnMapShared) GetSchemas() []EnumdnMapSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumdnMapSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapShared) GetSchemasOk() ([]EnumdnMapSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *DnMapShared) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumdnMapSchemaUrn and assigns it to the Schemas field.
func (o *DnMapShared) SetSchemas(v []EnumdnMapSchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DnMapShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DnMapShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DnMapShared) SetDescription(v string) {
	o.Description = &v
}

// GetFromDNPattern returns the FromDNPattern field value
func (o *DnMapShared) GetFromDNPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromDNPattern
}

// GetFromDNPatternOk returns a tuple with the FromDNPattern field value
// and a boolean to check if the value has been set.
func (o *DnMapShared) GetFromDNPatternOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FromDNPattern, true
}

// SetFromDNPattern sets field value
func (o *DnMapShared) SetFromDNPattern(v string) {
	o.FromDNPattern = v
}

// GetToDNPattern returns the ToDNPattern field value
func (o *DnMapShared) GetToDNPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToDNPattern
}

// GetToDNPatternOk returns a tuple with the ToDNPattern field value
// and a boolean to check if the value has been set.
func (o *DnMapShared) GetToDNPatternOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ToDNPattern, true
}

// SetToDNPattern sets field value
func (o *DnMapShared) SetToDNPattern(v string) {
	o.ToDNPattern = v
}

func (o DnMapShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["fromDNPattern"] = o.FromDNPattern
	}
	if true {
		toSerialize["toDNPattern"] = o.ToDNPattern
	}
	return json.Marshal(toSerialize)
}

type NullableDnMapShared struct {
	value *DnMapShared
	isSet bool
}

func (v NullableDnMapShared) Get() *DnMapShared {
	return v.value
}

func (v *NullableDnMapShared) Set(val *DnMapShared) {
	v.value = val
	v.isSet = true
}

func (v NullableDnMapShared) IsSet() bool {
	return v.isSet
}

func (v *NullableDnMapShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnMapShared(val *DnMapShared) *NullableDnMapShared {
	return &NullableDnMapShared{value: val, isSet: true}
}

func (v NullableDnMapShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnMapShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


