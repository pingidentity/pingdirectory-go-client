/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvelocityToolsVelocityContextProviderSchemaUrn the model 'EnumvelocityToolsVelocityContextProviderSchemaUrn'
type EnumvelocityToolsVelocityContextProviderSchemaUrn string

// List of Enumvelocity-tools-velocity-context-providerSchemaUrn
const (
	ENUMVELOCITYTOOLSVELOCITYCONTEXTPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VELOCITY_CONTEXT_PROVIDERVELOCITY_TOOLS EnumvelocityToolsVelocityContextProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:velocity-context-provider:velocity-tools"
)

// All allowed values of EnumvelocityToolsVelocityContextProviderSchemaUrn enum
var AllowedEnumvelocityToolsVelocityContextProviderSchemaUrnEnumValues = []EnumvelocityToolsVelocityContextProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:velocity-context-provider:velocity-tools",
}

func (v *EnumvelocityToolsVelocityContextProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvelocityToolsVelocityContextProviderSchemaUrn(value)
	for _, existing := range AllowedEnumvelocityToolsVelocityContextProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvelocityToolsVelocityContextProviderSchemaUrn", value)
}

// NewEnumvelocityToolsVelocityContextProviderSchemaUrnFromValue returns a pointer to a valid EnumvelocityToolsVelocityContextProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvelocityToolsVelocityContextProviderSchemaUrnFromValue(v string) (*EnumvelocityToolsVelocityContextProviderSchemaUrn, error) {
	ev := EnumvelocityToolsVelocityContextProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvelocityToolsVelocityContextProviderSchemaUrn: valid values are %v", v, AllowedEnumvelocityToolsVelocityContextProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvelocityToolsVelocityContextProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvelocityToolsVelocityContextProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvelocity-tools-velocity-context-providerSchemaUrn value
func (v EnumvelocityToolsVelocityContextProviderSchemaUrn) Ptr() *EnumvelocityToolsVelocityContextProviderSchemaUrn {
	return &v
}

type NullableEnumvelocityToolsVelocityContextProviderSchemaUrn struct {
	value *EnumvelocityToolsVelocityContextProviderSchemaUrn
	isSet bool
}

func (v NullableEnumvelocityToolsVelocityContextProviderSchemaUrn) Get() *EnumvelocityToolsVelocityContextProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumvelocityToolsVelocityContextProviderSchemaUrn) Set(val *EnumvelocityToolsVelocityContextProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvelocityToolsVelocityContextProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvelocityToolsVelocityContextProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvelocityToolsVelocityContextProviderSchemaUrn(val *EnumvelocityToolsVelocityContextProviderSchemaUrn) *NullableEnumvelocityToolsVelocityContextProviderSchemaUrn {
	return &NullableEnumvelocityToolsVelocityContextProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvelocityToolsVelocityContextProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvelocityToolsVelocityContextProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
