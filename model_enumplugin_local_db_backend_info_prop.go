/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginLocalDBBackendInfoProp Specifies the level of detail to include about the Local DB Backends.
type EnumpluginLocalDBBackendInfoProp string

// List of Enumplugin-localDBBackendInfoProp
const (
	ENUMPLUGINLOCALDBBACKENDINFOPROP_NONE     EnumpluginLocalDBBackendInfoProp = "none"
	ENUMPLUGINLOCALDBBACKENDINFOPROP_BASIC    EnumpluginLocalDBBackendInfoProp = "basic"
	ENUMPLUGINLOCALDBBACKENDINFOPROP_EXTENDED EnumpluginLocalDBBackendInfoProp = "extended"
	ENUMPLUGINLOCALDBBACKENDINFOPROP_VERBOSE  EnumpluginLocalDBBackendInfoProp = "verbose"
)

// All allowed values of EnumpluginLocalDBBackendInfoProp enum
var AllowedEnumpluginLocalDBBackendInfoPropEnumValues = []EnumpluginLocalDBBackendInfoProp{
	"none",
	"basic",
	"extended",
	"verbose",
}

func (v *EnumpluginLocalDBBackendInfoProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginLocalDBBackendInfoProp(value)
	for _, existing := range AllowedEnumpluginLocalDBBackendInfoPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginLocalDBBackendInfoProp", value)
}

// NewEnumpluginLocalDBBackendInfoPropFromValue returns a pointer to a valid EnumpluginLocalDBBackendInfoProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginLocalDBBackendInfoPropFromValue(v string) (*EnumpluginLocalDBBackendInfoProp, error) {
	ev := EnumpluginLocalDBBackendInfoProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginLocalDBBackendInfoProp: valid values are %v", v, AllowedEnumpluginLocalDBBackendInfoPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginLocalDBBackendInfoProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginLocalDBBackendInfoPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-localDBBackendInfoProp value
func (v EnumpluginLocalDBBackendInfoProp) Ptr() *EnumpluginLocalDBBackendInfoProp {
	return &v
}

type NullableEnumpluginLocalDBBackendInfoProp struct {
	value *EnumpluginLocalDBBackendInfoProp
	isSet bool
}

func (v NullableEnumpluginLocalDBBackendInfoProp) Get() *EnumpluginLocalDBBackendInfoProp {
	return v.value
}

func (v *NullableEnumpluginLocalDBBackendInfoProp) Set(val *EnumpluginLocalDBBackendInfoProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginLocalDBBackendInfoProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginLocalDBBackendInfoProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginLocalDBBackendInfoProp(val *EnumpluginLocalDBBackendInfoProp) *NullableEnumpluginLocalDBBackendInfoProp {
	return &NullableEnumpluginLocalDBBackendInfoProp{value: val, isSet: true}
}

func (v NullableEnumpluginLocalDBBackendInfoProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginLocalDBBackendInfoProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
