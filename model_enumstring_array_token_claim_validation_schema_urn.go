/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumstringArrayTokenClaimValidationSchemaUrn the model 'EnumstringArrayTokenClaimValidationSchemaUrn'
type EnumstringArrayTokenClaimValidationSchemaUrn string

// List of Enumstring-array-token-claim-validationSchemaUrn
const (
	ENUMSTRINGARRAYTOKENCLAIMVALIDATIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0TOKEN_CLAIM_VALIDATIONSTRING_ARRAY EnumstringArrayTokenClaimValidationSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:token-claim-validation:string-array"
)

// All allowed values of EnumstringArrayTokenClaimValidationSchemaUrn enum
var AllowedEnumstringArrayTokenClaimValidationSchemaUrnEnumValues = []EnumstringArrayTokenClaimValidationSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:token-claim-validation:string-array",
}

func (v *EnumstringArrayTokenClaimValidationSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumstringArrayTokenClaimValidationSchemaUrn(value)
	for _, existing := range AllowedEnumstringArrayTokenClaimValidationSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumstringArrayTokenClaimValidationSchemaUrn", value)
}

// NewEnumstringArrayTokenClaimValidationSchemaUrnFromValue returns a pointer to a valid EnumstringArrayTokenClaimValidationSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumstringArrayTokenClaimValidationSchemaUrnFromValue(v string) (*EnumstringArrayTokenClaimValidationSchemaUrn, error) {
	ev := EnumstringArrayTokenClaimValidationSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumstringArrayTokenClaimValidationSchemaUrn: valid values are %v", v, AllowedEnumstringArrayTokenClaimValidationSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumstringArrayTokenClaimValidationSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumstringArrayTokenClaimValidationSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumstring-array-token-claim-validationSchemaUrn value
func (v EnumstringArrayTokenClaimValidationSchemaUrn) Ptr() *EnumstringArrayTokenClaimValidationSchemaUrn {
	return &v
}

type NullableEnumstringArrayTokenClaimValidationSchemaUrn struct {
	value *EnumstringArrayTokenClaimValidationSchemaUrn
	isSet bool
}

func (v NullableEnumstringArrayTokenClaimValidationSchemaUrn) Get() *EnumstringArrayTokenClaimValidationSchemaUrn {
	return v.value
}

func (v *NullableEnumstringArrayTokenClaimValidationSchemaUrn) Set(val *EnumstringArrayTokenClaimValidationSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumstringArrayTokenClaimValidationSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumstringArrayTokenClaimValidationSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumstringArrayTokenClaimValidationSchemaUrn(val *EnumstringArrayTokenClaimValidationSchemaUrn) *NullableEnumstringArrayTokenClaimValidationSchemaUrn {
	return &NullableEnumstringArrayTokenClaimValidationSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumstringArrayTokenClaimValidationSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumstringArrayTokenClaimValidationSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
