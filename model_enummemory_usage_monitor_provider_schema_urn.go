/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnummemoryUsageMonitorProviderSchemaUrn the model 'EnummemoryUsageMonitorProviderSchemaUrn'
type EnummemoryUsageMonitorProviderSchemaUrn string

// List of Enummemory-usage-monitor-providerSchemaUrn
const (
	ENUMMEMORYUSAGEMONITORPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0MONITOR_PROVIDERMEMORY_USAGE EnummemoryUsageMonitorProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:monitor-provider:memory-usage"
)

// All allowed values of EnummemoryUsageMonitorProviderSchemaUrn enum
var AllowedEnummemoryUsageMonitorProviderSchemaUrnEnumValues = []EnummemoryUsageMonitorProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:monitor-provider:memory-usage",
}

func (v *EnummemoryUsageMonitorProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummemoryUsageMonitorProviderSchemaUrn(value)
	for _, existing := range AllowedEnummemoryUsageMonitorProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummemoryUsageMonitorProviderSchemaUrn", value)
}

// NewEnummemoryUsageMonitorProviderSchemaUrnFromValue returns a pointer to a valid EnummemoryUsageMonitorProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummemoryUsageMonitorProviderSchemaUrnFromValue(v string) (*EnummemoryUsageMonitorProviderSchemaUrn, error) {
	ev := EnummemoryUsageMonitorProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummemoryUsageMonitorProviderSchemaUrn: valid values are %v", v, AllowedEnummemoryUsageMonitorProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummemoryUsageMonitorProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummemoryUsageMonitorProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummemory-usage-monitor-providerSchemaUrn value
func (v EnummemoryUsageMonitorProviderSchemaUrn) Ptr() *EnummemoryUsageMonitorProviderSchemaUrn {
	return &v
}

type NullableEnummemoryUsageMonitorProviderSchemaUrn struct {
	value *EnummemoryUsageMonitorProviderSchemaUrn
	isSet bool
}

func (v NullableEnummemoryUsageMonitorProviderSchemaUrn) Get() *EnummemoryUsageMonitorProviderSchemaUrn {
	return v.value
}

func (v *NullableEnummemoryUsageMonitorProviderSchemaUrn) Set(val *EnummemoryUsageMonitorProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummemoryUsageMonitorProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummemoryUsageMonitorProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummemoryUsageMonitorProviderSchemaUrn(val *EnummemoryUsageMonitorProviderSchemaUrn) *NullableEnummemoryUsageMonitorProviderSchemaUrn {
	return &NullableEnummemoryUsageMonitorProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummemoryUsageMonitorProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummemoryUsageMonitorProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
