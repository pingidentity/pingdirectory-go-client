/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddAmazonSecretsManagerPassphraseProviderRequest struct for AddAmazonSecretsManagerPassphraseProviderRequest
type AddAmazonSecretsManagerPassphraseProviderRequest struct {
	// Name of the new Passphrase Provider
	ProviderName string `json:"providerName"`
	Schemas []EnumamazonSecretsManagerPassphraseProviderSchemaUrn `json:"schemas"`
	// The external server with information to use when interacting with the AWS Secrets Manager.
	AwsExternalServer string `json:"awsExternalServer"`
	// The Amazon Resource Name (ARN) or the user-friendly name of the secret to be retrieved.
	SecretID string `json:"secretID"`
	// The name of the JSON field whose value is the passphrase that will be retrieved.
	SecretFieldName string `json:"secretFieldName"`
	// The unique identifier for the version of the secret to be retrieved.
	SecretVersionID *string `json:"secretVersionID,omitempty"`
	// The staging label for the version of the secret to be retrieved.
	SecretVersionStage *string `json:"secretVersionStage,omitempty"`
	// The maximum length of time that the passphrase provider may cache the passphrase that has been read from Vault. A value of zero seconds indicates that the provider should always attempt to read the passphrase from Vault.
	MaxCacheDuration *string `json:"maxCacheDuration,omitempty"`
	// A description for this Passphrase Provider
	Description *string `json:"description,omitempty"`
	// Indicates whether this Passphrase Provider is enabled for use in the server.
	Enabled bool `json:"enabled"`
}

// NewAddAmazonSecretsManagerPassphraseProviderRequest instantiates a new AddAmazonSecretsManagerPassphraseProviderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddAmazonSecretsManagerPassphraseProviderRequest(providerName string, schemas []EnumamazonSecretsManagerPassphraseProviderSchemaUrn, awsExternalServer string, secretID string, secretFieldName string, enabled bool) *AddAmazonSecretsManagerPassphraseProviderRequest {
	this := AddAmazonSecretsManagerPassphraseProviderRequest{}
	this.ProviderName = providerName
	this.Schemas = schemas
	this.AwsExternalServer = awsExternalServer
	this.SecretID = secretID
	this.SecretFieldName = secretFieldName
	this.Enabled = enabled
	return &this
}

// NewAddAmazonSecretsManagerPassphraseProviderRequestWithDefaults instantiates a new AddAmazonSecretsManagerPassphraseProviderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddAmazonSecretsManagerPassphraseProviderRequestWithDefaults() *AddAmazonSecretsManagerPassphraseProviderRequest {
	this := AddAmazonSecretsManagerPassphraseProviderRequest{}
	return &this
}

// GetProviderName returns the ProviderName field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetProviderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetProviderName(v string) {
	o.ProviderName = v
}

// GetSchemas returns the Schemas field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSchemas() []EnumamazonSecretsManagerPassphraseProviderSchemaUrn {
	if o == nil {
		var ret []EnumamazonSecretsManagerPassphraseProviderSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSchemasOk() ([]EnumamazonSecretsManagerPassphraseProviderSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetSchemas(v []EnumamazonSecretsManagerPassphraseProviderSchemaUrn) {
	o.Schemas = v
}

// GetAwsExternalServer returns the AwsExternalServer field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetAwsExternalServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsExternalServer
}

// GetAwsExternalServerOk returns a tuple with the AwsExternalServer field value
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetAwsExternalServerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AwsExternalServer, true
}

// SetAwsExternalServer sets field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetAwsExternalServer(v string) {
	o.AwsExternalServer = v
}

// GetSecretID returns the SecretID field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretID
}

// GetSecretIDOk returns a tuple with the SecretID field value
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretIDOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SecretID, true
}

// SetSecretID sets field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetSecretID(v string) {
	o.SecretID = v
}

// GetSecretFieldName returns the SecretFieldName field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretFieldName
}

// GetSecretFieldNameOk returns a tuple with the SecretFieldName field value
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretFieldNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SecretFieldName, true
}

// SetSecretFieldName sets field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetSecretFieldName(v string) {
	o.SecretFieldName = v
}

// GetSecretVersionID returns the SecretVersionID field value if set, zero value otherwise.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretVersionID() string {
	if o == nil || isNil(o.SecretVersionID) {
		var ret string
		return ret
	}
	return *o.SecretVersionID
}

// GetSecretVersionIDOk returns a tuple with the SecretVersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretVersionIDOk() (*string, bool) {
	if o == nil || isNil(o.SecretVersionID) {
    return nil, false
	}
	return o.SecretVersionID, true
}

// HasSecretVersionID returns a boolean if a field has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) HasSecretVersionID() bool {
	if o != nil && !isNil(o.SecretVersionID) {
		return true
	}

	return false
}

// SetSecretVersionID gets a reference to the given string and assigns it to the SecretVersionID field.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetSecretVersionID(v string) {
	o.SecretVersionID = &v
}

// GetSecretVersionStage returns the SecretVersionStage field value if set, zero value otherwise.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretVersionStage() string {
	if o == nil || isNil(o.SecretVersionStage) {
		var ret string
		return ret
	}
	return *o.SecretVersionStage
}

// GetSecretVersionStageOk returns a tuple with the SecretVersionStage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetSecretVersionStageOk() (*string, bool) {
	if o == nil || isNil(o.SecretVersionStage) {
    return nil, false
	}
	return o.SecretVersionStage, true
}

// HasSecretVersionStage returns a boolean if a field has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) HasSecretVersionStage() bool {
	if o != nil && !isNil(o.SecretVersionStage) {
		return true
	}

	return false
}

// SetSecretVersionStage gets a reference to the given string and assigns it to the SecretVersionStage field.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetSecretVersionStage(v string) {
	o.SecretVersionStage = &v
}

// GetMaxCacheDuration returns the MaxCacheDuration field value if set, zero value otherwise.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetMaxCacheDuration() string {
	if o == nil || isNil(o.MaxCacheDuration) {
		var ret string
		return ret
	}
	return *o.MaxCacheDuration
}

// GetMaxCacheDurationOk returns a tuple with the MaxCacheDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetMaxCacheDurationOk() (*string, bool) {
	if o == nil || isNil(o.MaxCacheDuration) {
    return nil, false
	}
	return o.MaxCacheDuration, true
}

// HasMaxCacheDuration returns a boolean if a field has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) HasMaxCacheDuration() bool {
	if o != nil && !isNil(o.MaxCacheDuration) {
		return true
	}

	return false
}

// SetMaxCacheDuration gets a reference to the given string and assigns it to the MaxCacheDuration field.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetMaxCacheDuration(v string) {
	o.MaxCacheDuration = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddAmazonSecretsManagerPassphraseProviderRequest) SetEnabled(v bool) {
	o.Enabled = v
}

func (o AddAmazonSecretsManagerPassphraseProviderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["providerName"] = o.ProviderName
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["awsExternalServer"] = o.AwsExternalServer
	}
	if true {
		toSerialize["secretID"] = o.SecretID
	}
	if true {
		toSerialize["secretFieldName"] = o.SecretFieldName
	}
	if !isNil(o.SecretVersionID) {
		toSerialize["secretVersionID"] = o.SecretVersionID
	}
	if !isNil(o.SecretVersionStage) {
		toSerialize["secretVersionStage"] = o.SecretVersionStage
	}
	if !isNil(o.MaxCacheDuration) {
		toSerialize["maxCacheDuration"] = o.MaxCacheDuration
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableAddAmazonSecretsManagerPassphraseProviderRequest struct {
	value *AddAmazonSecretsManagerPassphraseProviderRequest
	isSet bool
}

func (v NullableAddAmazonSecretsManagerPassphraseProviderRequest) Get() *AddAmazonSecretsManagerPassphraseProviderRequest {
	return v.value
}

func (v *NullableAddAmazonSecretsManagerPassphraseProviderRequest) Set(val *AddAmazonSecretsManagerPassphraseProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddAmazonSecretsManagerPassphraseProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddAmazonSecretsManagerPassphraseProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddAmazonSecretsManagerPassphraseProviderRequest(val *AddAmazonSecretsManagerPassphraseProviderRequest) *NullableAddAmazonSecretsManagerPassphraseProviderRequest {
	return &NullableAddAmazonSecretsManagerPassphraseProviderRequest{value: val, isSet: true}
}

func (v NullableAddAmazonSecretsManagerPassphraseProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddAmazonSecretsManagerPassphraseProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


