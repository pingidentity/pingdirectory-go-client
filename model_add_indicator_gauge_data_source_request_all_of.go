/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddIndicatorGaugeDataSourceRequestAllOf struct for AddIndicatorGaugeDataSourceRequestAllOf
type AddIndicatorGaugeDataSourceRequestAllOf struct {
	// Name of the new Gauge Data Source
	SourceName string `json:"sourceName"`
}

// NewAddIndicatorGaugeDataSourceRequestAllOf instantiates a new AddIndicatorGaugeDataSourceRequestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddIndicatorGaugeDataSourceRequestAllOf(sourceName string) *AddIndicatorGaugeDataSourceRequestAllOf {
	this := AddIndicatorGaugeDataSourceRequestAllOf{}
	this.SourceName = sourceName
	return &this
}

// NewAddIndicatorGaugeDataSourceRequestAllOfWithDefaults instantiates a new AddIndicatorGaugeDataSourceRequestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddIndicatorGaugeDataSourceRequestAllOfWithDefaults() *AddIndicatorGaugeDataSourceRequestAllOf {
	this := AddIndicatorGaugeDataSourceRequestAllOf{}
	return &this
}

// GetSourceName returns the SourceName field value
func (o *AddIndicatorGaugeDataSourceRequestAllOf) GetSourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value
// and a boolean to check if the value has been set.
func (o *AddIndicatorGaugeDataSourceRequestAllOf) GetSourceNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SourceName, true
}

// SetSourceName sets field value
func (o *AddIndicatorGaugeDataSourceRequestAllOf) SetSourceName(v string) {
	o.SourceName = v
}

func (o AddIndicatorGaugeDataSourceRequestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceName"] = o.SourceName
	}
	return json.Marshal(toSerialize)
}

type NullableAddIndicatorGaugeDataSourceRequestAllOf struct {
	value *AddIndicatorGaugeDataSourceRequestAllOf
	isSet bool
}

func (v NullableAddIndicatorGaugeDataSourceRequestAllOf) Get() *AddIndicatorGaugeDataSourceRequestAllOf {
	return v.value
}

func (v *NullableAddIndicatorGaugeDataSourceRequestAllOf) Set(val *AddIndicatorGaugeDataSourceRequestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIndicatorGaugeDataSourceRequestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIndicatorGaugeDataSourceRequestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIndicatorGaugeDataSourceRequestAllOf(val *AddIndicatorGaugeDataSourceRequestAllOf) *NullableAddIndicatorGaugeDataSourceRequestAllOf {
	return &NullableAddIndicatorGaugeDataSourceRequestAllOf{value: val, isSet: true}
}

func (v NullableAddIndicatorGaugeDataSourceRequestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIndicatorGaugeDataSourceRequestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


