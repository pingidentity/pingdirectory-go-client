/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TrustedCertificateShared struct for TrustedCertificateShared
type TrustedCertificateShared struct {
	Schemas []EnumtrustedCertificateSchemaUrn `json:"schemas,omitempty"`
	// The PEM-encoded X.509v3 certificate.
	Certificate string `json:"certificate"`
}

// NewTrustedCertificateShared instantiates a new TrustedCertificateShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedCertificateShared(certificate string) *TrustedCertificateShared {
	this := TrustedCertificateShared{}
	this.Certificate = certificate
	return &this
}

// NewTrustedCertificateSharedWithDefaults instantiates a new TrustedCertificateShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedCertificateSharedWithDefaults() *TrustedCertificateShared {
	this := TrustedCertificateShared{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *TrustedCertificateShared) GetSchemas() []EnumtrustedCertificateSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumtrustedCertificateSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateShared) GetSchemasOk() ([]EnumtrustedCertificateSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
    return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *TrustedCertificateShared) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumtrustedCertificateSchemaUrn and assigns it to the Schemas field.
func (o *TrustedCertificateShared) SetSchemas(v []EnumtrustedCertificateSchemaUrn) {
	o.Schemas = v
}

// GetCertificate returns the Certificate field value
func (o *TrustedCertificateShared) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *TrustedCertificateShared) GetCertificateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *TrustedCertificateShared) SetCertificate(v string) {
	o.Certificate = v
}

func (o TrustedCertificateShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["certificate"] = o.Certificate
	}
	return json.Marshal(toSerialize)
}

type NullableTrustedCertificateShared struct {
	value *TrustedCertificateShared
	isSet bool
}

func (v NullableTrustedCertificateShared) Get() *TrustedCertificateShared {
	return v.value
}

func (v *NullableTrustedCertificateShared) Set(val *TrustedCertificateShared) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedCertificateShared) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedCertificateShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedCertificateShared(val *TrustedCertificateShared) *NullableTrustedCertificateShared {
	return &NullableTrustedCertificateShared{value: val, isSet: true}
}

func (v NullableTrustedCertificateShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedCertificateShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


