/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddOauthTokenHandlerRequest - struct for AddOauthTokenHandlerRequest
type AddOauthTokenHandlerRequest struct {
	AddGroovyScriptedOauthTokenHandlerRequest *AddGroovyScriptedOauthTokenHandlerRequest
	AddThirdPartyOauthTokenHandlerRequest *AddThirdPartyOauthTokenHandlerRequest
}

// AddGroovyScriptedOauthTokenHandlerRequestAsAddOauthTokenHandlerRequest is a convenience function that returns AddGroovyScriptedOauthTokenHandlerRequest wrapped in AddOauthTokenHandlerRequest
func AddGroovyScriptedOauthTokenHandlerRequestAsAddOauthTokenHandlerRequest(v *AddGroovyScriptedOauthTokenHandlerRequest) AddOauthTokenHandlerRequest {
	return AddOauthTokenHandlerRequest{
		AddGroovyScriptedOauthTokenHandlerRequest: v,
	}
}

// AddThirdPartyOauthTokenHandlerRequestAsAddOauthTokenHandlerRequest is a convenience function that returns AddThirdPartyOauthTokenHandlerRequest wrapped in AddOauthTokenHandlerRequest
func AddThirdPartyOauthTokenHandlerRequestAsAddOauthTokenHandlerRequest(v *AddThirdPartyOauthTokenHandlerRequest) AddOauthTokenHandlerRequest {
	return AddOauthTokenHandlerRequest{
		AddThirdPartyOauthTokenHandlerRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddOauthTokenHandlerRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddGroovyScriptedOauthTokenHandlerRequest
	err = newStrictDecoder(data).Decode(&dst.AddGroovyScriptedOauthTokenHandlerRequest)
	if err == nil {
		jsonAddGroovyScriptedOauthTokenHandlerRequest, _ := json.Marshal(dst.AddGroovyScriptedOauthTokenHandlerRequest)
		if string(jsonAddGroovyScriptedOauthTokenHandlerRequest) == "{}" { // empty struct
			dst.AddGroovyScriptedOauthTokenHandlerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddGroovyScriptedOauthTokenHandlerRequest = nil
	}

	// try to unmarshal data into AddThirdPartyOauthTokenHandlerRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyOauthTokenHandlerRequest)
	if err == nil {
		jsonAddThirdPartyOauthTokenHandlerRequest, _ := json.Marshal(dst.AddThirdPartyOauthTokenHandlerRequest)
		if string(jsonAddThirdPartyOauthTokenHandlerRequest) == "{}" { // empty struct
			dst.AddThirdPartyOauthTokenHandlerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyOauthTokenHandlerRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddGroovyScriptedOauthTokenHandlerRequest = nil
		dst.AddThirdPartyOauthTokenHandlerRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddOauthTokenHandlerRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddOauthTokenHandlerRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddOauthTokenHandlerRequest) MarshalJSON() ([]byte, error) {
	if src.AddGroovyScriptedOauthTokenHandlerRequest != nil {
		return json.Marshal(&src.AddGroovyScriptedOauthTokenHandlerRequest)
	}

	if src.AddThirdPartyOauthTokenHandlerRequest != nil {
		return json.Marshal(&src.AddThirdPartyOauthTokenHandlerRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddOauthTokenHandlerRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddGroovyScriptedOauthTokenHandlerRequest != nil {
		return obj.AddGroovyScriptedOauthTokenHandlerRequest
	}

	if obj.AddThirdPartyOauthTokenHandlerRequest != nil {
		return obj.AddThirdPartyOauthTokenHandlerRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddOauthTokenHandlerRequest struct {
	value *AddOauthTokenHandlerRequest
	isSet bool
}

func (v NullableAddOauthTokenHandlerRequest) Get() *AddOauthTokenHandlerRequest {
	return v.value
}

func (v *NullableAddOauthTokenHandlerRequest) Set(val *AddOauthTokenHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOauthTokenHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOauthTokenHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOauthTokenHandlerRequest(val *AddOauthTokenHandlerRequest) *NullableAddOauthTokenHandlerRequest {
	return &NullableAddOauthTokenHandlerRequest{value: val, isSet: true}
}

func (v NullableAddOauthTokenHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOauthTokenHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


