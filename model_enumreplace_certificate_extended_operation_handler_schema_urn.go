/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplaceCertificateExtendedOperationHandlerSchemaUrn the model 'EnumreplaceCertificateExtendedOperationHandlerSchemaUrn'
type EnumreplaceCertificateExtendedOperationHandlerSchemaUrn string

// List of Enumreplace-certificate-extended-operation-handlerSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERREPLACE_CERTIFICATE EnumreplaceCertificateExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:replace-certificate"
)

// All allowed values of EnumreplaceCertificateExtendedOperationHandlerSchemaUrn enum
var AllowedEnumreplaceCertificateExtendedOperationHandlerSchemaUrnEnumValues = []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:replace-certificate",
}

func (v *EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplaceCertificateExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumreplaceCertificateExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplaceCertificateExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumreplaceCertificateExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumreplaceCertificateExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplaceCertificateExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumreplaceCertificateExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumreplaceCertificateExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplaceCertificateExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumreplaceCertificateExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumreplaceCertificateExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplace-certificate-extended-operation-handlerSchemaUrn value
func (v EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) Ptr() *EnumreplaceCertificateExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn struct {
	value *EnumreplaceCertificateExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn) Get() *EnumreplaceCertificateExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn) Set(val *EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn(val *EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) *NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn {
	return &NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplaceCertificateExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

