/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Enumpbkdf2PasswordStorageSchemeSchemaUrn the model 'Enumpbkdf2PasswordStorageSchemeSchemaUrn'
type Enumpbkdf2PasswordStorageSchemeSchemaUrn string

// List of Enumpbkdf2-password-storage-schemeSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEPBKDF2 Enumpbkdf2PasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:pbkdf2"
)

// All allowed values of Enumpbkdf2PasswordStorageSchemeSchemaUrn enum
var AllowedEnumpbkdf2PasswordStorageSchemeSchemaUrnEnumValues = []Enumpbkdf2PasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:pbkdf2",
}

func (v *Enumpbkdf2PasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumpbkdf2PasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumpbkdf2PasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumpbkdf2PasswordStorageSchemeSchemaUrn", value)
}

// NewEnumpbkdf2PasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid Enumpbkdf2PasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpbkdf2PasswordStorageSchemeSchemaUrnFromValue(v string) (*Enumpbkdf2PasswordStorageSchemeSchemaUrn, error) {
	ev := Enumpbkdf2PasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumpbkdf2PasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumpbkdf2PasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumpbkdf2PasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpbkdf2PasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpbkdf2-password-storage-schemeSchemaUrn value
func (v Enumpbkdf2PasswordStorageSchemeSchemaUrn) Ptr() *Enumpbkdf2PasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn struct {
	value *Enumpbkdf2PasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn) Get() *Enumpbkdf2PasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn) Set(val *Enumpbkdf2PasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpbkdf2PasswordStorageSchemeSchemaUrn(val *Enumpbkdf2PasswordStorageSchemeSchemaUrn) *NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn {
	return &NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpbkdf2PasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

