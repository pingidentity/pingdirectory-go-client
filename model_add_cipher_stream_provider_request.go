/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddCipherStreamProviderRequest - struct for AddCipherStreamProviderRequest
type AddCipherStreamProviderRequest struct {
	AddAmazonKeyManagementServiceCipherStreamProviderRequest *AddAmazonKeyManagementServiceCipherStreamProviderRequest
	AddAmazonSecretsManagerCipherStreamProviderRequest *AddAmazonSecretsManagerCipherStreamProviderRequest
	AddAzureKeyVaultCipherStreamProviderRequest *AddAzureKeyVaultCipherStreamProviderRequest
	AddConjurCipherStreamProviderRequest *AddConjurCipherStreamProviderRequest
	AddFileBasedCipherStreamProviderRequest *AddFileBasedCipherStreamProviderRequest
	AddPkcs11CipherStreamProviderRequest *AddPkcs11CipherStreamProviderRequest
	AddThirdPartyCipherStreamProviderRequest *AddThirdPartyCipherStreamProviderRequest
	AddVaultCipherStreamProviderRequest *AddVaultCipherStreamProviderRequest
	AddWaitForPassphraseCipherStreamProviderRequest *AddWaitForPassphraseCipherStreamProviderRequest
}

// AddAmazonKeyManagementServiceCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddAmazonKeyManagementServiceCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddAmazonKeyManagementServiceCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddAmazonKeyManagementServiceCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddAmazonKeyManagementServiceCipherStreamProviderRequest: v,
	}
}

// AddAmazonSecretsManagerCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddAmazonSecretsManagerCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddAmazonSecretsManagerCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddAmazonSecretsManagerCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddAmazonSecretsManagerCipherStreamProviderRequest: v,
	}
}

// AddAzureKeyVaultCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddAzureKeyVaultCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddAzureKeyVaultCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddAzureKeyVaultCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddAzureKeyVaultCipherStreamProviderRequest: v,
	}
}

// AddConjurCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddConjurCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddConjurCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddConjurCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddConjurCipherStreamProviderRequest: v,
	}
}

// AddFileBasedCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddFileBasedCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddFileBasedCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddFileBasedCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddFileBasedCipherStreamProviderRequest: v,
	}
}

// AddPkcs11CipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddPkcs11CipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddPkcs11CipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddPkcs11CipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddPkcs11CipherStreamProviderRequest: v,
	}
}

// AddThirdPartyCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddThirdPartyCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddThirdPartyCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddThirdPartyCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddThirdPartyCipherStreamProviderRequest: v,
	}
}

// AddVaultCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddVaultCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddVaultCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddVaultCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddVaultCipherStreamProviderRequest: v,
	}
}

// AddWaitForPassphraseCipherStreamProviderRequestAsAddCipherStreamProviderRequest is a convenience function that returns AddWaitForPassphraseCipherStreamProviderRequest wrapped in AddCipherStreamProviderRequest
func AddWaitForPassphraseCipherStreamProviderRequestAsAddCipherStreamProviderRequest(v *AddWaitForPassphraseCipherStreamProviderRequest) AddCipherStreamProviderRequest {
	return AddCipherStreamProviderRequest{
		AddWaitForPassphraseCipherStreamProviderRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddCipherStreamProviderRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAmazonKeyManagementServiceCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddAmazonKeyManagementServiceCipherStreamProviderRequest)
	if err == nil {
		jsonAddAmazonKeyManagementServiceCipherStreamProviderRequest, _ := json.Marshal(dst.AddAmazonKeyManagementServiceCipherStreamProviderRequest)
		if string(jsonAddAmazonKeyManagementServiceCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddAmazonKeyManagementServiceCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAmazonKeyManagementServiceCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddAmazonSecretsManagerCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddAmazonSecretsManagerCipherStreamProviderRequest)
	if err == nil {
		jsonAddAmazonSecretsManagerCipherStreamProviderRequest, _ := json.Marshal(dst.AddAmazonSecretsManagerCipherStreamProviderRequest)
		if string(jsonAddAmazonSecretsManagerCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddAmazonSecretsManagerCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAmazonSecretsManagerCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddAzureKeyVaultCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddAzureKeyVaultCipherStreamProviderRequest)
	if err == nil {
		jsonAddAzureKeyVaultCipherStreamProviderRequest, _ := json.Marshal(dst.AddAzureKeyVaultCipherStreamProviderRequest)
		if string(jsonAddAzureKeyVaultCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddAzureKeyVaultCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAzureKeyVaultCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddConjurCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddConjurCipherStreamProviderRequest)
	if err == nil {
		jsonAddConjurCipherStreamProviderRequest, _ := json.Marshal(dst.AddConjurCipherStreamProviderRequest)
		if string(jsonAddConjurCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddConjurCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddConjurCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddFileBasedCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddFileBasedCipherStreamProviderRequest)
	if err == nil {
		jsonAddFileBasedCipherStreamProviderRequest, _ := json.Marshal(dst.AddFileBasedCipherStreamProviderRequest)
		if string(jsonAddFileBasedCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddFileBasedCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFileBasedCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddPkcs11CipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddPkcs11CipherStreamProviderRequest)
	if err == nil {
		jsonAddPkcs11CipherStreamProviderRequest, _ := json.Marshal(dst.AddPkcs11CipherStreamProviderRequest)
		if string(jsonAddPkcs11CipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddPkcs11CipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddPkcs11CipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddThirdPartyCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyCipherStreamProviderRequest)
	if err == nil {
		jsonAddThirdPartyCipherStreamProviderRequest, _ := json.Marshal(dst.AddThirdPartyCipherStreamProviderRequest)
		if string(jsonAddThirdPartyCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddThirdPartyCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddVaultCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddVaultCipherStreamProviderRequest)
	if err == nil {
		jsonAddVaultCipherStreamProviderRequest, _ := json.Marshal(dst.AddVaultCipherStreamProviderRequest)
		if string(jsonAddVaultCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddVaultCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddVaultCipherStreamProviderRequest = nil
	}

	// try to unmarshal data into AddWaitForPassphraseCipherStreamProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddWaitForPassphraseCipherStreamProviderRequest)
	if err == nil {
		jsonAddWaitForPassphraseCipherStreamProviderRequest, _ := json.Marshal(dst.AddWaitForPassphraseCipherStreamProviderRequest)
		if string(jsonAddWaitForPassphraseCipherStreamProviderRequest) == "{}" { // empty struct
			dst.AddWaitForPassphraseCipherStreamProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddWaitForPassphraseCipherStreamProviderRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAmazonKeyManagementServiceCipherStreamProviderRequest = nil
		dst.AddAmazonSecretsManagerCipherStreamProviderRequest = nil
		dst.AddAzureKeyVaultCipherStreamProviderRequest = nil
		dst.AddConjurCipherStreamProviderRequest = nil
		dst.AddFileBasedCipherStreamProviderRequest = nil
		dst.AddPkcs11CipherStreamProviderRequest = nil
		dst.AddThirdPartyCipherStreamProviderRequest = nil
		dst.AddVaultCipherStreamProviderRequest = nil
		dst.AddWaitForPassphraseCipherStreamProviderRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddCipherStreamProviderRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddCipherStreamProviderRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddCipherStreamProviderRequest) MarshalJSON() ([]byte, error) {
	if src.AddAmazonKeyManagementServiceCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddAmazonKeyManagementServiceCipherStreamProviderRequest)
	}

	if src.AddAmazonSecretsManagerCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddAmazonSecretsManagerCipherStreamProviderRequest)
	}

	if src.AddAzureKeyVaultCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddAzureKeyVaultCipherStreamProviderRequest)
	}

	if src.AddConjurCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddConjurCipherStreamProviderRequest)
	}

	if src.AddFileBasedCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddFileBasedCipherStreamProviderRequest)
	}

	if src.AddPkcs11CipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddPkcs11CipherStreamProviderRequest)
	}

	if src.AddThirdPartyCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddThirdPartyCipherStreamProviderRequest)
	}

	if src.AddVaultCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddVaultCipherStreamProviderRequest)
	}

	if src.AddWaitForPassphraseCipherStreamProviderRequest != nil {
		return json.Marshal(&src.AddWaitForPassphraseCipherStreamProviderRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddCipherStreamProviderRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddAmazonKeyManagementServiceCipherStreamProviderRequest != nil {
		return obj.AddAmazonKeyManagementServiceCipherStreamProviderRequest
	}

	if obj.AddAmazonSecretsManagerCipherStreamProviderRequest != nil {
		return obj.AddAmazonSecretsManagerCipherStreamProviderRequest
	}

	if obj.AddAzureKeyVaultCipherStreamProviderRequest != nil {
		return obj.AddAzureKeyVaultCipherStreamProviderRequest
	}

	if obj.AddConjurCipherStreamProviderRequest != nil {
		return obj.AddConjurCipherStreamProviderRequest
	}

	if obj.AddFileBasedCipherStreamProviderRequest != nil {
		return obj.AddFileBasedCipherStreamProviderRequest
	}

	if obj.AddPkcs11CipherStreamProviderRequest != nil {
		return obj.AddPkcs11CipherStreamProviderRequest
	}

	if obj.AddThirdPartyCipherStreamProviderRequest != nil {
		return obj.AddThirdPartyCipherStreamProviderRequest
	}

	if obj.AddVaultCipherStreamProviderRequest != nil {
		return obj.AddVaultCipherStreamProviderRequest
	}

	if obj.AddWaitForPassphraseCipherStreamProviderRequest != nil {
		return obj.AddWaitForPassphraseCipherStreamProviderRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddCipherStreamProviderRequest struct {
	value *AddCipherStreamProviderRequest
	isSet bool
}

func (v NullableAddCipherStreamProviderRequest) Get() *AddCipherStreamProviderRequest {
	return v.value
}

func (v *NullableAddCipherStreamProviderRequest) Set(val *AddCipherStreamProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCipherStreamProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCipherStreamProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCipherStreamProviderRequest(val *AddCipherStreamProviderRequest) *NullableAddCipherStreamProviderRequest {
	return &NullableAddCipherStreamProviderRequest{value: val, isSet: true}
}

func (v NullableAddCipherStreamProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCipherStreamProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


