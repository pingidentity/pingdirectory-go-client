/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// NotificationManagerApiService NotificationManagerApi service
type NotificationManagerApiService service

type ApiAddNotificationManagerRequest struct {
	ctx                                     context.Context
	ApiService                              *NotificationManagerApiService
	addThirdPartyNotificationManagerRequest *AddThirdPartyNotificationManagerRequest
}

// Create a new Notification Manager in the config
func (r ApiAddNotificationManagerRequest) AddThirdPartyNotificationManagerRequest(addThirdPartyNotificationManagerRequest AddThirdPartyNotificationManagerRequest) ApiAddNotificationManagerRequest {
	r.addThirdPartyNotificationManagerRequest = &addThirdPartyNotificationManagerRequest
	return r
}

func (r ApiAddNotificationManagerRequest) Execute() (*ThirdPartyNotificationManagerResponse, *http.Response, error) {
	return r.ApiService.AddNotificationManagerExecute(r)
}

/*
AddNotificationManager Add a new Notification Manager to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddNotificationManagerRequest
*/
func (a *NotificationManagerApiService) AddNotificationManager(ctx context.Context) ApiAddNotificationManagerRequest {
	return ApiAddNotificationManagerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ThirdPartyNotificationManagerResponse
func (a *NotificationManagerApiService) AddNotificationManagerExecute(r ApiAddNotificationManagerRequest) (*ThirdPartyNotificationManagerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ThirdPartyNotificationManagerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationManagerApiService.AddNotificationManager")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification-managers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addThirdPartyNotificationManagerRequest == nil {
		return localVarReturnValue, nil, reportError("addThirdPartyNotificationManagerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addThirdPartyNotificationManagerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNotificationManagerRequest struct {
	ctx                     context.Context
	ApiService              *NotificationManagerApiService
	notificationManagerName string
}

func (r ApiDeleteNotificationManagerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNotificationManagerExecute(r)
}

/*
DeleteNotificationManager Delete a Notification Manager

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param notificationManagerName Name of the Notification Manager
	@return ApiDeleteNotificationManagerRequest
*/
func (a *NotificationManagerApiService) DeleteNotificationManager(ctx context.Context, notificationManagerName string) ApiDeleteNotificationManagerRequest {
	return ApiDeleteNotificationManagerRequest{
		ApiService:              a,
		ctx:                     ctx,
		notificationManagerName: notificationManagerName,
	}
}

// Execute executes the request
func (a *NotificationManagerApiService) DeleteNotificationManagerExecute(r ApiDeleteNotificationManagerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationManagerApiService.DeleteNotificationManager")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification-managers/{notification-manager-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"notification-manager-name"+"}", url.PathEscape(parameterValueToString(r.notificationManagerName, "notificationManagerName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNotificationManagerRequest struct {
	ctx                     context.Context
	ApiService              *NotificationManagerApiService
	notificationManagerName string
}

func (r ApiGetNotificationManagerRequest) Execute() (*ThirdPartyNotificationManagerResponse, *http.Response, error) {
	return r.ApiService.GetNotificationManagerExecute(r)
}

/*
GetNotificationManager Returns a single Notification Manager

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param notificationManagerName Name of the Notification Manager
	@return ApiGetNotificationManagerRequest
*/
func (a *NotificationManagerApiService) GetNotificationManager(ctx context.Context, notificationManagerName string) ApiGetNotificationManagerRequest {
	return ApiGetNotificationManagerRequest{
		ApiService:              a,
		ctx:                     ctx,
		notificationManagerName: notificationManagerName,
	}
}

// Execute executes the request
//
//	@return ThirdPartyNotificationManagerResponse
func (a *NotificationManagerApiService) GetNotificationManagerExecute(r ApiGetNotificationManagerRequest) (*ThirdPartyNotificationManagerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ThirdPartyNotificationManagerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationManagerApiService.GetNotificationManager")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification-managers/{notification-manager-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"notification-manager-name"+"}", url.PathEscape(parameterValueToString(r.notificationManagerName, "notificationManagerName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNotificationManagerRequest struct {
	ctx                     context.Context
	ApiService              *NotificationManagerApiService
	notificationManagerName string
	updateRequest           *UpdateRequest
}

// Update an existing Notification Manager
func (r ApiUpdateNotificationManagerRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateNotificationManagerRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateNotificationManagerRequest) Execute() (*ThirdPartyNotificationManagerResponse, *http.Response, error) {
	return r.ApiService.UpdateNotificationManagerExecute(r)
}

/*
UpdateNotificationManager Update an existing Notification Manager by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param notificationManagerName Name of the Notification Manager
	@return ApiUpdateNotificationManagerRequest
*/
func (a *NotificationManagerApiService) UpdateNotificationManager(ctx context.Context, notificationManagerName string) ApiUpdateNotificationManagerRequest {
	return ApiUpdateNotificationManagerRequest{
		ApiService:              a,
		ctx:                     ctx,
		notificationManagerName: notificationManagerName,
	}
}

// Execute executes the request
//
//	@return ThirdPartyNotificationManagerResponse
func (a *NotificationManagerApiService) UpdateNotificationManagerExecute(r ApiUpdateNotificationManagerRequest) (*ThirdPartyNotificationManagerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ThirdPartyNotificationManagerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotificationManagerApiService.UpdateNotificationManager")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notification-managers/{notification-manager-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"notification-manager-name"+"}", url.PathEscape(parameterValueToString(r.notificationManagerName, "notificationManagerName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
