/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcannedResponseWorkQueueSchemaUrn the model 'EnumcannedResponseWorkQueueSchemaUrn'
type EnumcannedResponseWorkQueueSchemaUrn string

// List of Enumcanned-response-work-queueSchemaUrn
const (
	ENUMCANNEDRESPONSEWORKQUEUESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0WORK_QUEUECANNED_RESPONSE EnumcannedResponseWorkQueueSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:work-queue:canned-response"
)

// All allowed values of EnumcannedResponseWorkQueueSchemaUrn enum
var AllowedEnumcannedResponseWorkQueueSchemaUrnEnumValues = []EnumcannedResponseWorkQueueSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:work-queue:canned-response",
}

func (v *EnumcannedResponseWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcannedResponseWorkQueueSchemaUrn(value)
	for _, existing := range AllowedEnumcannedResponseWorkQueueSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcannedResponseWorkQueueSchemaUrn", value)
}

// NewEnumcannedResponseWorkQueueSchemaUrnFromValue returns a pointer to a valid EnumcannedResponseWorkQueueSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcannedResponseWorkQueueSchemaUrnFromValue(v string) (*EnumcannedResponseWorkQueueSchemaUrn, error) {
	ev := EnumcannedResponseWorkQueueSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcannedResponseWorkQueueSchemaUrn: valid values are %v", v, AllowedEnumcannedResponseWorkQueueSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcannedResponseWorkQueueSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcannedResponseWorkQueueSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcanned-response-work-queueSchemaUrn value
func (v EnumcannedResponseWorkQueueSchemaUrn) Ptr() *EnumcannedResponseWorkQueueSchemaUrn {
	return &v
}

type NullableEnumcannedResponseWorkQueueSchemaUrn struct {
	value *EnumcannedResponseWorkQueueSchemaUrn
	isSet bool
}

func (v NullableEnumcannedResponseWorkQueueSchemaUrn) Get() *EnumcannedResponseWorkQueueSchemaUrn {
	return v.value
}

func (v *NullableEnumcannedResponseWorkQueueSchemaUrn) Set(val *EnumcannedResponseWorkQueueSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcannedResponseWorkQueueSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcannedResponseWorkQueueSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcannedResponseWorkQueueSchemaUrn(val *EnumcannedResponseWorkQueueSchemaUrn) *NullableEnumcannedResponseWorkQueueSchemaUrn {
	return &NullableEnumcannedResponseWorkQueueSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcannedResponseWorkQueueSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcannedResponseWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
