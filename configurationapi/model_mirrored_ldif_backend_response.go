/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the MirroredLdifBackendResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MirroredLdifBackendResponse{}

// MirroredLdifBackendResponse struct for MirroredLdifBackendResponse
type MirroredLdifBackendResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas                                       []EnummirroredLdifBackendSchemaUrn                 `json:"schemas"`
	// Name of the Backend
	Id string `json:"id"`
	// The amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. A lower value will make for a quicker failover in the event of a failure, but it will also cause more frequent traffic among the peers.
	MirroredSubtreePeerPollingInterval *string `json:"mirroredSubtreePeerPollingInterval,omitempty"`
	// Specifies the maximum length of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology.
	MirroredSubtreeEntryUpdateTimeout *string `json:"mirroredSubtreeEntryUpdateTimeout,omitempty"`
	// Specifies the maximum length of time to wait for a search operation to complete. Search requests that take longer than this timeout will be canceled and considered failures.
	MirroredSubtreeSearchTimeout *string `json:"mirroredSubtreeSearchTimeout,omitempty"`
	// Specifies the set of peer servers onto which updates should be mirrored. The local server should not be included in this set, but if it is, then it will just be ignored.
	PeerServer                         []string                                            `json:"peerServer,omitempty"`
	MirroredSubtreePreferredMasterType []EnumbackendMirroredSubtreePreferredMasterTypeProp `json:"mirroredSubtreePreferredMasterType,omitempty"`
	// Specifies the numeric value of the result code to be assumed for update operations (add, delete, modify and modify-dn) targeted to this backend.
	SimulatedResultCode *int64                         `json:"simulatedResultCode,omitempty"`
	WritabilityMode     EnumbackendWritabilityModeProp `json:"writabilityMode"`
	// Indicates whether the backend should be considered a private backend, which indicates that it is used for storing operational data rather than user-defined information.
	IsPrivateBackend *bool `json:"isPrivateBackend,omitempty"`
	// Specifies the path to the LDIF file containing the data for this backend.
	LdifFile string `json:"ldifFile"`
	// Specifies a name to identify the associated backend.
	BackendID string `json:"backendID"`
	// A description for this Backend
	Description *string `json:"description,omitempty"`
	// Indicates whether the backend is enabled in the server.
	Enabled bool `json:"enabled"`
	// Specifies the base DN(s) for the data that the backend handles.
	BaseDN []string `json:"baseDN"`
	// Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
	SetDegradedAlertWhenDisabled *bool `json:"setDegradedAlertWhenDisabled,omitempty"`
	// Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
	ReturnUnavailableWhenDisabled *bool `json:"returnUnavailableWhenDisabled,omitempty"`
	// Specifies the permissions that should be applied to files and directories created by a backup of the backend.
	BackupFilePermissions *string `json:"backupFilePermissions,omitempty"`
	// Specifies a notification manager for changes resulting from operations processed through this Backend
	NotificationManager *string `json:"notificationManager,omitempty"`
}

// NewMirroredLdifBackendResponse instantiates a new MirroredLdifBackendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMirroredLdifBackendResponse(schemas []EnummirroredLdifBackendSchemaUrn, id string, writabilityMode EnumbackendWritabilityModeProp, ldifFile string, backendID string, enabled bool, baseDN []string) *MirroredLdifBackendResponse {
	this := MirroredLdifBackendResponse{}
	this.Schemas = schemas
	this.Id = id
	this.WritabilityMode = writabilityMode
	this.LdifFile = ldifFile
	this.BackendID = backendID
	this.Enabled = enabled
	this.BaseDN = baseDN
	return &this
}

// NewMirroredLdifBackendResponseWithDefaults instantiates a new MirroredLdifBackendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMirroredLdifBackendResponseWithDefaults() *MirroredLdifBackendResponse {
	this := MirroredLdifBackendResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *MirroredLdifBackendResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *MirroredLdifBackendResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value
func (o *MirroredLdifBackendResponse) GetSchemas() []EnummirroredLdifBackendSchemaUrn {
	if o == nil {
		var ret []EnummirroredLdifBackendSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetSchemasOk() ([]EnummirroredLdifBackendSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *MirroredLdifBackendResponse) SetSchemas(v []EnummirroredLdifBackendSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *MirroredLdifBackendResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MirroredLdifBackendResponse) SetId(v string) {
	o.Id = v
}

// GetMirroredSubtreePeerPollingInterval returns the MirroredSubtreePeerPollingInterval field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreePeerPollingInterval() string {
	if o == nil || IsNil(o.MirroredSubtreePeerPollingInterval) {
		var ret string
		return ret
	}
	return *o.MirroredSubtreePeerPollingInterval
}

// GetMirroredSubtreePeerPollingIntervalOk returns a tuple with the MirroredSubtreePeerPollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreePeerPollingIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.MirroredSubtreePeerPollingInterval) {
		return nil, false
	}
	return o.MirroredSubtreePeerPollingInterval, true
}

// HasMirroredSubtreePeerPollingInterval returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasMirroredSubtreePeerPollingInterval() bool {
	if o != nil && !IsNil(o.MirroredSubtreePeerPollingInterval) {
		return true
	}

	return false
}

// SetMirroredSubtreePeerPollingInterval gets a reference to the given string and assigns it to the MirroredSubtreePeerPollingInterval field.
func (o *MirroredLdifBackendResponse) SetMirroredSubtreePeerPollingInterval(v string) {
	o.MirroredSubtreePeerPollingInterval = &v
}

// GetMirroredSubtreeEntryUpdateTimeout returns the MirroredSubtreeEntryUpdateTimeout field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreeEntryUpdateTimeout() string {
	if o == nil || IsNil(o.MirroredSubtreeEntryUpdateTimeout) {
		var ret string
		return ret
	}
	return *o.MirroredSubtreeEntryUpdateTimeout
}

// GetMirroredSubtreeEntryUpdateTimeoutOk returns a tuple with the MirroredSubtreeEntryUpdateTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreeEntryUpdateTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.MirroredSubtreeEntryUpdateTimeout) {
		return nil, false
	}
	return o.MirroredSubtreeEntryUpdateTimeout, true
}

// HasMirroredSubtreeEntryUpdateTimeout returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasMirroredSubtreeEntryUpdateTimeout() bool {
	if o != nil && !IsNil(o.MirroredSubtreeEntryUpdateTimeout) {
		return true
	}

	return false
}

// SetMirroredSubtreeEntryUpdateTimeout gets a reference to the given string and assigns it to the MirroredSubtreeEntryUpdateTimeout field.
func (o *MirroredLdifBackendResponse) SetMirroredSubtreeEntryUpdateTimeout(v string) {
	o.MirroredSubtreeEntryUpdateTimeout = &v
}

// GetMirroredSubtreeSearchTimeout returns the MirroredSubtreeSearchTimeout field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreeSearchTimeout() string {
	if o == nil || IsNil(o.MirroredSubtreeSearchTimeout) {
		var ret string
		return ret
	}
	return *o.MirroredSubtreeSearchTimeout
}

// GetMirroredSubtreeSearchTimeoutOk returns a tuple with the MirroredSubtreeSearchTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreeSearchTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.MirroredSubtreeSearchTimeout) {
		return nil, false
	}
	return o.MirroredSubtreeSearchTimeout, true
}

// HasMirroredSubtreeSearchTimeout returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasMirroredSubtreeSearchTimeout() bool {
	if o != nil && !IsNil(o.MirroredSubtreeSearchTimeout) {
		return true
	}

	return false
}

// SetMirroredSubtreeSearchTimeout gets a reference to the given string and assigns it to the MirroredSubtreeSearchTimeout field.
func (o *MirroredLdifBackendResponse) SetMirroredSubtreeSearchTimeout(v string) {
	o.MirroredSubtreeSearchTimeout = &v
}

// GetPeerServer returns the PeerServer field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetPeerServer() []string {
	if o == nil || IsNil(o.PeerServer) {
		var ret []string
		return ret
	}
	return o.PeerServer
}

// GetPeerServerOk returns a tuple with the PeerServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetPeerServerOk() ([]string, bool) {
	if o == nil || IsNil(o.PeerServer) {
		return nil, false
	}
	return o.PeerServer, true
}

// HasPeerServer returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasPeerServer() bool {
	if o != nil && !IsNil(o.PeerServer) {
		return true
	}

	return false
}

// SetPeerServer gets a reference to the given []string and assigns it to the PeerServer field.
func (o *MirroredLdifBackendResponse) SetPeerServer(v []string) {
	o.PeerServer = v
}

// GetMirroredSubtreePreferredMasterType returns the MirroredSubtreePreferredMasterType field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreePreferredMasterType() []EnumbackendMirroredSubtreePreferredMasterTypeProp {
	if o == nil || IsNil(o.MirroredSubtreePreferredMasterType) {
		var ret []EnumbackendMirroredSubtreePreferredMasterTypeProp
		return ret
	}
	return o.MirroredSubtreePreferredMasterType
}

// GetMirroredSubtreePreferredMasterTypeOk returns a tuple with the MirroredSubtreePreferredMasterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetMirroredSubtreePreferredMasterTypeOk() ([]EnumbackendMirroredSubtreePreferredMasterTypeProp, bool) {
	if o == nil || IsNil(o.MirroredSubtreePreferredMasterType) {
		return nil, false
	}
	return o.MirroredSubtreePreferredMasterType, true
}

// HasMirroredSubtreePreferredMasterType returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasMirroredSubtreePreferredMasterType() bool {
	if o != nil && !IsNil(o.MirroredSubtreePreferredMasterType) {
		return true
	}

	return false
}

// SetMirroredSubtreePreferredMasterType gets a reference to the given []EnumbackendMirroredSubtreePreferredMasterTypeProp and assigns it to the MirroredSubtreePreferredMasterType field.
func (o *MirroredLdifBackendResponse) SetMirroredSubtreePreferredMasterType(v []EnumbackendMirroredSubtreePreferredMasterTypeProp) {
	o.MirroredSubtreePreferredMasterType = v
}

// GetSimulatedResultCode returns the SimulatedResultCode field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetSimulatedResultCode() int64 {
	if o == nil || IsNil(o.SimulatedResultCode) {
		var ret int64
		return ret
	}
	return *o.SimulatedResultCode
}

// GetSimulatedResultCodeOk returns a tuple with the SimulatedResultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetSimulatedResultCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.SimulatedResultCode) {
		return nil, false
	}
	return o.SimulatedResultCode, true
}

// HasSimulatedResultCode returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasSimulatedResultCode() bool {
	if o != nil && !IsNil(o.SimulatedResultCode) {
		return true
	}

	return false
}

// SetSimulatedResultCode gets a reference to the given int64 and assigns it to the SimulatedResultCode field.
func (o *MirroredLdifBackendResponse) SetSimulatedResultCode(v int64) {
	o.SimulatedResultCode = &v
}

// GetWritabilityMode returns the WritabilityMode field value
func (o *MirroredLdifBackendResponse) GetWritabilityMode() EnumbackendWritabilityModeProp {
	if o == nil {
		var ret EnumbackendWritabilityModeProp
		return ret
	}

	return o.WritabilityMode
}

// GetWritabilityModeOk returns a tuple with the WritabilityMode field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetWritabilityModeOk() (*EnumbackendWritabilityModeProp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WritabilityMode, true
}

// SetWritabilityMode sets field value
func (o *MirroredLdifBackendResponse) SetWritabilityMode(v EnumbackendWritabilityModeProp) {
	o.WritabilityMode = v
}

// GetIsPrivateBackend returns the IsPrivateBackend field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetIsPrivateBackend() bool {
	if o == nil || IsNil(o.IsPrivateBackend) {
		var ret bool
		return ret
	}
	return *o.IsPrivateBackend
}

// GetIsPrivateBackendOk returns a tuple with the IsPrivateBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetIsPrivateBackendOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivateBackend) {
		return nil, false
	}
	return o.IsPrivateBackend, true
}

// HasIsPrivateBackend returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasIsPrivateBackend() bool {
	if o != nil && !IsNil(o.IsPrivateBackend) {
		return true
	}

	return false
}

// SetIsPrivateBackend gets a reference to the given bool and assigns it to the IsPrivateBackend field.
func (o *MirroredLdifBackendResponse) SetIsPrivateBackend(v bool) {
	o.IsPrivateBackend = &v
}

// GetLdifFile returns the LdifFile field value
func (o *MirroredLdifBackendResponse) GetLdifFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LdifFile
}

// GetLdifFileOk returns a tuple with the LdifFile field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetLdifFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LdifFile, true
}

// SetLdifFile sets field value
func (o *MirroredLdifBackendResponse) SetLdifFile(v string) {
	o.LdifFile = v
}

// GetBackendID returns the BackendID field value
func (o *MirroredLdifBackendResponse) GetBackendID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackendID
}

// GetBackendIDOk returns a tuple with the BackendID field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetBackendIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackendID, true
}

// SetBackendID sets field value
func (o *MirroredLdifBackendResponse) SetBackendID(v string) {
	o.BackendID = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MirroredLdifBackendResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *MirroredLdifBackendResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *MirroredLdifBackendResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetBaseDN returns the BaseDN field value
func (o *MirroredLdifBackendResponse) GetBaseDN() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetBaseDNOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseDN, true
}

// SetBaseDN sets field value
func (o *MirroredLdifBackendResponse) SetBaseDN(v []string) {
	o.BaseDN = v
}

// GetSetDegradedAlertWhenDisabled returns the SetDegradedAlertWhenDisabled field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetSetDegradedAlertWhenDisabled() bool {
	if o == nil || IsNil(o.SetDegradedAlertWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.SetDegradedAlertWhenDisabled
}

// GetSetDegradedAlertWhenDisabledOk returns a tuple with the SetDegradedAlertWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetSetDegradedAlertWhenDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDegradedAlertWhenDisabled) {
		return nil, false
	}
	return o.SetDegradedAlertWhenDisabled, true
}

// HasSetDegradedAlertWhenDisabled returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasSetDegradedAlertWhenDisabled() bool {
	if o != nil && !IsNil(o.SetDegradedAlertWhenDisabled) {
		return true
	}

	return false
}

// SetSetDegradedAlertWhenDisabled gets a reference to the given bool and assigns it to the SetDegradedAlertWhenDisabled field.
func (o *MirroredLdifBackendResponse) SetSetDegradedAlertWhenDisabled(v bool) {
	o.SetDegradedAlertWhenDisabled = &v
}

// GetReturnUnavailableWhenDisabled returns the ReturnUnavailableWhenDisabled field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetReturnUnavailableWhenDisabled() bool {
	if o == nil || IsNil(o.ReturnUnavailableWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.ReturnUnavailableWhenDisabled
}

// GetReturnUnavailableWhenDisabledOk returns a tuple with the ReturnUnavailableWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetReturnUnavailableWhenDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnUnavailableWhenDisabled) {
		return nil, false
	}
	return o.ReturnUnavailableWhenDisabled, true
}

// HasReturnUnavailableWhenDisabled returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasReturnUnavailableWhenDisabled() bool {
	if o != nil && !IsNil(o.ReturnUnavailableWhenDisabled) {
		return true
	}

	return false
}

// SetReturnUnavailableWhenDisabled gets a reference to the given bool and assigns it to the ReturnUnavailableWhenDisabled field.
func (o *MirroredLdifBackendResponse) SetReturnUnavailableWhenDisabled(v bool) {
	o.ReturnUnavailableWhenDisabled = &v
}

// GetBackupFilePermissions returns the BackupFilePermissions field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetBackupFilePermissions() string {
	if o == nil || IsNil(o.BackupFilePermissions) {
		var ret string
		return ret
	}
	return *o.BackupFilePermissions
}

// GetBackupFilePermissionsOk returns a tuple with the BackupFilePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetBackupFilePermissionsOk() (*string, bool) {
	if o == nil || IsNil(o.BackupFilePermissions) {
		return nil, false
	}
	return o.BackupFilePermissions, true
}

// HasBackupFilePermissions returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasBackupFilePermissions() bool {
	if o != nil && !IsNil(o.BackupFilePermissions) {
		return true
	}

	return false
}

// SetBackupFilePermissions gets a reference to the given string and assigns it to the BackupFilePermissions field.
func (o *MirroredLdifBackendResponse) SetBackupFilePermissions(v string) {
	o.BackupFilePermissions = &v
}

// GetNotificationManager returns the NotificationManager field value if set, zero value otherwise.
func (o *MirroredLdifBackendResponse) GetNotificationManager() string {
	if o == nil || IsNil(o.NotificationManager) {
		var ret string
		return ret
	}
	return *o.NotificationManager
}

// GetNotificationManagerOk returns a tuple with the NotificationManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MirroredLdifBackendResponse) GetNotificationManagerOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationManager) {
		return nil, false
	}
	return o.NotificationManager, true
}

// HasNotificationManager returns a boolean if a field has been set.
func (o *MirroredLdifBackendResponse) HasNotificationManager() bool {
	if o != nil && !IsNil(o.NotificationManager) {
		return true
	}

	return false
}

// SetNotificationManager gets a reference to the given string and assigns it to the NotificationManager field.
func (o *MirroredLdifBackendResponse) SetNotificationManager(v string) {
	o.NotificationManager = &v
}

func (o MirroredLdifBackendResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MirroredLdifBackendResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	toSerialize["schemas"] = o.Schemas
	toSerialize["id"] = o.Id
	if !IsNil(o.MirroredSubtreePeerPollingInterval) {
		toSerialize["mirroredSubtreePeerPollingInterval"] = o.MirroredSubtreePeerPollingInterval
	}
	if !IsNil(o.MirroredSubtreeEntryUpdateTimeout) {
		toSerialize["mirroredSubtreeEntryUpdateTimeout"] = o.MirroredSubtreeEntryUpdateTimeout
	}
	if !IsNil(o.MirroredSubtreeSearchTimeout) {
		toSerialize["mirroredSubtreeSearchTimeout"] = o.MirroredSubtreeSearchTimeout
	}
	if !IsNil(o.PeerServer) {
		toSerialize["peerServer"] = o.PeerServer
	}
	if !IsNil(o.MirroredSubtreePreferredMasterType) {
		toSerialize["mirroredSubtreePreferredMasterType"] = o.MirroredSubtreePreferredMasterType
	}
	if !IsNil(o.SimulatedResultCode) {
		toSerialize["simulatedResultCode"] = o.SimulatedResultCode
	}
	toSerialize["writabilityMode"] = o.WritabilityMode
	if !IsNil(o.IsPrivateBackend) {
		toSerialize["isPrivateBackend"] = o.IsPrivateBackend
	}
	toSerialize["ldifFile"] = o.LdifFile
	toSerialize["backendID"] = o.BackendID
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["baseDN"] = o.BaseDN
	if !IsNil(o.SetDegradedAlertWhenDisabled) {
		toSerialize["setDegradedAlertWhenDisabled"] = o.SetDegradedAlertWhenDisabled
	}
	if !IsNil(o.ReturnUnavailableWhenDisabled) {
		toSerialize["returnUnavailableWhenDisabled"] = o.ReturnUnavailableWhenDisabled
	}
	if !IsNil(o.BackupFilePermissions) {
		toSerialize["backupFilePermissions"] = o.BackupFilePermissions
	}
	if !IsNil(o.NotificationManager) {
		toSerialize["notificationManager"] = o.NotificationManager
	}
	return toSerialize, nil
}

type NullableMirroredLdifBackendResponse struct {
	value *MirroredLdifBackendResponse
	isSet bool
}

func (v NullableMirroredLdifBackendResponse) Get() *MirroredLdifBackendResponse {
	return v.value
}

func (v *NullableMirroredLdifBackendResponse) Set(val *MirroredLdifBackendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMirroredLdifBackendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMirroredLdifBackendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMirroredLdifBackendResponse(val *MirroredLdifBackendResponse) *NullableMirroredLdifBackendResponse {
	return &NullableMirroredLdifBackendResponse{value: val, isSet: true}
}

func (v NullableMirroredLdifBackendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMirroredLdifBackendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
