/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumldapMappingScimResourceTypeSchemaUrn the model 'EnumldapMappingScimResourceTypeSchemaUrn'
type EnumldapMappingScimResourceTypeSchemaUrn string

// List of Enumldap-mapping-scim-resource-typeSchemaUrn
const (
	ENUMLDAPMAPPINGSCIMRESOURCETYPESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SCIM_RESOURCE_TYPELDAP_MAPPING EnumldapMappingScimResourceTypeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:scim-resource-type:ldap-mapping"
)

// All allowed values of EnumldapMappingScimResourceTypeSchemaUrn enum
var AllowedEnumldapMappingScimResourceTypeSchemaUrnEnumValues = []EnumldapMappingScimResourceTypeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:scim-resource-type:ldap-mapping",
}

func (v *EnumldapMappingScimResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldapMappingScimResourceTypeSchemaUrn(value)
	for _, existing := range AllowedEnumldapMappingScimResourceTypeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldapMappingScimResourceTypeSchemaUrn", value)
}

// NewEnumldapMappingScimResourceTypeSchemaUrnFromValue returns a pointer to a valid EnumldapMappingScimResourceTypeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldapMappingScimResourceTypeSchemaUrnFromValue(v string) (*EnumldapMappingScimResourceTypeSchemaUrn, error) {
	ev := EnumldapMappingScimResourceTypeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldapMappingScimResourceTypeSchemaUrn: valid values are %v", v, AllowedEnumldapMappingScimResourceTypeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldapMappingScimResourceTypeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldapMappingScimResourceTypeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldap-mapping-scim-resource-typeSchemaUrn value
func (v EnumldapMappingScimResourceTypeSchemaUrn) Ptr() *EnumldapMappingScimResourceTypeSchemaUrn {
	return &v
}

type NullableEnumldapMappingScimResourceTypeSchemaUrn struct {
	value *EnumldapMappingScimResourceTypeSchemaUrn
	isSet bool
}

func (v NullableEnumldapMappingScimResourceTypeSchemaUrn) Get() *EnumldapMappingScimResourceTypeSchemaUrn {
	return v.value
}

func (v *NullableEnumldapMappingScimResourceTypeSchemaUrn) Set(val *EnumldapMappingScimResourceTypeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldapMappingScimResourceTypeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldapMappingScimResourceTypeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldapMappingScimResourceTypeSchemaUrn(val *EnumldapMappingScimResourceTypeSchemaUrn) *NullableEnumldapMappingScimResourceTypeSchemaUrn {
	return &NullableEnumldapMappingScimResourceTypeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldapMappingScimResourceTypeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldapMappingScimResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
