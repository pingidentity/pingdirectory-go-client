/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// MonitorHistoryPluginResponse struct for MonitorHistoryPluginResponse
type MonitorHistoryPluginResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas                                       []EnummonitorHistoryPluginSchemaUrn                `json:"schemas"`
	// Name of the Plugin
	Id string `json:"id"`
	// The duration between logging dumps of cn=monitor to a file.
	LogInterval string `json:"logInterval"`
	// The file name to use for the log files generated by the Monitor History Plugin. The path to the file can be specified either as relative to the server root or as an absolute path.
	LogFile string `json:"logFile"`
	// The UNIX permissions of the log files created by this Monitor History Plugin.
	LogFilePermissions   string                              `json:"logFilePermissions"`
	LoggingErrorBehavior *EnumpluginLoggingErrorBehaviorProp `json:"loggingErrorBehavior,omitempty"`
	// The retention policy to use for the Monitor History Plugin .
	RetentionPolicy []string `json:"retentionPolicy"`
	// Retain some older files to give greater perspective on how monitoring information has changed over time.
	RetainFilesSparselyByAge *bool `json:"retainFilesSparselyByAge,omitempty"`
	// Server monitoring data can include a small amount of personally identifiable information in the form of LDAP DNs and search filters. Setting this property to true will redact this information from the monitor files. This should only be used when necessary, as it reduces the information available in the archive and can increase the time to find the source of support issues.
	Sanitize *bool `json:"sanitize,omitempty"`
	// A description for this Plugin
	Description *string `json:"description,omitempty"`
	// Indicates whether the plug-in is enabled for use.
	Enabled bool `json:"enabled"`
}

// NewMonitorHistoryPluginResponse instantiates a new MonitorHistoryPluginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorHistoryPluginResponse(schemas []EnummonitorHistoryPluginSchemaUrn, id string, logInterval string, logFile string, logFilePermissions string, retentionPolicy []string, enabled bool) *MonitorHistoryPluginResponse {
	this := MonitorHistoryPluginResponse{}
	this.Schemas = schemas
	this.Id = id
	this.LogInterval = logInterval
	this.LogFile = logFile
	this.LogFilePermissions = logFilePermissions
	this.RetentionPolicy = retentionPolicy
	this.Enabled = enabled
	return &this
}

// NewMonitorHistoryPluginResponseWithDefaults instantiates a new MonitorHistoryPluginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorHistoryPluginResponseWithDefaults() *MonitorHistoryPluginResponse {
	this := MonitorHistoryPluginResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MonitorHistoryPluginResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MonitorHistoryPluginResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *MonitorHistoryPluginResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *MonitorHistoryPluginResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *MonitorHistoryPluginResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *MonitorHistoryPluginResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value
func (o *MonitorHistoryPluginResponse) GetSchemas() []EnummonitorHistoryPluginSchemaUrn {
	if o == nil {
		var ret []EnummonitorHistoryPluginSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetSchemasOk() ([]EnummonitorHistoryPluginSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *MonitorHistoryPluginResponse) SetSchemas(v []EnummonitorHistoryPluginSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *MonitorHistoryPluginResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MonitorHistoryPluginResponse) SetId(v string) {
	o.Id = v
}

// GetLogInterval returns the LogInterval field value
func (o *MonitorHistoryPluginResponse) GetLogInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogInterval
}

// GetLogIntervalOk returns a tuple with the LogInterval field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetLogIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogInterval, true
}

// SetLogInterval sets field value
func (o *MonitorHistoryPluginResponse) SetLogInterval(v string) {
	o.LogInterval = v
}

// GetLogFile returns the LogFile field value
func (o *MonitorHistoryPluginResponse) GetLogFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetLogFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFile, true
}

// SetLogFile sets field value
func (o *MonitorHistoryPluginResponse) SetLogFile(v string) {
	o.LogFile = v
}

// GetLogFilePermissions returns the LogFilePermissions field value
func (o *MonitorHistoryPluginResponse) GetLogFilePermissions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFilePermissions
}

// GetLogFilePermissionsOk returns a tuple with the LogFilePermissions field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetLogFilePermissionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFilePermissions, true
}

// SetLogFilePermissions sets field value
func (o *MonitorHistoryPluginResponse) SetLogFilePermissions(v string) {
	o.LogFilePermissions = v
}

// GetLoggingErrorBehavior returns the LoggingErrorBehavior field value if set, zero value otherwise.
func (o *MonitorHistoryPluginResponse) GetLoggingErrorBehavior() EnumpluginLoggingErrorBehaviorProp {
	if o == nil || isNil(o.LoggingErrorBehavior) {
		var ret EnumpluginLoggingErrorBehaviorProp
		return ret
	}
	return *o.LoggingErrorBehavior
}

// GetLoggingErrorBehaviorOk returns a tuple with the LoggingErrorBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetLoggingErrorBehaviorOk() (*EnumpluginLoggingErrorBehaviorProp, bool) {
	if o == nil || isNil(o.LoggingErrorBehavior) {
		return nil, false
	}
	return o.LoggingErrorBehavior, true
}

// HasLoggingErrorBehavior returns a boolean if a field has been set.
func (o *MonitorHistoryPluginResponse) HasLoggingErrorBehavior() bool {
	if o != nil && !isNil(o.LoggingErrorBehavior) {
		return true
	}

	return false
}

// SetLoggingErrorBehavior gets a reference to the given EnumpluginLoggingErrorBehaviorProp and assigns it to the LoggingErrorBehavior field.
func (o *MonitorHistoryPluginResponse) SetLoggingErrorBehavior(v EnumpluginLoggingErrorBehaviorProp) {
	o.LoggingErrorBehavior = &v
}

// GetRetentionPolicy returns the RetentionPolicy field value
func (o *MonitorHistoryPluginResponse) GetRetentionPolicy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RetentionPolicy
}

// GetRetentionPolicyOk returns a tuple with the RetentionPolicy field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetRetentionPolicyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPolicy, true
}

// SetRetentionPolicy sets field value
func (o *MonitorHistoryPluginResponse) SetRetentionPolicy(v []string) {
	o.RetentionPolicy = v
}

// GetRetainFilesSparselyByAge returns the RetainFilesSparselyByAge field value if set, zero value otherwise.
func (o *MonitorHistoryPluginResponse) GetRetainFilesSparselyByAge() bool {
	if o == nil || isNil(o.RetainFilesSparselyByAge) {
		var ret bool
		return ret
	}
	return *o.RetainFilesSparselyByAge
}

// GetRetainFilesSparselyByAgeOk returns a tuple with the RetainFilesSparselyByAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetRetainFilesSparselyByAgeOk() (*bool, bool) {
	if o == nil || isNil(o.RetainFilesSparselyByAge) {
		return nil, false
	}
	return o.RetainFilesSparselyByAge, true
}

// HasRetainFilesSparselyByAge returns a boolean if a field has been set.
func (o *MonitorHistoryPluginResponse) HasRetainFilesSparselyByAge() bool {
	if o != nil && !isNil(o.RetainFilesSparselyByAge) {
		return true
	}

	return false
}

// SetRetainFilesSparselyByAge gets a reference to the given bool and assigns it to the RetainFilesSparselyByAge field.
func (o *MonitorHistoryPluginResponse) SetRetainFilesSparselyByAge(v bool) {
	o.RetainFilesSparselyByAge = &v
}

// GetSanitize returns the Sanitize field value if set, zero value otherwise.
func (o *MonitorHistoryPluginResponse) GetSanitize() bool {
	if o == nil || isNil(o.Sanitize) {
		var ret bool
		return ret
	}
	return *o.Sanitize
}

// GetSanitizeOk returns a tuple with the Sanitize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetSanitizeOk() (*bool, bool) {
	if o == nil || isNil(o.Sanitize) {
		return nil, false
	}
	return o.Sanitize, true
}

// HasSanitize returns a boolean if a field has been set.
func (o *MonitorHistoryPluginResponse) HasSanitize() bool {
	if o != nil && !isNil(o.Sanitize) {
		return true
	}

	return false
}

// SetSanitize gets a reference to the given bool and assigns it to the Sanitize field.
func (o *MonitorHistoryPluginResponse) SetSanitize(v bool) {
	o.Sanitize = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MonitorHistoryPluginResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MonitorHistoryPluginResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MonitorHistoryPluginResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *MonitorHistoryPluginResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *MonitorHistoryPluginResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *MonitorHistoryPluginResponse) SetEnabled(v bool) {
	o.Enabled = v
}

func (o MonitorHistoryPluginResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["logInterval"] = o.LogInterval
	}
	if true {
		toSerialize["logFile"] = o.LogFile
	}
	if true {
		toSerialize["logFilePermissions"] = o.LogFilePermissions
	}
	if !isNil(o.LoggingErrorBehavior) {
		toSerialize["loggingErrorBehavior"] = o.LoggingErrorBehavior
	}
	if true {
		toSerialize["retentionPolicy"] = o.RetentionPolicy
	}
	if !isNil(o.RetainFilesSparselyByAge) {
		toSerialize["retainFilesSparselyByAge"] = o.RetainFilesSparselyByAge
	}
	if !isNil(o.Sanitize) {
		toSerialize["sanitize"] = o.Sanitize
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorHistoryPluginResponse struct {
	value *MonitorHistoryPluginResponse
	isSet bool
}

func (v NullableMonitorHistoryPluginResponse) Get() *MonitorHistoryPluginResponse {
	return v.value
}

func (v *NullableMonitorHistoryPluginResponse) Set(val *MonitorHistoryPluginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorHistoryPluginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorHistoryPluginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorHistoryPluginResponse(val *MonitorHistoryPluginResponse) *NullableMonitorHistoryPluginResponse {
	return &NullableMonitorHistoryPluginResponse{value: val, isSet: true}
}

func (v NullableMonitorHistoryPluginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorHistoryPluginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
