/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumgaugeAlertLevelProp Specifies the level at which alerts are sent for alarms raised by this Gauge.
type EnumgaugeAlertLevelProp string

// List of Enumgauge-alertLevelProp
const (
	ENUMGAUGEALERTLEVELPROP_ALWAYS            EnumgaugeAlertLevelProp = "always"
	ENUMGAUGEALERTLEVELPROP_WARNING_AND_ABOVE EnumgaugeAlertLevelProp = "warning-and-above"
	ENUMGAUGEALERTLEVELPROP_MINOR_AND_ABOVE   EnumgaugeAlertLevelProp = "minor-and-above"
	ENUMGAUGEALERTLEVELPROP_MAJOR_AND_ABOVE   EnumgaugeAlertLevelProp = "major-and-above"
	ENUMGAUGEALERTLEVELPROP_CRITICAL_ONLY     EnumgaugeAlertLevelProp = "critical-only"
	ENUMGAUGEALERTLEVELPROP_NEVER             EnumgaugeAlertLevelProp = "never"
)

// All allowed values of EnumgaugeAlertLevelProp enum
var AllowedEnumgaugeAlertLevelPropEnumValues = []EnumgaugeAlertLevelProp{
	"always",
	"warning-and-above",
	"minor-and-above",
	"major-and-above",
	"critical-only",
	"never",
}

func (v *EnumgaugeAlertLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgaugeAlertLevelProp(value)
	for _, existing := range AllowedEnumgaugeAlertLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgaugeAlertLevelProp", value)
}

// NewEnumgaugeAlertLevelPropFromValue returns a pointer to a valid EnumgaugeAlertLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgaugeAlertLevelPropFromValue(v string) (*EnumgaugeAlertLevelProp, error) {
	ev := EnumgaugeAlertLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgaugeAlertLevelProp: valid values are %v", v, AllowedEnumgaugeAlertLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgaugeAlertLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumgaugeAlertLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgauge-alertLevelProp value
func (v EnumgaugeAlertLevelProp) Ptr() *EnumgaugeAlertLevelProp {
	return &v
}

type NullableEnumgaugeAlertLevelProp struct {
	value *EnumgaugeAlertLevelProp
	isSet bool
}

func (v NullableEnumgaugeAlertLevelProp) Get() *EnumgaugeAlertLevelProp {
	return v.value
}

func (v *NullableEnumgaugeAlertLevelProp) Set(val *EnumgaugeAlertLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgaugeAlertLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgaugeAlertLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgaugeAlertLevelProp(val *EnumgaugeAlertLevelProp) *NullableEnumgaugeAlertLevelProp {
	return &NullableEnumgaugeAlertLevelProp{value: val, isSet: true}
}

func (v NullableEnumgaugeAlertLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgaugeAlertLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
