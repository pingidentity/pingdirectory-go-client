/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumtraditionalWorkQueueSchemaUrn the model 'EnumtraditionalWorkQueueSchemaUrn'
type EnumtraditionalWorkQueueSchemaUrn string

// List of Enumtraditional-work-queueSchemaUrn
const (
	ENUMTRADITIONALWORKQUEUESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0WORK_QUEUETRADITIONAL EnumtraditionalWorkQueueSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:work-queue:traditional"
)

// All allowed values of EnumtraditionalWorkQueueSchemaUrn enum
var AllowedEnumtraditionalWorkQueueSchemaUrnEnumValues = []EnumtraditionalWorkQueueSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:work-queue:traditional",
}

func (v *EnumtraditionalWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumtraditionalWorkQueueSchemaUrn(value)
	for _, existing := range AllowedEnumtraditionalWorkQueueSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumtraditionalWorkQueueSchemaUrn", value)
}

// NewEnumtraditionalWorkQueueSchemaUrnFromValue returns a pointer to a valid EnumtraditionalWorkQueueSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumtraditionalWorkQueueSchemaUrnFromValue(v string) (*EnumtraditionalWorkQueueSchemaUrn, error) {
	ev := EnumtraditionalWorkQueueSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumtraditionalWorkQueueSchemaUrn: valid values are %v", v, AllowedEnumtraditionalWorkQueueSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumtraditionalWorkQueueSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumtraditionalWorkQueueSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumtraditional-work-queueSchemaUrn value
func (v EnumtraditionalWorkQueueSchemaUrn) Ptr() *EnumtraditionalWorkQueueSchemaUrn {
	return &v
}

type NullableEnumtraditionalWorkQueueSchemaUrn struct {
	value *EnumtraditionalWorkQueueSchemaUrn
	isSet bool
}

func (v NullableEnumtraditionalWorkQueueSchemaUrn) Get() *EnumtraditionalWorkQueueSchemaUrn {
	return v.value
}

func (v *NullableEnumtraditionalWorkQueueSchemaUrn) Set(val *EnumtraditionalWorkQueueSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumtraditionalWorkQueueSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumtraditionalWorkQueueSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumtraditionalWorkQueueSchemaUrn(val *EnumtraditionalWorkQueueSchemaUrn) *NullableEnumtraditionalWorkQueueSchemaUrn {
	return &NullableEnumtraditionalWorkQueueSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumtraditionalWorkQueueSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumtraditionalWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
