/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddLogRotationPolicy200Response - struct for AddLogRotationPolicy200Response
type AddLogRotationPolicy200Response struct {
	FixedTimeLogRotationPolicyResponse   *FixedTimeLogRotationPolicyResponse
	NeverRotateLogRotationPolicyResponse *NeverRotateLogRotationPolicyResponse
	SizeLimitLogRotationPolicyResponse   *SizeLimitLogRotationPolicyResponse
	TimeLimitLogRotationPolicyResponse   *TimeLimitLogRotationPolicyResponse
}

// FixedTimeLogRotationPolicyResponseAsAddLogRotationPolicy200Response is a convenience function that returns FixedTimeLogRotationPolicyResponse wrapped in AddLogRotationPolicy200Response
func FixedTimeLogRotationPolicyResponseAsAddLogRotationPolicy200Response(v *FixedTimeLogRotationPolicyResponse) AddLogRotationPolicy200Response {
	return AddLogRotationPolicy200Response{
		FixedTimeLogRotationPolicyResponse: v,
	}
}

// NeverRotateLogRotationPolicyResponseAsAddLogRotationPolicy200Response is a convenience function that returns NeverRotateLogRotationPolicyResponse wrapped in AddLogRotationPolicy200Response
func NeverRotateLogRotationPolicyResponseAsAddLogRotationPolicy200Response(v *NeverRotateLogRotationPolicyResponse) AddLogRotationPolicy200Response {
	return AddLogRotationPolicy200Response{
		NeverRotateLogRotationPolicyResponse: v,
	}
}

// SizeLimitLogRotationPolicyResponseAsAddLogRotationPolicy200Response is a convenience function that returns SizeLimitLogRotationPolicyResponse wrapped in AddLogRotationPolicy200Response
func SizeLimitLogRotationPolicyResponseAsAddLogRotationPolicy200Response(v *SizeLimitLogRotationPolicyResponse) AddLogRotationPolicy200Response {
	return AddLogRotationPolicy200Response{
		SizeLimitLogRotationPolicyResponse: v,
	}
}

// TimeLimitLogRotationPolicyResponseAsAddLogRotationPolicy200Response is a convenience function that returns TimeLimitLogRotationPolicyResponse wrapped in AddLogRotationPolicy200Response
func TimeLimitLogRotationPolicyResponseAsAddLogRotationPolicy200Response(v *TimeLimitLogRotationPolicyResponse) AddLogRotationPolicy200Response {
	return AddLogRotationPolicy200Response{
		TimeLimitLogRotationPolicyResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogRotationPolicy200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FixedTimeLogRotationPolicyResponse
	err = newStrictDecoder(data).Decode(&dst.FixedTimeLogRotationPolicyResponse)
	if err == nil {
		jsonFixedTimeLogRotationPolicyResponse, _ := json.Marshal(dst.FixedTimeLogRotationPolicyResponse)
		if string(jsonFixedTimeLogRotationPolicyResponse) == "{}" { // empty struct
			dst.FixedTimeLogRotationPolicyResponse = nil
		} else {
			match++
		}
	} else {
		dst.FixedTimeLogRotationPolicyResponse = nil
	}

	// try to unmarshal data into NeverRotateLogRotationPolicyResponse
	err = newStrictDecoder(data).Decode(&dst.NeverRotateLogRotationPolicyResponse)
	if err == nil {
		jsonNeverRotateLogRotationPolicyResponse, _ := json.Marshal(dst.NeverRotateLogRotationPolicyResponse)
		if string(jsonNeverRotateLogRotationPolicyResponse) == "{}" { // empty struct
			dst.NeverRotateLogRotationPolicyResponse = nil
		} else {
			match++
		}
	} else {
		dst.NeverRotateLogRotationPolicyResponse = nil
	}

	// try to unmarshal data into SizeLimitLogRotationPolicyResponse
	err = newStrictDecoder(data).Decode(&dst.SizeLimitLogRotationPolicyResponse)
	if err == nil {
		jsonSizeLimitLogRotationPolicyResponse, _ := json.Marshal(dst.SizeLimitLogRotationPolicyResponse)
		if string(jsonSizeLimitLogRotationPolicyResponse) == "{}" { // empty struct
			dst.SizeLimitLogRotationPolicyResponse = nil
		} else {
			match++
		}
	} else {
		dst.SizeLimitLogRotationPolicyResponse = nil
	}

	// try to unmarshal data into TimeLimitLogRotationPolicyResponse
	err = newStrictDecoder(data).Decode(&dst.TimeLimitLogRotationPolicyResponse)
	if err == nil {
		jsonTimeLimitLogRotationPolicyResponse, _ := json.Marshal(dst.TimeLimitLogRotationPolicyResponse)
		if string(jsonTimeLimitLogRotationPolicyResponse) == "{}" { // empty struct
			dst.TimeLimitLogRotationPolicyResponse = nil
		} else {
			match++
		}
	} else {
		dst.TimeLimitLogRotationPolicyResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FixedTimeLogRotationPolicyResponse = nil
		dst.NeverRotateLogRotationPolicyResponse = nil
		dst.SizeLimitLogRotationPolicyResponse = nil
		dst.TimeLimitLogRotationPolicyResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogRotationPolicy200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogRotationPolicy200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogRotationPolicy200Response) MarshalJSON() ([]byte, error) {
	if src.FixedTimeLogRotationPolicyResponse != nil {
		return json.Marshal(&src.FixedTimeLogRotationPolicyResponse)
	}

	if src.NeverRotateLogRotationPolicyResponse != nil {
		return json.Marshal(&src.NeverRotateLogRotationPolicyResponse)
	}

	if src.SizeLimitLogRotationPolicyResponse != nil {
		return json.Marshal(&src.SizeLimitLogRotationPolicyResponse)
	}

	if src.TimeLimitLogRotationPolicyResponse != nil {
		return json.Marshal(&src.TimeLimitLogRotationPolicyResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogRotationPolicy200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FixedTimeLogRotationPolicyResponse != nil {
		return obj.FixedTimeLogRotationPolicyResponse
	}

	if obj.NeverRotateLogRotationPolicyResponse != nil {
		return obj.NeverRotateLogRotationPolicyResponse
	}

	if obj.SizeLimitLogRotationPolicyResponse != nil {
		return obj.SizeLimitLogRotationPolicyResponse
	}

	if obj.TimeLimitLogRotationPolicyResponse != nil {
		return obj.TimeLimitLogRotationPolicyResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddLogRotationPolicy200Response struct {
	value *AddLogRotationPolicy200Response
	isSet bool
}

func (v NullableAddLogRotationPolicy200Response) Get() *AddLogRotationPolicy200Response {
	return v.value
}

func (v *NullableAddLogRotationPolicy200Response) Set(val *AddLogRotationPolicy200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogRotationPolicy200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogRotationPolicy200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogRotationPolicy200Response(val *AddLogRotationPolicy200Response) *NullableAddLogRotationPolicy200Response {
	return &NullableAddLogRotationPolicy200Response{value: val, isSet: true}
}

func (v NullableAddLogRotationPolicy200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogRotationPolicy200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
