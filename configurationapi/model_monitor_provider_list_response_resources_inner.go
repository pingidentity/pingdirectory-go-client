/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// MonitorProviderListResponseResourcesInner - struct for MonitorProviderListResponseResourcesInner
type MonitorProviderListResponseResourcesInner struct {
	ActiveOperationsMonitorProviderResponse                        *ActiveOperationsMonitorProviderResponse
	ClientConnectionMonitorProviderResponse                        *ClientConnectionMonitorProviderResponse
	CustomMonitorProviderResponse                                  *CustomMonitorProviderResponse
	DiskSpaceUsageMonitorProviderResponse                          *DiskSpaceUsageMonitorProviderResponse
	EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse *EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse
	EntryCacheMonitorProviderResponse                              *EntryCacheMonitorProviderResponse
	GeneralMonitorProviderResponse                                 *GeneralMonitorProviderResponse
	HostSystemMonitorProviderResponse                              *HostSystemMonitorProviderResponse
	MemoryUsageMonitorProviderResponse                             *MemoryUsageMonitorProviderResponse
	SslContextMonitorProviderResponse                              *SslContextMonitorProviderResponse
	StackTraceMonitorProviderResponse                              *StackTraceMonitorProviderResponse
	SystemInfoMonitorProviderResponse                              *SystemInfoMonitorProviderResponse
	ThirdPartyMonitorProviderResponse                              *ThirdPartyMonitorProviderResponse
	VersionMonitorProviderResponse                                 *VersionMonitorProviderResponse
}

// ActiveOperationsMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns ActiveOperationsMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func ActiveOperationsMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *ActiveOperationsMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		ActiveOperationsMonitorProviderResponse: v,
	}
}

// ClientConnectionMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns ClientConnectionMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func ClientConnectionMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *ClientConnectionMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		ClientConnectionMonitorProviderResponse: v,
	}
}

// CustomMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns CustomMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func CustomMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *CustomMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		CustomMonitorProviderResponse: v,
	}
}

// DiskSpaceUsageMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns DiskSpaceUsageMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func DiskSpaceUsageMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *DiskSpaceUsageMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		DiskSpaceUsageMonitorProviderResponse: v,
	}
}

// EncryptionSettingsDatabaseAccessibilityMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func EncryptionSettingsDatabaseAccessibilityMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse: v,
	}
}

// EntryCacheMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns EntryCacheMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func EntryCacheMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *EntryCacheMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		EntryCacheMonitorProviderResponse: v,
	}
}

// GeneralMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns GeneralMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func GeneralMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *GeneralMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		GeneralMonitorProviderResponse: v,
	}
}

// HostSystemMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns HostSystemMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func HostSystemMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *HostSystemMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		HostSystemMonitorProviderResponse: v,
	}
}

// MemoryUsageMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns MemoryUsageMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func MemoryUsageMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *MemoryUsageMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		MemoryUsageMonitorProviderResponse: v,
	}
}

// SslContextMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns SslContextMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func SslContextMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *SslContextMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		SslContextMonitorProviderResponse: v,
	}
}

// StackTraceMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns StackTraceMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func StackTraceMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *StackTraceMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		StackTraceMonitorProviderResponse: v,
	}
}

// SystemInfoMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns SystemInfoMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func SystemInfoMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *SystemInfoMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		SystemInfoMonitorProviderResponse: v,
	}
}

// ThirdPartyMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns ThirdPartyMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func ThirdPartyMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *ThirdPartyMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		ThirdPartyMonitorProviderResponse: v,
	}
}

// VersionMonitorProviderResponseAsMonitorProviderListResponseResourcesInner is a convenience function that returns VersionMonitorProviderResponse wrapped in MonitorProviderListResponseResourcesInner
func VersionMonitorProviderResponseAsMonitorProviderListResponseResourcesInner(v *VersionMonitorProviderResponse) MonitorProviderListResponseResourcesInner {
	return MonitorProviderListResponseResourcesInner{
		VersionMonitorProviderResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MonitorProviderListResponseResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActiveOperationsMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ActiveOperationsMonitorProviderResponse)
	if err == nil {
		jsonActiveOperationsMonitorProviderResponse, _ := json.Marshal(dst.ActiveOperationsMonitorProviderResponse)
		if string(jsonActiveOperationsMonitorProviderResponse) == "{}" { // empty struct
			dst.ActiveOperationsMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ActiveOperationsMonitorProviderResponse = nil
	}

	// try to unmarshal data into ClientConnectionMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ClientConnectionMonitorProviderResponse)
	if err == nil {
		jsonClientConnectionMonitorProviderResponse, _ := json.Marshal(dst.ClientConnectionMonitorProviderResponse)
		if string(jsonClientConnectionMonitorProviderResponse) == "{}" { // empty struct
			dst.ClientConnectionMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ClientConnectionMonitorProviderResponse = nil
	}

	// try to unmarshal data into CustomMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.CustomMonitorProviderResponse)
	if err == nil {
		jsonCustomMonitorProviderResponse, _ := json.Marshal(dst.CustomMonitorProviderResponse)
		if string(jsonCustomMonitorProviderResponse) == "{}" { // empty struct
			dst.CustomMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.CustomMonitorProviderResponse = nil
	}

	// try to unmarshal data into DiskSpaceUsageMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.DiskSpaceUsageMonitorProviderResponse)
	if err == nil {
		jsonDiskSpaceUsageMonitorProviderResponse, _ := json.Marshal(dst.DiskSpaceUsageMonitorProviderResponse)
		if string(jsonDiskSpaceUsageMonitorProviderResponse) == "{}" { // empty struct
			dst.DiskSpaceUsageMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.DiskSpaceUsageMonitorProviderResponse = nil
	}

	// try to unmarshal data into EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse)
	if err == nil {
		jsonEncryptionSettingsDatabaseAccessibilityMonitorProviderResponse, _ := json.Marshal(dst.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse)
		if string(jsonEncryptionSettingsDatabaseAccessibilityMonitorProviderResponse) == "{}" { // empty struct
			dst.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse = nil
	}

	// try to unmarshal data into EntryCacheMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.EntryCacheMonitorProviderResponse)
	if err == nil {
		jsonEntryCacheMonitorProviderResponse, _ := json.Marshal(dst.EntryCacheMonitorProviderResponse)
		if string(jsonEntryCacheMonitorProviderResponse) == "{}" { // empty struct
			dst.EntryCacheMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.EntryCacheMonitorProviderResponse = nil
	}

	// try to unmarshal data into GeneralMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.GeneralMonitorProviderResponse)
	if err == nil {
		jsonGeneralMonitorProviderResponse, _ := json.Marshal(dst.GeneralMonitorProviderResponse)
		if string(jsonGeneralMonitorProviderResponse) == "{}" { // empty struct
			dst.GeneralMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.GeneralMonitorProviderResponse = nil
	}

	// try to unmarshal data into HostSystemMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.HostSystemMonitorProviderResponse)
	if err == nil {
		jsonHostSystemMonitorProviderResponse, _ := json.Marshal(dst.HostSystemMonitorProviderResponse)
		if string(jsonHostSystemMonitorProviderResponse) == "{}" { // empty struct
			dst.HostSystemMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.HostSystemMonitorProviderResponse = nil
	}

	// try to unmarshal data into MemoryUsageMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.MemoryUsageMonitorProviderResponse)
	if err == nil {
		jsonMemoryUsageMonitorProviderResponse, _ := json.Marshal(dst.MemoryUsageMonitorProviderResponse)
		if string(jsonMemoryUsageMonitorProviderResponse) == "{}" { // empty struct
			dst.MemoryUsageMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.MemoryUsageMonitorProviderResponse = nil
	}

	// try to unmarshal data into SslContextMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.SslContextMonitorProviderResponse)
	if err == nil {
		jsonSslContextMonitorProviderResponse, _ := json.Marshal(dst.SslContextMonitorProviderResponse)
		if string(jsonSslContextMonitorProviderResponse) == "{}" { // empty struct
			dst.SslContextMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.SslContextMonitorProviderResponse = nil
	}

	// try to unmarshal data into StackTraceMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.StackTraceMonitorProviderResponse)
	if err == nil {
		jsonStackTraceMonitorProviderResponse, _ := json.Marshal(dst.StackTraceMonitorProviderResponse)
		if string(jsonStackTraceMonitorProviderResponse) == "{}" { // empty struct
			dst.StackTraceMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.StackTraceMonitorProviderResponse = nil
	}

	// try to unmarshal data into SystemInfoMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.SystemInfoMonitorProviderResponse)
	if err == nil {
		jsonSystemInfoMonitorProviderResponse, _ := json.Marshal(dst.SystemInfoMonitorProviderResponse)
		if string(jsonSystemInfoMonitorProviderResponse) == "{}" { // empty struct
			dst.SystemInfoMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.SystemInfoMonitorProviderResponse = nil
	}

	// try to unmarshal data into ThirdPartyMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyMonitorProviderResponse)
	if err == nil {
		jsonThirdPartyMonitorProviderResponse, _ := json.Marshal(dst.ThirdPartyMonitorProviderResponse)
		if string(jsonThirdPartyMonitorProviderResponse) == "{}" { // empty struct
			dst.ThirdPartyMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyMonitorProviderResponse = nil
	}

	// try to unmarshal data into VersionMonitorProviderResponse
	err = newStrictDecoder(data).Decode(&dst.VersionMonitorProviderResponse)
	if err == nil {
		jsonVersionMonitorProviderResponse, _ := json.Marshal(dst.VersionMonitorProviderResponse)
		if string(jsonVersionMonitorProviderResponse) == "{}" { // empty struct
			dst.VersionMonitorProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.VersionMonitorProviderResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActiveOperationsMonitorProviderResponse = nil
		dst.ClientConnectionMonitorProviderResponse = nil
		dst.CustomMonitorProviderResponse = nil
		dst.DiskSpaceUsageMonitorProviderResponse = nil
		dst.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse = nil
		dst.EntryCacheMonitorProviderResponse = nil
		dst.GeneralMonitorProviderResponse = nil
		dst.HostSystemMonitorProviderResponse = nil
		dst.MemoryUsageMonitorProviderResponse = nil
		dst.SslContextMonitorProviderResponse = nil
		dst.StackTraceMonitorProviderResponse = nil
		dst.SystemInfoMonitorProviderResponse = nil
		dst.ThirdPartyMonitorProviderResponse = nil
		dst.VersionMonitorProviderResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MonitorProviderListResponseResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MonitorProviderListResponseResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MonitorProviderListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	if src.ActiveOperationsMonitorProviderResponse != nil {
		return json.Marshal(&src.ActiveOperationsMonitorProviderResponse)
	}

	if src.ClientConnectionMonitorProviderResponse != nil {
		return json.Marshal(&src.ClientConnectionMonitorProviderResponse)
	}

	if src.CustomMonitorProviderResponse != nil {
		return json.Marshal(&src.CustomMonitorProviderResponse)
	}

	if src.DiskSpaceUsageMonitorProviderResponse != nil {
		return json.Marshal(&src.DiskSpaceUsageMonitorProviderResponse)
	}

	if src.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse != nil {
		return json.Marshal(&src.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse)
	}

	if src.EntryCacheMonitorProviderResponse != nil {
		return json.Marshal(&src.EntryCacheMonitorProviderResponse)
	}

	if src.GeneralMonitorProviderResponse != nil {
		return json.Marshal(&src.GeneralMonitorProviderResponse)
	}

	if src.HostSystemMonitorProviderResponse != nil {
		return json.Marshal(&src.HostSystemMonitorProviderResponse)
	}

	if src.MemoryUsageMonitorProviderResponse != nil {
		return json.Marshal(&src.MemoryUsageMonitorProviderResponse)
	}

	if src.SslContextMonitorProviderResponse != nil {
		return json.Marshal(&src.SslContextMonitorProviderResponse)
	}

	if src.StackTraceMonitorProviderResponse != nil {
		return json.Marshal(&src.StackTraceMonitorProviderResponse)
	}

	if src.SystemInfoMonitorProviderResponse != nil {
		return json.Marshal(&src.SystemInfoMonitorProviderResponse)
	}

	if src.ThirdPartyMonitorProviderResponse != nil {
		return json.Marshal(&src.ThirdPartyMonitorProviderResponse)
	}

	if src.VersionMonitorProviderResponse != nil {
		return json.Marshal(&src.VersionMonitorProviderResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MonitorProviderListResponseResourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ActiveOperationsMonitorProviderResponse != nil {
		return obj.ActiveOperationsMonitorProviderResponse
	}

	if obj.ClientConnectionMonitorProviderResponse != nil {
		return obj.ClientConnectionMonitorProviderResponse
	}

	if obj.CustomMonitorProviderResponse != nil {
		return obj.CustomMonitorProviderResponse
	}

	if obj.DiskSpaceUsageMonitorProviderResponse != nil {
		return obj.DiskSpaceUsageMonitorProviderResponse
	}

	if obj.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse != nil {
		return obj.EncryptionSettingsDatabaseAccessibilityMonitorProviderResponse
	}

	if obj.EntryCacheMonitorProviderResponse != nil {
		return obj.EntryCacheMonitorProviderResponse
	}

	if obj.GeneralMonitorProviderResponse != nil {
		return obj.GeneralMonitorProviderResponse
	}

	if obj.HostSystemMonitorProviderResponse != nil {
		return obj.HostSystemMonitorProviderResponse
	}

	if obj.MemoryUsageMonitorProviderResponse != nil {
		return obj.MemoryUsageMonitorProviderResponse
	}

	if obj.SslContextMonitorProviderResponse != nil {
		return obj.SslContextMonitorProviderResponse
	}

	if obj.StackTraceMonitorProviderResponse != nil {
		return obj.StackTraceMonitorProviderResponse
	}

	if obj.SystemInfoMonitorProviderResponse != nil {
		return obj.SystemInfoMonitorProviderResponse
	}

	if obj.ThirdPartyMonitorProviderResponse != nil {
		return obj.ThirdPartyMonitorProviderResponse
	}

	if obj.VersionMonitorProviderResponse != nil {
		return obj.VersionMonitorProviderResponse
	}

	// all schemas are nil
	return nil
}

type NullableMonitorProviderListResponseResourcesInner struct {
	value *MonitorProviderListResponseResourcesInner
	isSet bool
}

func (v NullableMonitorProviderListResponseResourcesInner) Get() *MonitorProviderListResponseResourcesInner {
	return v.value
}

func (v *NullableMonitorProviderListResponseResourcesInner) Set(val *MonitorProviderListResponseResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorProviderListResponseResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorProviderListResponseResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorProviderListResponseResourcesInner(val *MonitorProviderListResponseResourcesInner) *NullableMonitorProviderListResponseResourcesInner {
	return &NullableMonitorProviderListResponseResourcesInner{value: val, isSet: true}
}

func (v NullableMonitorProviderListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorProviderListResponseResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
