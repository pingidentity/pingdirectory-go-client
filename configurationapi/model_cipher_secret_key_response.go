/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the CipherSecretKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CipherSecretKeyResponse{}

// CipherSecretKeyResponse struct for CipherSecretKeyResponse
type CipherSecretKeyResponse struct {
	Schemas []EnumcipherSecretKeySchemaUrn `json:"schemas,omitempty"`
	// The algorithm name used to produce this cipher, e.g. AES/CBC/PKCS5Padding.
	CipherTransformationName *string `json:"cipherTransformationName,omitempty"`
	// The initialization vector length of the cipher in bits.
	InitializationVectorLengthBits *int64 `json:"initializationVectorLengthBits,omitempty"`
	// The unique system-generated identifier for the Secret Key.
	KeyID string `json:"keyID"`
	// If the key is compromised, an administrator may set this flag to immediately trigger the creation of a new secret key. After the new key is generated, the value of this property will be reset to false.
	IsCompromised *bool `json:"isCompromised,omitempty"`
	// The symmetric key that is used for both encryption of plain text and decryption of cipher text. This stores the secret key for each server instance encrypted with that server's inter-server certificate.
	SymmetricKey []string `json:"symmetricKey,omitempty"`
	// The length of the key in bits.
	KeyLengthBits                                 int64                                              `json:"keyLengthBits"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewCipherSecretKeyResponse instantiates a new CipherSecretKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCipherSecretKeyResponse(keyID string, keyLengthBits int64) *CipherSecretKeyResponse {
	this := CipherSecretKeyResponse{}
	this.KeyID = keyID
	this.KeyLengthBits = keyLengthBits
	return &this
}

// NewCipherSecretKeyResponseWithDefaults instantiates a new CipherSecretKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCipherSecretKeyResponseWithDefaults() *CipherSecretKeyResponse {
	this := CipherSecretKeyResponse{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetSchemas() []EnumcipherSecretKeySchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumcipherSecretKeySchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetSchemasOk() ([]EnumcipherSecretKeySchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumcipherSecretKeySchemaUrn and assigns it to the Schemas field.
func (o *CipherSecretKeyResponse) SetSchemas(v []EnumcipherSecretKeySchemaUrn) {
	o.Schemas = v
}

// GetCipherTransformationName returns the CipherTransformationName field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetCipherTransformationName() string {
	if o == nil || IsNil(o.CipherTransformationName) {
		var ret string
		return ret
	}
	return *o.CipherTransformationName
}

// GetCipherTransformationNameOk returns a tuple with the CipherTransformationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetCipherTransformationNameOk() (*string, bool) {
	if o == nil || IsNil(o.CipherTransformationName) {
		return nil, false
	}
	return o.CipherTransformationName, true
}

// HasCipherTransformationName returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasCipherTransformationName() bool {
	if o != nil && !IsNil(o.CipherTransformationName) {
		return true
	}

	return false
}

// SetCipherTransformationName gets a reference to the given string and assigns it to the CipherTransformationName field.
func (o *CipherSecretKeyResponse) SetCipherTransformationName(v string) {
	o.CipherTransformationName = &v
}

// GetInitializationVectorLengthBits returns the InitializationVectorLengthBits field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetInitializationVectorLengthBits() int64 {
	if o == nil || IsNil(o.InitializationVectorLengthBits) {
		var ret int64
		return ret
	}
	return *o.InitializationVectorLengthBits
}

// GetInitializationVectorLengthBitsOk returns a tuple with the InitializationVectorLengthBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetInitializationVectorLengthBitsOk() (*int64, bool) {
	if o == nil || IsNil(o.InitializationVectorLengthBits) {
		return nil, false
	}
	return o.InitializationVectorLengthBits, true
}

// HasInitializationVectorLengthBits returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasInitializationVectorLengthBits() bool {
	if o != nil && !IsNil(o.InitializationVectorLengthBits) {
		return true
	}

	return false
}

// SetInitializationVectorLengthBits gets a reference to the given int64 and assigns it to the InitializationVectorLengthBits field.
func (o *CipherSecretKeyResponse) SetInitializationVectorLengthBits(v int64) {
	o.InitializationVectorLengthBits = &v
}

// GetKeyID returns the KeyID field value
func (o *CipherSecretKeyResponse) GetKeyID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyID
}

// GetKeyIDOk returns a tuple with the KeyID field value
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetKeyIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyID, true
}

// SetKeyID sets field value
func (o *CipherSecretKeyResponse) SetKeyID(v string) {
	o.KeyID = v
}

// GetIsCompromised returns the IsCompromised field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetIsCompromised() bool {
	if o == nil || IsNil(o.IsCompromised) {
		var ret bool
		return ret
	}
	return *o.IsCompromised
}

// GetIsCompromisedOk returns a tuple with the IsCompromised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetIsCompromisedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCompromised) {
		return nil, false
	}
	return o.IsCompromised, true
}

// HasIsCompromised returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasIsCompromised() bool {
	if o != nil && !IsNil(o.IsCompromised) {
		return true
	}

	return false
}

// SetIsCompromised gets a reference to the given bool and assigns it to the IsCompromised field.
func (o *CipherSecretKeyResponse) SetIsCompromised(v bool) {
	o.IsCompromised = &v
}

// GetSymmetricKey returns the SymmetricKey field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetSymmetricKey() []string {
	if o == nil || IsNil(o.SymmetricKey) {
		var ret []string
		return ret
	}
	return o.SymmetricKey
}

// GetSymmetricKeyOk returns a tuple with the SymmetricKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetSymmetricKeyOk() ([]string, bool) {
	if o == nil || IsNil(o.SymmetricKey) {
		return nil, false
	}
	return o.SymmetricKey, true
}

// HasSymmetricKey returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasSymmetricKey() bool {
	if o != nil && !IsNil(o.SymmetricKey) {
		return true
	}

	return false
}

// SetSymmetricKey gets a reference to the given []string and assigns it to the SymmetricKey field.
func (o *CipherSecretKeyResponse) SetSymmetricKey(v []string) {
	o.SymmetricKey = v
}

// GetKeyLengthBits returns the KeyLengthBits field value
func (o *CipherSecretKeyResponse) GetKeyLengthBits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.KeyLengthBits
}

// GetKeyLengthBitsOk returns a tuple with the KeyLengthBits field value
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetKeyLengthBitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyLengthBits, true
}

// SetKeyLengthBits sets field value
func (o *CipherSecretKeyResponse) SetKeyLengthBits(v int64) {
	o.KeyLengthBits = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *CipherSecretKeyResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *CipherSecretKeyResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CipherSecretKeyResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *CipherSecretKeyResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *CipherSecretKeyResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o CipherSecretKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CipherSecretKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.CipherTransformationName) {
		toSerialize["cipherTransformationName"] = o.CipherTransformationName
	}
	if !IsNil(o.InitializationVectorLengthBits) {
		toSerialize["initializationVectorLengthBits"] = o.InitializationVectorLengthBits
	}
	toSerialize["keyID"] = o.KeyID
	if !IsNil(o.IsCompromised) {
		toSerialize["isCompromised"] = o.IsCompromised
	}
	if !IsNil(o.SymmetricKey) {
		toSerialize["symmetricKey"] = o.SymmetricKey
	}
	toSerialize["keyLengthBits"] = o.KeyLengthBits
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableCipherSecretKeyResponse struct {
	value *CipherSecretKeyResponse
	isSet bool
}

func (v NullableCipherSecretKeyResponse) Get() *CipherSecretKeyResponse {
	return v.value
}

func (v *NullableCipherSecretKeyResponse) Set(val *CipherSecretKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCipherSecretKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCipherSecretKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCipherSecretKeyResponse(val *CipherSecretKeyResponse) *NullableCipherSecretKeyResponse {
	return &NullableCipherSecretKeyResponse{value: val, isSet: true}
}

func (v NullableCipherSecretKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCipherSecretKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
