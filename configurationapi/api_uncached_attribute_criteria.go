/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// UncachedAttributeCriteriaApiService UncachedAttributeCriteriaApi service
type UncachedAttributeCriteriaApiService service

type ApiAddUncachedAttributeCriteriaRequest struct {
	ctx                                 context.Context
	ApiService                          *UncachedAttributeCriteriaApiService
	addUncachedAttributeCriteriaRequest *AddUncachedAttributeCriteriaRequest
}

// Create a new Uncached Attribute Criteria in the config
func (r ApiAddUncachedAttributeCriteriaRequest) AddUncachedAttributeCriteriaRequest(addUncachedAttributeCriteriaRequest AddUncachedAttributeCriteriaRequest) ApiAddUncachedAttributeCriteriaRequest {
	r.addUncachedAttributeCriteriaRequest = &addUncachedAttributeCriteriaRequest
	return r
}

func (r ApiAddUncachedAttributeCriteriaRequest) Execute() (*AddUncachedAttributeCriteria200Response, *http.Response, error) {
	return r.ApiService.AddUncachedAttributeCriteriaExecute(r)
}

/*
AddUncachedAttributeCriteria Add a new Uncached Attribute Criteria to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddUncachedAttributeCriteriaRequest
*/
func (a *UncachedAttributeCriteriaApiService) AddUncachedAttributeCriteria(ctx context.Context) ApiAddUncachedAttributeCriteriaRequest {
	return ApiAddUncachedAttributeCriteriaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddUncachedAttributeCriteria200Response
func (a *UncachedAttributeCriteriaApiService) AddUncachedAttributeCriteriaExecute(r ApiAddUncachedAttributeCriteriaRequest) (*AddUncachedAttributeCriteria200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddUncachedAttributeCriteria200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UncachedAttributeCriteriaApiService.AddUncachedAttributeCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/uncached-attribute-criteria"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addUncachedAttributeCriteriaRequest == nil {
		return localVarReturnValue, nil, reportError("addUncachedAttributeCriteriaRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addUncachedAttributeCriteriaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUncachedAttributeCriteriaRequest struct {
	ctx                           context.Context
	ApiService                    *UncachedAttributeCriteriaApiService
	uncachedAttributeCriteriaName string
}

func (r ApiDeleteUncachedAttributeCriteriaRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUncachedAttributeCriteriaExecute(r)
}

/*
DeleteUncachedAttributeCriteria Delete a Uncached Attribute Criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uncachedAttributeCriteriaName Name of the Uncached Attribute Criteria
	@return ApiDeleteUncachedAttributeCriteriaRequest
*/
func (a *UncachedAttributeCriteriaApiService) DeleteUncachedAttributeCriteria(ctx context.Context, uncachedAttributeCriteriaName string) ApiDeleteUncachedAttributeCriteriaRequest {
	return ApiDeleteUncachedAttributeCriteriaRequest{
		ApiService:                    a,
		ctx:                           ctx,
		uncachedAttributeCriteriaName: uncachedAttributeCriteriaName,
	}
}

// Execute executes the request
func (a *UncachedAttributeCriteriaApiService) DeleteUncachedAttributeCriteriaExecute(r ApiDeleteUncachedAttributeCriteriaRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UncachedAttributeCriteriaApiService.DeleteUncachedAttributeCriteria")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/uncached-attribute-criteria/{uncached-attribute-criteria-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"uncached-attribute-criteria-name"+"}", url.PathEscape(parameterValueToString(r.uncachedAttributeCriteriaName, "uncachedAttributeCriteriaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUncachedAttributeCriteriaRequest struct {
	ctx                           context.Context
	ApiService                    *UncachedAttributeCriteriaApiService
	uncachedAttributeCriteriaName string
}

func (r ApiGetUncachedAttributeCriteriaRequest) Execute() (*AddUncachedAttributeCriteria200Response, *http.Response, error) {
	return r.ApiService.GetUncachedAttributeCriteriaExecute(r)
}

/*
GetUncachedAttributeCriteria Returns a single Uncached Attribute Criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uncachedAttributeCriteriaName Name of the Uncached Attribute Criteria
	@return ApiGetUncachedAttributeCriteriaRequest
*/
func (a *UncachedAttributeCriteriaApiService) GetUncachedAttributeCriteria(ctx context.Context, uncachedAttributeCriteriaName string) ApiGetUncachedAttributeCriteriaRequest {
	return ApiGetUncachedAttributeCriteriaRequest{
		ApiService:                    a,
		ctx:                           ctx,
		uncachedAttributeCriteriaName: uncachedAttributeCriteriaName,
	}
}

// Execute executes the request
//
//	@return AddUncachedAttributeCriteria200Response
func (a *UncachedAttributeCriteriaApiService) GetUncachedAttributeCriteriaExecute(r ApiGetUncachedAttributeCriteriaRequest) (*AddUncachedAttributeCriteria200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddUncachedAttributeCriteria200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UncachedAttributeCriteriaApiService.GetUncachedAttributeCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/uncached-attribute-criteria/{uncached-attribute-criteria-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"uncached-attribute-criteria-name"+"}", url.PathEscape(parameterValueToString(r.uncachedAttributeCriteriaName, "uncachedAttributeCriteriaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUncachedAttributeCriteriaRequest struct {
	ctx        context.Context
	ApiService *UncachedAttributeCriteriaApiService
	filter     *string
}

// SCIM filter
func (r ApiListUncachedAttributeCriteriaRequest) Filter(filter string) ApiListUncachedAttributeCriteriaRequest {
	r.filter = &filter
	return r
}

func (r ApiListUncachedAttributeCriteriaRequest) Execute() (*UncachedAttributeCriteriaListResponse, *http.Response, error) {
	return r.ApiService.ListUncachedAttributeCriteriaExecute(r)
}

/*
ListUncachedAttributeCriteria Returns a list of all Uncached Attribute Criteria objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListUncachedAttributeCriteriaRequest
*/
func (a *UncachedAttributeCriteriaApiService) ListUncachedAttributeCriteria(ctx context.Context) ApiListUncachedAttributeCriteriaRequest {
	return ApiListUncachedAttributeCriteriaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return UncachedAttributeCriteriaListResponse
func (a *UncachedAttributeCriteriaApiService) ListUncachedAttributeCriteriaExecute(r ApiListUncachedAttributeCriteriaRequest) (*UncachedAttributeCriteriaListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UncachedAttributeCriteriaListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UncachedAttributeCriteriaApiService.ListUncachedAttributeCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/uncached-attribute-criteria"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUncachedAttributeCriteriaRequest struct {
	ctx                           context.Context
	ApiService                    *UncachedAttributeCriteriaApiService
	uncachedAttributeCriteriaName string
	updateRequest                 *UpdateRequest
}

// Update an existing Uncached Attribute Criteria
func (r ApiUpdateUncachedAttributeCriteriaRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateUncachedAttributeCriteriaRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateUncachedAttributeCriteriaRequest) Execute() (*AddUncachedAttributeCriteria200Response, *http.Response, error) {
	return r.ApiService.UpdateUncachedAttributeCriteriaExecute(r)
}

/*
UpdateUncachedAttributeCriteria Update an existing Uncached Attribute Criteria by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uncachedAttributeCriteriaName Name of the Uncached Attribute Criteria
	@return ApiUpdateUncachedAttributeCriteriaRequest
*/
func (a *UncachedAttributeCriteriaApiService) UpdateUncachedAttributeCriteria(ctx context.Context, uncachedAttributeCriteriaName string) ApiUpdateUncachedAttributeCriteriaRequest {
	return ApiUpdateUncachedAttributeCriteriaRequest{
		ApiService:                    a,
		ctx:                           ctx,
		uncachedAttributeCriteriaName: uncachedAttributeCriteriaName,
	}
}

// Execute executes the request
//
//	@return AddUncachedAttributeCriteria200Response
func (a *UncachedAttributeCriteriaApiService) UpdateUncachedAttributeCriteriaExecute(r ApiUpdateUncachedAttributeCriteriaRequest) (*AddUncachedAttributeCriteria200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddUncachedAttributeCriteria200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UncachedAttributeCriteriaApiService.UpdateUncachedAttributeCriteria")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/uncached-attribute-criteria/{uncached-attribute-criteria-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"uncached-attribute-criteria-name"+"}", url.PathEscape(parameterValueToString(r.uncachedAttributeCriteriaName, "uncachedAttributeCriteriaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
