/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ConsentDefinitionLocalizationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsentDefinitionLocalizationResponse{}

// ConsentDefinitionLocalizationResponse struct for ConsentDefinitionLocalizationResponse
type ConsentDefinitionLocalizationResponse struct {
	Schemas []EnumconsentDefinitionLocalizationSchemaUrn `json:"schemas,omitempty"`
	// The locale of this Consent Definition Localization.
	Locale string `json:"locale"`
	// The version of this Consent Definition Localization, using the format MAJOR.MINOR.
	Version string `json:"version"`
	// Localized text that may be used to provide a title or summary for a consent request or a granted consent.
	TitleText *string `json:"titleText,omitempty"`
	// Localized text describing the data to be shared.
	DataText string `json:"dataText"`
	// Localized text describing how the data is to be used.
	PurposeText                                   string                                             `json:"purposeText"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	// Name of the Consent Definition Localization
	Id string `json:"id"`
}

// NewConsentDefinitionLocalizationResponse instantiates a new ConsentDefinitionLocalizationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentDefinitionLocalizationResponse(locale string, version string, dataText string, purposeText string, id string) *ConsentDefinitionLocalizationResponse {
	this := ConsentDefinitionLocalizationResponse{}
	this.Locale = locale
	this.Version = version
	this.DataText = dataText
	this.PurposeText = purposeText
	this.Id = id
	return &this
}

// NewConsentDefinitionLocalizationResponseWithDefaults instantiates a new ConsentDefinitionLocalizationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentDefinitionLocalizationResponseWithDefaults() *ConsentDefinitionLocalizationResponse {
	this := ConsentDefinitionLocalizationResponse{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ConsentDefinitionLocalizationResponse) GetSchemas() []EnumconsentDefinitionLocalizationSchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumconsentDefinitionLocalizationSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetSchemasOk() ([]EnumconsentDefinitionLocalizationSchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ConsentDefinitionLocalizationResponse) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumconsentDefinitionLocalizationSchemaUrn and assigns it to the Schemas field.
func (o *ConsentDefinitionLocalizationResponse) SetSchemas(v []EnumconsentDefinitionLocalizationSchemaUrn) {
	o.Schemas = v
}

// GetLocale returns the Locale field value
func (o *ConsentDefinitionLocalizationResponse) GetLocale() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locale, true
}

// SetLocale sets field value
func (o *ConsentDefinitionLocalizationResponse) SetLocale(v string) {
	o.Locale = v
}

// GetVersion returns the Version field value
func (o *ConsentDefinitionLocalizationResponse) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ConsentDefinitionLocalizationResponse) SetVersion(v string) {
	o.Version = v
}

// GetTitleText returns the TitleText field value if set, zero value otherwise.
func (o *ConsentDefinitionLocalizationResponse) GetTitleText() string {
	if o == nil || IsNil(o.TitleText) {
		var ret string
		return ret
	}
	return *o.TitleText
}

// GetTitleTextOk returns a tuple with the TitleText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetTitleTextOk() (*string, bool) {
	if o == nil || IsNil(o.TitleText) {
		return nil, false
	}
	return o.TitleText, true
}

// HasTitleText returns a boolean if a field has been set.
func (o *ConsentDefinitionLocalizationResponse) HasTitleText() bool {
	if o != nil && !IsNil(o.TitleText) {
		return true
	}

	return false
}

// SetTitleText gets a reference to the given string and assigns it to the TitleText field.
func (o *ConsentDefinitionLocalizationResponse) SetTitleText(v string) {
	o.TitleText = &v
}

// GetDataText returns the DataText field value
func (o *ConsentDefinitionLocalizationResponse) GetDataText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataText
}

// GetDataTextOk returns a tuple with the DataText field value
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetDataTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataText, true
}

// SetDataText sets field value
func (o *ConsentDefinitionLocalizationResponse) SetDataText(v string) {
	o.DataText = v
}

// GetPurposeText returns the PurposeText field value
func (o *ConsentDefinitionLocalizationResponse) GetPurposeText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PurposeText
}

// GetPurposeTextOk returns a tuple with the PurposeText field value
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetPurposeTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurposeText, true
}

// SetPurposeText sets field value
func (o *ConsentDefinitionLocalizationResponse) SetPurposeText(v string) {
	o.PurposeText = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ConsentDefinitionLocalizationResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ConsentDefinitionLocalizationResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *ConsentDefinitionLocalizationResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *ConsentDefinitionLocalizationResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *ConsentDefinitionLocalizationResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *ConsentDefinitionLocalizationResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetId returns the Id field value
func (o *ConsentDefinitionLocalizationResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConsentDefinitionLocalizationResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConsentDefinitionLocalizationResponse) SetId(v string) {
	o.Id = v
}

func (o ConsentDefinitionLocalizationResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsentDefinitionLocalizationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	toSerialize["locale"] = o.Locale
	toSerialize["version"] = o.Version
	if !IsNil(o.TitleText) {
		toSerialize["titleText"] = o.TitleText
	}
	toSerialize["dataText"] = o.DataText
	toSerialize["purposeText"] = o.PurposeText
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableConsentDefinitionLocalizationResponse struct {
	value *ConsentDefinitionLocalizationResponse
	isSet bool
}

func (v NullableConsentDefinitionLocalizationResponse) Get() *ConsentDefinitionLocalizationResponse {
	return v.value
}

func (v *NullableConsentDefinitionLocalizationResponse) Set(val *ConsentDefinitionLocalizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentDefinitionLocalizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentDefinitionLocalizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentDefinitionLocalizationResponse(val *ConsentDefinitionLocalizationResponse) *NullableConsentDefinitionLocalizationResponse {
	return &NullableConsentDefinitionLocalizationResponse{value: val, isSet: true}
}

func (v NullableConsentDefinitionLocalizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentDefinitionLocalizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
