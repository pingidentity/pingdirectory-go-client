/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumalarmManagerSchemaUrn the model 'EnumalarmManagerSchemaUrn'
type EnumalarmManagerSchemaUrn string

// List of Enumalarm-managerSchemaUrn
const (
	ENUMALARMMANAGERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ALARM_MANAGER EnumalarmManagerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:alarm-manager"
)

// All allowed values of EnumalarmManagerSchemaUrn enum
var AllowedEnumalarmManagerSchemaUrnEnumValues = []EnumalarmManagerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:alarm-manager",
}

func (v *EnumalarmManagerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumalarmManagerSchemaUrn(value)
	for _, existing := range AllowedEnumalarmManagerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumalarmManagerSchemaUrn", value)
}

// NewEnumalarmManagerSchemaUrnFromValue returns a pointer to a valid EnumalarmManagerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumalarmManagerSchemaUrnFromValue(v string) (*EnumalarmManagerSchemaUrn, error) {
	ev := EnumalarmManagerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumalarmManagerSchemaUrn: valid values are %v", v, AllowedEnumalarmManagerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumalarmManagerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumalarmManagerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumalarm-managerSchemaUrn value
func (v EnumalarmManagerSchemaUrn) Ptr() *EnumalarmManagerSchemaUrn {
	return &v
}

type NullableEnumalarmManagerSchemaUrn struct {
	value *EnumalarmManagerSchemaUrn
	isSet bool
}

func (v NullableEnumalarmManagerSchemaUrn) Get() *EnumalarmManagerSchemaUrn {
	return v.value
}

func (v *NullableEnumalarmManagerSchemaUrn) Set(val *EnumalarmManagerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumalarmManagerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumalarmManagerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumalarmManagerSchemaUrn(val *EnumalarmManagerSchemaUrn) *NullableEnumalarmManagerSchemaUrn {
	return &NullableEnumalarmManagerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumalarmManagerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumalarmManagerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
