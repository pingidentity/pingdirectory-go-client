/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn the model 'EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn'
type EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn string

// List of Enumsyslog-json-sync-failed-ops-log-publisherSchemaUrn
const (
	ENUMSYSLOGJSONSYNCFAILEDOPSLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERSYSLOG_JSON_SYNC_FAILED_OPS EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:syslog-json-sync-failed-ops"
)

// All allowed values of EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn enum
var AllowedEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrnEnumValues = []EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:syslog-json-sync-failed-ops",
}

func (v *EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn", value)
}

// NewEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrnFromValue(v string) (*EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn, error) {
	ev := EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsyslog-json-sync-failed-ops-log-publisherSchemaUrn value
func (v EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) Ptr() *EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn {
	return &v
}

type NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn struct {
	value *EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) Get() *EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) Set(val *EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn(val *EnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) *NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn {
	return &NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsyslogJsonSyncFailedOpsLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
