/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddWebApplicationExtension200Response - struct for AddWebApplicationExtension200Response
type AddWebApplicationExtension200Response struct {
	GenericWebApplicationExtensionResponse *GenericWebApplicationExtensionResponse
}

// GenericWebApplicationExtensionResponseAsAddWebApplicationExtension200Response is a convenience function that returns GenericWebApplicationExtensionResponse wrapped in AddWebApplicationExtension200Response
func GenericWebApplicationExtensionResponseAsAddWebApplicationExtension200Response(v *GenericWebApplicationExtensionResponse) AddWebApplicationExtension200Response {
	return AddWebApplicationExtension200Response{
		GenericWebApplicationExtensionResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddWebApplicationExtension200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GenericWebApplicationExtensionResponse
	err = newStrictDecoder(data).Decode(&dst.GenericWebApplicationExtensionResponse)
	if err == nil {
		jsonGenericWebApplicationExtensionResponse, _ := json.Marshal(dst.GenericWebApplicationExtensionResponse)
		if string(jsonGenericWebApplicationExtensionResponse) == "{}" { // empty struct
			dst.GenericWebApplicationExtensionResponse = nil
		} else {
			match++
		}
	} else {
		dst.GenericWebApplicationExtensionResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GenericWebApplicationExtensionResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddWebApplicationExtension200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddWebApplicationExtension200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddWebApplicationExtension200Response) MarshalJSON() ([]byte, error) {
	if src.GenericWebApplicationExtensionResponse != nil {
		return json.Marshal(&src.GenericWebApplicationExtensionResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddWebApplicationExtension200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GenericWebApplicationExtensionResponse != nil {
		return obj.GenericWebApplicationExtensionResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddWebApplicationExtension200Response struct {
	value *AddWebApplicationExtension200Response
	isSet bool
}

func (v NullableAddWebApplicationExtension200Response) Get() *AddWebApplicationExtension200Response {
	return v.value
}

func (v *NullableAddWebApplicationExtension200Response) Set(val *AddWebApplicationExtension200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddWebApplicationExtension200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddWebApplicationExtension200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddWebApplicationExtension200Response(val *AddWebApplicationExtension200Response) *NullableAddWebApplicationExtension200Response {
	return &NullableAddWebApplicationExtension200Response{value: val, isSet: true}
}

func (v NullableAddWebApplicationExtension200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddWebApplicationExtension200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
