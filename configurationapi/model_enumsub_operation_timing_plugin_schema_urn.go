/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsubOperationTimingPluginSchemaUrn the model 'EnumsubOperationTimingPluginSchemaUrn'
type EnumsubOperationTimingPluginSchemaUrn string

// List of Enumsub-operation-timing-pluginSchemaUrn
const (
	ENUMSUBOPERATIONTIMINGPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSUB_OPERATION_TIMING EnumsubOperationTimingPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:sub-operation-timing"
)

// All allowed values of EnumsubOperationTimingPluginSchemaUrn enum
var AllowedEnumsubOperationTimingPluginSchemaUrnEnumValues = []EnumsubOperationTimingPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:sub-operation-timing",
}

func (v *EnumsubOperationTimingPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsubOperationTimingPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsubOperationTimingPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsubOperationTimingPluginSchemaUrn", value)
}

// NewEnumsubOperationTimingPluginSchemaUrnFromValue returns a pointer to a valid EnumsubOperationTimingPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsubOperationTimingPluginSchemaUrnFromValue(v string) (*EnumsubOperationTimingPluginSchemaUrn, error) {
	ev := EnumsubOperationTimingPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsubOperationTimingPluginSchemaUrn: valid values are %v", v, AllowedEnumsubOperationTimingPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsubOperationTimingPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsubOperationTimingPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsub-operation-timing-pluginSchemaUrn value
func (v EnumsubOperationTimingPluginSchemaUrn) Ptr() *EnumsubOperationTimingPluginSchemaUrn {
	return &v
}

type NullableEnumsubOperationTimingPluginSchemaUrn struct {
	value *EnumsubOperationTimingPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsubOperationTimingPluginSchemaUrn) Get() *EnumsubOperationTimingPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsubOperationTimingPluginSchemaUrn) Set(val *EnumsubOperationTimingPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsubOperationTimingPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsubOperationTimingPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsubOperationTimingPluginSchemaUrn(val *EnumsubOperationTimingPluginSchemaUrn) *NullableEnumsubOperationTimingPluginSchemaUrn {
	return &NullableEnumsubOperationTimingPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsubOperationTimingPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsubOperationTimingPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
