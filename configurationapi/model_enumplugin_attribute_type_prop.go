/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginAttributeTypeProp The attribute types whose values should be encrypted.
type EnumpluginAttributeTypeProp string

// List of Enumplugin-attributeTypeProp
const (
	ENUMPLUGINATTRIBUTETYPEPROP_TOTP_SHARED_SECRET      EnumpluginAttributeTypeProp = "ds-auth-totp-shared-secret"
	ENUMPLUGINATTRIBUTETYPEPROP_TOTP_LAST_PASSWORD_USED EnumpluginAttributeTypeProp = "ds-auth-totp-last-password-used"
	ENUMPLUGINATTRIBUTETYPEPROP_DELIVERED_OTP           EnumpluginAttributeTypeProp = "ds-auth-delivered-otp"
	ENUMPLUGINATTRIBUTETYPEPROP_PASSWORD_RESET_TOKEN    EnumpluginAttributeTypeProp = "ds-auth-password-reset-token"
	ENUMPLUGINATTRIBUTETYPEPROP_SINGLE_USE_TOKEN        EnumpluginAttributeTypeProp = "ds-auth-single-use-token"
)

// All allowed values of EnumpluginAttributeTypeProp enum
var AllowedEnumpluginAttributeTypePropEnumValues = []EnumpluginAttributeTypeProp{
	"ds-auth-totp-shared-secret",
	"ds-auth-totp-last-password-used",
	"ds-auth-delivered-otp",
	"ds-auth-password-reset-token",
	"ds-auth-single-use-token",
}

func (v *EnumpluginAttributeTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginAttributeTypeProp(value)
	for _, existing := range AllowedEnumpluginAttributeTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginAttributeTypeProp", value)
}

// NewEnumpluginAttributeTypePropFromValue returns a pointer to a valid EnumpluginAttributeTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginAttributeTypePropFromValue(v string) (*EnumpluginAttributeTypeProp, error) {
	ev := EnumpluginAttributeTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginAttributeTypeProp: valid values are %v", v, AllowedEnumpluginAttributeTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginAttributeTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginAttributeTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-attributeTypeProp value
func (v EnumpluginAttributeTypeProp) Ptr() *EnumpluginAttributeTypeProp {
	return &v
}

type NullableEnumpluginAttributeTypeProp struct {
	value *EnumpluginAttributeTypeProp
	isSet bool
}

func (v NullableEnumpluginAttributeTypeProp) Get() *EnumpluginAttributeTypeProp {
	return v.value
}

func (v *NullableEnumpluginAttributeTypeProp) Set(val *EnumpluginAttributeTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginAttributeTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginAttributeTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginAttributeTypeProp(val *EnumpluginAttributeTypeProp) *NullableEnumpluginAttributeTypeProp {
	return &NullableEnumpluginAttributeTypeProp{value: val, isSet: true}
}

func (v NullableEnumpluginAttributeTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginAttributeTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
