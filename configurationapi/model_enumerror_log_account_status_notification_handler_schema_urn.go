/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumerrorLogAccountStatusNotificationHandlerSchemaUrn the model 'EnumerrorLogAccountStatusNotificationHandlerSchemaUrn'
type EnumerrorLogAccountStatusNotificationHandlerSchemaUrn string

// List of Enumerror-log-account-status-notification-handlerSchemaUrn
const (
	ENUMERRORLOGACCOUNTSTATUSNOTIFICATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ACCOUNT_STATUS_NOTIFICATION_HANDLERERROR_LOG EnumerrorLogAccountStatusNotificationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:account-status-notification-handler:error-log"
)

// All allowed values of EnumerrorLogAccountStatusNotificationHandlerSchemaUrn enum
var AllowedEnumerrorLogAccountStatusNotificationHandlerSchemaUrnEnumValues = []EnumerrorLogAccountStatusNotificationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:account-status-notification-handler:error-log",
}

func (v *EnumerrorLogAccountStatusNotificationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumerrorLogAccountStatusNotificationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumerrorLogAccountStatusNotificationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumerrorLogAccountStatusNotificationHandlerSchemaUrn", value)
}

// NewEnumerrorLogAccountStatusNotificationHandlerSchemaUrnFromValue returns a pointer to a valid EnumerrorLogAccountStatusNotificationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumerrorLogAccountStatusNotificationHandlerSchemaUrnFromValue(v string) (*EnumerrorLogAccountStatusNotificationHandlerSchemaUrn, error) {
	ev := EnumerrorLogAccountStatusNotificationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumerrorLogAccountStatusNotificationHandlerSchemaUrn: valid values are %v", v, AllowedEnumerrorLogAccountStatusNotificationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumerrorLogAccountStatusNotificationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumerrorLogAccountStatusNotificationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumerror-log-account-status-notification-handlerSchemaUrn value
func (v EnumerrorLogAccountStatusNotificationHandlerSchemaUrn) Ptr() *EnumerrorLogAccountStatusNotificationHandlerSchemaUrn {
	return &v
}

type NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn struct {
	value *EnumerrorLogAccountStatusNotificationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn) Get() *EnumerrorLogAccountStatusNotificationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn) Set(val *EnumerrorLogAccountStatusNotificationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn(val *EnumerrorLogAccountStatusNotificationHandlerSchemaUrn) *NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn {
	return &NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumerrorLogAccountStatusNotificationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
