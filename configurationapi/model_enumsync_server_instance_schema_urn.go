/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsyncServerInstanceSchemaUrn the model 'EnumsyncServerInstanceSchemaUrn'
type EnumsyncServerInstanceSchemaUrn string

// List of Enumsync-server-instanceSchemaUrn
const (
	ENUMSYNCSERVERINSTANCESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SERVER_INSTANCESYNC EnumsyncServerInstanceSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:server-instance:sync"
)

// All allowed values of EnumsyncServerInstanceSchemaUrn enum
var AllowedEnumsyncServerInstanceSchemaUrnEnumValues = []EnumsyncServerInstanceSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:server-instance:sync",
}

func (v *EnumsyncServerInstanceSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsyncServerInstanceSchemaUrn(value)
	for _, existing := range AllowedEnumsyncServerInstanceSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsyncServerInstanceSchemaUrn", value)
}

// NewEnumsyncServerInstanceSchemaUrnFromValue returns a pointer to a valid EnumsyncServerInstanceSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsyncServerInstanceSchemaUrnFromValue(v string) (*EnumsyncServerInstanceSchemaUrn, error) {
	ev := EnumsyncServerInstanceSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsyncServerInstanceSchemaUrn: valid values are %v", v, AllowedEnumsyncServerInstanceSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsyncServerInstanceSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsyncServerInstanceSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsync-server-instanceSchemaUrn value
func (v EnumsyncServerInstanceSchemaUrn) Ptr() *EnumsyncServerInstanceSchemaUrn {
	return &v
}

type NullableEnumsyncServerInstanceSchemaUrn struct {
	value *EnumsyncServerInstanceSchemaUrn
	isSet bool
}

func (v NullableEnumsyncServerInstanceSchemaUrn) Get() *EnumsyncServerInstanceSchemaUrn {
	return v.value
}

func (v *NullableEnumsyncServerInstanceSchemaUrn) Set(val *EnumsyncServerInstanceSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsyncServerInstanceSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsyncServerInstanceSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsyncServerInstanceSchemaUrn(val *EnumsyncServerInstanceSchemaUrn) *NullableEnumsyncServerInstanceSchemaUrn {
	return &NullableEnumsyncServerInstanceSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsyncServerInstanceSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsyncServerInstanceSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
