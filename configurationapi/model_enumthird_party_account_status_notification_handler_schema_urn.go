/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn the model 'EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn'
type EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn string

// List of Enumthird-party-account-status-notification-handlerSchemaUrn
const (
	ENUMTHIRDPARTYACCOUNTSTATUSNOTIFICATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ACCOUNT_STATUS_NOTIFICATION_HANDLERTHIRD_PARTY EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:account-status-notification-handler:third-party"
)

// All allowed values of EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn enum
var AllowedEnumthirdPartyAccountStatusNotificationHandlerSchemaUrnEnumValues = []EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:account-status-notification-handler:third-party",
}

func (v *EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyAccountStatusNotificationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn", value)
}

// NewEnumthirdPartyAccountStatusNotificationHandlerSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyAccountStatusNotificationHandlerSchemaUrnFromValue(v string) (*EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn, error) {
	ev := EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyAccountStatusNotificationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyAccountStatusNotificationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-account-status-notification-handlerSchemaUrn value
func (v EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) Ptr() *EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn {
	return &v
}

type NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn struct {
	value *EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) Get() *EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) Set(val *EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn(val *EnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) *NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn {
	return &NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyAccountStatusNotificationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
