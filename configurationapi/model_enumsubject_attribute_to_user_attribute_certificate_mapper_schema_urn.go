/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn the model 'EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn'
type EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn string

// List of Enumsubject-attribute-to-user-attribute-certificate-mapperSchemaUrn
const (
	ENUMSUBJECTATTRIBUTETOUSERATTRIBUTECERTIFICATEMAPPERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CERTIFICATE_MAPPERSUBJECT_ATTRIBUTE_TO_USER_ATTRIBUTE EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:certificate-mapper:subject-attribute-to-user-attribute"
)

// All allowed values of EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn enum
var AllowedEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrnEnumValues = []EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:certificate-mapper:subject-attribute-to-user-attribute",
}

func (v *EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn(value)
	for _, existing := range AllowedEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn", value)
}

// NewEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrnFromValue returns a pointer to a valid EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrnFromValue(v string) (*EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn, error) {
	ev := EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn: valid values are %v", v, AllowedEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsubject-attribute-to-user-attribute-certificate-mapperSchemaUrn value
func (v EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) Ptr() *EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn {
	return &v
}

type NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn struct {
	value *EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn
	isSet bool
}

func (v NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) Get() *EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn {
	return v.value
}

func (v *NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) Set(val *EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn(val *EnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) *NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn {
	return &NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsubjectAttributeToUserAttributeCertificateMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
