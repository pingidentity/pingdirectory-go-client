/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsnmpMasterAgentPluginSchemaUrn the model 'EnumsnmpMasterAgentPluginSchemaUrn'
type EnumsnmpMasterAgentPluginSchemaUrn string

// List of Enumsnmp-master-agent-pluginSchemaUrn
const (
	ENUMSNMPMASTERAGENTPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSNMP_MASTER_AGENT EnumsnmpMasterAgentPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:snmp-master-agent"
)

// All allowed values of EnumsnmpMasterAgentPluginSchemaUrn enum
var AllowedEnumsnmpMasterAgentPluginSchemaUrnEnumValues = []EnumsnmpMasterAgentPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:snmp-master-agent",
}

func (v *EnumsnmpMasterAgentPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsnmpMasterAgentPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsnmpMasterAgentPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsnmpMasterAgentPluginSchemaUrn", value)
}

// NewEnumsnmpMasterAgentPluginSchemaUrnFromValue returns a pointer to a valid EnumsnmpMasterAgentPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsnmpMasterAgentPluginSchemaUrnFromValue(v string) (*EnumsnmpMasterAgentPluginSchemaUrn, error) {
	ev := EnumsnmpMasterAgentPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsnmpMasterAgentPluginSchemaUrn: valid values are %v", v, AllowedEnumsnmpMasterAgentPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsnmpMasterAgentPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsnmpMasterAgentPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsnmp-master-agent-pluginSchemaUrn value
func (v EnumsnmpMasterAgentPluginSchemaUrn) Ptr() *EnumsnmpMasterAgentPluginSchemaUrn {
	return &v
}

type NullableEnumsnmpMasterAgentPluginSchemaUrn struct {
	value *EnumsnmpMasterAgentPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsnmpMasterAgentPluginSchemaUrn) Get() *EnumsnmpMasterAgentPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsnmpMasterAgentPluginSchemaUrn) Set(val *EnumsnmpMasterAgentPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsnmpMasterAgentPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsnmpMasterAgentPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsnmpMasterAgentPluginSchemaUrn(val *EnumsnmpMasterAgentPluginSchemaUrn) *NullableEnumsnmpMasterAgentPluginSchemaUrn {
	return &NullableEnumsnmpMasterAgentPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsnmpMasterAgentPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsnmpMasterAgentPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
