/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddScimAttributeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddScimAttributeRequest{}

// AddScimAttributeRequest struct for AddScimAttributeRequest
type AddScimAttributeRequest struct {
	Schemas []EnumscimAttributeSchemaUrn `json:"schemas,omitempty"`
	// A description for this SCIM Attribute
	Description *string `json:"description,omitempty"`
	// The name of the attribute.
	Name string                     `json:"name"`
	Type *EnumscimAttributeTypeProp `json:"type,omitempty"`
	// Specifies whether this attribute is required.
	Required *bool `json:"required,omitempty"`
	// Specifies whether the attribute values are case sensitive.
	CaseExact *bool `json:"caseExact,omitempty"`
	// Specifies whether this attribute may have multiple values.
	MultiValued *bool `json:"multiValued,omitempty"`
	// Specifies the suggested canonical type values for the attribute.
	CanonicalValue []string                         `json:"canonicalValue,omitempty"`
	Mutability     *EnumscimAttributeMutabilityProp `json:"mutability,omitempty"`
	Returned       *EnumscimAttributeReturnedProp   `json:"returned,omitempty"`
	// Specifies the SCIM resource types that may be referenced. This property is only applicable for attributes that are of type 'reference'. Valid values are: A SCIM resource type (e.g., 'User' or 'Group'), 'external' - indicating the resource is an external resource (e.g., such as a photo), or 'uri' - indicating that the reference is to a service endpoint or an identifier (such as a schema urn).
	ReferenceType []string `json:"referenceType,omitempty"`
	// Name of the new SCIM Attribute
	AttributeName string `json:"attributeName"`
}

// NewAddScimAttributeRequest instantiates a new AddScimAttributeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddScimAttributeRequest(name string, attributeName string) *AddScimAttributeRequest {
	this := AddScimAttributeRequest{}
	this.Name = name
	this.AttributeName = attributeName
	return &this
}

// NewAddScimAttributeRequestWithDefaults instantiates a new AddScimAttributeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddScimAttributeRequestWithDefaults() *AddScimAttributeRequest {
	this := AddScimAttributeRequest{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetSchemas() []EnumscimAttributeSchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumscimAttributeSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetSchemasOk() ([]EnumscimAttributeSchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumscimAttributeSchemaUrn and assigns it to the Schemas field.
func (o *AddScimAttributeRequest) SetSchemas(v []EnumscimAttributeSchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddScimAttributeRequest) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *AddScimAttributeRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddScimAttributeRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetType() EnumscimAttributeTypeProp {
	if o == nil || IsNil(o.Type) {
		var ret EnumscimAttributeTypeProp
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetTypeOk() (*EnumscimAttributeTypeProp, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumscimAttributeTypeProp and assigns it to the Type field.
func (o *AddScimAttributeRequest) SetType(v EnumscimAttributeTypeProp) {
	o.Type = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *AddScimAttributeRequest) SetRequired(v bool) {
	o.Required = &v
}

// GetCaseExact returns the CaseExact field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetCaseExact() bool {
	if o == nil || IsNil(o.CaseExact) {
		var ret bool
		return ret
	}
	return *o.CaseExact
}

// GetCaseExactOk returns a tuple with the CaseExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetCaseExactOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseExact) {
		return nil, false
	}
	return o.CaseExact, true
}

// HasCaseExact returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasCaseExact() bool {
	if o != nil && !IsNil(o.CaseExact) {
		return true
	}

	return false
}

// SetCaseExact gets a reference to the given bool and assigns it to the CaseExact field.
func (o *AddScimAttributeRequest) SetCaseExact(v bool) {
	o.CaseExact = &v
}

// GetMultiValued returns the MultiValued field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetMultiValued() bool {
	if o == nil || IsNil(o.MultiValued) {
		var ret bool
		return ret
	}
	return *o.MultiValued
}

// GetMultiValuedOk returns a tuple with the MultiValued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetMultiValuedOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiValued) {
		return nil, false
	}
	return o.MultiValued, true
}

// HasMultiValued returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasMultiValued() bool {
	if o != nil && !IsNil(o.MultiValued) {
		return true
	}

	return false
}

// SetMultiValued gets a reference to the given bool and assigns it to the MultiValued field.
func (o *AddScimAttributeRequest) SetMultiValued(v bool) {
	o.MultiValued = &v
}

// GetCanonicalValue returns the CanonicalValue field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetCanonicalValue() []string {
	if o == nil || IsNil(o.CanonicalValue) {
		var ret []string
		return ret
	}
	return o.CanonicalValue
}

// GetCanonicalValueOk returns a tuple with the CanonicalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetCanonicalValueOk() ([]string, bool) {
	if o == nil || IsNil(o.CanonicalValue) {
		return nil, false
	}
	return o.CanonicalValue, true
}

// HasCanonicalValue returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasCanonicalValue() bool {
	if o != nil && !IsNil(o.CanonicalValue) {
		return true
	}

	return false
}

// SetCanonicalValue gets a reference to the given []string and assigns it to the CanonicalValue field.
func (o *AddScimAttributeRequest) SetCanonicalValue(v []string) {
	o.CanonicalValue = v
}

// GetMutability returns the Mutability field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetMutability() EnumscimAttributeMutabilityProp {
	if o == nil || IsNil(o.Mutability) {
		var ret EnumscimAttributeMutabilityProp
		return ret
	}
	return *o.Mutability
}

// GetMutabilityOk returns a tuple with the Mutability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetMutabilityOk() (*EnumscimAttributeMutabilityProp, bool) {
	if o == nil || IsNil(o.Mutability) {
		return nil, false
	}
	return o.Mutability, true
}

// HasMutability returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasMutability() bool {
	if o != nil && !IsNil(o.Mutability) {
		return true
	}

	return false
}

// SetMutability gets a reference to the given EnumscimAttributeMutabilityProp and assigns it to the Mutability field.
func (o *AddScimAttributeRequest) SetMutability(v EnumscimAttributeMutabilityProp) {
	o.Mutability = &v
}

// GetReturned returns the Returned field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetReturned() EnumscimAttributeReturnedProp {
	if o == nil || IsNil(o.Returned) {
		var ret EnumscimAttributeReturnedProp
		return ret
	}
	return *o.Returned
}

// GetReturnedOk returns a tuple with the Returned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetReturnedOk() (*EnumscimAttributeReturnedProp, bool) {
	if o == nil || IsNil(o.Returned) {
		return nil, false
	}
	return o.Returned, true
}

// HasReturned returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasReturned() bool {
	if o != nil && !IsNil(o.Returned) {
		return true
	}

	return false
}

// SetReturned gets a reference to the given EnumscimAttributeReturnedProp and assigns it to the Returned field.
func (o *AddScimAttributeRequest) SetReturned(v EnumscimAttributeReturnedProp) {
	o.Returned = &v
}

// GetReferenceType returns the ReferenceType field value if set, zero value otherwise.
func (o *AddScimAttributeRequest) GetReferenceType() []string {
	if o == nil || IsNil(o.ReferenceType) {
		var ret []string
		return ret
	}
	return o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetReferenceTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.ReferenceType) {
		return nil, false
	}
	return o.ReferenceType, true
}

// HasReferenceType returns a boolean if a field has been set.
func (o *AddScimAttributeRequest) HasReferenceType() bool {
	if o != nil && !IsNil(o.ReferenceType) {
		return true
	}

	return false
}

// SetReferenceType gets a reference to the given []string and assigns it to the ReferenceType field.
func (o *AddScimAttributeRequest) SetReferenceType(v []string) {
	o.ReferenceType = v
}

// GetAttributeName returns the AttributeName field value
func (o *AddScimAttributeRequest) GetAttributeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value
// and a boolean to check if the value has been set.
func (o *AddScimAttributeRequest) GetAttributeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributeName, true
}

// SetAttributeName sets field value
func (o *AddScimAttributeRequest) SetAttributeName(v string) {
	o.AttributeName = v
}

func (o AddScimAttributeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddScimAttributeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.CaseExact) {
		toSerialize["caseExact"] = o.CaseExact
	}
	if !IsNil(o.MultiValued) {
		toSerialize["multiValued"] = o.MultiValued
	}
	if !IsNil(o.CanonicalValue) {
		toSerialize["canonicalValue"] = o.CanonicalValue
	}
	if !IsNil(o.Mutability) {
		toSerialize["mutability"] = o.Mutability
	}
	if !IsNil(o.Returned) {
		toSerialize["returned"] = o.Returned
	}
	if !IsNil(o.ReferenceType) {
		toSerialize["referenceType"] = o.ReferenceType
	}
	toSerialize["attributeName"] = o.AttributeName
	return toSerialize, nil
}

type NullableAddScimAttributeRequest struct {
	value *AddScimAttributeRequest
	isSet bool
}

func (v NullableAddScimAttributeRequest) Get() *AddScimAttributeRequest {
	return v.value
}

func (v *NullableAddScimAttributeRequest) Set(val *AddScimAttributeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddScimAttributeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddScimAttributeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddScimAttributeRequest(val *AddScimAttributeRequest) *NullableAddScimAttributeRequest {
	return &NullableAddScimAttributeRequest{value: val, isSet: true}
}

func (v NullableAddScimAttributeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddScimAttributeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
