/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DelegatedAdminCorrelatedRestResourceApiService DelegatedAdminCorrelatedRestResourceApi service
type DelegatedAdminCorrelatedRestResourceApiService service

type ApiAddDelegatedAdminCorrelatedRestResourceRequest struct {
	ctx                                            context.Context
	ApiService                                     *DelegatedAdminCorrelatedRestResourceApiService
	restResourceTypeName                           string
	addDelegatedAdminCorrelatedRestResourceRequest *AddDelegatedAdminCorrelatedRestResourceRequest
}

// Create a new Delegated Admin Correlated REST Resource in the config
func (r ApiAddDelegatedAdminCorrelatedRestResourceRequest) AddDelegatedAdminCorrelatedRestResourceRequest(addDelegatedAdminCorrelatedRestResourceRequest AddDelegatedAdminCorrelatedRestResourceRequest) ApiAddDelegatedAdminCorrelatedRestResourceRequest {
	r.addDelegatedAdminCorrelatedRestResourceRequest = &addDelegatedAdminCorrelatedRestResourceRequest
	return r
}

func (r ApiAddDelegatedAdminCorrelatedRestResourceRequest) Execute() (*DelegatedAdminCorrelatedRestResourceResponse, *http.Response, error) {
	return r.ApiService.AddDelegatedAdminCorrelatedRestResourceExecute(r)
}

/*
AddDelegatedAdminCorrelatedRestResource Add a new Delegated Admin Correlated REST Resource to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param restResourceTypeName Name of the REST Resource Type
	@return ApiAddDelegatedAdminCorrelatedRestResourceRequest
*/
func (a *DelegatedAdminCorrelatedRestResourceApiService) AddDelegatedAdminCorrelatedRestResource(ctx context.Context, restResourceTypeName string) ApiAddDelegatedAdminCorrelatedRestResourceRequest {
	return ApiAddDelegatedAdminCorrelatedRestResourceRequest{
		ApiService:           a,
		ctx:                  ctx,
		restResourceTypeName: restResourceTypeName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminCorrelatedRestResourceResponse
func (a *DelegatedAdminCorrelatedRestResourceApiService) AddDelegatedAdminCorrelatedRestResourceExecute(r ApiAddDelegatedAdminCorrelatedRestResourceRequest) (*DelegatedAdminCorrelatedRestResourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminCorrelatedRestResourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminCorrelatedRestResourceApiService.AddDelegatedAdminCorrelatedRestResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources"
	localVarPath = strings.Replace(localVarPath, "{"+"rest-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.restResourceTypeName, "restResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addDelegatedAdminCorrelatedRestResourceRequest == nil {
		return localVarReturnValue, nil, reportError("addDelegatedAdminCorrelatedRestResourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addDelegatedAdminCorrelatedRestResourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDelegatedAdminCorrelatedRestResourceRequest struct {
	ctx                                      context.Context
	ApiService                               *DelegatedAdminCorrelatedRestResourceApiService
	delegatedAdminCorrelatedRestResourceName string
	restResourceTypeName                     string
}

func (r ApiDeleteDelegatedAdminCorrelatedRestResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDelegatedAdminCorrelatedRestResourceExecute(r)
}

/*
DeleteDelegatedAdminCorrelatedRestResource Delete a Delegated Admin Correlated REST Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource
	@param restResourceTypeName Name of the REST Resource Type
	@return ApiDeleteDelegatedAdminCorrelatedRestResourceRequest
*/
func (a *DelegatedAdminCorrelatedRestResourceApiService) DeleteDelegatedAdminCorrelatedRestResource(ctx context.Context, delegatedAdminCorrelatedRestResourceName string, restResourceTypeName string) ApiDeleteDelegatedAdminCorrelatedRestResourceRequest {
	return ApiDeleteDelegatedAdminCorrelatedRestResourceRequest{
		ApiService:                               a,
		ctx:                                      ctx,
		delegatedAdminCorrelatedRestResourceName: delegatedAdminCorrelatedRestResourceName,
		restResourceTypeName:                     restResourceTypeName,
	}
}

// Execute executes the request
func (a *DelegatedAdminCorrelatedRestResourceApiService) DeleteDelegatedAdminCorrelatedRestResourceExecute(r ApiDeleteDelegatedAdminCorrelatedRestResourceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminCorrelatedRestResourceApiService.DeleteDelegatedAdminCorrelatedRestResource")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-correlated-rest-resource-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminCorrelatedRestResourceName, "delegatedAdminCorrelatedRestResourceName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rest-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.restResourceTypeName, "restResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDelegatedAdminCorrelatedRestResourceRequest struct {
	ctx                                      context.Context
	ApiService                               *DelegatedAdminCorrelatedRestResourceApiService
	delegatedAdminCorrelatedRestResourceName string
	restResourceTypeName                     string
}

func (r ApiGetDelegatedAdminCorrelatedRestResourceRequest) Execute() (*DelegatedAdminCorrelatedRestResourceResponse, *http.Response, error) {
	return r.ApiService.GetDelegatedAdminCorrelatedRestResourceExecute(r)
}

/*
GetDelegatedAdminCorrelatedRestResource Returns a single Delegated Admin Correlated REST Resource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource
	@param restResourceTypeName Name of the REST Resource Type
	@return ApiGetDelegatedAdminCorrelatedRestResourceRequest
*/
func (a *DelegatedAdminCorrelatedRestResourceApiService) GetDelegatedAdminCorrelatedRestResource(ctx context.Context, delegatedAdminCorrelatedRestResourceName string, restResourceTypeName string) ApiGetDelegatedAdminCorrelatedRestResourceRequest {
	return ApiGetDelegatedAdminCorrelatedRestResourceRequest{
		ApiService:                               a,
		ctx:                                      ctx,
		delegatedAdminCorrelatedRestResourceName: delegatedAdminCorrelatedRestResourceName,
		restResourceTypeName:                     restResourceTypeName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminCorrelatedRestResourceResponse
func (a *DelegatedAdminCorrelatedRestResourceApiService) GetDelegatedAdminCorrelatedRestResourceExecute(r ApiGetDelegatedAdminCorrelatedRestResourceRequest) (*DelegatedAdminCorrelatedRestResourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminCorrelatedRestResourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminCorrelatedRestResourceApiService.GetDelegatedAdminCorrelatedRestResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-correlated-rest-resource-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminCorrelatedRestResourceName, "delegatedAdminCorrelatedRestResourceName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rest-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.restResourceTypeName, "restResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDelegatedAdminCorrelatedRestResourceRequest struct {
	ctx                                      context.Context
	ApiService                               *DelegatedAdminCorrelatedRestResourceApiService
	delegatedAdminCorrelatedRestResourceName string
	restResourceTypeName                     string
	updateRequest                            *UpdateRequest
}

// Update an existing Delegated Admin Correlated REST Resource
func (r ApiUpdateDelegatedAdminCorrelatedRestResourceRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateDelegatedAdminCorrelatedRestResourceRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateDelegatedAdminCorrelatedRestResourceRequest) Execute() (*DelegatedAdminCorrelatedRestResourceResponse, *http.Response, error) {
	return r.ApiService.UpdateDelegatedAdminCorrelatedRestResourceExecute(r)
}

/*
UpdateDelegatedAdminCorrelatedRestResource Update an existing Delegated Admin Correlated REST Resource by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource
	@param restResourceTypeName Name of the REST Resource Type
	@return ApiUpdateDelegatedAdminCorrelatedRestResourceRequest
*/
func (a *DelegatedAdminCorrelatedRestResourceApiService) UpdateDelegatedAdminCorrelatedRestResource(ctx context.Context, delegatedAdminCorrelatedRestResourceName string, restResourceTypeName string) ApiUpdateDelegatedAdminCorrelatedRestResourceRequest {
	return ApiUpdateDelegatedAdminCorrelatedRestResourceRequest{
		ApiService:                               a,
		ctx:                                      ctx,
		delegatedAdminCorrelatedRestResourceName: delegatedAdminCorrelatedRestResourceName,
		restResourceTypeName:                     restResourceTypeName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminCorrelatedRestResourceResponse
func (a *DelegatedAdminCorrelatedRestResourceApiService) UpdateDelegatedAdminCorrelatedRestResourceExecute(r ApiUpdateDelegatedAdminCorrelatedRestResourceRequest) (*DelegatedAdminCorrelatedRestResourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminCorrelatedRestResourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminCorrelatedRestResourceApiService.UpdateDelegatedAdminCorrelatedRestResource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-correlated-rest-resource-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminCorrelatedRestResourceName, "delegatedAdminCorrelatedRestResourceName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rest-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.restResourceTypeName, "restResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
