/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumrepeatedCharactersPasswordValidatorSchemaUrn the model 'EnumrepeatedCharactersPasswordValidatorSchemaUrn'
type EnumrepeatedCharactersPasswordValidatorSchemaUrn string

// List of Enumrepeated-characters-password-validatorSchemaUrn
const (
	ENUMREPEATEDCHARACTERSPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORREPEATED_CHARACTERS EnumrepeatedCharactersPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:repeated-characters"
)

// All allowed values of EnumrepeatedCharactersPasswordValidatorSchemaUrn enum
var AllowedEnumrepeatedCharactersPasswordValidatorSchemaUrnEnumValues = []EnumrepeatedCharactersPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:repeated-characters",
}

func (v *EnumrepeatedCharactersPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrepeatedCharactersPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumrepeatedCharactersPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrepeatedCharactersPasswordValidatorSchemaUrn", value)
}

// NewEnumrepeatedCharactersPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumrepeatedCharactersPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrepeatedCharactersPasswordValidatorSchemaUrnFromValue(v string) (*EnumrepeatedCharactersPasswordValidatorSchemaUrn, error) {
	ev := EnumrepeatedCharactersPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrepeatedCharactersPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumrepeatedCharactersPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrepeatedCharactersPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumrepeatedCharactersPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumrepeated-characters-password-validatorSchemaUrn value
func (v EnumrepeatedCharactersPasswordValidatorSchemaUrn) Ptr() *EnumrepeatedCharactersPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn struct {
	value *EnumrepeatedCharactersPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn) Get() *EnumrepeatedCharactersPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn) Set(val *EnumrepeatedCharactersPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrepeatedCharactersPasswordValidatorSchemaUrn(val *EnumrepeatedCharactersPasswordValidatorSchemaUrn) *NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn {
	return &NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrepeatedCharactersPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
