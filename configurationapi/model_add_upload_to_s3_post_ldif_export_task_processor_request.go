/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddUploadToS3PostLdifExportTaskProcessorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUploadToS3PostLdifExportTaskProcessorRequest{}

// AddUploadToS3PostLdifExportTaskProcessorRequest struct for AddUploadToS3PostLdifExportTaskProcessorRequest
type AddUploadToS3PostLdifExportTaskProcessorRequest struct {
	Schemas []EnumuploadToS3PostLdifExportTaskProcessorSchemaUrn `json:"schemas"`
	// The external server with information to use when interacting with the AWS S3 service.
	AwsExternalServer string `json:"awsExternalServer"`
	// The name of the S3 bucket into which LDIF files should be copied.
	S3BucketName string `json:"s3BucketName"`
	// The target throughput to attempt to achieve for data transfers to or from S3, in megabits per second.
	TargetThroughputInMegabitsPerSecond *int64 `json:"targetThroughputInMegabitsPerSecond,omitempty"`
	// The maximum number of concurrent connections that may be used when transferring data to or from S3.
	MaximumConcurrentTransferConnections *int64 `json:"maximumConcurrentTransferConnections,omitempty"`
	// The maximum number of existing files matching the file retention pattern that should be retained in the S3 bucket after successfully uploading a newly exported file.
	MaximumFileCountToRetain *int64 `json:"maximumFileCountToRetain,omitempty"`
	// The maximum length of time to retain files matching the file retention pattern that should be retained in the S3 bucket after successfully uploading a newly exported file.
	MaximumFileAgeToRetain *string `json:"maximumFileAgeToRetain,omitempty"`
	// A regular expression pattern that will be used to identify which files are candidates for automatic removal based on the maximum-file-count-to-retain and maximum-file-age-to-retain properties. By default, all files in the bucket will be eligible for removal by retention processing.
	FileRetentionPattern *string `json:"fileRetentionPattern,omitempty"`
	// A description for this Post LDIF Export Task Processor
	Description *string `json:"description,omitempty"`
	// Indicates whether the Post LDIF Export Task Processor is enabled for use.
	Enabled bool `json:"enabled"`
	// Name of the new Post LDIF Export Task Processor
	ProcessorName string `json:"processorName"`
}

// NewAddUploadToS3PostLdifExportTaskProcessorRequest instantiates a new AddUploadToS3PostLdifExportTaskProcessorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUploadToS3PostLdifExportTaskProcessorRequest(schemas []EnumuploadToS3PostLdifExportTaskProcessorSchemaUrn, awsExternalServer string, s3BucketName string, enabled bool, processorName string) *AddUploadToS3PostLdifExportTaskProcessorRequest {
	this := AddUploadToS3PostLdifExportTaskProcessorRequest{}
	this.Schemas = schemas
	this.AwsExternalServer = awsExternalServer
	this.S3BucketName = s3BucketName
	this.Enabled = enabled
	this.ProcessorName = processorName
	return &this
}

// NewAddUploadToS3PostLdifExportTaskProcessorRequestWithDefaults instantiates a new AddUploadToS3PostLdifExportTaskProcessorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUploadToS3PostLdifExportTaskProcessorRequestWithDefaults() *AddUploadToS3PostLdifExportTaskProcessorRequest {
	this := AddUploadToS3PostLdifExportTaskProcessorRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetSchemas() []EnumuploadToS3PostLdifExportTaskProcessorSchemaUrn {
	if o == nil {
		var ret []EnumuploadToS3PostLdifExportTaskProcessorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetSchemasOk() ([]EnumuploadToS3PostLdifExportTaskProcessorSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetSchemas(v []EnumuploadToS3PostLdifExportTaskProcessorSchemaUrn) {
	o.Schemas = v
}

// GetAwsExternalServer returns the AwsExternalServer field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetAwsExternalServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsExternalServer
}

// GetAwsExternalServerOk returns a tuple with the AwsExternalServer field value
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetAwsExternalServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsExternalServer, true
}

// SetAwsExternalServer sets field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetAwsExternalServer(v string) {
	o.AwsExternalServer = v
}

// GetS3BucketName returns the S3BucketName field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetS3BucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.S3BucketName
}

// GetS3BucketNameOk returns a tuple with the S3BucketName field value
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetS3BucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S3BucketName, true
}

// SetS3BucketName sets field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetS3BucketName(v string) {
	o.S3BucketName = v
}

// GetTargetThroughputInMegabitsPerSecond returns the TargetThroughputInMegabitsPerSecond field value if set, zero value otherwise.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetTargetThroughputInMegabitsPerSecond() int64 {
	if o == nil || IsNil(o.TargetThroughputInMegabitsPerSecond) {
		var ret int64
		return ret
	}
	return *o.TargetThroughputInMegabitsPerSecond
}

// GetTargetThroughputInMegabitsPerSecondOk returns a tuple with the TargetThroughputInMegabitsPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetTargetThroughputInMegabitsPerSecondOk() (*int64, bool) {
	if o == nil || IsNil(o.TargetThroughputInMegabitsPerSecond) {
		return nil, false
	}
	return o.TargetThroughputInMegabitsPerSecond, true
}

// HasTargetThroughputInMegabitsPerSecond returns a boolean if a field has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) HasTargetThroughputInMegabitsPerSecond() bool {
	if o != nil && !IsNil(o.TargetThroughputInMegabitsPerSecond) {
		return true
	}

	return false
}

// SetTargetThroughputInMegabitsPerSecond gets a reference to the given int64 and assigns it to the TargetThroughputInMegabitsPerSecond field.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetTargetThroughputInMegabitsPerSecond(v int64) {
	o.TargetThroughputInMegabitsPerSecond = &v
}

// GetMaximumConcurrentTransferConnections returns the MaximumConcurrentTransferConnections field value if set, zero value otherwise.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetMaximumConcurrentTransferConnections() int64 {
	if o == nil || IsNil(o.MaximumConcurrentTransferConnections) {
		var ret int64
		return ret
	}
	return *o.MaximumConcurrentTransferConnections
}

// GetMaximumConcurrentTransferConnectionsOk returns a tuple with the MaximumConcurrentTransferConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetMaximumConcurrentTransferConnectionsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumConcurrentTransferConnections) {
		return nil, false
	}
	return o.MaximumConcurrentTransferConnections, true
}

// HasMaximumConcurrentTransferConnections returns a boolean if a field has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) HasMaximumConcurrentTransferConnections() bool {
	if o != nil && !IsNil(o.MaximumConcurrentTransferConnections) {
		return true
	}

	return false
}

// SetMaximumConcurrentTransferConnections gets a reference to the given int64 and assigns it to the MaximumConcurrentTransferConnections field.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetMaximumConcurrentTransferConnections(v int64) {
	o.MaximumConcurrentTransferConnections = &v
}

// GetMaximumFileCountToRetain returns the MaximumFileCountToRetain field value if set, zero value otherwise.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetMaximumFileCountToRetain() int64 {
	if o == nil || IsNil(o.MaximumFileCountToRetain) {
		var ret int64
		return ret
	}
	return *o.MaximumFileCountToRetain
}

// GetMaximumFileCountToRetainOk returns a tuple with the MaximumFileCountToRetain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetMaximumFileCountToRetainOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumFileCountToRetain) {
		return nil, false
	}
	return o.MaximumFileCountToRetain, true
}

// HasMaximumFileCountToRetain returns a boolean if a field has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) HasMaximumFileCountToRetain() bool {
	if o != nil && !IsNil(o.MaximumFileCountToRetain) {
		return true
	}

	return false
}

// SetMaximumFileCountToRetain gets a reference to the given int64 and assigns it to the MaximumFileCountToRetain field.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetMaximumFileCountToRetain(v int64) {
	o.MaximumFileCountToRetain = &v
}

// GetMaximumFileAgeToRetain returns the MaximumFileAgeToRetain field value if set, zero value otherwise.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetMaximumFileAgeToRetain() string {
	if o == nil || IsNil(o.MaximumFileAgeToRetain) {
		var ret string
		return ret
	}
	return *o.MaximumFileAgeToRetain
}

// GetMaximumFileAgeToRetainOk returns a tuple with the MaximumFileAgeToRetain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetMaximumFileAgeToRetainOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumFileAgeToRetain) {
		return nil, false
	}
	return o.MaximumFileAgeToRetain, true
}

// HasMaximumFileAgeToRetain returns a boolean if a field has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) HasMaximumFileAgeToRetain() bool {
	if o != nil && !IsNil(o.MaximumFileAgeToRetain) {
		return true
	}

	return false
}

// SetMaximumFileAgeToRetain gets a reference to the given string and assigns it to the MaximumFileAgeToRetain field.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetMaximumFileAgeToRetain(v string) {
	o.MaximumFileAgeToRetain = &v
}

// GetFileRetentionPattern returns the FileRetentionPattern field value if set, zero value otherwise.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetFileRetentionPattern() string {
	if o == nil || IsNil(o.FileRetentionPattern) {
		var ret string
		return ret
	}
	return *o.FileRetentionPattern
}

// GetFileRetentionPatternOk returns a tuple with the FileRetentionPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetFileRetentionPatternOk() (*string, bool) {
	if o == nil || IsNil(o.FileRetentionPattern) {
		return nil, false
	}
	return o.FileRetentionPattern, true
}

// HasFileRetentionPattern returns a boolean if a field has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) HasFileRetentionPattern() bool {
	if o != nil && !IsNil(o.FileRetentionPattern) {
		return true
	}

	return false
}

// SetFileRetentionPattern gets a reference to the given string and assigns it to the FileRetentionPattern field.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetFileRetentionPattern(v string) {
	o.FileRetentionPattern = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetProcessorName returns the ProcessorName field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetProcessorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessorName
}

// GetProcessorNameOk returns a tuple with the ProcessorName field value
// and a boolean to check if the value has been set.
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) GetProcessorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorName, true
}

// SetProcessorName sets field value
func (o *AddUploadToS3PostLdifExportTaskProcessorRequest) SetProcessorName(v string) {
	o.ProcessorName = v
}

func (o AddUploadToS3PostLdifExportTaskProcessorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUploadToS3PostLdifExportTaskProcessorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["awsExternalServer"] = o.AwsExternalServer
	toSerialize["s3BucketName"] = o.S3BucketName
	if !IsNil(o.TargetThroughputInMegabitsPerSecond) {
		toSerialize["targetThroughputInMegabitsPerSecond"] = o.TargetThroughputInMegabitsPerSecond
	}
	if !IsNil(o.MaximumConcurrentTransferConnections) {
		toSerialize["maximumConcurrentTransferConnections"] = o.MaximumConcurrentTransferConnections
	}
	if !IsNil(o.MaximumFileCountToRetain) {
		toSerialize["maximumFileCountToRetain"] = o.MaximumFileCountToRetain
	}
	if !IsNil(o.MaximumFileAgeToRetain) {
		toSerialize["maximumFileAgeToRetain"] = o.MaximumFileAgeToRetain
	}
	if !IsNil(o.FileRetentionPattern) {
		toSerialize["fileRetentionPattern"] = o.FileRetentionPattern
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["processorName"] = o.ProcessorName
	return toSerialize, nil
}

type NullableAddUploadToS3PostLdifExportTaskProcessorRequest struct {
	value *AddUploadToS3PostLdifExportTaskProcessorRequest
	isSet bool
}

func (v NullableAddUploadToS3PostLdifExportTaskProcessorRequest) Get() *AddUploadToS3PostLdifExportTaskProcessorRequest {
	return v.value
}

func (v *NullableAddUploadToS3PostLdifExportTaskProcessorRequest) Set(val *AddUploadToS3PostLdifExportTaskProcessorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUploadToS3PostLdifExportTaskProcessorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUploadToS3PostLdifExportTaskProcessorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUploadToS3PostLdifExportTaskProcessorRequest(val *AddUploadToS3PostLdifExportTaskProcessorRequest) *NullableAddUploadToS3PostLdifExportTaskProcessorRequest {
	return &NullableAddUploadToS3PostLdifExportTaskProcessorRequest{value: val, isSet: true}
}

func (v NullableAddUploadToS3PostLdifExportTaskProcessorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUploadToS3PostLdifExportTaskProcessorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
