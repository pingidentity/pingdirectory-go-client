/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginEntryCacheInfoProp Specifies the level of detail to include for each entry cache.
type EnumpluginEntryCacheInfoProp string

// List of Enumplugin-entryCacheInfoProp
const (
	ENUMPLUGINENTRYCACHEINFOPROP_NONE     EnumpluginEntryCacheInfoProp = "none"
	ENUMPLUGINENTRYCACHEINFOPROP_BASIC    EnumpluginEntryCacheInfoProp = "basic"
	ENUMPLUGINENTRYCACHEINFOPROP_EXTENDED EnumpluginEntryCacheInfoProp = "extended"
)

// All allowed values of EnumpluginEntryCacheInfoProp enum
var AllowedEnumpluginEntryCacheInfoPropEnumValues = []EnumpluginEntryCacheInfoProp{
	"none",
	"basic",
	"extended",
}

func (v *EnumpluginEntryCacheInfoProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginEntryCacheInfoProp(value)
	for _, existing := range AllowedEnumpluginEntryCacheInfoPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginEntryCacheInfoProp", value)
}

// NewEnumpluginEntryCacheInfoPropFromValue returns a pointer to a valid EnumpluginEntryCacheInfoProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginEntryCacheInfoPropFromValue(v string) (*EnumpluginEntryCacheInfoProp, error) {
	ev := EnumpluginEntryCacheInfoProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginEntryCacheInfoProp: valid values are %v", v, AllowedEnumpluginEntryCacheInfoPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginEntryCacheInfoProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginEntryCacheInfoPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-entryCacheInfoProp value
func (v EnumpluginEntryCacheInfoProp) Ptr() *EnumpluginEntryCacheInfoProp {
	return &v
}

type NullableEnumpluginEntryCacheInfoProp struct {
	value *EnumpluginEntryCacheInfoProp
	isSet bool
}

func (v NullableEnumpluginEntryCacheInfoProp) Get() *EnumpluginEntryCacheInfoProp {
	return v.value
}

func (v *NullableEnumpluginEntryCacheInfoProp) Set(val *EnumpluginEntryCacheInfoProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginEntryCacheInfoProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginEntryCacheInfoProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginEntryCacheInfoProp(val *EnumpluginEntryCacheInfoProp) *NullableEnumpluginEntryCacheInfoProp {
	return &NullableEnumpluginEntryCacheInfoProp{value: val, isSet: true}
}

func (v NullableEnumpluginEntryCacheInfoProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginEntryCacheInfoProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
