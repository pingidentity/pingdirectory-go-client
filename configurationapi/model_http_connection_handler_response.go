/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// HttpConnectionHandlerResponse struct for HttpConnectionHandlerResponse
type HttpConnectionHandlerResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	// Name of the Connection Handler
	Id      string                               `json:"id"`
	Schemas []EnumhttpConnectionHandlerSchemaUrn `json:"schemas"`
	// Specifies the address on which to listen for connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.
	ListenAddress *string `json:"listenAddress,omitempty"`
	// Specifies the port number on which the HTTP Connection Handler will listen for connections from clients.
	ListenPort int32 `json:"listenPort"`
	// Indicates whether the HTTP Connection Handler should use SSL.
	UseSSL *bool `json:"useSSL,omitempty"`
	// Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when performing SSL communication.
	SslCertNickname *string `json:"sslCertNickname,omitempty"`
	// Specifies information about servlets that will be provided via this connection handler.
	HttpServletExtension []string `json:"httpServletExtension,omitempty"`
	// Specifies information about web applications that will be provided via this connection handler.
	WebApplicationExtension []string `json:"webApplicationExtension,omitempty"`
	// Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for operations processed through this HTTP Connection Handler.
	HttpOperationLogPublisher []string `json:"httpOperationLogPublisher,omitempty"`
	// Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.
	SslProtocol []string `json:"sslProtocol,omitempty"`
	// Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.
	SslCipherSuite []string `json:"sslCipherSuite,omitempty"`
	// Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS clients.
	KeyManagerProvider *string `json:"keyManagerProvider,omitempty"`
	// Specifies the trust manager provider that will be used to validate any certificates presented by HTTPS clients.
	TrustManagerProvider *string `json:"trustManagerProvider,omitempty"`
	// Specifies the number of threads that will be used for accepting connections and reading requests from clients.
	NumRequestHandlers *int32 `json:"numRequestHandlers,omitempty"`
	// Indicates whether to enable statistics collection for this connection handler.
	KeepStats *bool `json:"keepStats,omitempty"`
	// Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish large numbers of connections simultaneously.
	AcceptBacklog *int32 `json:"acceptBacklog,omitempty"`
	// Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high rate of connection establishment and termination.
	AllowTCPReuseAddress *bool `json:"allowTCPReuseAddress,omitempty"`
	// Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.
	IdleTimeLimit *string `json:"idleTimeLimit,omitempty"`
	// Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different idle time limit is applied on the connections.
	LowResourcesConnectionThreshold *int32 `json:"lowResourcesConnectionThreshold,omitempty"`
	// Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.
	LowResourcesIdleTimeLimit *string `json:"lowResourcesIdleTimeLimit,omitempty"`
	// Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as request parameters.
	EnableMultipartMIMEParameters *bool `json:"enableMultipartMIMEParameters,omitempty"`
	// Indicates whether to use \"Forwarded\" and \"X-Forwarded-*\" request headers to override corresponding HTTP request information available during request processing.
	UseForwardedHeaders *bool `json:"useForwardedHeaders,omitempty"`
	// Specifies the maximum buffer size of an http request including the request uri and all of the request headers.
	HttpRequestHeaderSize *int32 `json:"httpRequestHeaderSize,omitempty"`
	// Specifies HTTP header fields and values added to response headers for all requests.
	ResponseHeader []string `json:"responseHeader,omitempty"`
	// If enabled, a correlation ID header will be added to outgoing HTTP responses.
	UseCorrelationIDHeader *bool `json:"useCorrelationIDHeader,omitempty"`
	// Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".
	CorrelationIDResponseHeader *string `json:"correlationIDResponseHeader,omitempty"`
	// Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".
	CorrelationIDRequestHeader []string                                      `json:"correlationIDRequestHeader,omitempty"`
	SslClientAuthPolicy        *EnumconnectionHandlerSslClientAuthPolicyProp `json:"sslClientAuthPolicy,omitempty"`
	// A description for this Connection Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether the Connection Handler is enabled.
	Enabled bool `json:"enabled"`
}

// NewHttpConnectionHandlerResponse instantiates a new HttpConnectionHandlerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpConnectionHandlerResponse(id string, schemas []EnumhttpConnectionHandlerSchemaUrn, listenPort int32, enabled bool) *HttpConnectionHandlerResponse {
	this := HttpConnectionHandlerResponse{}
	this.Id = id
	this.Schemas = schemas
	this.ListenPort = listenPort
	this.Enabled = enabled
	return &this
}

// NewHttpConnectionHandlerResponseWithDefaults instantiates a new HttpConnectionHandlerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpConnectionHandlerResponseWithDefaults() *HttpConnectionHandlerResponse {
	this := HttpConnectionHandlerResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *HttpConnectionHandlerResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *HttpConnectionHandlerResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetId returns the Id field value
func (o *HttpConnectionHandlerResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HttpConnectionHandlerResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *HttpConnectionHandlerResponse) GetSchemas() []EnumhttpConnectionHandlerSchemaUrn {
	if o == nil {
		var ret []EnumhttpConnectionHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetSchemasOk() ([]EnumhttpConnectionHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *HttpConnectionHandlerResponse) SetSchemas(v []EnumhttpConnectionHandlerSchemaUrn) {
	o.Schemas = v
}

// GetListenAddress returns the ListenAddress field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetListenAddress() string {
	if o == nil || isNil(o.ListenAddress) {
		var ret string
		return ret
	}
	return *o.ListenAddress
}

// GetListenAddressOk returns a tuple with the ListenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetListenAddressOk() (*string, bool) {
	if o == nil || isNil(o.ListenAddress) {
		return nil, false
	}
	return o.ListenAddress, true
}

// HasListenAddress returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasListenAddress() bool {
	if o != nil && !isNil(o.ListenAddress) {
		return true
	}

	return false
}

// SetListenAddress gets a reference to the given string and assigns it to the ListenAddress field.
func (o *HttpConnectionHandlerResponse) SetListenAddress(v string) {
	o.ListenAddress = &v
}

// GetListenPort returns the ListenPort field value
func (o *HttpConnectionHandlerResponse) GetListenPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ListenPort
}

// GetListenPortOk returns a tuple with the ListenPort field value
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetListenPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListenPort, true
}

// SetListenPort sets field value
func (o *HttpConnectionHandlerResponse) SetListenPort(v int32) {
	o.ListenPort = v
}

// GetUseSSL returns the UseSSL field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetUseSSL() bool {
	if o == nil || isNil(o.UseSSL) {
		var ret bool
		return ret
	}
	return *o.UseSSL
}

// GetUseSSLOk returns a tuple with the UseSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetUseSSLOk() (*bool, bool) {
	if o == nil || isNil(o.UseSSL) {
		return nil, false
	}
	return o.UseSSL, true
}

// HasUseSSL returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasUseSSL() bool {
	if o != nil && !isNil(o.UseSSL) {
		return true
	}

	return false
}

// SetUseSSL gets a reference to the given bool and assigns it to the UseSSL field.
func (o *HttpConnectionHandlerResponse) SetUseSSL(v bool) {
	o.UseSSL = &v
}

// GetSslCertNickname returns the SslCertNickname field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetSslCertNickname() string {
	if o == nil || isNil(o.SslCertNickname) {
		var ret string
		return ret
	}
	return *o.SslCertNickname
}

// GetSslCertNicknameOk returns a tuple with the SslCertNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetSslCertNicknameOk() (*string, bool) {
	if o == nil || isNil(o.SslCertNickname) {
		return nil, false
	}
	return o.SslCertNickname, true
}

// HasSslCertNickname returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasSslCertNickname() bool {
	if o != nil && !isNil(o.SslCertNickname) {
		return true
	}

	return false
}

// SetSslCertNickname gets a reference to the given string and assigns it to the SslCertNickname field.
func (o *HttpConnectionHandlerResponse) SetSslCertNickname(v string) {
	o.SslCertNickname = &v
}

// GetHttpServletExtension returns the HttpServletExtension field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetHttpServletExtension() []string {
	if o == nil || isNil(o.HttpServletExtension) {
		var ret []string
		return ret
	}
	return o.HttpServletExtension
}

// GetHttpServletExtensionOk returns a tuple with the HttpServletExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetHttpServletExtensionOk() ([]string, bool) {
	if o == nil || isNil(o.HttpServletExtension) {
		return nil, false
	}
	return o.HttpServletExtension, true
}

// HasHttpServletExtension returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasHttpServletExtension() bool {
	if o != nil && !isNil(o.HttpServletExtension) {
		return true
	}

	return false
}

// SetHttpServletExtension gets a reference to the given []string and assigns it to the HttpServletExtension field.
func (o *HttpConnectionHandlerResponse) SetHttpServletExtension(v []string) {
	o.HttpServletExtension = v
}

// GetWebApplicationExtension returns the WebApplicationExtension field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetWebApplicationExtension() []string {
	if o == nil || isNil(o.WebApplicationExtension) {
		var ret []string
		return ret
	}
	return o.WebApplicationExtension
}

// GetWebApplicationExtensionOk returns a tuple with the WebApplicationExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetWebApplicationExtensionOk() ([]string, bool) {
	if o == nil || isNil(o.WebApplicationExtension) {
		return nil, false
	}
	return o.WebApplicationExtension, true
}

// HasWebApplicationExtension returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasWebApplicationExtension() bool {
	if o != nil && !isNil(o.WebApplicationExtension) {
		return true
	}

	return false
}

// SetWebApplicationExtension gets a reference to the given []string and assigns it to the WebApplicationExtension field.
func (o *HttpConnectionHandlerResponse) SetWebApplicationExtension(v []string) {
	o.WebApplicationExtension = v
}

// GetHttpOperationLogPublisher returns the HttpOperationLogPublisher field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetHttpOperationLogPublisher() []string {
	if o == nil || isNil(o.HttpOperationLogPublisher) {
		var ret []string
		return ret
	}
	return o.HttpOperationLogPublisher
}

// GetHttpOperationLogPublisherOk returns a tuple with the HttpOperationLogPublisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetHttpOperationLogPublisherOk() ([]string, bool) {
	if o == nil || isNil(o.HttpOperationLogPublisher) {
		return nil, false
	}
	return o.HttpOperationLogPublisher, true
}

// HasHttpOperationLogPublisher returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasHttpOperationLogPublisher() bool {
	if o != nil && !isNil(o.HttpOperationLogPublisher) {
		return true
	}

	return false
}

// SetHttpOperationLogPublisher gets a reference to the given []string and assigns it to the HttpOperationLogPublisher field.
func (o *HttpConnectionHandlerResponse) SetHttpOperationLogPublisher(v []string) {
	o.HttpOperationLogPublisher = v
}

// GetSslProtocol returns the SslProtocol field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetSslProtocol() []string {
	if o == nil || isNil(o.SslProtocol) {
		var ret []string
		return ret
	}
	return o.SslProtocol
}

// GetSslProtocolOk returns a tuple with the SslProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetSslProtocolOk() ([]string, bool) {
	if o == nil || isNil(o.SslProtocol) {
		return nil, false
	}
	return o.SslProtocol, true
}

// HasSslProtocol returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasSslProtocol() bool {
	if o != nil && !isNil(o.SslProtocol) {
		return true
	}

	return false
}

// SetSslProtocol gets a reference to the given []string and assigns it to the SslProtocol field.
func (o *HttpConnectionHandlerResponse) SetSslProtocol(v []string) {
	o.SslProtocol = v
}

// GetSslCipherSuite returns the SslCipherSuite field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetSslCipherSuite() []string {
	if o == nil || isNil(o.SslCipherSuite) {
		var ret []string
		return ret
	}
	return o.SslCipherSuite
}

// GetSslCipherSuiteOk returns a tuple with the SslCipherSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetSslCipherSuiteOk() ([]string, bool) {
	if o == nil || isNil(o.SslCipherSuite) {
		return nil, false
	}
	return o.SslCipherSuite, true
}

// HasSslCipherSuite returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasSslCipherSuite() bool {
	if o != nil && !isNil(o.SslCipherSuite) {
		return true
	}

	return false
}

// SetSslCipherSuite gets a reference to the given []string and assigns it to the SslCipherSuite field.
func (o *HttpConnectionHandlerResponse) SetSslCipherSuite(v []string) {
	o.SslCipherSuite = v
}

// GetKeyManagerProvider returns the KeyManagerProvider field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetKeyManagerProvider() string {
	if o == nil || isNil(o.KeyManagerProvider) {
		var ret string
		return ret
	}
	return *o.KeyManagerProvider
}

// GetKeyManagerProviderOk returns a tuple with the KeyManagerProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetKeyManagerProviderOk() (*string, bool) {
	if o == nil || isNil(o.KeyManagerProvider) {
		return nil, false
	}
	return o.KeyManagerProvider, true
}

// HasKeyManagerProvider returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasKeyManagerProvider() bool {
	if o != nil && !isNil(o.KeyManagerProvider) {
		return true
	}

	return false
}

// SetKeyManagerProvider gets a reference to the given string and assigns it to the KeyManagerProvider field.
func (o *HttpConnectionHandlerResponse) SetKeyManagerProvider(v string) {
	o.KeyManagerProvider = &v
}

// GetTrustManagerProvider returns the TrustManagerProvider field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetTrustManagerProvider() string {
	if o == nil || isNil(o.TrustManagerProvider) {
		var ret string
		return ret
	}
	return *o.TrustManagerProvider
}

// GetTrustManagerProviderOk returns a tuple with the TrustManagerProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetTrustManagerProviderOk() (*string, bool) {
	if o == nil || isNil(o.TrustManagerProvider) {
		return nil, false
	}
	return o.TrustManagerProvider, true
}

// HasTrustManagerProvider returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasTrustManagerProvider() bool {
	if o != nil && !isNil(o.TrustManagerProvider) {
		return true
	}

	return false
}

// SetTrustManagerProvider gets a reference to the given string and assigns it to the TrustManagerProvider field.
func (o *HttpConnectionHandlerResponse) SetTrustManagerProvider(v string) {
	o.TrustManagerProvider = &v
}

// GetNumRequestHandlers returns the NumRequestHandlers field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetNumRequestHandlers() int32 {
	if o == nil || isNil(o.NumRequestHandlers) {
		var ret int32
		return ret
	}
	return *o.NumRequestHandlers
}

// GetNumRequestHandlersOk returns a tuple with the NumRequestHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetNumRequestHandlersOk() (*int32, bool) {
	if o == nil || isNil(o.NumRequestHandlers) {
		return nil, false
	}
	return o.NumRequestHandlers, true
}

// HasNumRequestHandlers returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasNumRequestHandlers() bool {
	if o != nil && !isNil(o.NumRequestHandlers) {
		return true
	}

	return false
}

// SetNumRequestHandlers gets a reference to the given int32 and assigns it to the NumRequestHandlers field.
func (o *HttpConnectionHandlerResponse) SetNumRequestHandlers(v int32) {
	o.NumRequestHandlers = &v
}

// GetKeepStats returns the KeepStats field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetKeepStats() bool {
	if o == nil || isNil(o.KeepStats) {
		var ret bool
		return ret
	}
	return *o.KeepStats
}

// GetKeepStatsOk returns a tuple with the KeepStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetKeepStatsOk() (*bool, bool) {
	if o == nil || isNil(o.KeepStats) {
		return nil, false
	}
	return o.KeepStats, true
}

// HasKeepStats returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasKeepStats() bool {
	if o != nil && !isNil(o.KeepStats) {
		return true
	}

	return false
}

// SetKeepStats gets a reference to the given bool and assigns it to the KeepStats field.
func (o *HttpConnectionHandlerResponse) SetKeepStats(v bool) {
	o.KeepStats = &v
}

// GetAcceptBacklog returns the AcceptBacklog field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetAcceptBacklog() int32 {
	if o == nil || isNil(o.AcceptBacklog) {
		var ret int32
		return ret
	}
	return *o.AcceptBacklog
}

// GetAcceptBacklogOk returns a tuple with the AcceptBacklog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetAcceptBacklogOk() (*int32, bool) {
	if o == nil || isNil(o.AcceptBacklog) {
		return nil, false
	}
	return o.AcceptBacklog, true
}

// HasAcceptBacklog returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasAcceptBacklog() bool {
	if o != nil && !isNil(o.AcceptBacklog) {
		return true
	}

	return false
}

// SetAcceptBacklog gets a reference to the given int32 and assigns it to the AcceptBacklog field.
func (o *HttpConnectionHandlerResponse) SetAcceptBacklog(v int32) {
	o.AcceptBacklog = &v
}

// GetAllowTCPReuseAddress returns the AllowTCPReuseAddress field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetAllowTCPReuseAddress() bool {
	if o == nil || isNil(o.AllowTCPReuseAddress) {
		var ret bool
		return ret
	}
	return *o.AllowTCPReuseAddress
}

// GetAllowTCPReuseAddressOk returns a tuple with the AllowTCPReuseAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetAllowTCPReuseAddressOk() (*bool, bool) {
	if o == nil || isNil(o.AllowTCPReuseAddress) {
		return nil, false
	}
	return o.AllowTCPReuseAddress, true
}

// HasAllowTCPReuseAddress returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasAllowTCPReuseAddress() bool {
	if o != nil && !isNil(o.AllowTCPReuseAddress) {
		return true
	}

	return false
}

// SetAllowTCPReuseAddress gets a reference to the given bool and assigns it to the AllowTCPReuseAddress field.
func (o *HttpConnectionHandlerResponse) SetAllowTCPReuseAddress(v bool) {
	o.AllowTCPReuseAddress = &v
}

// GetIdleTimeLimit returns the IdleTimeLimit field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetIdleTimeLimit() string {
	if o == nil || isNil(o.IdleTimeLimit) {
		var ret string
		return ret
	}
	return *o.IdleTimeLimit
}

// GetIdleTimeLimitOk returns a tuple with the IdleTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetIdleTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.IdleTimeLimit) {
		return nil, false
	}
	return o.IdleTimeLimit, true
}

// HasIdleTimeLimit returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasIdleTimeLimit() bool {
	if o != nil && !isNil(o.IdleTimeLimit) {
		return true
	}

	return false
}

// SetIdleTimeLimit gets a reference to the given string and assigns it to the IdleTimeLimit field.
func (o *HttpConnectionHandlerResponse) SetIdleTimeLimit(v string) {
	o.IdleTimeLimit = &v
}

// GetLowResourcesConnectionThreshold returns the LowResourcesConnectionThreshold field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetLowResourcesConnectionThreshold() int32 {
	if o == nil || isNil(o.LowResourcesConnectionThreshold) {
		var ret int32
		return ret
	}
	return *o.LowResourcesConnectionThreshold
}

// GetLowResourcesConnectionThresholdOk returns a tuple with the LowResourcesConnectionThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetLowResourcesConnectionThresholdOk() (*int32, bool) {
	if o == nil || isNil(o.LowResourcesConnectionThreshold) {
		return nil, false
	}
	return o.LowResourcesConnectionThreshold, true
}

// HasLowResourcesConnectionThreshold returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasLowResourcesConnectionThreshold() bool {
	if o != nil && !isNil(o.LowResourcesConnectionThreshold) {
		return true
	}

	return false
}

// SetLowResourcesConnectionThreshold gets a reference to the given int32 and assigns it to the LowResourcesConnectionThreshold field.
func (o *HttpConnectionHandlerResponse) SetLowResourcesConnectionThreshold(v int32) {
	o.LowResourcesConnectionThreshold = &v
}

// GetLowResourcesIdleTimeLimit returns the LowResourcesIdleTimeLimit field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetLowResourcesIdleTimeLimit() string {
	if o == nil || isNil(o.LowResourcesIdleTimeLimit) {
		var ret string
		return ret
	}
	return *o.LowResourcesIdleTimeLimit
}

// GetLowResourcesIdleTimeLimitOk returns a tuple with the LowResourcesIdleTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetLowResourcesIdleTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.LowResourcesIdleTimeLimit) {
		return nil, false
	}
	return o.LowResourcesIdleTimeLimit, true
}

// HasLowResourcesIdleTimeLimit returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasLowResourcesIdleTimeLimit() bool {
	if o != nil && !isNil(o.LowResourcesIdleTimeLimit) {
		return true
	}

	return false
}

// SetLowResourcesIdleTimeLimit gets a reference to the given string and assigns it to the LowResourcesIdleTimeLimit field.
func (o *HttpConnectionHandlerResponse) SetLowResourcesIdleTimeLimit(v string) {
	o.LowResourcesIdleTimeLimit = &v
}

// GetEnableMultipartMIMEParameters returns the EnableMultipartMIMEParameters field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetEnableMultipartMIMEParameters() bool {
	if o == nil || isNil(o.EnableMultipartMIMEParameters) {
		var ret bool
		return ret
	}
	return *o.EnableMultipartMIMEParameters
}

// GetEnableMultipartMIMEParametersOk returns a tuple with the EnableMultipartMIMEParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetEnableMultipartMIMEParametersOk() (*bool, bool) {
	if o == nil || isNil(o.EnableMultipartMIMEParameters) {
		return nil, false
	}
	return o.EnableMultipartMIMEParameters, true
}

// HasEnableMultipartMIMEParameters returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasEnableMultipartMIMEParameters() bool {
	if o != nil && !isNil(o.EnableMultipartMIMEParameters) {
		return true
	}

	return false
}

// SetEnableMultipartMIMEParameters gets a reference to the given bool and assigns it to the EnableMultipartMIMEParameters field.
func (o *HttpConnectionHandlerResponse) SetEnableMultipartMIMEParameters(v bool) {
	o.EnableMultipartMIMEParameters = &v
}

// GetUseForwardedHeaders returns the UseForwardedHeaders field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetUseForwardedHeaders() bool {
	if o == nil || isNil(o.UseForwardedHeaders) {
		var ret bool
		return ret
	}
	return *o.UseForwardedHeaders
}

// GetUseForwardedHeadersOk returns a tuple with the UseForwardedHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetUseForwardedHeadersOk() (*bool, bool) {
	if o == nil || isNil(o.UseForwardedHeaders) {
		return nil, false
	}
	return o.UseForwardedHeaders, true
}

// HasUseForwardedHeaders returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasUseForwardedHeaders() bool {
	if o != nil && !isNil(o.UseForwardedHeaders) {
		return true
	}

	return false
}

// SetUseForwardedHeaders gets a reference to the given bool and assigns it to the UseForwardedHeaders field.
func (o *HttpConnectionHandlerResponse) SetUseForwardedHeaders(v bool) {
	o.UseForwardedHeaders = &v
}

// GetHttpRequestHeaderSize returns the HttpRequestHeaderSize field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetHttpRequestHeaderSize() int32 {
	if o == nil || isNil(o.HttpRequestHeaderSize) {
		var ret int32
		return ret
	}
	return *o.HttpRequestHeaderSize
}

// GetHttpRequestHeaderSizeOk returns a tuple with the HttpRequestHeaderSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetHttpRequestHeaderSizeOk() (*int32, bool) {
	if o == nil || isNil(o.HttpRequestHeaderSize) {
		return nil, false
	}
	return o.HttpRequestHeaderSize, true
}

// HasHttpRequestHeaderSize returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasHttpRequestHeaderSize() bool {
	if o != nil && !isNil(o.HttpRequestHeaderSize) {
		return true
	}

	return false
}

// SetHttpRequestHeaderSize gets a reference to the given int32 and assigns it to the HttpRequestHeaderSize field.
func (o *HttpConnectionHandlerResponse) SetHttpRequestHeaderSize(v int32) {
	o.HttpRequestHeaderSize = &v
}

// GetResponseHeader returns the ResponseHeader field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetResponseHeader() []string {
	if o == nil || isNil(o.ResponseHeader) {
		var ret []string
		return ret
	}
	return o.ResponseHeader
}

// GetResponseHeaderOk returns a tuple with the ResponseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetResponseHeaderOk() ([]string, bool) {
	if o == nil || isNil(o.ResponseHeader) {
		return nil, false
	}
	return o.ResponseHeader, true
}

// HasResponseHeader returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasResponseHeader() bool {
	if o != nil && !isNil(o.ResponseHeader) {
		return true
	}

	return false
}

// SetResponseHeader gets a reference to the given []string and assigns it to the ResponseHeader field.
func (o *HttpConnectionHandlerResponse) SetResponseHeader(v []string) {
	o.ResponseHeader = v
}

// GetUseCorrelationIDHeader returns the UseCorrelationIDHeader field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetUseCorrelationIDHeader() bool {
	if o == nil || isNil(o.UseCorrelationIDHeader) {
		var ret bool
		return ret
	}
	return *o.UseCorrelationIDHeader
}

// GetUseCorrelationIDHeaderOk returns a tuple with the UseCorrelationIDHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetUseCorrelationIDHeaderOk() (*bool, bool) {
	if o == nil || isNil(o.UseCorrelationIDHeader) {
		return nil, false
	}
	return o.UseCorrelationIDHeader, true
}

// HasUseCorrelationIDHeader returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasUseCorrelationIDHeader() bool {
	if o != nil && !isNil(o.UseCorrelationIDHeader) {
		return true
	}

	return false
}

// SetUseCorrelationIDHeader gets a reference to the given bool and assigns it to the UseCorrelationIDHeader field.
func (o *HttpConnectionHandlerResponse) SetUseCorrelationIDHeader(v bool) {
	o.UseCorrelationIDHeader = &v
}

// GetCorrelationIDResponseHeader returns the CorrelationIDResponseHeader field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetCorrelationIDResponseHeader() string {
	if o == nil || isNil(o.CorrelationIDResponseHeader) {
		var ret string
		return ret
	}
	return *o.CorrelationIDResponseHeader
}

// GetCorrelationIDResponseHeaderOk returns a tuple with the CorrelationIDResponseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetCorrelationIDResponseHeaderOk() (*string, bool) {
	if o == nil || isNil(o.CorrelationIDResponseHeader) {
		return nil, false
	}
	return o.CorrelationIDResponseHeader, true
}

// HasCorrelationIDResponseHeader returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasCorrelationIDResponseHeader() bool {
	if o != nil && !isNil(o.CorrelationIDResponseHeader) {
		return true
	}

	return false
}

// SetCorrelationIDResponseHeader gets a reference to the given string and assigns it to the CorrelationIDResponseHeader field.
func (o *HttpConnectionHandlerResponse) SetCorrelationIDResponseHeader(v string) {
	o.CorrelationIDResponseHeader = &v
}

// GetCorrelationIDRequestHeader returns the CorrelationIDRequestHeader field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetCorrelationIDRequestHeader() []string {
	if o == nil || isNil(o.CorrelationIDRequestHeader) {
		var ret []string
		return ret
	}
	return o.CorrelationIDRequestHeader
}

// GetCorrelationIDRequestHeaderOk returns a tuple with the CorrelationIDRequestHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetCorrelationIDRequestHeaderOk() ([]string, bool) {
	if o == nil || isNil(o.CorrelationIDRequestHeader) {
		return nil, false
	}
	return o.CorrelationIDRequestHeader, true
}

// HasCorrelationIDRequestHeader returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasCorrelationIDRequestHeader() bool {
	if o != nil && !isNil(o.CorrelationIDRequestHeader) {
		return true
	}

	return false
}

// SetCorrelationIDRequestHeader gets a reference to the given []string and assigns it to the CorrelationIDRequestHeader field.
func (o *HttpConnectionHandlerResponse) SetCorrelationIDRequestHeader(v []string) {
	o.CorrelationIDRequestHeader = v
}

// GetSslClientAuthPolicy returns the SslClientAuthPolicy field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetSslClientAuthPolicy() EnumconnectionHandlerSslClientAuthPolicyProp {
	if o == nil || isNil(o.SslClientAuthPolicy) {
		var ret EnumconnectionHandlerSslClientAuthPolicyProp
		return ret
	}
	return *o.SslClientAuthPolicy
}

// GetSslClientAuthPolicyOk returns a tuple with the SslClientAuthPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetSslClientAuthPolicyOk() (*EnumconnectionHandlerSslClientAuthPolicyProp, bool) {
	if o == nil || isNil(o.SslClientAuthPolicy) {
		return nil, false
	}
	return o.SslClientAuthPolicy, true
}

// HasSslClientAuthPolicy returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasSslClientAuthPolicy() bool {
	if o != nil && !isNil(o.SslClientAuthPolicy) {
		return true
	}

	return false
}

// SetSslClientAuthPolicy gets a reference to the given EnumconnectionHandlerSslClientAuthPolicyProp and assigns it to the SslClientAuthPolicy field.
func (o *HttpConnectionHandlerResponse) SetSslClientAuthPolicy(v EnumconnectionHandlerSslClientAuthPolicyProp) {
	o.SslClientAuthPolicy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HttpConnectionHandlerResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HttpConnectionHandlerResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HttpConnectionHandlerResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *HttpConnectionHandlerResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *HttpConnectionHandlerResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *HttpConnectionHandlerResponse) SetEnabled(v bool) {
	o.Enabled = v
}

func (o HttpConnectionHandlerResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.ListenAddress) {
		toSerialize["listenAddress"] = o.ListenAddress
	}
	if true {
		toSerialize["listenPort"] = o.ListenPort
	}
	if !isNil(o.UseSSL) {
		toSerialize["useSSL"] = o.UseSSL
	}
	if !isNil(o.SslCertNickname) {
		toSerialize["sslCertNickname"] = o.SslCertNickname
	}
	if !isNil(o.HttpServletExtension) {
		toSerialize["httpServletExtension"] = o.HttpServletExtension
	}
	if !isNil(o.WebApplicationExtension) {
		toSerialize["webApplicationExtension"] = o.WebApplicationExtension
	}
	if !isNil(o.HttpOperationLogPublisher) {
		toSerialize["httpOperationLogPublisher"] = o.HttpOperationLogPublisher
	}
	if !isNil(o.SslProtocol) {
		toSerialize["sslProtocol"] = o.SslProtocol
	}
	if !isNil(o.SslCipherSuite) {
		toSerialize["sslCipherSuite"] = o.SslCipherSuite
	}
	if !isNil(o.KeyManagerProvider) {
		toSerialize["keyManagerProvider"] = o.KeyManagerProvider
	}
	if !isNil(o.TrustManagerProvider) {
		toSerialize["trustManagerProvider"] = o.TrustManagerProvider
	}
	if !isNil(o.NumRequestHandlers) {
		toSerialize["numRequestHandlers"] = o.NumRequestHandlers
	}
	if !isNil(o.KeepStats) {
		toSerialize["keepStats"] = o.KeepStats
	}
	if !isNil(o.AcceptBacklog) {
		toSerialize["acceptBacklog"] = o.AcceptBacklog
	}
	if !isNil(o.AllowTCPReuseAddress) {
		toSerialize["allowTCPReuseAddress"] = o.AllowTCPReuseAddress
	}
	if !isNil(o.IdleTimeLimit) {
		toSerialize["idleTimeLimit"] = o.IdleTimeLimit
	}
	if !isNil(o.LowResourcesConnectionThreshold) {
		toSerialize["lowResourcesConnectionThreshold"] = o.LowResourcesConnectionThreshold
	}
	if !isNil(o.LowResourcesIdleTimeLimit) {
		toSerialize["lowResourcesIdleTimeLimit"] = o.LowResourcesIdleTimeLimit
	}
	if !isNil(o.EnableMultipartMIMEParameters) {
		toSerialize["enableMultipartMIMEParameters"] = o.EnableMultipartMIMEParameters
	}
	if !isNil(o.UseForwardedHeaders) {
		toSerialize["useForwardedHeaders"] = o.UseForwardedHeaders
	}
	if !isNil(o.HttpRequestHeaderSize) {
		toSerialize["httpRequestHeaderSize"] = o.HttpRequestHeaderSize
	}
	if !isNil(o.ResponseHeader) {
		toSerialize["responseHeader"] = o.ResponseHeader
	}
	if !isNil(o.UseCorrelationIDHeader) {
		toSerialize["useCorrelationIDHeader"] = o.UseCorrelationIDHeader
	}
	if !isNil(o.CorrelationIDResponseHeader) {
		toSerialize["correlationIDResponseHeader"] = o.CorrelationIDResponseHeader
	}
	if !isNil(o.CorrelationIDRequestHeader) {
		toSerialize["correlationIDRequestHeader"] = o.CorrelationIDRequestHeader
	}
	if !isNil(o.SslClientAuthPolicy) {
		toSerialize["sslClientAuthPolicy"] = o.SslClientAuthPolicy
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableHttpConnectionHandlerResponse struct {
	value *HttpConnectionHandlerResponse
	isSet bool
}

func (v NullableHttpConnectionHandlerResponse) Get() *HttpConnectionHandlerResponse {
	return v.value
}

func (v *NullableHttpConnectionHandlerResponse) Set(val *HttpConnectionHandlerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpConnectionHandlerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpConnectionHandlerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpConnectionHandlerResponse(val *HttpConnectionHandlerResponse) *NullableHttpConnectionHandlerResponse {
	return &NullableHttpConnectionHandlerResponse{value: val, isSet: true}
}

func (v NullableHttpConnectionHandlerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpConnectionHandlerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
