/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// DebugTargetApiService DebugTargetApi service
type DebugTargetApiService service

type ApiAddDebugTargetRequest struct {
	ctx                   context.Context
	ApiService            *DebugTargetApiService
	logPublisherName      string
	addDebugTargetRequest *AddDebugTargetRequest
}

// Create a new Debug Target in the config
func (r ApiAddDebugTargetRequest) AddDebugTargetRequest(addDebugTargetRequest AddDebugTargetRequest) ApiAddDebugTargetRequest {
	r.addDebugTargetRequest = &addDebugTargetRequest
	return r
}

func (r ApiAddDebugTargetRequest) Execute() (*DebugTargetResponse, *http.Response, error) {
	return r.ApiService.AddDebugTargetExecute(r)
}

/*
AddDebugTarget Add a new Debug Target to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logPublisherName Name of the Log Publisher
	@return ApiAddDebugTargetRequest
*/
func (a *DebugTargetApiService) AddDebugTarget(ctx context.Context, logPublisherName string) ApiAddDebugTargetRequest {
	return ApiAddDebugTargetRequest{
		ApiService:       a,
		ctx:              ctx,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
//
//	@return DebugTargetResponse
func (a *DebugTargetApiService) AddDebugTargetExecute(r ApiAddDebugTargetRequest) (*DebugTargetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DebugTargetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugTargetApiService.AddDebugTarget")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}/debug-targets"
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterToString(r.logPublisherName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addDebugTargetRequest == nil {
		return localVarReturnValue, nil, reportError("addDebugTargetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addDebugTargetRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDebugTargetRequest struct {
	ctx              context.Context
	ApiService       *DebugTargetApiService
	debugTargetName  string
	logPublisherName string
}

func (r ApiDeleteDebugTargetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDebugTargetExecute(r)
}

/*
DeleteDebugTarget Delete a Debug Target

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param debugTargetName Name of the Debug Target
	@param logPublisherName Name of the Log Publisher
	@return ApiDeleteDebugTargetRequest
*/
func (a *DebugTargetApiService) DeleteDebugTarget(ctx context.Context, debugTargetName string, logPublisherName string) ApiDeleteDebugTargetRequest {
	return ApiDeleteDebugTargetRequest{
		ApiService:       a,
		ctx:              ctx,
		debugTargetName:  debugTargetName,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
func (a *DebugTargetApiService) DeleteDebugTargetExecute(r ApiDeleteDebugTargetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugTargetApiService.DeleteDebugTarget")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"debug-target-name"+"}", url.PathEscape(parameterToString(r.debugTargetName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterToString(r.logPublisherName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDebugTargetRequest struct {
	ctx              context.Context
	ApiService       *DebugTargetApiService
	debugTargetName  string
	logPublisherName string
}

func (r ApiGetDebugTargetRequest) Execute() (*DebugTargetResponse, *http.Response, error) {
	return r.ApiService.GetDebugTargetExecute(r)
}

/*
GetDebugTarget Returns a single Debug Target

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param debugTargetName Name of the Debug Target
	@param logPublisherName Name of the Log Publisher
	@return ApiGetDebugTargetRequest
*/
func (a *DebugTargetApiService) GetDebugTarget(ctx context.Context, debugTargetName string, logPublisherName string) ApiGetDebugTargetRequest {
	return ApiGetDebugTargetRequest{
		ApiService:       a,
		ctx:              ctx,
		debugTargetName:  debugTargetName,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
//
//	@return DebugTargetResponse
func (a *DebugTargetApiService) GetDebugTargetExecute(r ApiGetDebugTargetRequest) (*DebugTargetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DebugTargetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugTargetApiService.GetDebugTarget")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"debug-target-name"+"}", url.PathEscape(parameterToString(r.debugTargetName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterToString(r.logPublisherName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDebugTargetRequest struct {
	ctx              context.Context
	ApiService       *DebugTargetApiService
	debugTargetName  string
	logPublisherName string
	updateRequest    *UpdateRequest
}

// Update an existing Debug Target
func (r ApiUpdateDebugTargetRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateDebugTargetRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateDebugTargetRequest) Execute() (*DebugTargetResponse, *http.Response, error) {
	return r.ApiService.UpdateDebugTargetExecute(r)
}

/*
UpdateDebugTarget Update an existing Debug Target by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param debugTargetName Name of the Debug Target
	@param logPublisherName Name of the Log Publisher
	@return ApiUpdateDebugTargetRequest
*/
func (a *DebugTargetApiService) UpdateDebugTarget(ctx context.Context, debugTargetName string, logPublisherName string) ApiUpdateDebugTargetRequest {
	return ApiUpdateDebugTargetRequest{
		ApiService:       a,
		ctx:              ctx,
		debugTargetName:  debugTargetName,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
//
//	@return DebugTargetResponse
func (a *DebugTargetApiService) UpdateDebugTargetExecute(r ApiUpdateDebugTargetRequest) (*DebugTargetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DebugTargetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugTargetApiService.UpdateDebugTarget")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"debug-target-name"+"}", url.PathEscape(parameterToString(r.debugTargetName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterToString(r.logPublisherName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
