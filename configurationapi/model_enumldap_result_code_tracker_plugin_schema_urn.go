/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumldapResultCodeTrackerPluginSchemaUrn the model 'EnumldapResultCodeTrackerPluginSchemaUrn'
type EnumldapResultCodeTrackerPluginSchemaUrn string

// List of Enumldap-result-code-tracker-pluginSchemaUrn
const (
	ENUMLDAPRESULTCODETRACKERPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINLDAP_RESULT_CODE_TRACKER EnumldapResultCodeTrackerPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:ldap-result-code-tracker"
)

// All allowed values of EnumldapResultCodeTrackerPluginSchemaUrn enum
var AllowedEnumldapResultCodeTrackerPluginSchemaUrnEnumValues = []EnumldapResultCodeTrackerPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:ldap-result-code-tracker",
}

func (v *EnumldapResultCodeTrackerPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldapResultCodeTrackerPluginSchemaUrn(value)
	for _, existing := range AllowedEnumldapResultCodeTrackerPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldapResultCodeTrackerPluginSchemaUrn", value)
}

// NewEnumldapResultCodeTrackerPluginSchemaUrnFromValue returns a pointer to a valid EnumldapResultCodeTrackerPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldapResultCodeTrackerPluginSchemaUrnFromValue(v string) (*EnumldapResultCodeTrackerPluginSchemaUrn, error) {
	ev := EnumldapResultCodeTrackerPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldapResultCodeTrackerPluginSchemaUrn: valid values are %v", v, AllowedEnumldapResultCodeTrackerPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldapResultCodeTrackerPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldapResultCodeTrackerPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldap-result-code-tracker-pluginSchemaUrn value
func (v EnumldapResultCodeTrackerPluginSchemaUrn) Ptr() *EnumldapResultCodeTrackerPluginSchemaUrn {
	return &v
}

type NullableEnumldapResultCodeTrackerPluginSchemaUrn struct {
	value *EnumldapResultCodeTrackerPluginSchemaUrn
	isSet bool
}

func (v NullableEnumldapResultCodeTrackerPluginSchemaUrn) Get() *EnumldapResultCodeTrackerPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumldapResultCodeTrackerPluginSchemaUrn) Set(val *EnumldapResultCodeTrackerPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldapResultCodeTrackerPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldapResultCodeTrackerPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldapResultCodeTrackerPluginSchemaUrn(val *EnumldapResultCodeTrackerPluginSchemaUrn) *NullableEnumldapResultCodeTrackerPluginSchemaUrn {
	return &NullableEnumldapResultCodeTrackerPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldapResultCodeTrackerPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldapResultCodeTrackerPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
