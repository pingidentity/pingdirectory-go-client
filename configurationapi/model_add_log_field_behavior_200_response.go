/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddLogFieldBehavior200Response - struct for AddLogFieldBehavior200Response
type AddLogFieldBehavior200Response struct {
	JsonFormattedAccessLogFieldBehaviorResponse *JsonFormattedAccessLogFieldBehaviorResponse
	TextAccessLogFieldBehaviorResponse          *TextAccessLogFieldBehaviorResponse
}

// JsonFormattedAccessLogFieldBehaviorResponseAsAddLogFieldBehavior200Response is a convenience function that returns JsonFormattedAccessLogFieldBehaviorResponse wrapped in AddLogFieldBehavior200Response
func JsonFormattedAccessLogFieldBehaviorResponseAsAddLogFieldBehavior200Response(v *JsonFormattedAccessLogFieldBehaviorResponse) AddLogFieldBehavior200Response {
	return AddLogFieldBehavior200Response{
		JsonFormattedAccessLogFieldBehaviorResponse: v,
	}
}

// TextAccessLogFieldBehaviorResponseAsAddLogFieldBehavior200Response is a convenience function that returns TextAccessLogFieldBehaviorResponse wrapped in AddLogFieldBehavior200Response
func TextAccessLogFieldBehaviorResponseAsAddLogFieldBehavior200Response(v *TextAccessLogFieldBehaviorResponse) AddLogFieldBehavior200Response {
	return AddLogFieldBehavior200Response{
		TextAccessLogFieldBehaviorResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogFieldBehavior200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into JsonFormattedAccessLogFieldBehaviorResponse
	err = newStrictDecoder(data).Decode(&dst.JsonFormattedAccessLogFieldBehaviorResponse)
	if err == nil {
		jsonJsonFormattedAccessLogFieldBehaviorResponse, _ := json.Marshal(dst.JsonFormattedAccessLogFieldBehaviorResponse)
		if string(jsonJsonFormattedAccessLogFieldBehaviorResponse) == "{}" { // empty struct
			dst.JsonFormattedAccessLogFieldBehaviorResponse = nil
		} else {
			match++
		}
	} else {
		dst.JsonFormattedAccessLogFieldBehaviorResponse = nil
	}

	// try to unmarshal data into TextAccessLogFieldBehaviorResponse
	err = newStrictDecoder(data).Decode(&dst.TextAccessLogFieldBehaviorResponse)
	if err == nil {
		jsonTextAccessLogFieldBehaviorResponse, _ := json.Marshal(dst.TextAccessLogFieldBehaviorResponse)
		if string(jsonTextAccessLogFieldBehaviorResponse) == "{}" { // empty struct
			dst.TextAccessLogFieldBehaviorResponse = nil
		} else {
			match++
		}
	} else {
		dst.TextAccessLogFieldBehaviorResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.JsonFormattedAccessLogFieldBehaviorResponse = nil
		dst.TextAccessLogFieldBehaviorResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogFieldBehavior200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogFieldBehavior200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogFieldBehavior200Response) MarshalJSON() ([]byte, error) {
	if src.JsonFormattedAccessLogFieldBehaviorResponse != nil {
		return json.Marshal(&src.JsonFormattedAccessLogFieldBehaviorResponse)
	}

	if src.TextAccessLogFieldBehaviorResponse != nil {
		return json.Marshal(&src.TextAccessLogFieldBehaviorResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogFieldBehavior200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.JsonFormattedAccessLogFieldBehaviorResponse != nil {
		return obj.JsonFormattedAccessLogFieldBehaviorResponse
	}

	if obj.TextAccessLogFieldBehaviorResponse != nil {
		return obj.TextAccessLogFieldBehaviorResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddLogFieldBehavior200Response struct {
	value *AddLogFieldBehavior200Response
	isSet bool
}

func (v NullableAddLogFieldBehavior200Response) Get() *AddLogFieldBehavior200Response {
	return v.value
}

func (v *NullableAddLogFieldBehavior200Response) Set(val *AddLogFieldBehavior200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogFieldBehavior200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogFieldBehavior200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogFieldBehavior200Response(val *AddLogFieldBehavior200Response) *NullableAddLogFieldBehavior200Response {
	return &NullableAddLogFieldBehavior200Response{value: val, isSet: true}
}

func (v NullableAddLogFieldBehavior200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogFieldBehavior200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
