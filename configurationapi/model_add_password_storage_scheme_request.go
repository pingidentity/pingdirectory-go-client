/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddPasswordStorageSchemeRequest - struct for AddPasswordStorageSchemeRequest
type AddPasswordStorageSchemeRequest struct {
	AddAes256PasswordStorageSchemeRequest               *AddAes256PasswordStorageSchemeRequest
	AddAmazonSecretsManagerPasswordStorageSchemeRequest *AddAmazonSecretsManagerPasswordStorageSchemeRequest
	AddArgon2PasswordStorageSchemeRequest               *AddArgon2PasswordStorageSchemeRequest
	AddAzureKeyVaultPasswordStorageSchemeRequest        *AddAzureKeyVaultPasswordStorageSchemeRequest
	AddBcryptPasswordStorageSchemeRequest               *AddBcryptPasswordStorageSchemeRequest
	AddConjurPasswordStorageSchemeRequest               *AddConjurPasswordStorageSchemeRequest
	AddCryptPasswordStorageSchemeRequest                *AddCryptPasswordStorageSchemeRequest
	AddPbkdf2PasswordStorageSchemeRequest               *AddPbkdf2PasswordStorageSchemeRequest
	AddScryptPasswordStorageSchemeRequest               *AddScryptPasswordStorageSchemeRequest
	AddThirdPartyEnhancedPasswordStorageSchemeRequest   *AddThirdPartyEnhancedPasswordStorageSchemeRequest
	AddThirdPartyPasswordStorageSchemeRequest           *AddThirdPartyPasswordStorageSchemeRequest
	AddVaultPasswordStorageSchemeRequest                *AddVaultPasswordStorageSchemeRequest
}

// AddAes256PasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddAes256PasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddAes256PasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddAes256PasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddAes256PasswordStorageSchemeRequest: v,
	}
}

// AddAmazonSecretsManagerPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddAmazonSecretsManagerPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddAmazonSecretsManagerPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddAmazonSecretsManagerPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddAmazonSecretsManagerPasswordStorageSchemeRequest: v,
	}
}

// AddArgon2PasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddArgon2PasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddArgon2PasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddArgon2PasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddArgon2PasswordStorageSchemeRequest: v,
	}
}

// AddAzureKeyVaultPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddAzureKeyVaultPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddAzureKeyVaultPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddAzureKeyVaultPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddAzureKeyVaultPasswordStorageSchemeRequest: v,
	}
}

// AddBcryptPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddBcryptPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddBcryptPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddBcryptPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddBcryptPasswordStorageSchemeRequest: v,
	}
}

// AddConjurPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddConjurPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddConjurPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddConjurPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddConjurPasswordStorageSchemeRequest: v,
	}
}

// AddCryptPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddCryptPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddCryptPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddCryptPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddCryptPasswordStorageSchemeRequest: v,
	}
}

// AddPbkdf2PasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddPbkdf2PasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddPbkdf2PasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddPbkdf2PasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddPbkdf2PasswordStorageSchemeRequest: v,
	}
}

// AddScryptPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddScryptPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddScryptPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddScryptPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddScryptPasswordStorageSchemeRequest: v,
	}
}

// AddThirdPartyEnhancedPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddThirdPartyEnhancedPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddThirdPartyEnhancedPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddThirdPartyEnhancedPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddThirdPartyEnhancedPasswordStorageSchemeRequest: v,
	}
}

// AddThirdPartyPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddThirdPartyPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddThirdPartyPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddThirdPartyPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddThirdPartyPasswordStorageSchemeRequest: v,
	}
}

// AddVaultPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest is a convenience function that returns AddVaultPasswordStorageSchemeRequest wrapped in AddPasswordStorageSchemeRequest
func AddVaultPasswordStorageSchemeRequestAsAddPasswordStorageSchemeRequest(v *AddVaultPasswordStorageSchemeRequest) AddPasswordStorageSchemeRequest {
	return AddPasswordStorageSchemeRequest{
		AddVaultPasswordStorageSchemeRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddPasswordStorageSchemeRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAes256PasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddAes256PasswordStorageSchemeRequest)
	if err == nil {
		jsonAddAes256PasswordStorageSchemeRequest, _ := json.Marshal(dst.AddAes256PasswordStorageSchemeRequest)
		if string(jsonAddAes256PasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddAes256PasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAes256PasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddAmazonSecretsManagerPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddAmazonSecretsManagerPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddAmazonSecretsManagerPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddAmazonSecretsManagerPasswordStorageSchemeRequest)
		if string(jsonAddAmazonSecretsManagerPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddAmazonSecretsManagerPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAmazonSecretsManagerPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddArgon2PasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddArgon2PasswordStorageSchemeRequest)
	if err == nil {
		jsonAddArgon2PasswordStorageSchemeRequest, _ := json.Marshal(dst.AddArgon2PasswordStorageSchemeRequest)
		if string(jsonAddArgon2PasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddArgon2PasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddArgon2PasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddAzureKeyVaultPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddAzureKeyVaultPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddAzureKeyVaultPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddAzureKeyVaultPasswordStorageSchemeRequest)
		if string(jsonAddAzureKeyVaultPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddAzureKeyVaultPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAzureKeyVaultPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddBcryptPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddBcryptPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddBcryptPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddBcryptPasswordStorageSchemeRequest)
		if string(jsonAddBcryptPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddBcryptPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddBcryptPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddConjurPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddConjurPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddConjurPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddConjurPasswordStorageSchemeRequest)
		if string(jsonAddConjurPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddConjurPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddConjurPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddCryptPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddCryptPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddCryptPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddCryptPasswordStorageSchemeRequest)
		if string(jsonAddCryptPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddCryptPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddCryptPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddPbkdf2PasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddPbkdf2PasswordStorageSchemeRequest)
	if err == nil {
		jsonAddPbkdf2PasswordStorageSchemeRequest, _ := json.Marshal(dst.AddPbkdf2PasswordStorageSchemeRequest)
		if string(jsonAddPbkdf2PasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddPbkdf2PasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddPbkdf2PasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddScryptPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddScryptPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddScryptPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddScryptPasswordStorageSchemeRequest)
		if string(jsonAddScryptPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddScryptPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddScryptPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddThirdPartyEnhancedPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyEnhancedPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddThirdPartyEnhancedPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddThirdPartyEnhancedPasswordStorageSchemeRequest)
		if string(jsonAddThirdPartyEnhancedPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddThirdPartyEnhancedPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyEnhancedPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddThirdPartyPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddThirdPartyPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddThirdPartyPasswordStorageSchemeRequest)
		if string(jsonAddThirdPartyPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddThirdPartyPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyPasswordStorageSchemeRequest = nil
	}

	// try to unmarshal data into AddVaultPasswordStorageSchemeRequest
	err = newStrictDecoder(data).Decode(&dst.AddVaultPasswordStorageSchemeRequest)
	if err == nil {
		jsonAddVaultPasswordStorageSchemeRequest, _ := json.Marshal(dst.AddVaultPasswordStorageSchemeRequest)
		if string(jsonAddVaultPasswordStorageSchemeRequest) == "{}" { // empty struct
			dst.AddVaultPasswordStorageSchemeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddVaultPasswordStorageSchemeRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAes256PasswordStorageSchemeRequest = nil
		dst.AddAmazonSecretsManagerPasswordStorageSchemeRequest = nil
		dst.AddArgon2PasswordStorageSchemeRequest = nil
		dst.AddAzureKeyVaultPasswordStorageSchemeRequest = nil
		dst.AddBcryptPasswordStorageSchemeRequest = nil
		dst.AddConjurPasswordStorageSchemeRequest = nil
		dst.AddCryptPasswordStorageSchemeRequest = nil
		dst.AddPbkdf2PasswordStorageSchemeRequest = nil
		dst.AddScryptPasswordStorageSchemeRequest = nil
		dst.AddThirdPartyEnhancedPasswordStorageSchemeRequest = nil
		dst.AddThirdPartyPasswordStorageSchemeRequest = nil
		dst.AddVaultPasswordStorageSchemeRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddPasswordStorageSchemeRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddPasswordStorageSchemeRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddPasswordStorageSchemeRequest) MarshalJSON() ([]byte, error) {
	if src.AddAes256PasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddAes256PasswordStorageSchemeRequest)
	}

	if src.AddAmazonSecretsManagerPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddAmazonSecretsManagerPasswordStorageSchemeRequest)
	}

	if src.AddArgon2PasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddArgon2PasswordStorageSchemeRequest)
	}

	if src.AddAzureKeyVaultPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddAzureKeyVaultPasswordStorageSchemeRequest)
	}

	if src.AddBcryptPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddBcryptPasswordStorageSchemeRequest)
	}

	if src.AddConjurPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddConjurPasswordStorageSchemeRequest)
	}

	if src.AddCryptPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddCryptPasswordStorageSchemeRequest)
	}

	if src.AddPbkdf2PasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddPbkdf2PasswordStorageSchemeRequest)
	}

	if src.AddScryptPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddScryptPasswordStorageSchemeRequest)
	}

	if src.AddThirdPartyEnhancedPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddThirdPartyEnhancedPasswordStorageSchemeRequest)
	}

	if src.AddThirdPartyPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddThirdPartyPasswordStorageSchemeRequest)
	}

	if src.AddVaultPasswordStorageSchemeRequest != nil {
		return json.Marshal(&src.AddVaultPasswordStorageSchemeRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddPasswordStorageSchemeRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddAes256PasswordStorageSchemeRequest != nil {
		return obj.AddAes256PasswordStorageSchemeRequest
	}

	if obj.AddAmazonSecretsManagerPasswordStorageSchemeRequest != nil {
		return obj.AddAmazonSecretsManagerPasswordStorageSchemeRequest
	}

	if obj.AddArgon2PasswordStorageSchemeRequest != nil {
		return obj.AddArgon2PasswordStorageSchemeRequest
	}

	if obj.AddAzureKeyVaultPasswordStorageSchemeRequest != nil {
		return obj.AddAzureKeyVaultPasswordStorageSchemeRequest
	}

	if obj.AddBcryptPasswordStorageSchemeRequest != nil {
		return obj.AddBcryptPasswordStorageSchemeRequest
	}

	if obj.AddConjurPasswordStorageSchemeRequest != nil {
		return obj.AddConjurPasswordStorageSchemeRequest
	}

	if obj.AddCryptPasswordStorageSchemeRequest != nil {
		return obj.AddCryptPasswordStorageSchemeRequest
	}

	if obj.AddPbkdf2PasswordStorageSchemeRequest != nil {
		return obj.AddPbkdf2PasswordStorageSchemeRequest
	}

	if obj.AddScryptPasswordStorageSchemeRequest != nil {
		return obj.AddScryptPasswordStorageSchemeRequest
	}

	if obj.AddThirdPartyEnhancedPasswordStorageSchemeRequest != nil {
		return obj.AddThirdPartyEnhancedPasswordStorageSchemeRequest
	}

	if obj.AddThirdPartyPasswordStorageSchemeRequest != nil {
		return obj.AddThirdPartyPasswordStorageSchemeRequest
	}

	if obj.AddVaultPasswordStorageSchemeRequest != nil {
		return obj.AddVaultPasswordStorageSchemeRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddPasswordStorageSchemeRequest struct {
	value *AddPasswordStorageSchemeRequest
	isSet bool
}

func (v NullableAddPasswordStorageSchemeRequest) Get() *AddPasswordStorageSchemeRequest {
	return v.value
}

func (v *NullableAddPasswordStorageSchemeRequest) Set(val *AddPasswordStorageSchemeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPasswordStorageSchemeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPasswordStorageSchemeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPasswordStorageSchemeRequest(val *AddPasswordStorageSchemeRequest) *NullableAddPasswordStorageSchemeRequest {
	return &NullableAddPasswordStorageSchemeRequest{value: val, isSet: true}
}

func (v NullableAddPasswordStorageSchemeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPasswordStorageSchemeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
