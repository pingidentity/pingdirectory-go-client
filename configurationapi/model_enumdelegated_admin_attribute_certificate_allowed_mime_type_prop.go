/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp The list of file types allowed to be uploaded. If no types are specified, then all types will be allowed.
type EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp string

// List of Enumdelegated-admin-attribute-certificate-allowedMIMETypeProp
const (
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_CER EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "cer"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_CRT EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "crt"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_DER EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "der"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_KEY EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "key"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_P7B EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "p7b"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_P7C EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "p7c"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_P8  EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "p8"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_P10 EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "p10"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_P12 EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "p12"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_PEM EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "pem"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_PFX EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "pfx"
	ENUMDELEGATEDADMINATTRIBUTECERTIFICATEALLOWEDMIMETYPEPROP_SPC EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp = "spc"
)

// All allowed values of EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp enum
var AllowedEnumdelegatedAdminAttributeCertificateAllowedMIMETypePropEnumValues = []EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp{
	"cer",
	"crt",
	"der",
	"key",
	"p7b",
	"p7c",
	"p8",
	"p10",
	"p12",
	"pem",
	"pfx",
	"spc",
}

func (v *EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp(value)
	for _, existing := range AllowedEnumdelegatedAdminAttributeCertificateAllowedMIMETypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp", value)
}

// NewEnumdelegatedAdminAttributeCertificateAllowedMIMETypePropFromValue returns a pointer to a valid EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelegatedAdminAttributeCertificateAllowedMIMETypePropFromValue(v string) (*EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp, error) {
	ev := EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp: valid values are %v", v, AllowedEnumdelegatedAdminAttributeCertificateAllowedMIMETypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) IsValid() bool {
	for _, existing := range AllowedEnumdelegatedAdminAttributeCertificateAllowedMIMETypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelegated-admin-attribute-certificate-allowedMIMETypeProp value
func (v EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) Ptr() *EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp {
	return &v
}

type NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp struct {
	value *EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp
	isSet bool
}

func (v NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) Get() *EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp {
	return v.value
}

func (v *NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) Set(val *EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp(val *EnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) *NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp {
	return &NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp{value: val, isSet: true}
}

func (v NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelegatedAdminAttributeCertificateAllowedMIMETypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
