/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// MatchingRuleListResponseResourcesInner - struct for MatchingRuleListResponseResourcesInner
type MatchingRuleListResponseResourcesInner struct {
	ApproximateMatchingRuleResponse *ApproximateMatchingRuleResponse
	EqualityMatchingRuleResponse    *EqualityMatchingRuleResponse
	GenericMatchingRuleResponse     *GenericMatchingRuleResponse
	OrderingMatchingRuleResponse    *OrderingMatchingRuleResponse
	SubstringMatchingRuleResponse   *SubstringMatchingRuleResponse
}

// ApproximateMatchingRuleResponseAsMatchingRuleListResponseResourcesInner is a convenience function that returns ApproximateMatchingRuleResponse wrapped in MatchingRuleListResponseResourcesInner
func ApproximateMatchingRuleResponseAsMatchingRuleListResponseResourcesInner(v *ApproximateMatchingRuleResponse) MatchingRuleListResponseResourcesInner {
	return MatchingRuleListResponseResourcesInner{
		ApproximateMatchingRuleResponse: v,
	}
}

// EqualityMatchingRuleResponseAsMatchingRuleListResponseResourcesInner is a convenience function that returns EqualityMatchingRuleResponse wrapped in MatchingRuleListResponseResourcesInner
func EqualityMatchingRuleResponseAsMatchingRuleListResponseResourcesInner(v *EqualityMatchingRuleResponse) MatchingRuleListResponseResourcesInner {
	return MatchingRuleListResponseResourcesInner{
		EqualityMatchingRuleResponse: v,
	}
}

// GenericMatchingRuleResponseAsMatchingRuleListResponseResourcesInner is a convenience function that returns GenericMatchingRuleResponse wrapped in MatchingRuleListResponseResourcesInner
func GenericMatchingRuleResponseAsMatchingRuleListResponseResourcesInner(v *GenericMatchingRuleResponse) MatchingRuleListResponseResourcesInner {
	return MatchingRuleListResponseResourcesInner{
		GenericMatchingRuleResponse: v,
	}
}

// OrderingMatchingRuleResponseAsMatchingRuleListResponseResourcesInner is a convenience function that returns OrderingMatchingRuleResponse wrapped in MatchingRuleListResponseResourcesInner
func OrderingMatchingRuleResponseAsMatchingRuleListResponseResourcesInner(v *OrderingMatchingRuleResponse) MatchingRuleListResponseResourcesInner {
	return MatchingRuleListResponseResourcesInner{
		OrderingMatchingRuleResponse: v,
	}
}

// SubstringMatchingRuleResponseAsMatchingRuleListResponseResourcesInner is a convenience function that returns SubstringMatchingRuleResponse wrapped in MatchingRuleListResponseResourcesInner
func SubstringMatchingRuleResponseAsMatchingRuleListResponseResourcesInner(v *SubstringMatchingRuleResponse) MatchingRuleListResponseResourcesInner {
	return MatchingRuleListResponseResourcesInner{
		SubstringMatchingRuleResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MatchingRuleListResponseResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApproximateMatchingRuleResponse
	err = newStrictDecoder(data).Decode(&dst.ApproximateMatchingRuleResponse)
	if err == nil {
		jsonApproximateMatchingRuleResponse, _ := json.Marshal(dst.ApproximateMatchingRuleResponse)
		if string(jsonApproximateMatchingRuleResponse) == "{}" { // empty struct
			dst.ApproximateMatchingRuleResponse = nil
		} else {
			match++
		}
	} else {
		dst.ApproximateMatchingRuleResponse = nil
	}

	// try to unmarshal data into EqualityMatchingRuleResponse
	err = newStrictDecoder(data).Decode(&dst.EqualityMatchingRuleResponse)
	if err == nil {
		jsonEqualityMatchingRuleResponse, _ := json.Marshal(dst.EqualityMatchingRuleResponse)
		if string(jsonEqualityMatchingRuleResponse) == "{}" { // empty struct
			dst.EqualityMatchingRuleResponse = nil
		} else {
			match++
		}
	} else {
		dst.EqualityMatchingRuleResponse = nil
	}

	// try to unmarshal data into GenericMatchingRuleResponse
	err = newStrictDecoder(data).Decode(&dst.GenericMatchingRuleResponse)
	if err == nil {
		jsonGenericMatchingRuleResponse, _ := json.Marshal(dst.GenericMatchingRuleResponse)
		if string(jsonGenericMatchingRuleResponse) == "{}" { // empty struct
			dst.GenericMatchingRuleResponse = nil
		} else {
			match++
		}
	} else {
		dst.GenericMatchingRuleResponse = nil
	}

	// try to unmarshal data into OrderingMatchingRuleResponse
	err = newStrictDecoder(data).Decode(&dst.OrderingMatchingRuleResponse)
	if err == nil {
		jsonOrderingMatchingRuleResponse, _ := json.Marshal(dst.OrderingMatchingRuleResponse)
		if string(jsonOrderingMatchingRuleResponse) == "{}" { // empty struct
			dst.OrderingMatchingRuleResponse = nil
		} else {
			match++
		}
	} else {
		dst.OrderingMatchingRuleResponse = nil
	}

	// try to unmarshal data into SubstringMatchingRuleResponse
	err = newStrictDecoder(data).Decode(&dst.SubstringMatchingRuleResponse)
	if err == nil {
		jsonSubstringMatchingRuleResponse, _ := json.Marshal(dst.SubstringMatchingRuleResponse)
		if string(jsonSubstringMatchingRuleResponse) == "{}" { // empty struct
			dst.SubstringMatchingRuleResponse = nil
		} else {
			match++
		}
	} else {
		dst.SubstringMatchingRuleResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApproximateMatchingRuleResponse = nil
		dst.EqualityMatchingRuleResponse = nil
		dst.GenericMatchingRuleResponse = nil
		dst.OrderingMatchingRuleResponse = nil
		dst.SubstringMatchingRuleResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MatchingRuleListResponseResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MatchingRuleListResponseResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MatchingRuleListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	if src.ApproximateMatchingRuleResponse != nil {
		return json.Marshal(&src.ApproximateMatchingRuleResponse)
	}

	if src.EqualityMatchingRuleResponse != nil {
		return json.Marshal(&src.EqualityMatchingRuleResponse)
	}

	if src.GenericMatchingRuleResponse != nil {
		return json.Marshal(&src.GenericMatchingRuleResponse)
	}

	if src.OrderingMatchingRuleResponse != nil {
		return json.Marshal(&src.OrderingMatchingRuleResponse)
	}

	if src.SubstringMatchingRuleResponse != nil {
		return json.Marshal(&src.SubstringMatchingRuleResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MatchingRuleListResponseResourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApproximateMatchingRuleResponse != nil {
		return obj.ApproximateMatchingRuleResponse
	}

	if obj.EqualityMatchingRuleResponse != nil {
		return obj.EqualityMatchingRuleResponse
	}

	if obj.GenericMatchingRuleResponse != nil {
		return obj.GenericMatchingRuleResponse
	}

	if obj.OrderingMatchingRuleResponse != nil {
		return obj.OrderingMatchingRuleResponse
	}

	if obj.SubstringMatchingRuleResponse != nil {
		return obj.SubstringMatchingRuleResponse
	}

	// all schemas are nil
	return nil
}

type NullableMatchingRuleListResponseResourcesInner struct {
	value *MatchingRuleListResponseResourcesInner
	isSet bool
}

func (v NullableMatchingRuleListResponseResourcesInner) Get() *MatchingRuleListResponseResourcesInner {
	return v.value
}

func (v *NullableMatchingRuleListResponseResourcesInner) Set(val *MatchingRuleListResponseResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingRuleListResponseResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingRuleListResponseResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingRuleListResponseResourcesInner(val *MatchingRuleListResponseResourcesInner) *NullableMatchingRuleListResponseResourcesInner {
	return &NullableMatchingRuleListResponseResourcesInner{value: val, isSet: true}
}

func (v NullableMatchingRuleListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingRuleListResponseResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
