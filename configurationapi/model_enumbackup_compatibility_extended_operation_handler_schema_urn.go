/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn the model 'EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn'
type EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn string

// List of Enumbackup-compatibility-extended-operation-handlerSchemaUrn
const (
	ENUMBACKUPCOMPATIBILITYEXTENDEDOPERATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERBACKUP_COMPATIBILITY EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:backup-compatibility"
)

// All allowed values of EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn enum
var AllowedEnumbackupCompatibilityExtendedOperationHandlerSchemaUrnEnumValues = []EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:backup-compatibility",
}

func (v *EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumbackupCompatibilityExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumbackupCompatibilityExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackupCompatibilityExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumbackupCompatibilityExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumbackupCompatibilityExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackup-compatibility-extended-operation-handlerSchemaUrn value
func (v EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) Ptr() *EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn struct {
	value *EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) Get() *EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) Set(val *EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn(val *EnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) *NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn {
	return &NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackupCompatibilityExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
