/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlargeAttributeBackendSchemaUrn the model 'EnumlargeAttributeBackendSchemaUrn'
type EnumlargeAttributeBackendSchemaUrn string

// List of Enumlarge-attribute-backendSchemaUrn
const (
	ENUMLARGEATTRIBUTEBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDLARGE_ATTRIBUTE EnumlargeAttributeBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:large-attribute"
)

// All allowed values of EnumlargeAttributeBackendSchemaUrn enum
var AllowedEnumlargeAttributeBackendSchemaUrnEnumValues = []EnumlargeAttributeBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:large-attribute",
}

func (v *EnumlargeAttributeBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlargeAttributeBackendSchemaUrn(value)
	for _, existing := range AllowedEnumlargeAttributeBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlargeAttributeBackendSchemaUrn", value)
}

// NewEnumlargeAttributeBackendSchemaUrnFromValue returns a pointer to a valid EnumlargeAttributeBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlargeAttributeBackendSchemaUrnFromValue(v string) (*EnumlargeAttributeBackendSchemaUrn, error) {
	ev := EnumlargeAttributeBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlargeAttributeBackendSchemaUrn: valid values are %v", v, AllowedEnumlargeAttributeBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlargeAttributeBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumlargeAttributeBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlarge-attribute-backendSchemaUrn value
func (v EnumlargeAttributeBackendSchemaUrn) Ptr() *EnumlargeAttributeBackendSchemaUrn {
	return &v
}

type NullableEnumlargeAttributeBackendSchemaUrn struct {
	value *EnumlargeAttributeBackendSchemaUrn
	isSet bool
}

func (v NullableEnumlargeAttributeBackendSchemaUrn) Get() *EnumlargeAttributeBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumlargeAttributeBackendSchemaUrn) Set(val *EnumlargeAttributeBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlargeAttributeBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlargeAttributeBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlargeAttributeBackendSchemaUrn(val *EnumlargeAttributeBackendSchemaUrn) *NullableEnumlargeAttributeBackendSchemaUrn {
	return &NullableEnumlargeAttributeBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumlargeAttributeBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlargeAttributeBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
