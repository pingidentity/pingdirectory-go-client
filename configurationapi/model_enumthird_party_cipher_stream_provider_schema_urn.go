/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyCipherStreamProviderSchemaUrn the model 'EnumthirdPartyCipherStreamProviderSchemaUrn'
type EnumthirdPartyCipherStreamProviderSchemaUrn string

// List of Enumthird-party-cipher-stream-providerSchemaUrn
const (
	ENUMTHIRDPARTYCIPHERSTREAMPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CIPHER_STREAM_PROVIDERTHIRD_PARTY EnumthirdPartyCipherStreamProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:third-party"
)

// All allowed values of EnumthirdPartyCipherStreamProviderSchemaUrn enum
var AllowedEnumthirdPartyCipherStreamProviderSchemaUrnEnumValues = []EnumthirdPartyCipherStreamProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:third-party",
}

func (v *EnumthirdPartyCipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyCipherStreamProviderSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyCipherStreamProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyCipherStreamProviderSchemaUrn", value)
}

// NewEnumthirdPartyCipherStreamProviderSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyCipherStreamProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyCipherStreamProviderSchemaUrnFromValue(v string) (*EnumthirdPartyCipherStreamProviderSchemaUrn, error) {
	ev := EnumthirdPartyCipherStreamProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyCipherStreamProviderSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyCipherStreamProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyCipherStreamProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyCipherStreamProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-cipher-stream-providerSchemaUrn value
func (v EnumthirdPartyCipherStreamProviderSchemaUrn) Ptr() *EnumthirdPartyCipherStreamProviderSchemaUrn {
	return &v
}

type NullableEnumthirdPartyCipherStreamProviderSchemaUrn struct {
	value *EnumthirdPartyCipherStreamProviderSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyCipherStreamProviderSchemaUrn) Get() *EnumthirdPartyCipherStreamProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyCipherStreamProviderSchemaUrn) Set(val *EnumthirdPartyCipherStreamProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyCipherStreamProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyCipherStreamProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyCipherStreamProviderSchemaUrn(val *EnumthirdPartyCipherStreamProviderSchemaUrn) *NullableEnumthirdPartyCipherStreamProviderSchemaUrn {
	return &NullableEnumthirdPartyCipherStreamProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyCipherStreamProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyCipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
