/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumscimSubattributeMutabilityProp Specifies the circumstances under which the values of the sub-attribute can be written.
type EnumscimSubattributeMutabilityProp string

// List of Enumscim-subattribute-mutabilityProp
const (
	ENUMSCIMSUBATTRIBUTEMUTABILITYPROP_READ_ONLY  EnumscimSubattributeMutabilityProp = "read-only"
	ENUMSCIMSUBATTRIBUTEMUTABILITYPROP_READ_WRITE EnumscimSubattributeMutabilityProp = "read-write"
	ENUMSCIMSUBATTRIBUTEMUTABILITYPROP_IMMUTABLE  EnumscimSubattributeMutabilityProp = "immutable"
	ENUMSCIMSUBATTRIBUTEMUTABILITYPROP_WRITE_ONLY EnumscimSubattributeMutabilityProp = "write-only"
)

// All allowed values of EnumscimSubattributeMutabilityProp enum
var AllowedEnumscimSubattributeMutabilityPropEnumValues = []EnumscimSubattributeMutabilityProp{
	"read-only",
	"read-write",
	"immutable",
	"write-only",
}

func (v *EnumscimSubattributeMutabilityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumscimSubattributeMutabilityProp(value)
	for _, existing := range AllowedEnumscimSubattributeMutabilityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumscimSubattributeMutabilityProp", value)
}

// NewEnumscimSubattributeMutabilityPropFromValue returns a pointer to a valid EnumscimSubattributeMutabilityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscimSubattributeMutabilityPropFromValue(v string) (*EnumscimSubattributeMutabilityProp, error) {
	ev := EnumscimSubattributeMutabilityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumscimSubattributeMutabilityProp: valid values are %v", v, AllowedEnumscimSubattributeMutabilityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumscimSubattributeMutabilityProp) IsValid() bool {
	for _, existing := range AllowedEnumscimSubattributeMutabilityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim-subattribute-mutabilityProp value
func (v EnumscimSubattributeMutabilityProp) Ptr() *EnumscimSubattributeMutabilityProp {
	return &v
}

type NullableEnumscimSubattributeMutabilityProp struct {
	value *EnumscimSubattributeMutabilityProp
	isSet bool
}

func (v NullableEnumscimSubattributeMutabilityProp) Get() *EnumscimSubattributeMutabilityProp {
	return v.value
}

func (v *NullableEnumscimSubattributeMutabilityProp) Set(val *EnumscimSubattributeMutabilityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscimSubattributeMutabilityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscimSubattributeMutabilityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscimSubattributeMutabilityProp(val *EnumscimSubattributeMutabilityProp) *NullableEnumscimSubattributeMutabilityProp {
	return &NullableEnumscimSubattributeMutabilityProp{value: val, isSet: true}
}

func (v NullableEnumscimSubattributeMutabilityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscimSubattributeMutabilityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
