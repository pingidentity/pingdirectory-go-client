/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn the model 'EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn'
type EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn string

// List of Enumclean-up-expired-pingfederate-persistent-access-grants-pluginSchemaUrn
const (
	ENUMCLEANUPEXPIREDPINGFEDERATEPERSISTENTACCESSGRANTSPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINCLEAN_UP_EXPIRED_PINGFEDERATE_PERSISTENT_ACCESS_GRANTS EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:clean-up-expired-pingfederate-persistent-access-grants"
)

// All allowed values of EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn enum
var AllowedEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrnEnumValues = []EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:clean-up-expired-pingfederate-persistent-access-grants",
}

func (v *EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn(value)
	for _, existing := range AllowedEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn", value)
}

// NewEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrnFromValue returns a pointer to a valid EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrnFromValue(v string) (*EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn, error) {
	ev := EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn: valid values are %v", v, AllowedEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumclean-up-expired-pingfederate-persistent-access-grants-pluginSchemaUrn value
func (v EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) Ptr() *EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn {
	return &v
}

type NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn struct {
	value *EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn
	isSet bool
}

func (v NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) Get() *EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) Set(val *EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn(val *EnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) *NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn {
	return &NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcleanUpExpiredPingfederatePersistentAccessGrantsPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
