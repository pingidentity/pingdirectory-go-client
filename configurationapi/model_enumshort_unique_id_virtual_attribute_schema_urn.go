/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumshortUniqueIdVirtualAttributeSchemaUrn the model 'EnumshortUniqueIdVirtualAttributeSchemaUrn'
type EnumshortUniqueIdVirtualAttributeSchemaUrn string

// List of Enumshort-unique-id-virtual-attributeSchemaUrn
const (
	ENUMSHORTUNIQUEIDVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTESHORT_UNIQUE_ID EnumshortUniqueIdVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:short-unique-id"
)

// All allowed values of EnumshortUniqueIdVirtualAttributeSchemaUrn enum
var AllowedEnumshortUniqueIdVirtualAttributeSchemaUrnEnumValues = []EnumshortUniqueIdVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:short-unique-id",
}

func (v *EnumshortUniqueIdVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumshortUniqueIdVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumshortUniqueIdVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumshortUniqueIdVirtualAttributeSchemaUrn", value)
}

// NewEnumshortUniqueIdVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumshortUniqueIdVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumshortUniqueIdVirtualAttributeSchemaUrnFromValue(v string) (*EnumshortUniqueIdVirtualAttributeSchemaUrn, error) {
	ev := EnumshortUniqueIdVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumshortUniqueIdVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumshortUniqueIdVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumshortUniqueIdVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumshortUniqueIdVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumshort-unique-id-virtual-attributeSchemaUrn value
func (v EnumshortUniqueIdVirtualAttributeSchemaUrn) Ptr() *EnumshortUniqueIdVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumshortUniqueIdVirtualAttributeSchemaUrn struct {
	value *EnumshortUniqueIdVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumshortUniqueIdVirtualAttributeSchemaUrn) Get() *EnumshortUniqueIdVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumshortUniqueIdVirtualAttributeSchemaUrn) Set(val *EnumshortUniqueIdVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumshortUniqueIdVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumshortUniqueIdVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumshortUniqueIdVirtualAttributeSchemaUrn(val *EnumshortUniqueIdVirtualAttributeSchemaUrn) *NullableEnumshortUniqueIdVirtualAttributeSchemaUrn {
	return &NullableEnumshortUniqueIdVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumshortUniqueIdVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumshortUniqueIdVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
