/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcallerInvokedWorkQueueSchemaUrn the model 'EnumcallerInvokedWorkQueueSchemaUrn'
type EnumcallerInvokedWorkQueueSchemaUrn string

// List of Enumcaller-invoked-work-queueSchemaUrn
const (
	ENUMCALLERINVOKEDWORKQUEUESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0WORK_QUEUECALLER_INVOKED EnumcallerInvokedWorkQueueSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:work-queue:caller-invoked"
)

// All allowed values of EnumcallerInvokedWorkQueueSchemaUrn enum
var AllowedEnumcallerInvokedWorkQueueSchemaUrnEnumValues = []EnumcallerInvokedWorkQueueSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:work-queue:caller-invoked",
}

func (v *EnumcallerInvokedWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcallerInvokedWorkQueueSchemaUrn(value)
	for _, existing := range AllowedEnumcallerInvokedWorkQueueSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcallerInvokedWorkQueueSchemaUrn", value)
}

// NewEnumcallerInvokedWorkQueueSchemaUrnFromValue returns a pointer to a valid EnumcallerInvokedWorkQueueSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcallerInvokedWorkQueueSchemaUrnFromValue(v string) (*EnumcallerInvokedWorkQueueSchemaUrn, error) {
	ev := EnumcallerInvokedWorkQueueSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcallerInvokedWorkQueueSchemaUrn: valid values are %v", v, AllowedEnumcallerInvokedWorkQueueSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcallerInvokedWorkQueueSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcallerInvokedWorkQueueSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcaller-invoked-work-queueSchemaUrn value
func (v EnumcallerInvokedWorkQueueSchemaUrn) Ptr() *EnumcallerInvokedWorkQueueSchemaUrn {
	return &v
}

type NullableEnumcallerInvokedWorkQueueSchemaUrn struct {
	value *EnumcallerInvokedWorkQueueSchemaUrn
	isSet bool
}

func (v NullableEnumcallerInvokedWorkQueueSchemaUrn) Get() *EnumcallerInvokedWorkQueueSchemaUrn {
	return v.value
}

func (v *NullableEnumcallerInvokedWorkQueueSchemaUrn) Set(val *EnumcallerInvokedWorkQueueSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcallerInvokedWorkQueueSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcallerInvokedWorkQueueSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcallerInvokedWorkQueueSchemaUrn(val *EnumcallerInvokedWorkQueueSchemaUrn) *NullableEnumcallerInvokedWorkQueueSchemaUrn {
	return &NullableEnumcallerInvokedWorkQueueSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcallerInvokedWorkQueueSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcallerInvokedWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
