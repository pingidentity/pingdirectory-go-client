/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonFieldConstraintsIsArrayProp Indicates whether the value of the target field may be an array of values rather than a single value. If this property is set to \"required\" or \"optional\", then the constraints defined for this field will be applied to each element of the array.
type EnumjsonFieldConstraintsIsArrayProp string

// List of Enumjson-field-constraints-isArrayProp
const (
	ENUMJSONFIELDCONSTRAINTSISARRAYPROP_REQUIRED   EnumjsonFieldConstraintsIsArrayProp = "required"
	ENUMJSONFIELDCONSTRAINTSISARRAYPROP_OPTIONAL   EnumjsonFieldConstraintsIsArrayProp = "optional"
	ENUMJSONFIELDCONSTRAINTSISARRAYPROP_PROHIBITED EnumjsonFieldConstraintsIsArrayProp = "prohibited"
)

// All allowed values of EnumjsonFieldConstraintsIsArrayProp enum
var AllowedEnumjsonFieldConstraintsIsArrayPropEnumValues = []EnumjsonFieldConstraintsIsArrayProp{
	"required",
	"optional",
	"prohibited",
}

func (v *EnumjsonFieldConstraintsIsArrayProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonFieldConstraintsIsArrayProp(value)
	for _, existing := range AllowedEnumjsonFieldConstraintsIsArrayPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonFieldConstraintsIsArrayProp", value)
}

// NewEnumjsonFieldConstraintsIsArrayPropFromValue returns a pointer to a valid EnumjsonFieldConstraintsIsArrayProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonFieldConstraintsIsArrayPropFromValue(v string) (*EnumjsonFieldConstraintsIsArrayProp, error) {
	ev := EnumjsonFieldConstraintsIsArrayProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonFieldConstraintsIsArrayProp: valid values are %v", v, AllowedEnumjsonFieldConstraintsIsArrayPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonFieldConstraintsIsArrayProp) IsValid() bool {
	for _, existing := range AllowedEnumjsonFieldConstraintsIsArrayPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-field-constraints-isArrayProp value
func (v EnumjsonFieldConstraintsIsArrayProp) Ptr() *EnumjsonFieldConstraintsIsArrayProp {
	return &v
}

type NullableEnumjsonFieldConstraintsIsArrayProp struct {
	value *EnumjsonFieldConstraintsIsArrayProp
	isSet bool
}

func (v NullableEnumjsonFieldConstraintsIsArrayProp) Get() *EnumjsonFieldConstraintsIsArrayProp {
	return v.value
}

func (v *NullableEnumjsonFieldConstraintsIsArrayProp) Set(val *EnumjsonFieldConstraintsIsArrayProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonFieldConstraintsIsArrayProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonFieldConstraintsIsArrayProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonFieldConstraintsIsArrayProp(val *EnumjsonFieldConstraintsIsArrayProp) *NullableEnumjsonFieldConstraintsIsArrayProp {
	return &NullableEnumjsonFieldConstraintsIsArrayProp{value: val, isSet: true}
}

func (v NullableEnumjsonFieldConstraintsIsArrayProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonFieldConstraintsIsArrayProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
