/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddIdTokenValidator200Response - struct for AddIdTokenValidator200Response
type AddIdTokenValidator200Response struct {
	OpenidConnectIdTokenValidatorResponse *OpenidConnectIdTokenValidatorResponse
	PingOneIdTokenValidatorResponse       *PingOneIdTokenValidatorResponse
}

// OpenidConnectIdTokenValidatorResponseAsAddIdTokenValidator200Response is a convenience function that returns OpenidConnectIdTokenValidatorResponse wrapped in AddIdTokenValidator200Response
func OpenidConnectIdTokenValidatorResponseAsAddIdTokenValidator200Response(v *OpenidConnectIdTokenValidatorResponse) AddIdTokenValidator200Response {
	return AddIdTokenValidator200Response{
		OpenidConnectIdTokenValidatorResponse: v,
	}
}

// PingOneIdTokenValidatorResponseAsAddIdTokenValidator200Response is a convenience function that returns PingOneIdTokenValidatorResponse wrapped in AddIdTokenValidator200Response
func PingOneIdTokenValidatorResponseAsAddIdTokenValidator200Response(v *PingOneIdTokenValidatorResponse) AddIdTokenValidator200Response {
	return AddIdTokenValidator200Response{
		PingOneIdTokenValidatorResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddIdTokenValidator200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OpenidConnectIdTokenValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.OpenidConnectIdTokenValidatorResponse)
	if err == nil {
		jsonOpenidConnectIdTokenValidatorResponse, _ := json.Marshal(dst.OpenidConnectIdTokenValidatorResponse)
		if string(jsonOpenidConnectIdTokenValidatorResponse) == "{}" { // empty struct
			dst.OpenidConnectIdTokenValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.OpenidConnectIdTokenValidatorResponse = nil
	}

	// try to unmarshal data into PingOneIdTokenValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.PingOneIdTokenValidatorResponse)
	if err == nil {
		jsonPingOneIdTokenValidatorResponse, _ := json.Marshal(dst.PingOneIdTokenValidatorResponse)
		if string(jsonPingOneIdTokenValidatorResponse) == "{}" { // empty struct
			dst.PingOneIdTokenValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.PingOneIdTokenValidatorResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OpenidConnectIdTokenValidatorResponse = nil
		dst.PingOneIdTokenValidatorResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddIdTokenValidator200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddIdTokenValidator200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddIdTokenValidator200Response) MarshalJSON() ([]byte, error) {
	if src.OpenidConnectIdTokenValidatorResponse != nil {
		return json.Marshal(&src.OpenidConnectIdTokenValidatorResponse)
	}

	if src.PingOneIdTokenValidatorResponse != nil {
		return json.Marshal(&src.PingOneIdTokenValidatorResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddIdTokenValidator200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OpenidConnectIdTokenValidatorResponse != nil {
		return obj.OpenidConnectIdTokenValidatorResponse
	}

	if obj.PingOneIdTokenValidatorResponse != nil {
		return obj.PingOneIdTokenValidatorResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddIdTokenValidator200Response struct {
	value *AddIdTokenValidator200Response
	isSet bool
}

func (v NullableAddIdTokenValidator200Response) Get() *AddIdTokenValidator200Response {
	return v.value
}

func (v *NullableAddIdTokenValidator200Response) Set(val *AddIdTokenValidator200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIdTokenValidator200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIdTokenValidator200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIdTokenValidator200Response(val *AddIdTokenValidator200Response) *NullableAddIdTokenValidator200Response {
	return &NullableAddIdTokenValidator200Response{value: val, isSet: true}
}

func (v NullableAddIdTokenValidator200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIdTokenValidator200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
