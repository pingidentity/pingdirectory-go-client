/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsyncFailedOpsLogPublisherSchemaUrn the model 'EnumsyncFailedOpsLogPublisherSchemaUrn'
type EnumsyncFailedOpsLogPublisherSchemaUrn string

// List of Enumsync-failed-ops-log-publisherSchemaUrn
const (
	ENUMSYNCFAILEDOPSLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERSYNC_FAILED_OPS EnumsyncFailedOpsLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:sync-failed-ops"
)

// All allowed values of EnumsyncFailedOpsLogPublisherSchemaUrn enum
var AllowedEnumsyncFailedOpsLogPublisherSchemaUrnEnumValues = []EnumsyncFailedOpsLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:sync-failed-ops",
}

func (v *EnumsyncFailedOpsLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsyncFailedOpsLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumsyncFailedOpsLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsyncFailedOpsLogPublisherSchemaUrn", value)
}

// NewEnumsyncFailedOpsLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumsyncFailedOpsLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsyncFailedOpsLogPublisherSchemaUrnFromValue(v string) (*EnumsyncFailedOpsLogPublisherSchemaUrn, error) {
	ev := EnumsyncFailedOpsLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsyncFailedOpsLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumsyncFailedOpsLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsyncFailedOpsLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsyncFailedOpsLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsync-failed-ops-log-publisherSchemaUrn value
func (v EnumsyncFailedOpsLogPublisherSchemaUrn) Ptr() *EnumsyncFailedOpsLogPublisherSchemaUrn {
	return &v
}

type NullableEnumsyncFailedOpsLogPublisherSchemaUrn struct {
	value *EnumsyncFailedOpsLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumsyncFailedOpsLogPublisherSchemaUrn) Get() *EnumsyncFailedOpsLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumsyncFailedOpsLogPublisherSchemaUrn) Set(val *EnumsyncFailedOpsLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsyncFailedOpsLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsyncFailedOpsLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsyncFailedOpsLogPublisherSchemaUrn(val *EnumsyncFailedOpsLogPublisherSchemaUrn) *NullableEnumsyncFailedOpsLogPublisherSchemaUrn {
	return &NullableEnumsyncFailedOpsLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsyncFailedOpsLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsyncFailedOpsLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
