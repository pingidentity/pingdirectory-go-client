/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdataSecurityAuditorWeakCryptEncodingProp Reporting on users with passwords encoded using the Crypt Password Storage scheme may be further limited by selecting one or more encoding mechanisms that are considered weak.
type EnumdataSecurityAuditorWeakCryptEncodingProp string

// List of Enumdata-security-auditor-weakCryptEncodingProp
const (
	ENUMDATASECURITYAUDITORWEAKCRYPTENCODINGPROP_CRYPT     EnumdataSecurityAuditorWeakCryptEncodingProp = "crypt"
	ENUMDATASECURITYAUDITORWEAKCRYPTENCODINGPROP_SHA_2_256 EnumdataSecurityAuditorWeakCryptEncodingProp = "sha-2-256"
	ENUMDATASECURITYAUDITORWEAKCRYPTENCODINGPROP_SHA_2_512 EnumdataSecurityAuditorWeakCryptEncodingProp = "sha-2-512"
)

// All allowed values of EnumdataSecurityAuditorWeakCryptEncodingProp enum
var AllowedEnumdataSecurityAuditorWeakCryptEncodingPropEnumValues = []EnumdataSecurityAuditorWeakCryptEncodingProp{
	"crypt",
	"sha-2-256",
	"sha-2-512",
}

func (v *EnumdataSecurityAuditorWeakCryptEncodingProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdataSecurityAuditorWeakCryptEncodingProp(value)
	for _, existing := range AllowedEnumdataSecurityAuditorWeakCryptEncodingPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdataSecurityAuditorWeakCryptEncodingProp", value)
}

// NewEnumdataSecurityAuditorWeakCryptEncodingPropFromValue returns a pointer to a valid EnumdataSecurityAuditorWeakCryptEncodingProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdataSecurityAuditorWeakCryptEncodingPropFromValue(v string) (*EnumdataSecurityAuditorWeakCryptEncodingProp, error) {
	ev := EnumdataSecurityAuditorWeakCryptEncodingProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdataSecurityAuditorWeakCryptEncodingProp: valid values are %v", v, AllowedEnumdataSecurityAuditorWeakCryptEncodingPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdataSecurityAuditorWeakCryptEncodingProp) IsValid() bool {
	for _, existing := range AllowedEnumdataSecurityAuditorWeakCryptEncodingPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdata-security-auditor-weakCryptEncodingProp value
func (v EnumdataSecurityAuditorWeakCryptEncodingProp) Ptr() *EnumdataSecurityAuditorWeakCryptEncodingProp {
	return &v
}

type NullableEnumdataSecurityAuditorWeakCryptEncodingProp struct {
	value *EnumdataSecurityAuditorWeakCryptEncodingProp
	isSet bool
}

func (v NullableEnumdataSecurityAuditorWeakCryptEncodingProp) Get() *EnumdataSecurityAuditorWeakCryptEncodingProp {
	return v.value
}

func (v *NullableEnumdataSecurityAuditorWeakCryptEncodingProp) Set(val *EnumdataSecurityAuditorWeakCryptEncodingProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdataSecurityAuditorWeakCryptEncodingProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdataSecurityAuditorWeakCryptEncodingProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdataSecurityAuditorWeakCryptEncodingProp(val *EnumdataSecurityAuditorWeakCryptEncodingProp) *NullableEnumdataSecurityAuditorWeakCryptEncodingProp {
	return &NullableEnumdataSecurityAuditorWeakCryptEncodingProp{value: val, isSet: true}
}

func (v NullableEnumdataSecurityAuditorWeakCryptEncodingProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdataSecurityAuditorWeakCryptEncodingProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
