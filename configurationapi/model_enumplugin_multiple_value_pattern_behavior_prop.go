/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginMultipleValuePatternBehaviorProp The behavior to exhibit if the plugin is configured with multiple value patterns.
type EnumpluginMultipleValuePatternBehaviorProp string

// List of Enumplugin-multipleValuePatternBehaviorProp
const (
	ENUMPLUGINMULTIPLEVALUEPATTERNBEHAVIORPROP_FIRST_NON_REJECTED_VALUE_PATTERN_WITH_NON_EMPTY_VALUES_BUT_MAY_REJECT   EnumpluginMultipleValuePatternBehaviorProp = "use-first-non-rejected-value-pattern-with-non-empty-values-but-may-reject"
	ENUMPLUGINMULTIPLEVALUEPATTERNBEHAVIORPROP_FIRST_NON_REJECTED_VALUE_PATTERN_WITH_NON_EMPTY_VALUES_AND_NEVER_REJECT EnumpluginMultipleValuePatternBehaviorProp = "use-first-non-rejected-value-pattern-with-non-empty-values-and-never-reject"
	ENUMPLUGINMULTIPLEVALUEPATTERNBEHAVIORPROP_FIRST_REJECTION_OR_FIRST_VALUE_PATTERN_WITH_NON_EMPTY_VALUES            EnumpluginMultipleValuePatternBehaviorProp = "use-first-rejection-or-first-value-pattern-with-non-empty-values"
	ENUMPLUGINMULTIPLEVALUEPATTERNBEHAVIORPROP_ALL_NON_REJECTED_VALUE_PATTERNS_WITH_NON_EMPTY_VALUES_BUT_MAY_REJECT    EnumpluginMultipleValuePatternBehaviorProp = "use-all-non-rejected-value-patterns-with-non-empty-values-but-may-reject"
	ENUMPLUGINMULTIPLEVALUEPATTERNBEHAVIORPROP_ALL_NON_REJECTED_VALUE_PATTERNS_WITH_NON_EMPTY_VALUES_AND_NEVER_REJECT  EnumpluginMultipleValuePatternBehaviorProp = "use-all-non-rejected-value-patterns-with-non-empty-values-and-never-reject"
	ENUMPLUGINMULTIPLEVALUEPATTERNBEHAVIORPROP_FIRST_REJECTION_OR_ALL_VALUE_PATTERNS_WITH_NON_EMPTY_VALUES             EnumpluginMultipleValuePatternBehaviorProp = "use-first-rejection-or-all-value-patterns-with-non-empty-values"
)

// All allowed values of EnumpluginMultipleValuePatternBehaviorProp enum
var AllowedEnumpluginMultipleValuePatternBehaviorPropEnumValues = []EnumpluginMultipleValuePatternBehaviorProp{
	"use-first-non-rejected-value-pattern-with-non-empty-values-but-may-reject",
	"use-first-non-rejected-value-pattern-with-non-empty-values-and-never-reject",
	"use-first-rejection-or-first-value-pattern-with-non-empty-values",
	"use-all-non-rejected-value-patterns-with-non-empty-values-but-may-reject",
	"use-all-non-rejected-value-patterns-with-non-empty-values-and-never-reject",
	"use-first-rejection-or-all-value-patterns-with-non-empty-values",
}

func (v *EnumpluginMultipleValuePatternBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginMultipleValuePatternBehaviorProp(value)
	for _, existing := range AllowedEnumpluginMultipleValuePatternBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginMultipleValuePatternBehaviorProp", value)
}

// NewEnumpluginMultipleValuePatternBehaviorPropFromValue returns a pointer to a valid EnumpluginMultipleValuePatternBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginMultipleValuePatternBehaviorPropFromValue(v string) (*EnumpluginMultipleValuePatternBehaviorProp, error) {
	ev := EnumpluginMultipleValuePatternBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginMultipleValuePatternBehaviorProp: valid values are %v", v, AllowedEnumpluginMultipleValuePatternBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginMultipleValuePatternBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginMultipleValuePatternBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-multipleValuePatternBehaviorProp value
func (v EnumpluginMultipleValuePatternBehaviorProp) Ptr() *EnumpluginMultipleValuePatternBehaviorProp {
	return &v
}

type NullableEnumpluginMultipleValuePatternBehaviorProp struct {
	value *EnumpluginMultipleValuePatternBehaviorProp
	isSet bool
}

func (v NullableEnumpluginMultipleValuePatternBehaviorProp) Get() *EnumpluginMultipleValuePatternBehaviorProp {
	return v.value
}

func (v *NullableEnumpluginMultipleValuePatternBehaviorProp) Set(val *EnumpluginMultipleValuePatternBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginMultipleValuePatternBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginMultipleValuePatternBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginMultipleValuePatternBehaviorProp(val *EnumpluginMultipleValuePatternBehaviorProp) *NullableEnumpluginMultipleValuePatternBehaviorProp {
	return &NullableEnumpluginMultipleValuePatternBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpluginMultipleValuePatternBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginMultipleValuePatternBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
