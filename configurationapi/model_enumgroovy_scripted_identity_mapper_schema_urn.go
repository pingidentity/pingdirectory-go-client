/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumgroovyScriptedIdentityMapperSchemaUrn the model 'EnumgroovyScriptedIdentityMapperSchemaUrn'
type EnumgroovyScriptedIdentityMapperSchemaUrn string

// List of Enumgroovy-scripted-identity-mapperSchemaUrn
const (
	ENUMGROOVYSCRIPTEDIDENTITYMAPPERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0IDENTITY_MAPPERGROOVY_SCRIPTED EnumgroovyScriptedIdentityMapperSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:identity-mapper:groovy-scripted"
)

// All allowed values of EnumgroovyScriptedIdentityMapperSchemaUrn enum
var AllowedEnumgroovyScriptedIdentityMapperSchemaUrnEnumValues = []EnumgroovyScriptedIdentityMapperSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:identity-mapper:groovy-scripted",
}

func (v *EnumgroovyScriptedIdentityMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgroovyScriptedIdentityMapperSchemaUrn(value)
	for _, existing := range AllowedEnumgroovyScriptedIdentityMapperSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgroovyScriptedIdentityMapperSchemaUrn", value)
}

// NewEnumgroovyScriptedIdentityMapperSchemaUrnFromValue returns a pointer to a valid EnumgroovyScriptedIdentityMapperSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgroovyScriptedIdentityMapperSchemaUrnFromValue(v string) (*EnumgroovyScriptedIdentityMapperSchemaUrn, error) {
	ev := EnumgroovyScriptedIdentityMapperSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgroovyScriptedIdentityMapperSchemaUrn: valid values are %v", v, AllowedEnumgroovyScriptedIdentityMapperSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgroovyScriptedIdentityMapperSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgroovyScriptedIdentityMapperSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgroovy-scripted-identity-mapperSchemaUrn value
func (v EnumgroovyScriptedIdentityMapperSchemaUrn) Ptr() *EnumgroovyScriptedIdentityMapperSchemaUrn {
	return &v
}

type NullableEnumgroovyScriptedIdentityMapperSchemaUrn struct {
	value *EnumgroovyScriptedIdentityMapperSchemaUrn
	isSet bool
}

func (v NullableEnumgroovyScriptedIdentityMapperSchemaUrn) Get() *EnumgroovyScriptedIdentityMapperSchemaUrn {
	return v.value
}

func (v *NullableEnumgroovyScriptedIdentityMapperSchemaUrn) Set(val *EnumgroovyScriptedIdentityMapperSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgroovyScriptedIdentityMapperSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgroovyScriptedIdentityMapperSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgroovyScriptedIdentityMapperSchemaUrn(val *EnumgroovyScriptedIdentityMapperSchemaUrn) *NullableEnumgroovyScriptedIdentityMapperSchemaUrn {
	return &NullableEnumgroovyScriptedIdentityMapperSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgroovyScriptedIdentityMapperSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgroovyScriptedIdentityMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
