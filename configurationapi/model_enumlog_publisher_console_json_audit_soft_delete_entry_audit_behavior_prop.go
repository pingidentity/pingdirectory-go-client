/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp Specifies the audit behavior for delete and modify operations on soft-deleted entries.
type EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp string

// List of Enumlog-publisher-console-json-audit-softDeleteEntryAuditBehaviorProp
const (
	ENUMLOGPUBLISHERCONSOLEJSONAUDITSOFTDELETEENTRYAUDITBEHAVIORPROP_INCLUDED EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp = "included"
	ENUMLOGPUBLISHERCONSOLEJSONAUDITSOFTDELETEENTRYAUDITBEHAVIORPROP_EXCLUDED EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp = "excluded"
)

// All allowed values of EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp enum
var AllowedEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorPropEnumValues = []EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp{
	"included",
	"excluded",
}

func (v *EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp(value)
	for _, existing := range AllowedEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp", value)
}

// NewEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorPropFromValue returns a pointer to a valid EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorPropFromValue(v string) (*EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp, error) {
	ev := EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp: valid values are %v", v, AllowedEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-console-json-audit-softDeleteEntryAuditBehaviorProp value
func (v EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) Ptr() *EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp {
	return &v
}

type NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp struct {
	value *EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp
	isSet bool
}

func (v NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) Get() *EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp {
	return v.value
}

func (v *NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) Set(val *EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp(val *EnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) *NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp {
	return &NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherConsoleJsonAuditSoftDeleteEntryAuditBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
