/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumstatsCollectorPluginSchemaUrn the model 'EnumstatsCollectorPluginSchemaUrn'
type EnumstatsCollectorPluginSchemaUrn string

// List of Enumstats-collector-pluginSchemaUrn
const (
	ENUMSTATSCOLLECTORPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSTATS_COLLECTOR EnumstatsCollectorPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:stats-collector"
)

// All allowed values of EnumstatsCollectorPluginSchemaUrn enum
var AllowedEnumstatsCollectorPluginSchemaUrnEnumValues = []EnumstatsCollectorPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:stats-collector",
}

func (v *EnumstatsCollectorPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumstatsCollectorPluginSchemaUrn(value)
	for _, existing := range AllowedEnumstatsCollectorPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumstatsCollectorPluginSchemaUrn", value)
}

// NewEnumstatsCollectorPluginSchemaUrnFromValue returns a pointer to a valid EnumstatsCollectorPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumstatsCollectorPluginSchemaUrnFromValue(v string) (*EnumstatsCollectorPluginSchemaUrn, error) {
	ev := EnumstatsCollectorPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumstatsCollectorPluginSchemaUrn: valid values are %v", v, AllowedEnumstatsCollectorPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumstatsCollectorPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumstatsCollectorPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumstats-collector-pluginSchemaUrn value
func (v EnumstatsCollectorPluginSchemaUrn) Ptr() *EnumstatsCollectorPluginSchemaUrn {
	return &v
}

type NullableEnumstatsCollectorPluginSchemaUrn struct {
	value *EnumstatsCollectorPluginSchemaUrn
	isSet bool
}

func (v NullableEnumstatsCollectorPluginSchemaUrn) Get() *EnumstatsCollectorPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumstatsCollectorPluginSchemaUrn) Set(val *EnumstatsCollectorPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumstatsCollectorPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumstatsCollectorPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumstatsCollectorPluginSchemaUrn(val *EnumstatsCollectorPluginSchemaUrn) *NullableEnumstatsCollectorPluginSchemaUrn {
	return &NullableEnumstatsCollectorPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumstatsCollectorPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumstatsCollectorPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
