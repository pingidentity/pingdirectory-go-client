/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnuminterServerAuthenticationInfoPurposeProp Identifies the purpose of this Inter Server Authentication Info.
type EnuminterServerAuthenticationInfoPurposeProp string

// List of Enuminter-server-authentication-info-purposeProp
const (
	ENUMINTERSERVERAUTHENTICATIONINFOPURPOSEPROP_MIRRORED_CONFIG EnuminterServerAuthenticationInfoPurposeProp = "mirrored-config"
)

// All allowed values of EnuminterServerAuthenticationInfoPurposeProp enum
var AllowedEnuminterServerAuthenticationInfoPurposePropEnumValues = []EnuminterServerAuthenticationInfoPurposeProp{
	"mirrored-config",
}

func (v *EnuminterServerAuthenticationInfoPurposeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnuminterServerAuthenticationInfoPurposeProp(value)
	for _, existing := range AllowedEnuminterServerAuthenticationInfoPurposePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnuminterServerAuthenticationInfoPurposeProp", value)
}

// NewEnuminterServerAuthenticationInfoPurposePropFromValue returns a pointer to a valid EnuminterServerAuthenticationInfoPurposeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnuminterServerAuthenticationInfoPurposePropFromValue(v string) (*EnuminterServerAuthenticationInfoPurposeProp, error) {
	ev := EnuminterServerAuthenticationInfoPurposeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnuminterServerAuthenticationInfoPurposeProp: valid values are %v", v, AllowedEnuminterServerAuthenticationInfoPurposePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnuminterServerAuthenticationInfoPurposeProp) IsValid() bool {
	for _, existing := range AllowedEnuminterServerAuthenticationInfoPurposePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enuminter-server-authentication-info-purposeProp value
func (v EnuminterServerAuthenticationInfoPurposeProp) Ptr() *EnuminterServerAuthenticationInfoPurposeProp {
	return &v
}

type NullableEnuminterServerAuthenticationInfoPurposeProp struct {
	value *EnuminterServerAuthenticationInfoPurposeProp
	isSet bool
}

func (v NullableEnuminterServerAuthenticationInfoPurposeProp) Get() *EnuminterServerAuthenticationInfoPurposeProp {
	return v.value
}

func (v *NullableEnuminterServerAuthenticationInfoPurposeProp) Set(val *EnuminterServerAuthenticationInfoPurposeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnuminterServerAuthenticationInfoPurposeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnuminterServerAuthenticationInfoPurposeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnuminterServerAuthenticationInfoPurposeProp(val *EnuminterServerAuthenticationInfoPurposeProp) *NullableEnuminterServerAuthenticationInfoPurposeProp {
	return &NullableEnuminterServerAuthenticationInfoPurposeProp{value: val, isSet: true}
}

func (v NullableEnuminterServerAuthenticationInfoPurposeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnuminterServerAuthenticationInfoPurposeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
