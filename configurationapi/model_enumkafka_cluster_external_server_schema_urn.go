/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumkafkaClusterExternalServerSchemaUrn the model 'EnumkafkaClusterExternalServerSchemaUrn'
type EnumkafkaClusterExternalServerSchemaUrn string

// List of Enumkafka-cluster-external-serverSchemaUrn
const (
	ENUMKAFKACLUSTEREXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERKAFKA_CLUSTER EnumkafkaClusterExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:kafka-cluster"
)

// All allowed values of EnumkafkaClusterExternalServerSchemaUrn enum
var AllowedEnumkafkaClusterExternalServerSchemaUrnEnumValues = []EnumkafkaClusterExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:kafka-cluster",
}

func (v *EnumkafkaClusterExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumkafkaClusterExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumkafkaClusterExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumkafkaClusterExternalServerSchemaUrn", value)
}

// NewEnumkafkaClusterExternalServerSchemaUrnFromValue returns a pointer to a valid EnumkafkaClusterExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumkafkaClusterExternalServerSchemaUrnFromValue(v string) (*EnumkafkaClusterExternalServerSchemaUrn, error) {
	ev := EnumkafkaClusterExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumkafkaClusterExternalServerSchemaUrn: valid values are %v", v, AllowedEnumkafkaClusterExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumkafkaClusterExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumkafkaClusterExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumkafka-cluster-external-serverSchemaUrn value
func (v EnumkafkaClusterExternalServerSchemaUrn) Ptr() *EnumkafkaClusterExternalServerSchemaUrn {
	return &v
}

type NullableEnumkafkaClusterExternalServerSchemaUrn struct {
	value *EnumkafkaClusterExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumkafkaClusterExternalServerSchemaUrn) Get() *EnumkafkaClusterExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumkafkaClusterExternalServerSchemaUrn) Set(val *EnumkafkaClusterExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumkafkaClusterExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumkafkaClusterExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumkafkaClusterExternalServerSchemaUrn(val *EnumkafkaClusterExternalServerSchemaUrn) *NullableEnumkafkaClusterExternalServerSchemaUrn {
	return &NullableEnumkafkaClusterExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumkafkaClusterExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumkafkaClusterExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
