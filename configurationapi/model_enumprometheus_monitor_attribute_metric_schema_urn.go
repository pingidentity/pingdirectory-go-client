/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumprometheusMonitorAttributeMetricSchemaUrn the model 'EnumprometheusMonitorAttributeMetricSchemaUrn'
type EnumprometheusMonitorAttributeMetricSchemaUrn string

// List of Enumprometheus-monitor-attribute-metricSchemaUrn
const (
	ENUMPROMETHEUSMONITORATTRIBUTEMETRICSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PROMETHEUS_MONITOR_ATTRIBUTE_METRIC EnumprometheusMonitorAttributeMetricSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:prometheus-monitor-attribute-metric"
)

// All allowed values of EnumprometheusMonitorAttributeMetricSchemaUrn enum
var AllowedEnumprometheusMonitorAttributeMetricSchemaUrnEnumValues = []EnumprometheusMonitorAttributeMetricSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:prometheus-monitor-attribute-metric",
}

func (v *EnumprometheusMonitorAttributeMetricSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumprometheusMonitorAttributeMetricSchemaUrn(value)
	for _, existing := range AllowedEnumprometheusMonitorAttributeMetricSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumprometheusMonitorAttributeMetricSchemaUrn", value)
}

// NewEnumprometheusMonitorAttributeMetricSchemaUrnFromValue returns a pointer to a valid EnumprometheusMonitorAttributeMetricSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumprometheusMonitorAttributeMetricSchemaUrnFromValue(v string) (*EnumprometheusMonitorAttributeMetricSchemaUrn, error) {
	ev := EnumprometheusMonitorAttributeMetricSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumprometheusMonitorAttributeMetricSchemaUrn: valid values are %v", v, AllowedEnumprometheusMonitorAttributeMetricSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumprometheusMonitorAttributeMetricSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumprometheusMonitorAttributeMetricSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumprometheus-monitor-attribute-metricSchemaUrn value
func (v EnumprometheusMonitorAttributeMetricSchemaUrn) Ptr() *EnumprometheusMonitorAttributeMetricSchemaUrn {
	return &v
}

type NullableEnumprometheusMonitorAttributeMetricSchemaUrn struct {
	value *EnumprometheusMonitorAttributeMetricSchemaUrn
	isSet bool
}

func (v NullableEnumprometheusMonitorAttributeMetricSchemaUrn) Get() *EnumprometheusMonitorAttributeMetricSchemaUrn {
	return v.value
}

func (v *NullableEnumprometheusMonitorAttributeMetricSchemaUrn) Set(val *EnumprometheusMonitorAttributeMetricSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumprometheusMonitorAttributeMetricSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumprometheusMonitorAttributeMetricSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumprometheusMonitorAttributeMetricSchemaUrn(val *EnumprometheusMonitorAttributeMetricSchemaUrn) *NullableEnumprometheusMonitorAttributeMetricSchemaUrn {
	return &NullableEnumprometheusMonitorAttributeMetricSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumprometheusMonitorAttributeMetricSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumprometheusMonitorAttributeMetricSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
