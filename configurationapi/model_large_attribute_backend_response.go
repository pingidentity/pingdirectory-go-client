/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the LargeAttributeBackendResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LargeAttributeBackendResponse{}

// LargeAttributeBackendResponse struct for LargeAttributeBackendResponse
type LargeAttributeBackendResponse struct {
	Schemas []EnumlargeAttributeBackendSchemaUrn `json:"schemas"`
	// Name of the Backend
	Id string `json:"id"`
	// Indicates whether the backend is enabled in the server.
	Enabled bool `json:"enabled"`
	// Specifies the base DN(s) for the data that the backend handles.
	BaseDN          []string                       `json:"baseDN"`
	WritabilityMode EnumbackendWritabilityModeProp `json:"writabilityMode"`
	// Indicates whether this backend should be considered a private backend in the server. Private backends are meant for storing server-internal information and should not be used for user or application data.
	IsPrivateBackend *bool `json:"isPrivateBackend,omitempty"`
	// Specifies the percentage of JVM memory to allocate to the database cache.
	DbCachePercent   *int64                           `json:"dbCachePercent,omitempty"`
	DefaultCacheMode *EnumbackendDefaultCacheModeProp `json:"defaultCacheMode,omitempty"`
	// Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.
	DbDirectory string `json:"dbDirectory"`
	// Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup or LDIF export of the backend.
	DbDirectoryPermissions *string `json:"dbDirectoryPermissions,omitempty"`
	// Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.
	CompactCommonParentDN []string `json:"compactCommonParentDN,omitempty"`
	// Indicates whether the backend should attempt to compress entries before storing them in the database.
	CompressEntries *bool `json:"compressEntries,omitempty"`
	// Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.
	HashEntries *bool `json:"hashEntries,omitempty"`
	// Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.
	DbNumCleanerThreads *int64 `json:"dbNumCleanerThreads,omitempty"`
	// Specifies the minimum percentage of \"live\" data that the database cleaner attempts to keep in database log files.
	DbCleanerMinUtilization *int64 `json:"dbCleanerMinUtilization,omitempty"`
	// Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.
	DbEvictorCriticalPercentage *int64 `json:"dbEvictorCriticalPercentage,omitempty"`
	// Specifies the maximum length of time that should pass between checkpoints.
	DbCheckpointerWakeupInterval *string `json:"dbCheckpointerWakeupInterval,omitempty"`
	// Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of \"0 s\" will disable background synchronous writes.
	DbBackgroundSyncInterval *string `json:"dbBackgroundSyncInterval,omitempty"`
	// Indicates whether to use thread-local database handles to reduce contention in the backend.
	DbUseThreadLocalHandles *bool `json:"dbUseThreadLocalHandles,omitempty"`
	// Specifies the maximum size for a database log file.
	DbLogFileMax *string `json:"dbLogFileMax,omitempty"`
	// Specifies the log level that should be used by the database when it is writing information into the je.info file.
	DbLoggingLevel *string `json:"dbLoggingLevel,omitempty"`
	// Specifies the database and environment properties for the Berkeley DB Java Edition database serving the data for this backend.
	JeProperty           []string                             `json:"jeProperty,omitempty"`
	Id2entryCacheMode    *EnumbackendId2entryCacheModeProp    `json:"id2entryCacheMode,omitempty"`
	Dn2idCacheMode       *EnumbackendDn2idCacheModeProp       `json:"dn2idCacheMode,omitempty"`
	Id2childrenCacheMode *EnumbackendId2childrenCacheModeProp `json:"id2childrenCacheMode,omitempty"`
	Id2subtreeCacheMode  *EnumbackendId2subtreeCacheModeProp  `json:"id2subtreeCacheMode,omitempty"`
	Dn2uriCacheMode      *EnumbackendDn2uriCacheModeProp      `json:"dn2uriCacheMode,omitempty"`
	PrimeMethod          []EnumbackendPrimeMethodProp         `json:"primeMethod,omitempty"`
	// Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.
	PrimeThreadCount *int64 `json:"primeThreadCount,omitempty"`
	// Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.
	PrimeTimeLimit *string `json:"primeTimeLimit,omitempty"`
	// Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).
	PrimeAllIndexes                     *bool                                                `json:"primeAllIndexes,omitempty"`
	SystemIndexToPrime                  []EnumbackendSystemIndexToPrimeProp                  `json:"systemIndexToPrime,omitempty"`
	SystemIndexToPrimeInternalNodesOnly []EnumbackendSystemIndexToPrimeInternalNodesOnlyProp `json:"systemIndexToPrimeInternalNodesOnly,omitempty"`
	// Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.
	BackgroundPrime *bool `json:"backgroundPrime,omitempty"`
	// Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.
	IndexEntryLimit *int64 `json:"indexEntryLimit,omitempty"`
	// Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.
	CompositeIndexEntryLimit *int64 `json:"compositeIndexEntryLimit,omitempty"`
	// Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
	Id2childrenIndexEntryLimit *int64 `json:"id2childrenIndexEntryLimit,omitempty"`
	// Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
	Id2subtreeIndexEntryLimit *int64 `json:"id2subtreeIndexEntryLimit,omitempty"`
	// Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.
	ImportTempDirectory string `json:"importTempDirectory"`
	// Specifies the number of threads to use for concurrent processing during an LDIF import.
	ImportThreadCount *int64 `json:"importThreadCount,omitempty"`
	// Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.
	ExportThreadCount *int64 `json:"exportThreadCount,omitempty"`
	// The percentage of JVM memory to allocate to the database cache during import operations.
	DbImportCachePercent *int64 `json:"dbImportCachePercent,omitempty"`
	// Indicates whether the database should synchronously flush data as it is written to disk.
	DbTxnWriteNoSync *bool `json:"dbTxnWriteNoSync,omitempty"`
	// Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.
	DeadlockRetryLimit                    *int64                                                `json:"deadlockRetryLimit,omitempty"`
	ExternalTxnDefaultBackendLockBehavior *EnumbackendExternalTxnDefaultBackendLockBehaviorProp `json:"externalTxnDefaultBackendLockBehavior,omitempty"`
	SingleWriterLockBehavior              *EnumbackendSingleWriterLockBehaviorProp              `json:"singleWriterLockBehavior,omitempty"`
	// Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.
	SubtreeDeleteSizeLimit *int64 `json:"subtreeDeleteSizeLimit,omitempty"`
	// Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.
	NumRecentChanges *int64 `json:"numRecentChanges,omitempty"`
	// Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.
	OfflineProcessDatabaseOpenTimeout *string `json:"offlineProcessDatabaseOpenTimeout,omitempty"`
	// Specifies a name to identify the associated backend.
	BackendID string `json:"backendID"`
	// A description for this Backend
	Description *string `json:"description,omitempty"`
	// Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
	SetDegradedAlertWhenDisabled *bool `json:"setDegradedAlertWhenDisabled,omitempty"`
	// Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
	ReturnUnavailableWhenDisabled *bool `json:"returnUnavailableWhenDisabled,omitempty"`
	// Specifies a notification manager for changes resulting from operations processed through this Backend
	NotificationManager                           *string                                            `json:"notificationManager,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewLargeAttributeBackendResponse instantiates a new LargeAttributeBackendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLargeAttributeBackendResponse(schemas []EnumlargeAttributeBackendSchemaUrn, id string, enabled bool, baseDN []string, writabilityMode EnumbackendWritabilityModeProp, dbDirectory string, importTempDirectory string, backendID string) *LargeAttributeBackendResponse {
	this := LargeAttributeBackendResponse{}
	this.Schemas = schemas
	this.Id = id
	this.Enabled = enabled
	this.BaseDN = baseDN
	this.WritabilityMode = writabilityMode
	this.DbDirectory = dbDirectory
	this.ImportTempDirectory = importTempDirectory
	this.BackendID = backendID
	return &this
}

// NewLargeAttributeBackendResponseWithDefaults instantiates a new LargeAttributeBackendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLargeAttributeBackendResponseWithDefaults() *LargeAttributeBackendResponse {
	this := LargeAttributeBackendResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *LargeAttributeBackendResponse) GetSchemas() []EnumlargeAttributeBackendSchemaUrn {
	if o == nil {
		var ret []EnumlargeAttributeBackendSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetSchemasOk() ([]EnumlargeAttributeBackendSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *LargeAttributeBackendResponse) SetSchemas(v []EnumlargeAttributeBackendSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *LargeAttributeBackendResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LargeAttributeBackendResponse) SetId(v string) {
	o.Id = v
}

// GetEnabled returns the Enabled field value
func (o *LargeAttributeBackendResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LargeAttributeBackendResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetBaseDN returns the BaseDN field value
func (o *LargeAttributeBackendResponse) GetBaseDN() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetBaseDNOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseDN, true
}

// SetBaseDN sets field value
func (o *LargeAttributeBackendResponse) SetBaseDN(v []string) {
	o.BaseDN = v
}

// GetWritabilityMode returns the WritabilityMode field value
func (o *LargeAttributeBackendResponse) GetWritabilityMode() EnumbackendWritabilityModeProp {
	if o == nil {
		var ret EnumbackendWritabilityModeProp
		return ret
	}

	return o.WritabilityMode
}

// GetWritabilityModeOk returns a tuple with the WritabilityMode field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetWritabilityModeOk() (*EnumbackendWritabilityModeProp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WritabilityMode, true
}

// SetWritabilityMode sets field value
func (o *LargeAttributeBackendResponse) SetWritabilityMode(v EnumbackendWritabilityModeProp) {
	o.WritabilityMode = v
}

// GetIsPrivateBackend returns the IsPrivateBackend field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetIsPrivateBackend() bool {
	if o == nil || IsNil(o.IsPrivateBackend) {
		var ret bool
		return ret
	}
	return *o.IsPrivateBackend
}

// GetIsPrivateBackendOk returns a tuple with the IsPrivateBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetIsPrivateBackendOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivateBackend) {
		return nil, false
	}
	return o.IsPrivateBackend, true
}

// HasIsPrivateBackend returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasIsPrivateBackend() bool {
	if o != nil && !IsNil(o.IsPrivateBackend) {
		return true
	}

	return false
}

// SetIsPrivateBackend gets a reference to the given bool and assigns it to the IsPrivateBackend field.
func (o *LargeAttributeBackendResponse) SetIsPrivateBackend(v bool) {
	o.IsPrivateBackend = &v
}

// GetDbCachePercent returns the DbCachePercent field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbCachePercent() int64 {
	if o == nil || IsNil(o.DbCachePercent) {
		var ret int64
		return ret
	}
	return *o.DbCachePercent
}

// GetDbCachePercentOk returns a tuple with the DbCachePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbCachePercentOk() (*int64, bool) {
	if o == nil || IsNil(o.DbCachePercent) {
		return nil, false
	}
	return o.DbCachePercent, true
}

// HasDbCachePercent returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbCachePercent() bool {
	if o != nil && !IsNil(o.DbCachePercent) {
		return true
	}

	return false
}

// SetDbCachePercent gets a reference to the given int64 and assigns it to the DbCachePercent field.
func (o *LargeAttributeBackendResponse) SetDbCachePercent(v int64) {
	o.DbCachePercent = &v
}

// GetDefaultCacheMode returns the DefaultCacheMode field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDefaultCacheMode() EnumbackendDefaultCacheModeProp {
	if o == nil || IsNil(o.DefaultCacheMode) {
		var ret EnumbackendDefaultCacheModeProp
		return ret
	}
	return *o.DefaultCacheMode
}

// GetDefaultCacheModeOk returns a tuple with the DefaultCacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDefaultCacheModeOk() (*EnumbackendDefaultCacheModeProp, bool) {
	if o == nil || IsNil(o.DefaultCacheMode) {
		return nil, false
	}
	return o.DefaultCacheMode, true
}

// HasDefaultCacheMode returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDefaultCacheMode() bool {
	if o != nil && !IsNil(o.DefaultCacheMode) {
		return true
	}

	return false
}

// SetDefaultCacheMode gets a reference to the given EnumbackendDefaultCacheModeProp and assigns it to the DefaultCacheMode field.
func (o *LargeAttributeBackendResponse) SetDefaultCacheMode(v EnumbackendDefaultCacheModeProp) {
	o.DefaultCacheMode = &v
}

// GetDbDirectory returns the DbDirectory field value
func (o *LargeAttributeBackendResponse) GetDbDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbDirectory
}

// GetDbDirectoryOk returns a tuple with the DbDirectory field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbDirectory, true
}

// SetDbDirectory sets field value
func (o *LargeAttributeBackendResponse) SetDbDirectory(v string) {
	o.DbDirectory = v
}

// GetDbDirectoryPermissions returns the DbDirectoryPermissions field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbDirectoryPermissions() string {
	if o == nil || IsNil(o.DbDirectoryPermissions) {
		var ret string
		return ret
	}
	return *o.DbDirectoryPermissions
}

// GetDbDirectoryPermissionsOk returns a tuple with the DbDirectoryPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbDirectoryPermissionsOk() (*string, bool) {
	if o == nil || IsNil(o.DbDirectoryPermissions) {
		return nil, false
	}
	return o.DbDirectoryPermissions, true
}

// HasDbDirectoryPermissions returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbDirectoryPermissions() bool {
	if o != nil && !IsNil(o.DbDirectoryPermissions) {
		return true
	}

	return false
}

// SetDbDirectoryPermissions gets a reference to the given string and assigns it to the DbDirectoryPermissions field.
func (o *LargeAttributeBackendResponse) SetDbDirectoryPermissions(v string) {
	o.DbDirectoryPermissions = &v
}

// GetCompactCommonParentDN returns the CompactCommonParentDN field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetCompactCommonParentDN() []string {
	if o == nil || IsNil(o.CompactCommonParentDN) {
		var ret []string
		return ret
	}
	return o.CompactCommonParentDN
}

// GetCompactCommonParentDNOk returns a tuple with the CompactCommonParentDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetCompactCommonParentDNOk() ([]string, bool) {
	if o == nil || IsNil(o.CompactCommonParentDN) {
		return nil, false
	}
	return o.CompactCommonParentDN, true
}

// HasCompactCommonParentDN returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasCompactCommonParentDN() bool {
	if o != nil && !IsNil(o.CompactCommonParentDN) {
		return true
	}

	return false
}

// SetCompactCommonParentDN gets a reference to the given []string and assigns it to the CompactCommonParentDN field.
func (o *LargeAttributeBackendResponse) SetCompactCommonParentDN(v []string) {
	o.CompactCommonParentDN = v
}

// GetCompressEntries returns the CompressEntries field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetCompressEntries() bool {
	if o == nil || IsNil(o.CompressEntries) {
		var ret bool
		return ret
	}
	return *o.CompressEntries
}

// GetCompressEntriesOk returns a tuple with the CompressEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetCompressEntriesOk() (*bool, bool) {
	if o == nil || IsNil(o.CompressEntries) {
		return nil, false
	}
	return o.CompressEntries, true
}

// HasCompressEntries returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasCompressEntries() bool {
	if o != nil && !IsNil(o.CompressEntries) {
		return true
	}

	return false
}

// SetCompressEntries gets a reference to the given bool and assigns it to the CompressEntries field.
func (o *LargeAttributeBackendResponse) SetCompressEntries(v bool) {
	o.CompressEntries = &v
}

// GetHashEntries returns the HashEntries field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetHashEntries() bool {
	if o == nil || IsNil(o.HashEntries) {
		var ret bool
		return ret
	}
	return *o.HashEntries
}

// GetHashEntriesOk returns a tuple with the HashEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetHashEntriesOk() (*bool, bool) {
	if o == nil || IsNil(o.HashEntries) {
		return nil, false
	}
	return o.HashEntries, true
}

// HasHashEntries returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasHashEntries() bool {
	if o != nil && !IsNil(o.HashEntries) {
		return true
	}

	return false
}

// SetHashEntries gets a reference to the given bool and assigns it to the HashEntries field.
func (o *LargeAttributeBackendResponse) SetHashEntries(v bool) {
	o.HashEntries = &v
}

// GetDbNumCleanerThreads returns the DbNumCleanerThreads field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbNumCleanerThreads() int64 {
	if o == nil || IsNil(o.DbNumCleanerThreads) {
		var ret int64
		return ret
	}
	return *o.DbNumCleanerThreads
}

// GetDbNumCleanerThreadsOk returns a tuple with the DbNumCleanerThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbNumCleanerThreadsOk() (*int64, bool) {
	if o == nil || IsNil(o.DbNumCleanerThreads) {
		return nil, false
	}
	return o.DbNumCleanerThreads, true
}

// HasDbNumCleanerThreads returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbNumCleanerThreads() bool {
	if o != nil && !IsNil(o.DbNumCleanerThreads) {
		return true
	}

	return false
}

// SetDbNumCleanerThreads gets a reference to the given int64 and assigns it to the DbNumCleanerThreads field.
func (o *LargeAttributeBackendResponse) SetDbNumCleanerThreads(v int64) {
	o.DbNumCleanerThreads = &v
}

// GetDbCleanerMinUtilization returns the DbCleanerMinUtilization field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbCleanerMinUtilization() int64 {
	if o == nil || IsNil(o.DbCleanerMinUtilization) {
		var ret int64
		return ret
	}
	return *o.DbCleanerMinUtilization
}

// GetDbCleanerMinUtilizationOk returns a tuple with the DbCleanerMinUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbCleanerMinUtilizationOk() (*int64, bool) {
	if o == nil || IsNil(o.DbCleanerMinUtilization) {
		return nil, false
	}
	return o.DbCleanerMinUtilization, true
}

// HasDbCleanerMinUtilization returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbCleanerMinUtilization() bool {
	if o != nil && !IsNil(o.DbCleanerMinUtilization) {
		return true
	}

	return false
}

// SetDbCleanerMinUtilization gets a reference to the given int64 and assigns it to the DbCleanerMinUtilization field.
func (o *LargeAttributeBackendResponse) SetDbCleanerMinUtilization(v int64) {
	o.DbCleanerMinUtilization = &v
}

// GetDbEvictorCriticalPercentage returns the DbEvictorCriticalPercentage field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbEvictorCriticalPercentage() int64 {
	if o == nil || IsNil(o.DbEvictorCriticalPercentage) {
		var ret int64
		return ret
	}
	return *o.DbEvictorCriticalPercentage
}

// GetDbEvictorCriticalPercentageOk returns a tuple with the DbEvictorCriticalPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbEvictorCriticalPercentageOk() (*int64, bool) {
	if o == nil || IsNil(o.DbEvictorCriticalPercentage) {
		return nil, false
	}
	return o.DbEvictorCriticalPercentage, true
}

// HasDbEvictorCriticalPercentage returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbEvictorCriticalPercentage() bool {
	if o != nil && !IsNil(o.DbEvictorCriticalPercentage) {
		return true
	}

	return false
}

// SetDbEvictorCriticalPercentage gets a reference to the given int64 and assigns it to the DbEvictorCriticalPercentage field.
func (o *LargeAttributeBackendResponse) SetDbEvictorCriticalPercentage(v int64) {
	o.DbEvictorCriticalPercentage = &v
}

// GetDbCheckpointerWakeupInterval returns the DbCheckpointerWakeupInterval field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbCheckpointerWakeupInterval() string {
	if o == nil || IsNil(o.DbCheckpointerWakeupInterval) {
		var ret string
		return ret
	}
	return *o.DbCheckpointerWakeupInterval
}

// GetDbCheckpointerWakeupIntervalOk returns a tuple with the DbCheckpointerWakeupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbCheckpointerWakeupIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.DbCheckpointerWakeupInterval) {
		return nil, false
	}
	return o.DbCheckpointerWakeupInterval, true
}

// HasDbCheckpointerWakeupInterval returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbCheckpointerWakeupInterval() bool {
	if o != nil && !IsNil(o.DbCheckpointerWakeupInterval) {
		return true
	}

	return false
}

// SetDbCheckpointerWakeupInterval gets a reference to the given string and assigns it to the DbCheckpointerWakeupInterval field.
func (o *LargeAttributeBackendResponse) SetDbCheckpointerWakeupInterval(v string) {
	o.DbCheckpointerWakeupInterval = &v
}

// GetDbBackgroundSyncInterval returns the DbBackgroundSyncInterval field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbBackgroundSyncInterval() string {
	if o == nil || IsNil(o.DbBackgroundSyncInterval) {
		var ret string
		return ret
	}
	return *o.DbBackgroundSyncInterval
}

// GetDbBackgroundSyncIntervalOk returns a tuple with the DbBackgroundSyncInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbBackgroundSyncIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.DbBackgroundSyncInterval) {
		return nil, false
	}
	return o.DbBackgroundSyncInterval, true
}

// HasDbBackgroundSyncInterval returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbBackgroundSyncInterval() bool {
	if o != nil && !IsNil(o.DbBackgroundSyncInterval) {
		return true
	}

	return false
}

// SetDbBackgroundSyncInterval gets a reference to the given string and assigns it to the DbBackgroundSyncInterval field.
func (o *LargeAttributeBackendResponse) SetDbBackgroundSyncInterval(v string) {
	o.DbBackgroundSyncInterval = &v
}

// GetDbUseThreadLocalHandles returns the DbUseThreadLocalHandles field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbUseThreadLocalHandles() bool {
	if o == nil || IsNil(o.DbUseThreadLocalHandles) {
		var ret bool
		return ret
	}
	return *o.DbUseThreadLocalHandles
}

// GetDbUseThreadLocalHandlesOk returns a tuple with the DbUseThreadLocalHandles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbUseThreadLocalHandlesOk() (*bool, bool) {
	if o == nil || IsNil(o.DbUseThreadLocalHandles) {
		return nil, false
	}
	return o.DbUseThreadLocalHandles, true
}

// HasDbUseThreadLocalHandles returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbUseThreadLocalHandles() bool {
	if o != nil && !IsNil(o.DbUseThreadLocalHandles) {
		return true
	}

	return false
}

// SetDbUseThreadLocalHandles gets a reference to the given bool and assigns it to the DbUseThreadLocalHandles field.
func (o *LargeAttributeBackendResponse) SetDbUseThreadLocalHandles(v bool) {
	o.DbUseThreadLocalHandles = &v
}

// GetDbLogFileMax returns the DbLogFileMax field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbLogFileMax() string {
	if o == nil || IsNil(o.DbLogFileMax) {
		var ret string
		return ret
	}
	return *o.DbLogFileMax
}

// GetDbLogFileMaxOk returns a tuple with the DbLogFileMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbLogFileMaxOk() (*string, bool) {
	if o == nil || IsNil(o.DbLogFileMax) {
		return nil, false
	}
	return o.DbLogFileMax, true
}

// HasDbLogFileMax returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbLogFileMax() bool {
	if o != nil && !IsNil(o.DbLogFileMax) {
		return true
	}

	return false
}

// SetDbLogFileMax gets a reference to the given string and assigns it to the DbLogFileMax field.
func (o *LargeAttributeBackendResponse) SetDbLogFileMax(v string) {
	o.DbLogFileMax = &v
}

// GetDbLoggingLevel returns the DbLoggingLevel field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbLoggingLevel() string {
	if o == nil || IsNil(o.DbLoggingLevel) {
		var ret string
		return ret
	}
	return *o.DbLoggingLevel
}

// GetDbLoggingLevelOk returns a tuple with the DbLoggingLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbLoggingLevelOk() (*string, bool) {
	if o == nil || IsNil(o.DbLoggingLevel) {
		return nil, false
	}
	return o.DbLoggingLevel, true
}

// HasDbLoggingLevel returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbLoggingLevel() bool {
	if o != nil && !IsNil(o.DbLoggingLevel) {
		return true
	}

	return false
}

// SetDbLoggingLevel gets a reference to the given string and assigns it to the DbLoggingLevel field.
func (o *LargeAttributeBackendResponse) SetDbLoggingLevel(v string) {
	o.DbLoggingLevel = &v
}

// GetJeProperty returns the JeProperty field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetJeProperty() []string {
	if o == nil || IsNil(o.JeProperty) {
		var ret []string
		return ret
	}
	return o.JeProperty
}

// GetJePropertyOk returns a tuple with the JeProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetJePropertyOk() ([]string, bool) {
	if o == nil || IsNil(o.JeProperty) {
		return nil, false
	}
	return o.JeProperty, true
}

// HasJeProperty returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasJeProperty() bool {
	if o != nil && !IsNil(o.JeProperty) {
		return true
	}

	return false
}

// SetJeProperty gets a reference to the given []string and assigns it to the JeProperty field.
func (o *LargeAttributeBackendResponse) SetJeProperty(v []string) {
	o.JeProperty = v
}

// GetId2entryCacheMode returns the Id2entryCacheMode field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetId2entryCacheMode() EnumbackendId2entryCacheModeProp {
	if o == nil || IsNil(o.Id2entryCacheMode) {
		var ret EnumbackendId2entryCacheModeProp
		return ret
	}
	return *o.Id2entryCacheMode
}

// GetId2entryCacheModeOk returns a tuple with the Id2entryCacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetId2entryCacheModeOk() (*EnumbackendId2entryCacheModeProp, bool) {
	if o == nil || IsNil(o.Id2entryCacheMode) {
		return nil, false
	}
	return o.Id2entryCacheMode, true
}

// HasId2entryCacheMode returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasId2entryCacheMode() bool {
	if o != nil && !IsNil(o.Id2entryCacheMode) {
		return true
	}

	return false
}

// SetId2entryCacheMode gets a reference to the given EnumbackendId2entryCacheModeProp and assigns it to the Id2entryCacheMode field.
func (o *LargeAttributeBackendResponse) SetId2entryCacheMode(v EnumbackendId2entryCacheModeProp) {
	o.Id2entryCacheMode = &v
}

// GetDn2idCacheMode returns the Dn2idCacheMode field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDn2idCacheMode() EnumbackendDn2idCacheModeProp {
	if o == nil || IsNil(o.Dn2idCacheMode) {
		var ret EnumbackendDn2idCacheModeProp
		return ret
	}
	return *o.Dn2idCacheMode
}

// GetDn2idCacheModeOk returns a tuple with the Dn2idCacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDn2idCacheModeOk() (*EnumbackendDn2idCacheModeProp, bool) {
	if o == nil || IsNil(o.Dn2idCacheMode) {
		return nil, false
	}
	return o.Dn2idCacheMode, true
}

// HasDn2idCacheMode returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDn2idCacheMode() bool {
	if o != nil && !IsNil(o.Dn2idCacheMode) {
		return true
	}

	return false
}

// SetDn2idCacheMode gets a reference to the given EnumbackendDn2idCacheModeProp and assigns it to the Dn2idCacheMode field.
func (o *LargeAttributeBackendResponse) SetDn2idCacheMode(v EnumbackendDn2idCacheModeProp) {
	o.Dn2idCacheMode = &v
}

// GetId2childrenCacheMode returns the Id2childrenCacheMode field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetId2childrenCacheMode() EnumbackendId2childrenCacheModeProp {
	if o == nil || IsNil(o.Id2childrenCacheMode) {
		var ret EnumbackendId2childrenCacheModeProp
		return ret
	}
	return *o.Id2childrenCacheMode
}

// GetId2childrenCacheModeOk returns a tuple with the Id2childrenCacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetId2childrenCacheModeOk() (*EnumbackendId2childrenCacheModeProp, bool) {
	if o == nil || IsNil(o.Id2childrenCacheMode) {
		return nil, false
	}
	return o.Id2childrenCacheMode, true
}

// HasId2childrenCacheMode returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasId2childrenCacheMode() bool {
	if o != nil && !IsNil(o.Id2childrenCacheMode) {
		return true
	}

	return false
}

// SetId2childrenCacheMode gets a reference to the given EnumbackendId2childrenCacheModeProp and assigns it to the Id2childrenCacheMode field.
func (o *LargeAttributeBackendResponse) SetId2childrenCacheMode(v EnumbackendId2childrenCacheModeProp) {
	o.Id2childrenCacheMode = &v
}

// GetId2subtreeCacheMode returns the Id2subtreeCacheMode field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetId2subtreeCacheMode() EnumbackendId2subtreeCacheModeProp {
	if o == nil || IsNil(o.Id2subtreeCacheMode) {
		var ret EnumbackendId2subtreeCacheModeProp
		return ret
	}
	return *o.Id2subtreeCacheMode
}

// GetId2subtreeCacheModeOk returns a tuple with the Id2subtreeCacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetId2subtreeCacheModeOk() (*EnumbackendId2subtreeCacheModeProp, bool) {
	if o == nil || IsNil(o.Id2subtreeCacheMode) {
		return nil, false
	}
	return o.Id2subtreeCacheMode, true
}

// HasId2subtreeCacheMode returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasId2subtreeCacheMode() bool {
	if o != nil && !IsNil(o.Id2subtreeCacheMode) {
		return true
	}

	return false
}

// SetId2subtreeCacheMode gets a reference to the given EnumbackendId2subtreeCacheModeProp and assigns it to the Id2subtreeCacheMode field.
func (o *LargeAttributeBackendResponse) SetId2subtreeCacheMode(v EnumbackendId2subtreeCacheModeProp) {
	o.Id2subtreeCacheMode = &v
}

// GetDn2uriCacheMode returns the Dn2uriCacheMode field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDn2uriCacheMode() EnumbackendDn2uriCacheModeProp {
	if o == nil || IsNil(o.Dn2uriCacheMode) {
		var ret EnumbackendDn2uriCacheModeProp
		return ret
	}
	return *o.Dn2uriCacheMode
}

// GetDn2uriCacheModeOk returns a tuple with the Dn2uriCacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDn2uriCacheModeOk() (*EnumbackendDn2uriCacheModeProp, bool) {
	if o == nil || IsNil(o.Dn2uriCacheMode) {
		return nil, false
	}
	return o.Dn2uriCacheMode, true
}

// HasDn2uriCacheMode returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDn2uriCacheMode() bool {
	if o != nil && !IsNil(o.Dn2uriCacheMode) {
		return true
	}

	return false
}

// SetDn2uriCacheMode gets a reference to the given EnumbackendDn2uriCacheModeProp and assigns it to the Dn2uriCacheMode field.
func (o *LargeAttributeBackendResponse) SetDn2uriCacheMode(v EnumbackendDn2uriCacheModeProp) {
	o.Dn2uriCacheMode = &v
}

// GetPrimeMethod returns the PrimeMethod field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetPrimeMethod() []EnumbackendPrimeMethodProp {
	if o == nil || IsNil(o.PrimeMethod) {
		var ret []EnumbackendPrimeMethodProp
		return ret
	}
	return o.PrimeMethod
}

// GetPrimeMethodOk returns a tuple with the PrimeMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetPrimeMethodOk() ([]EnumbackendPrimeMethodProp, bool) {
	if o == nil || IsNil(o.PrimeMethod) {
		return nil, false
	}
	return o.PrimeMethod, true
}

// HasPrimeMethod returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasPrimeMethod() bool {
	if o != nil && !IsNil(o.PrimeMethod) {
		return true
	}

	return false
}

// SetPrimeMethod gets a reference to the given []EnumbackendPrimeMethodProp and assigns it to the PrimeMethod field.
func (o *LargeAttributeBackendResponse) SetPrimeMethod(v []EnumbackendPrimeMethodProp) {
	o.PrimeMethod = v
}

// GetPrimeThreadCount returns the PrimeThreadCount field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetPrimeThreadCount() int64 {
	if o == nil || IsNil(o.PrimeThreadCount) {
		var ret int64
		return ret
	}
	return *o.PrimeThreadCount
}

// GetPrimeThreadCountOk returns a tuple with the PrimeThreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetPrimeThreadCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PrimeThreadCount) {
		return nil, false
	}
	return o.PrimeThreadCount, true
}

// HasPrimeThreadCount returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasPrimeThreadCount() bool {
	if o != nil && !IsNil(o.PrimeThreadCount) {
		return true
	}

	return false
}

// SetPrimeThreadCount gets a reference to the given int64 and assigns it to the PrimeThreadCount field.
func (o *LargeAttributeBackendResponse) SetPrimeThreadCount(v int64) {
	o.PrimeThreadCount = &v
}

// GetPrimeTimeLimit returns the PrimeTimeLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetPrimeTimeLimit() string {
	if o == nil || IsNil(o.PrimeTimeLimit) {
		var ret string
		return ret
	}
	return *o.PrimeTimeLimit
}

// GetPrimeTimeLimitOk returns a tuple with the PrimeTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetPrimeTimeLimitOk() (*string, bool) {
	if o == nil || IsNil(o.PrimeTimeLimit) {
		return nil, false
	}
	return o.PrimeTimeLimit, true
}

// HasPrimeTimeLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasPrimeTimeLimit() bool {
	if o != nil && !IsNil(o.PrimeTimeLimit) {
		return true
	}

	return false
}

// SetPrimeTimeLimit gets a reference to the given string and assigns it to the PrimeTimeLimit field.
func (o *LargeAttributeBackendResponse) SetPrimeTimeLimit(v string) {
	o.PrimeTimeLimit = &v
}

// GetPrimeAllIndexes returns the PrimeAllIndexes field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetPrimeAllIndexes() bool {
	if o == nil || IsNil(o.PrimeAllIndexes) {
		var ret bool
		return ret
	}
	return *o.PrimeAllIndexes
}

// GetPrimeAllIndexesOk returns a tuple with the PrimeAllIndexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetPrimeAllIndexesOk() (*bool, bool) {
	if o == nil || IsNil(o.PrimeAllIndexes) {
		return nil, false
	}
	return o.PrimeAllIndexes, true
}

// HasPrimeAllIndexes returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasPrimeAllIndexes() bool {
	if o != nil && !IsNil(o.PrimeAllIndexes) {
		return true
	}

	return false
}

// SetPrimeAllIndexes gets a reference to the given bool and assigns it to the PrimeAllIndexes field.
func (o *LargeAttributeBackendResponse) SetPrimeAllIndexes(v bool) {
	o.PrimeAllIndexes = &v
}

// GetSystemIndexToPrime returns the SystemIndexToPrime field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetSystemIndexToPrime() []EnumbackendSystemIndexToPrimeProp {
	if o == nil || IsNil(o.SystemIndexToPrime) {
		var ret []EnumbackendSystemIndexToPrimeProp
		return ret
	}
	return o.SystemIndexToPrime
}

// GetSystemIndexToPrimeOk returns a tuple with the SystemIndexToPrime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetSystemIndexToPrimeOk() ([]EnumbackendSystemIndexToPrimeProp, bool) {
	if o == nil || IsNil(o.SystemIndexToPrime) {
		return nil, false
	}
	return o.SystemIndexToPrime, true
}

// HasSystemIndexToPrime returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasSystemIndexToPrime() bool {
	if o != nil && !IsNil(o.SystemIndexToPrime) {
		return true
	}

	return false
}

// SetSystemIndexToPrime gets a reference to the given []EnumbackendSystemIndexToPrimeProp and assigns it to the SystemIndexToPrime field.
func (o *LargeAttributeBackendResponse) SetSystemIndexToPrime(v []EnumbackendSystemIndexToPrimeProp) {
	o.SystemIndexToPrime = v
}

// GetSystemIndexToPrimeInternalNodesOnly returns the SystemIndexToPrimeInternalNodesOnly field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetSystemIndexToPrimeInternalNodesOnly() []EnumbackendSystemIndexToPrimeInternalNodesOnlyProp {
	if o == nil || IsNil(o.SystemIndexToPrimeInternalNodesOnly) {
		var ret []EnumbackendSystemIndexToPrimeInternalNodesOnlyProp
		return ret
	}
	return o.SystemIndexToPrimeInternalNodesOnly
}

// GetSystemIndexToPrimeInternalNodesOnlyOk returns a tuple with the SystemIndexToPrimeInternalNodesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetSystemIndexToPrimeInternalNodesOnlyOk() ([]EnumbackendSystemIndexToPrimeInternalNodesOnlyProp, bool) {
	if o == nil || IsNil(o.SystemIndexToPrimeInternalNodesOnly) {
		return nil, false
	}
	return o.SystemIndexToPrimeInternalNodesOnly, true
}

// HasSystemIndexToPrimeInternalNodesOnly returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasSystemIndexToPrimeInternalNodesOnly() bool {
	if o != nil && !IsNil(o.SystemIndexToPrimeInternalNodesOnly) {
		return true
	}

	return false
}

// SetSystemIndexToPrimeInternalNodesOnly gets a reference to the given []EnumbackendSystemIndexToPrimeInternalNodesOnlyProp and assigns it to the SystemIndexToPrimeInternalNodesOnly field.
func (o *LargeAttributeBackendResponse) SetSystemIndexToPrimeInternalNodesOnly(v []EnumbackendSystemIndexToPrimeInternalNodesOnlyProp) {
	o.SystemIndexToPrimeInternalNodesOnly = v
}

// GetBackgroundPrime returns the BackgroundPrime field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetBackgroundPrime() bool {
	if o == nil || IsNil(o.BackgroundPrime) {
		var ret bool
		return ret
	}
	return *o.BackgroundPrime
}

// GetBackgroundPrimeOk returns a tuple with the BackgroundPrime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetBackgroundPrimeOk() (*bool, bool) {
	if o == nil || IsNil(o.BackgroundPrime) {
		return nil, false
	}
	return o.BackgroundPrime, true
}

// HasBackgroundPrime returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasBackgroundPrime() bool {
	if o != nil && !IsNil(o.BackgroundPrime) {
		return true
	}

	return false
}

// SetBackgroundPrime gets a reference to the given bool and assigns it to the BackgroundPrime field.
func (o *LargeAttributeBackendResponse) SetBackgroundPrime(v bool) {
	o.BackgroundPrime = &v
}

// GetIndexEntryLimit returns the IndexEntryLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetIndexEntryLimit() int64 {
	if o == nil || IsNil(o.IndexEntryLimit) {
		var ret int64
		return ret
	}
	return *o.IndexEntryLimit
}

// GetIndexEntryLimitOk returns a tuple with the IndexEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetIndexEntryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.IndexEntryLimit) {
		return nil, false
	}
	return o.IndexEntryLimit, true
}

// HasIndexEntryLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasIndexEntryLimit() bool {
	if o != nil && !IsNil(o.IndexEntryLimit) {
		return true
	}

	return false
}

// SetIndexEntryLimit gets a reference to the given int64 and assigns it to the IndexEntryLimit field.
func (o *LargeAttributeBackendResponse) SetIndexEntryLimit(v int64) {
	o.IndexEntryLimit = &v
}

// GetCompositeIndexEntryLimit returns the CompositeIndexEntryLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetCompositeIndexEntryLimit() int64 {
	if o == nil || IsNil(o.CompositeIndexEntryLimit) {
		var ret int64
		return ret
	}
	return *o.CompositeIndexEntryLimit
}

// GetCompositeIndexEntryLimitOk returns a tuple with the CompositeIndexEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetCompositeIndexEntryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.CompositeIndexEntryLimit) {
		return nil, false
	}
	return o.CompositeIndexEntryLimit, true
}

// HasCompositeIndexEntryLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasCompositeIndexEntryLimit() bool {
	if o != nil && !IsNil(o.CompositeIndexEntryLimit) {
		return true
	}

	return false
}

// SetCompositeIndexEntryLimit gets a reference to the given int64 and assigns it to the CompositeIndexEntryLimit field.
func (o *LargeAttributeBackendResponse) SetCompositeIndexEntryLimit(v int64) {
	o.CompositeIndexEntryLimit = &v
}

// GetId2childrenIndexEntryLimit returns the Id2childrenIndexEntryLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetId2childrenIndexEntryLimit() int64 {
	if o == nil || IsNil(o.Id2childrenIndexEntryLimit) {
		var ret int64
		return ret
	}
	return *o.Id2childrenIndexEntryLimit
}

// GetId2childrenIndexEntryLimitOk returns a tuple with the Id2childrenIndexEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetId2childrenIndexEntryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Id2childrenIndexEntryLimit) {
		return nil, false
	}
	return o.Id2childrenIndexEntryLimit, true
}

// HasId2childrenIndexEntryLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasId2childrenIndexEntryLimit() bool {
	if o != nil && !IsNil(o.Id2childrenIndexEntryLimit) {
		return true
	}

	return false
}

// SetId2childrenIndexEntryLimit gets a reference to the given int64 and assigns it to the Id2childrenIndexEntryLimit field.
func (o *LargeAttributeBackendResponse) SetId2childrenIndexEntryLimit(v int64) {
	o.Id2childrenIndexEntryLimit = &v
}

// GetId2subtreeIndexEntryLimit returns the Id2subtreeIndexEntryLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetId2subtreeIndexEntryLimit() int64 {
	if o == nil || IsNil(o.Id2subtreeIndexEntryLimit) {
		var ret int64
		return ret
	}
	return *o.Id2subtreeIndexEntryLimit
}

// GetId2subtreeIndexEntryLimitOk returns a tuple with the Id2subtreeIndexEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetId2subtreeIndexEntryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.Id2subtreeIndexEntryLimit) {
		return nil, false
	}
	return o.Id2subtreeIndexEntryLimit, true
}

// HasId2subtreeIndexEntryLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasId2subtreeIndexEntryLimit() bool {
	if o != nil && !IsNil(o.Id2subtreeIndexEntryLimit) {
		return true
	}

	return false
}

// SetId2subtreeIndexEntryLimit gets a reference to the given int64 and assigns it to the Id2subtreeIndexEntryLimit field.
func (o *LargeAttributeBackendResponse) SetId2subtreeIndexEntryLimit(v int64) {
	o.Id2subtreeIndexEntryLimit = &v
}

// GetImportTempDirectory returns the ImportTempDirectory field value
func (o *LargeAttributeBackendResponse) GetImportTempDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImportTempDirectory
}

// GetImportTempDirectoryOk returns a tuple with the ImportTempDirectory field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetImportTempDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportTempDirectory, true
}

// SetImportTempDirectory sets field value
func (o *LargeAttributeBackendResponse) SetImportTempDirectory(v string) {
	o.ImportTempDirectory = v
}

// GetImportThreadCount returns the ImportThreadCount field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetImportThreadCount() int64 {
	if o == nil || IsNil(o.ImportThreadCount) {
		var ret int64
		return ret
	}
	return *o.ImportThreadCount
}

// GetImportThreadCountOk returns a tuple with the ImportThreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetImportThreadCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ImportThreadCount) {
		return nil, false
	}
	return o.ImportThreadCount, true
}

// HasImportThreadCount returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasImportThreadCount() bool {
	if o != nil && !IsNil(o.ImportThreadCount) {
		return true
	}

	return false
}

// SetImportThreadCount gets a reference to the given int64 and assigns it to the ImportThreadCount field.
func (o *LargeAttributeBackendResponse) SetImportThreadCount(v int64) {
	o.ImportThreadCount = &v
}

// GetExportThreadCount returns the ExportThreadCount field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetExportThreadCount() int64 {
	if o == nil || IsNil(o.ExportThreadCount) {
		var ret int64
		return ret
	}
	return *o.ExportThreadCount
}

// GetExportThreadCountOk returns a tuple with the ExportThreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetExportThreadCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ExportThreadCount) {
		return nil, false
	}
	return o.ExportThreadCount, true
}

// HasExportThreadCount returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasExportThreadCount() bool {
	if o != nil && !IsNil(o.ExportThreadCount) {
		return true
	}

	return false
}

// SetExportThreadCount gets a reference to the given int64 and assigns it to the ExportThreadCount field.
func (o *LargeAttributeBackendResponse) SetExportThreadCount(v int64) {
	o.ExportThreadCount = &v
}

// GetDbImportCachePercent returns the DbImportCachePercent field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbImportCachePercent() int64 {
	if o == nil || IsNil(o.DbImportCachePercent) {
		var ret int64
		return ret
	}
	return *o.DbImportCachePercent
}

// GetDbImportCachePercentOk returns a tuple with the DbImportCachePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbImportCachePercentOk() (*int64, bool) {
	if o == nil || IsNil(o.DbImportCachePercent) {
		return nil, false
	}
	return o.DbImportCachePercent, true
}

// HasDbImportCachePercent returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbImportCachePercent() bool {
	if o != nil && !IsNil(o.DbImportCachePercent) {
		return true
	}

	return false
}

// SetDbImportCachePercent gets a reference to the given int64 and assigns it to the DbImportCachePercent field.
func (o *LargeAttributeBackendResponse) SetDbImportCachePercent(v int64) {
	o.DbImportCachePercent = &v
}

// GetDbTxnWriteNoSync returns the DbTxnWriteNoSync field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDbTxnWriteNoSync() bool {
	if o == nil || IsNil(o.DbTxnWriteNoSync) {
		var ret bool
		return ret
	}
	return *o.DbTxnWriteNoSync
}

// GetDbTxnWriteNoSyncOk returns a tuple with the DbTxnWriteNoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDbTxnWriteNoSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.DbTxnWriteNoSync) {
		return nil, false
	}
	return o.DbTxnWriteNoSync, true
}

// HasDbTxnWriteNoSync returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDbTxnWriteNoSync() bool {
	if o != nil && !IsNil(o.DbTxnWriteNoSync) {
		return true
	}

	return false
}

// SetDbTxnWriteNoSync gets a reference to the given bool and assigns it to the DbTxnWriteNoSync field.
func (o *LargeAttributeBackendResponse) SetDbTxnWriteNoSync(v bool) {
	o.DbTxnWriteNoSync = &v
}

// GetDeadlockRetryLimit returns the DeadlockRetryLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDeadlockRetryLimit() int64 {
	if o == nil || IsNil(o.DeadlockRetryLimit) {
		var ret int64
		return ret
	}
	return *o.DeadlockRetryLimit
}

// GetDeadlockRetryLimitOk returns a tuple with the DeadlockRetryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDeadlockRetryLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.DeadlockRetryLimit) {
		return nil, false
	}
	return o.DeadlockRetryLimit, true
}

// HasDeadlockRetryLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDeadlockRetryLimit() bool {
	if o != nil && !IsNil(o.DeadlockRetryLimit) {
		return true
	}

	return false
}

// SetDeadlockRetryLimit gets a reference to the given int64 and assigns it to the DeadlockRetryLimit field.
func (o *LargeAttributeBackendResponse) SetDeadlockRetryLimit(v int64) {
	o.DeadlockRetryLimit = &v
}

// GetExternalTxnDefaultBackendLockBehavior returns the ExternalTxnDefaultBackendLockBehavior field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetExternalTxnDefaultBackendLockBehavior() EnumbackendExternalTxnDefaultBackendLockBehaviorProp {
	if o == nil || IsNil(o.ExternalTxnDefaultBackendLockBehavior) {
		var ret EnumbackendExternalTxnDefaultBackendLockBehaviorProp
		return ret
	}
	return *o.ExternalTxnDefaultBackendLockBehavior
}

// GetExternalTxnDefaultBackendLockBehaviorOk returns a tuple with the ExternalTxnDefaultBackendLockBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetExternalTxnDefaultBackendLockBehaviorOk() (*EnumbackendExternalTxnDefaultBackendLockBehaviorProp, bool) {
	if o == nil || IsNil(o.ExternalTxnDefaultBackendLockBehavior) {
		return nil, false
	}
	return o.ExternalTxnDefaultBackendLockBehavior, true
}

// HasExternalTxnDefaultBackendLockBehavior returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasExternalTxnDefaultBackendLockBehavior() bool {
	if o != nil && !IsNil(o.ExternalTxnDefaultBackendLockBehavior) {
		return true
	}

	return false
}

// SetExternalTxnDefaultBackendLockBehavior gets a reference to the given EnumbackendExternalTxnDefaultBackendLockBehaviorProp and assigns it to the ExternalTxnDefaultBackendLockBehavior field.
func (o *LargeAttributeBackendResponse) SetExternalTxnDefaultBackendLockBehavior(v EnumbackendExternalTxnDefaultBackendLockBehaviorProp) {
	o.ExternalTxnDefaultBackendLockBehavior = &v
}

// GetSingleWriterLockBehavior returns the SingleWriterLockBehavior field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetSingleWriterLockBehavior() EnumbackendSingleWriterLockBehaviorProp {
	if o == nil || IsNil(o.SingleWriterLockBehavior) {
		var ret EnumbackendSingleWriterLockBehaviorProp
		return ret
	}
	return *o.SingleWriterLockBehavior
}

// GetSingleWriterLockBehaviorOk returns a tuple with the SingleWriterLockBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetSingleWriterLockBehaviorOk() (*EnumbackendSingleWriterLockBehaviorProp, bool) {
	if o == nil || IsNil(o.SingleWriterLockBehavior) {
		return nil, false
	}
	return o.SingleWriterLockBehavior, true
}

// HasSingleWriterLockBehavior returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasSingleWriterLockBehavior() bool {
	if o != nil && !IsNil(o.SingleWriterLockBehavior) {
		return true
	}

	return false
}

// SetSingleWriterLockBehavior gets a reference to the given EnumbackendSingleWriterLockBehaviorProp and assigns it to the SingleWriterLockBehavior field.
func (o *LargeAttributeBackendResponse) SetSingleWriterLockBehavior(v EnumbackendSingleWriterLockBehaviorProp) {
	o.SingleWriterLockBehavior = &v
}

// GetSubtreeDeleteSizeLimit returns the SubtreeDeleteSizeLimit field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetSubtreeDeleteSizeLimit() int64 {
	if o == nil || IsNil(o.SubtreeDeleteSizeLimit) {
		var ret int64
		return ret
	}
	return *o.SubtreeDeleteSizeLimit
}

// GetSubtreeDeleteSizeLimitOk returns a tuple with the SubtreeDeleteSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetSubtreeDeleteSizeLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SubtreeDeleteSizeLimit) {
		return nil, false
	}
	return o.SubtreeDeleteSizeLimit, true
}

// HasSubtreeDeleteSizeLimit returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasSubtreeDeleteSizeLimit() bool {
	if o != nil && !IsNil(o.SubtreeDeleteSizeLimit) {
		return true
	}

	return false
}

// SetSubtreeDeleteSizeLimit gets a reference to the given int64 and assigns it to the SubtreeDeleteSizeLimit field.
func (o *LargeAttributeBackendResponse) SetSubtreeDeleteSizeLimit(v int64) {
	o.SubtreeDeleteSizeLimit = &v
}

// GetNumRecentChanges returns the NumRecentChanges field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetNumRecentChanges() int64 {
	if o == nil || IsNil(o.NumRecentChanges) {
		var ret int64
		return ret
	}
	return *o.NumRecentChanges
}

// GetNumRecentChangesOk returns a tuple with the NumRecentChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetNumRecentChangesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumRecentChanges) {
		return nil, false
	}
	return o.NumRecentChanges, true
}

// HasNumRecentChanges returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasNumRecentChanges() bool {
	if o != nil && !IsNil(o.NumRecentChanges) {
		return true
	}

	return false
}

// SetNumRecentChanges gets a reference to the given int64 and assigns it to the NumRecentChanges field.
func (o *LargeAttributeBackendResponse) SetNumRecentChanges(v int64) {
	o.NumRecentChanges = &v
}

// GetOfflineProcessDatabaseOpenTimeout returns the OfflineProcessDatabaseOpenTimeout field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetOfflineProcessDatabaseOpenTimeout() string {
	if o == nil || IsNil(o.OfflineProcessDatabaseOpenTimeout) {
		var ret string
		return ret
	}
	return *o.OfflineProcessDatabaseOpenTimeout
}

// GetOfflineProcessDatabaseOpenTimeoutOk returns a tuple with the OfflineProcessDatabaseOpenTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetOfflineProcessDatabaseOpenTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.OfflineProcessDatabaseOpenTimeout) {
		return nil, false
	}
	return o.OfflineProcessDatabaseOpenTimeout, true
}

// HasOfflineProcessDatabaseOpenTimeout returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasOfflineProcessDatabaseOpenTimeout() bool {
	if o != nil && !IsNil(o.OfflineProcessDatabaseOpenTimeout) {
		return true
	}

	return false
}

// SetOfflineProcessDatabaseOpenTimeout gets a reference to the given string and assigns it to the OfflineProcessDatabaseOpenTimeout field.
func (o *LargeAttributeBackendResponse) SetOfflineProcessDatabaseOpenTimeout(v string) {
	o.OfflineProcessDatabaseOpenTimeout = &v
}

// GetBackendID returns the BackendID field value
func (o *LargeAttributeBackendResponse) GetBackendID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackendID
}

// GetBackendIDOk returns a tuple with the BackendID field value
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetBackendIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackendID, true
}

// SetBackendID sets field value
func (o *LargeAttributeBackendResponse) SetBackendID(v string) {
	o.BackendID = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LargeAttributeBackendResponse) SetDescription(v string) {
	o.Description = &v
}

// GetSetDegradedAlertWhenDisabled returns the SetDegradedAlertWhenDisabled field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetSetDegradedAlertWhenDisabled() bool {
	if o == nil || IsNil(o.SetDegradedAlertWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.SetDegradedAlertWhenDisabled
}

// GetSetDegradedAlertWhenDisabledOk returns a tuple with the SetDegradedAlertWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetSetDegradedAlertWhenDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SetDegradedAlertWhenDisabled) {
		return nil, false
	}
	return o.SetDegradedAlertWhenDisabled, true
}

// HasSetDegradedAlertWhenDisabled returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasSetDegradedAlertWhenDisabled() bool {
	if o != nil && !IsNil(o.SetDegradedAlertWhenDisabled) {
		return true
	}

	return false
}

// SetSetDegradedAlertWhenDisabled gets a reference to the given bool and assigns it to the SetDegradedAlertWhenDisabled field.
func (o *LargeAttributeBackendResponse) SetSetDegradedAlertWhenDisabled(v bool) {
	o.SetDegradedAlertWhenDisabled = &v
}

// GetReturnUnavailableWhenDisabled returns the ReturnUnavailableWhenDisabled field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetReturnUnavailableWhenDisabled() bool {
	if o == nil || IsNil(o.ReturnUnavailableWhenDisabled) {
		var ret bool
		return ret
	}
	return *o.ReturnUnavailableWhenDisabled
}

// GetReturnUnavailableWhenDisabledOk returns a tuple with the ReturnUnavailableWhenDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetReturnUnavailableWhenDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnUnavailableWhenDisabled) {
		return nil, false
	}
	return o.ReturnUnavailableWhenDisabled, true
}

// HasReturnUnavailableWhenDisabled returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasReturnUnavailableWhenDisabled() bool {
	if o != nil && !IsNil(o.ReturnUnavailableWhenDisabled) {
		return true
	}

	return false
}

// SetReturnUnavailableWhenDisabled gets a reference to the given bool and assigns it to the ReturnUnavailableWhenDisabled field.
func (o *LargeAttributeBackendResponse) SetReturnUnavailableWhenDisabled(v bool) {
	o.ReturnUnavailableWhenDisabled = &v
}

// GetNotificationManager returns the NotificationManager field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetNotificationManager() string {
	if o == nil || IsNil(o.NotificationManager) {
		var ret string
		return ret
	}
	return *o.NotificationManager
}

// GetNotificationManagerOk returns a tuple with the NotificationManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetNotificationManagerOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationManager) {
		return nil, false
	}
	return o.NotificationManager, true
}

// HasNotificationManager returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasNotificationManager() bool {
	if o != nil && !IsNil(o.NotificationManager) {
		return true
	}

	return false
}

// SetNotificationManager gets a reference to the given string and assigns it to the NotificationManager field.
func (o *LargeAttributeBackendResponse) SetNotificationManager(v string) {
	o.NotificationManager = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *LargeAttributeBackendResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *LargeAttributeBackendResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LargeAttributeBackendResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *LargeAttributeBackendResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *LargeAttributeBackendResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o LargeAttributeBackendResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LargeAttributeBackendResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["id"] = o.Id
	toSerialize["enabled"] = o.Enabled
	toSerialize["baseDN"] = o.BaseDN
	toSerialize["writabilityMode"] = o.WritabilityMode
	if !IsNil(o.IsPrivateBackend) {
		toSerialize["isPrivateBackend"] = o.IsPrivateBackend
	}
	if !IsNil(o.DbCachePercent) {
		toSerialize["dbCachePercent"] = o.DbCachePercent
	}
	if !IsNil(o.DefaultCacheMode) {
		toSerialize["defaultCacheMode"] = o.DefaultCacheMode
	}
	toSerialize["dbDirectory"] = o.DbDirectory
	if !IsNil(o.DbDirectoryPermissions) {
		toSerialize["dbDirectoryPermissions"] = o.DbDirectoryPermissions
	}
	if !IsNil(o.CompactCommonParentDN) {
		toSerialize["compactCommonParentDN"] = o.CompactCommonParentDN
	}
	if !IsNil(o.CompressEntries) {
		toSerialize["compressEntries"] = o.CompressEntries
	}
	if !IsNil(o.HashEntries) {
		toSerialize["hashEntries"] = o.HashEntries
	}
	if !IsNil(o.DbNumCleanerThreads) {
		toSerialize["dbNumCleanerThreads"] = o.DbNumCleanerThreads
	}
	if !IsNil(o.DbCleanerMinUtilization) {
		toSerialize["dbCleanerMinUtilization"] = o.DbCleanerMinUtilization
	}
	if !IsNil(o.DbEvictorCriticalPercentage) {
		toSerialize["dbEvictorCriticalPercentage"] = o.DbEvictorCriticalPercentage
	}
	if !IsNil(o.DbCheckpointerWakeupInterval) {
		toSerialize["dbCheckpointerWakeupInterval"] = o.DbCheckpointerWakeupInterval
	}
	if !IsNil(o.DbBackgroundSyncInterval) {
		toSerialize["dbBackgroundSyncInterval"] = o.DbBackgroundSyncInterval
	}
	if !IsNil(o.DbUseThreadLocalHandles) {
		toSerialize["dbUseThreadLocalHandles"] = o.DbUseThreadLocalHandles
	}
	if !IsNil(o.DbLogFileMax) {
		toSerialize["dbLogFileMax"] = o.DbLogFileMax
	}
	if !IsNil(o.DbLoggingLevel) {
		toSerialize["dbLoggingLevel"] = o.DbLoggingLevel
	}
	if !IsNil(o.JeProperty) {
		toSerialize["jeProperty"] = o.JeProperty
	}
	if !IsNil(o.Id2entryCacheMode) {
		toSerialize["id2entryCacheMode"] = o.Id2entryCacheMode
	}
	if !IsNil(o.Dn2idCacheMode) {
		toSerialize["dn2idCacheMode"] = o.Dn2idCacheMode
	}
	if !IsNil(o.Id2childrenCacheMode) {
		toSerialize["id2childrenCacheMode"] = o.Id2childrenCacheMode
	}
	if !IsNil(o.Id2subtreeCacheMode) {
		toSerialize["id2subtreeCacheMode"] = o.Id2subtreeCacheMode
	}
	if !IsNil(o.Dn2uriCacheMode) {
		toSerialize["dn2uriCacheMode"] = o.Dn2uriCacheMode
	}
	if !IsNil(o.PrimeMethod) {
		toSerialize["primeMethod"] = o.PrimeMethod
	}
	if !IsNil(o.PrimeThreadCount) {
		toSerialize["primeThreadCount"] = o.PrimeThreadCount
	}
	if !IsNil(o.PrimeTimeLimit) {
		toSerialize["primeTimeLimit"] = o.PrimeTimeLimit
	}
	if !IsNil(o.PrimeAllIndexes) {
		toSerialize["primeAllIndexes"] = o.PrimeAllIndexes
	}
	if !IsNil(o.SystemIndexToPrime) {
		toSerialize["systemIndexToPrime"] = o.SystemIndexToPrime
	}
	if !IsNil(o.SystemIndexToPrimeInternalNodesOnly) {
		toSerialize["systemIndexToPrimeInternalNodesOnly"] = o.SystemIndexToPrimeInternalNodesOnly
	}
	if !IsNil(o.BackgroundPrime) {
		toSerialize["backgroundPrime"] = o.BackgroundPrime
	}
	if !IsNil(o.IndexEntryLimit) {
		toSerialize["indexEntryLimit"] = o.IndexEntryLimit
	}
	if !IsNil(o.CompositeIndexEntryLimit) {
		toSerialize["compositeIndexEntryLimit"] = o.CompositeIndexEntryLimit
	}
	if !IsNil(o.Id2childrenIndexEntryLimit) {
		toSerialize["id2childrenIndexEntryLimit"] = o.Id2childrenIndexEntryLimit
	}
	if !IsNil(o.Id2subtreeIndexEntryLimit) {
		toSerialize["id2subtreeIndexEntryLimit"] = o.Id2subtreeIndexEntryLimit
	}
	toSerialize["importTempDirectory"] = o.ImportTempDirectory
	if !IsNil(o.ImportThreadCount) {
		toSerialize["importThreadCount"] = o.ImportThreadCount
	}
	if !IsNil(o.ExportThreadCount) {
		toSerialize["exportThreadCount"] = o.ExportThreadCount
	}
	if !IsNil(o.DbImportCachePercent) {
		toSerialize["dbImportCachePercent"] = o.DbImportCachePercent
	}
	if !IsNil(o.DbTxnWriteNoSync) {
		toSerialize["dbTxnWriteNoSync"] = o.DbTxnWriteNoSync
	}
	if !IsNil(o.DeadlockRetryLimit) {
		toSerialize["deadlockRetryLimit"] = o.DeadlockRetryLimit
	}
	if !IsNil(o.ExternalTxnDefaultBackendLockBehavior) {
		toSerialize["externalTxnDefaultBackendLockBehavior"] = o.ExternalTxnDefaultBackendLockBehavior
	}
	if !IsNil(o.SingleWriterLockBehavior) {
		toSerialize["singleWriterLockBehavior"] = o.SingleWriterLockBehavior
	}
	if !IsNil(o.SubtreeDeleteSizeLimit) {
		toSerialize["subtreeDeleteSizeLimit"] = o.SubtreeDeleteSizeLimit
	}
	if !IsNil(o.NumRecentChanges) {
		toSerialize["numRecentChanges"] = o.NumRecentChanges
	}
	if !IsNil(o.OfflineProcessDatabaseOpenTimeout) {
		toSerialize["offlineProcessDatabaseOpenTimeout"] = o.OfflineProcessDatabaseOpenTimeout
	}
	toSerialize["backendID"] = o.BackendID
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SetDegradedAlertWhenDisabled) {
		toSerialize["setDegradedAlertWhenDisabled"] = o.SetDegradedAlertWhenDisabled
	}
	if !IsNil(o.ReturnUnavailableWhenDisabled) {
		toSerialize["returnUnavailableWhenDisabled"] = o.ReturnUnavailableWhenDisabled
	}
	if !IsNil(o.NotificationManager) {
		toSerialize["notificationManager"] = o.NotificationManager
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableLargeAttributeBackendResponse struct {
	value *LargeAttributeBackendResponse
	isSet bool
}

func (v NullableLargeAttributeBackendResponse) Get() *LargeAttributeBackendResponse {
	return v.value
}

func (v *NullableLargeAttributeBackendResponse) Set(val *LargeAttributeBackendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLargeAttributeBackendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLargeAttributeBackendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLargeAttributeBackendResponse(val *LargeAttributeBackendResponse) *NullableLargeAttributeBackendResponse {
	return &NullableLargeAttributeBackendResponse{value: val, isSet: true}
}

func (v NullableLargeAttributeBackendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLargeAttributeBackendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
