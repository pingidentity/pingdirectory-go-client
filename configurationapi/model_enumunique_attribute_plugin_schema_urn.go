/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumuniqueAttributePluginSchemaUrn the model 'EnumuniqueAttributePluginSchemaUrn'
type EnumuniqueAttributePluginSchemaUrn string

// List of Enumunique-attribute-pluginSchemaUrn
const (
	ENUMUNIQUEATTRIBUTEPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINUNIQUE_ATTRIBUTE EnumuniqueAttributePluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:unique-attribute"
)

// All allowed values of EnumuniqueAttributePluginSchemaUrn enum
var AllowedEnumuniqueAttributePluginSchemaUrnEnumValues = []EnumuniqueAttributePluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:unique-attribute",
}

func (v *EnumuniqueAttributePluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumuniqueAttributePluginSchemaUrn(value)
	for _, existing := range AllowedEnumuniqueAttributePluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumuniqueAttributePluginSchemaUrn", value)
}

// NewEnumuniqueAttributePluginSchemaUrnFromValue returns a pointer to a valid EnumuniqueAttributePluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumuniqueAttributePluginSchemaUrnFromValue(v string) (*EnumuniqueAttributePluginSchemaUrn, error) {
	ev := EnumuniqueAttributePluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumuniqueAttributePluginSchemaUrn: valid values are %v", v, AllowedEnumuniqueAttributePluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumuniqueAttributePluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumuniqueAttributePluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumunique-attribute-pluginSchemaUrn value
func (v EnumuniqueAttributePluginSchemaUrn) Ptr() *EnumuniqueAttributePluginSchemaUrn {
	return &v
}

type NullableEnumuniqueAttributePluginSchemaUrn struct {
	value *EnumuniqueAttributePluginSchemaUrn
	isSet bool
}

func (v NullableEnumuniqueAttributePluginSchemaUrn) Get() *EnumuniqueAttributePluginSchemaUrn {
	return v.value
}

func (v *NullableEnumuniqueAttributePluginSchemaUrn) Set(val *EnumuniqueAttributePluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumuniqueAttributePluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumuniqueAttributePluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumuniqueAttributePluginSchemaUrn(val *EnumuniqueAttributePluginSchemaUrn) *NullableEnumuniqueAttributePluginSchemaUrn {
	return &NullableEnumuniqueAttributePluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumuniqueAttributePluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumuniqueAttributePluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
