/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsevenBitCleanPluginSchemaUrn the model 'EnumsevenBitCleanPluginSchemaUrn'
type EnumsevenBitCleanPluginSchemaUrn string

// List of Enumseven-bit-clean-pluginSchemaUrn
const (
	ENUMSEVENBITCLEANPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSEVEN_BIT_CLEAN EnumsevenBitCleanPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:seven-bit-clean"
)

// All allowed values of EnumsevenBitCleanPluginSchemaUrn enum
var AllowedEnumsevenBitCleanPluginSchemaUrnEnumValues = []EnumsevenBitCleanPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:seven-bit-clean",
}

func (v *EnumsevenBitCleanPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsevenBitCleanPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsevenBitCleanPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsevenBitCleanPluginSchemaUrn", value)
}

// NewEnumsevenBitCleanPluginSchemaUrnFromValue returns a pointer to a valid EnumsevenBitCleanPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsevenBitCleanPluginSchemaUrnFromValue(v string) (*EnumsevenBitCleanPluginSchemaUrn, error) {
	ev := EnumsevenBitCleanPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsevenBitCleanPluginSchemaUrn: valid values are %v", v, AllowedEnumsevenBitCleanPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsevenBitCleanPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsevenBitCleanPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumseven-bit-clean-pluginSchemaUrn value
func (v EnumsevenBitCleanPluginSchemaUrn) Ptr() *EnumsevenBitCleanPluginSchemaUrn {
	return &v
}

type NullableEnumsevenBitCleanPluginSchemaUrn struct {
	value *EnumsevenBitCleanPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsevenBitCleanPluginSchemaUrn) Get() *EnumsevenBitCleanPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsevenBitCleanPluginSchemaUrn) Set(val *EnumsevenBitCleanPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsevenBitCleanPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsevenBitCleanPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsevenBitCleanPluginSchemaUrn(val *EnumsevenBitCleanPluginSchemaUrn) *NullableEnumsevenBitCleanPluginSchemaUrn {
	return &NullableEnumsevenBitCleanPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsevenBitCleanPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsevenBitCleanPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
