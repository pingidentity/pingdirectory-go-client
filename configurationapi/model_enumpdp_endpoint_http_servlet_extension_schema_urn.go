/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpdpEndpointHttpServletExtensionSchemaUrn the model 'EnumpdpEndpointHttpServletExtensionSchemaUrn'
type EnumpdpEndpointHttpServletExtensionSchemaUrn string

// List of Enumpdp-endpoint-http-servlet-extensionSchemaUrn
const (
	ENUMPDPENDPOINTHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONPDP_ENDPOINT EnumpdpEndpointHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:pdp-endpoint"
)

// All allowed values of EnumpdpEndpointHttpServletExtensionSchemaUrn enum
var AllowedEnumpdpEndpointHttpServletExtensionSchemaUrnEnumValues = []EnumpdpEndpointHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:pdp-endpoint",
}

func (v *EnumpdpEndpointHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpdpEndpointHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumpdpEndpointHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpdpEndpointHttpServletExtensionSchemaUrn", value)
}

// NewEnumpdpEndpointHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumpdpEndpointHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpdpEndpointHttpServletExtensionSchemaUrnFromValue(v string) (*EnumpdpEndpointHttpServletExtensionSchemaUrn, error) {
	ev := EnumpdpEndpointHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpdpEndpointHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumpdpEndpointHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpdpEndpointHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpdpEndpointHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpdp-endpoint-http-servlet-extensionSchemaUrn value
func (v EnumpdpEndpointHttpServletExtensionSchemaUrn) Ptr() *EnumpdpEndpointHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumpdpEndpointHttpServletExtensionSchemaUrn struct {
	value *EnumpdpEndpointHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumpdpEndpointHttpServletExtensionSchemaUrn) Get() *EnumpdpEndpointHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumpdpEndpointHttpServletExtensionSchemaUrn) Set(val *EnumpdpEndpointHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpdpEndpointHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpdpEndpointHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpdpEndpointHttpServletExtensionSchemaUrn(val *EnumpdpEndpointHttpServletExtensionSchemaUrn) *NullableEnumpdpEndpointHttpServletExtensionSchemaUrn {
	return &NullableEnumpdpEndpointHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpdpEndpointHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpdpEndpointHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
