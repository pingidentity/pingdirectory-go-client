/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumentryCacheCacheTypeProp Specifies the policy which should be used for purging entries from the cache.
type EnumentryCacheCacheTypeProp string

// List of Enumentry-cache-cacheTypeProp
const (
	ENUMENTRYCACHECACHETYPEPROP_FIFO EnumentryCacheCacheTypeProp = "fifo"
	ENUMENTRYCACHECACHETYPEPROP_LRU  EnumentryCacheCacheTypeProp = "lru"
)

// All allowed values of EnumentryCacheCacheTypeProp enum
var AllowedEnumentryCacheCacheTypePropEnumValues = []EnumentryCacheCacheTypeProp{
	"fifo",
	"lru",
}

func (v *EnumentryCacheCacheTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumentryCacheCacheTypeProp(value)
	for _, existing := range AllowedEnumentryCacheCacheTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumentryCacheCacheTypeProp", value)
}

// NewEnumentryCacheCacheTypePropFromValue returns a pointer to a valid EnumentryCacheCacheTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumentryCacheCacheTypePropFromValue(v string) (*EnumentryCacheCacheTypeProp, error) {
	ev := EnumentryCacheCacheTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumentryCacheCacheTypeProp: valid values are %v", v, AllowedEnumentryCacheCacheTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumentryCacheCacheTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumentryCacheCacheTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumentry-cache-cacheTypeProp value
func (v EnumentryCacheCacheTypeProp) Ptr() *EnumentryCacheCacheTypeProp {
	return &v
}

type NullableEnumentryCacheCacheTypeProp struct {
	value *EnumentryCacheCacheTypeProp
	isSet bool
}

func (v NullableEnumentryCacheCacheTypeProp) Get() *EnumentryCacheCacheTypeProp {
	return v.value
}

func (v *NullableEnumentryCacheCacheTypeProp) Set(val *EnumentryCacheCacheTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumentryCacheCacheTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumentryCacheCacheTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumentryCacheCacheTypeProp(val *EnumentryCacheCacheTypeProp) *NullableEnumentryCacheCacheTypeProp {
	return &NullableEnumentryCacheCacheTypeProp{value: val, isSet: true}
}

func (v NullableEnumentryCacheCacheTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumentryCacheCacheTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
