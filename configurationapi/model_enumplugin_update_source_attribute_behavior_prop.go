/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginUpdateSourceAttributeBehaviorProp The behavior to exhibit for modify and modify DN operations that update one or more of the source attributes used in any of the value patterns.
type EnumpluginUpdateSourceAttributeBehaviorProp string

// List of Enumplugin-updateSourceAttributeBehaviorProp
const (
	ENUMPLUGINUPDATESOURCEATTRIBUTEBEHAVIORPROP_REPLACE_COMPOSED_VALUES  EnumpluginUpdateSourceAttributeBehaviorProp = "replace-composed-values"
	ENUMPLUGINUPDATESOURCEATTRIBUTEBEHAVIORPROP_REPLACE_ALL_VALUES       EnumpluginUpdateSourceAttributeBehaviorProp = "replace-all-values"
	ENUMPLUGINUPDATESOURCEATTRIBUTEBEHAVIORPROP_PRESERVE_EXISTING_VALUES EnumpluginUpdateSourceAttributeBehaviorProp = "preserve-existing-values"
)

// All allowed values of EnumpluginUpdateSourceAttributeBehaviorProp enum
var AllowedEnumpluginUpdateSourceAttributeBehaviorPropEnumValues = []EnumpluginUpdateSourceAttributeBehaviorProp{
	"replace-composed-values",
	"replace-all-values",
	"preserve-existing-values",
}

func (v *EnumpluginUpdateSourceAttributeBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginUpdateSourceAttributeBehaviorProp(value)
	for _, existing := range AllowedEnumpluginUpdateSourceAttributeBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginUpdateSourceAttributeBehaviorProp", value)
}

// NewEnumpluginUpdateSourceAttributeBehaviorPropFromValue returns a pointer to a valid EnumpluginUpdateSourceAttributeBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginUpdateSourceAttributeBehaviorPropFromValue(v string) (*EnumpluginUpdateSourceAttributeBehaviorProp, error) {
	ev := EnumpluginUpdateSourceAttributeBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginUpdateSourceAttributeBehaviorProp: valid values are %v", v, AllowedEnumpluginUpdateSourceAttributeBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginUpdateSourceAttributeBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginUpdateSourceAttributeBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-updateSourceAttributeBehaviorProp value
func (v EnumpluginUpdateSourceAttributeBehaviorProp) Ptr() *EnumpluginUpdateSourceAttributeBehaviorProp {
	return &v
}

type NullableEnumpluginUpdateSourceAttributeBehaviorProp struct {
	value *EnumpluginUpdateSourceAttributeBehaviorProp
	isSet bool
}

func (v NullableEnumpluginUpdateSourceAttributeBehaviorProp) Get() *EnumpluginUpdateSourceAttributeBehaviorProp {
	return v.value
}

func (v *NullableEnumpluginUpdateSourceAttributeBehaviorProp) Set(val *EnumpluginUpdateSourceAttributeBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginUpdateSourceAttributeBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginUpdateSourceAttributeBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginUpdateSourceAttributeBehaviorProp(val *EnumpluginUpdateSourceAttributeBehaviorProp) *NullableEnumpluginUpdateSourceAttributeBehaviorProp {
	return &NullableEnumpluginUpdateSourceAttributeBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpluginUpdateSourceAttributeBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginUpdateSourceAttributeBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
