/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumldifBackendSchemaUrn the model 'EnumldifBackendSchemaUrn'
type EnumldifBackendSchemaUrn string

// List of Enumldif-backendSchemaUrn
const (
	ENUMLDIFBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDLDIF EnumldifBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:ldif"
)

// All allowed values of EnumldifBackendSchemaUrn enum
var AllowedEnumldifBackendSchemaUrnEnumValues = []EnumldifBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:ldif",
}

func (v *EnumldifBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldifBackendSchemaUrn(value)
	for _, existing := range AllowedEnumldifBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldifBackendSchemaUrn", value)
}

// NewEnumldifBackendSchemaUrnFromValue returns a pointer to a valid EnumldifBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldifBackendSchemaUrnFromValue(v string) (*EnumldifBackendSchemaUrn, error) {
	ev := EnumldifBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldifBackendSchemaUrn: valid values are %v", v, AllowedEnumldifBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldifBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldifBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldif-backendSchemaUrn value
func (v EnumldifBackendSchemaUrn) Ptr() *EnumldifBackendSchemaUrn {
	return &v
}

type NullableEnumldifBackendSchemaUrn struct {
	value *EnumldifBackendSchemaUrn
	isSet bool
}

func (v NullableEnumldifBackendSchemaUrn) Get() *EnumldifBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumldifBackendSchemaUrn) Set(val *EnumldifBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldifBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldifBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldifBackendSchemaUrn(val *EnumldifBackendSchemaUrn) *NullableEnumldifBackendSchemaUrn {
	return &NullableEnumldifBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldifBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldifBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
