/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ScimAttributeMappingApiService ScimAttributeMappingApi service
type ScimAttributeMappingApiService service

type ApiAddScimAttributeMappingRequest struct {
	ctx                            context.Context
	ApiService                     *ScimAttributeMappingApiService
	scimResourceTypeName           string
	addScimAttributeMappingRequest *AddScimAttributeMappingRequest
}

// Create a new SCIM Attribute Mapping in the config
func (r ApiAddScimAttributeMappingRequest) AddScimAttributeMappingRequest(addScimAttributeMappingRequest AddScimAttributeMappingRequest) ApiAddScimAttributeMappingRequest {
	r.addScimAttributeMappingRequest = &addScimAttributeMappingRequest
	return r
}

func (r ApiAddScimAttributeMappingRequest) Execute() (*ScimAttributeMappingResponse, *http.Response, error) {
	return r.ApiService.AddScimAttributeMappingExecute(r)
}

/*
AddScimAttributeMapping Add a new SCIM Attribute Mapping to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiAddScimAttributeMappingRequest
*/
func (a *ScimAttributeMappingApiService) AddScimAttributeMapping(ctx context.Context, scimResourceTypeName string) ApiAddScimAttributeMappingRequest {
	return ApiAddScimAttributeMappingRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimResourceTypeName: scimResourceTypeName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeMappingResponse
func (a *ScimAttributeMappingApiService) AddScimAttributeMappingExecute(r ApiAddScimAttributeMappingRequest) (*ScimAttributeMappingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeMappingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeMappingApiService.AddScimAttributeMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addScimAttributeMappingRequest == nil {
		return localVarReturnValue, nil, reportError("addScimAttributeMappingRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addScimAttributeMappingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteScimAttributeMappingRequest struct {
	ctx                      context.Context
	ApiService               *ScimAttributeMappingApiService
	scimAttributeMappingName string
	scimResourceTypeName     string
}

func (r ApiDeleteScimAttributeMappingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScimAttributeMappingExecute(r)
}

/*
DeleteScimAttributeMapping Delete a SCIM Attribute Mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeMappingName Name of the SCIM Attribute Mapping
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiDeleteScimAttributeMappingRequest
*/
func (a *ScimAttributeMappingApiService) DeleteScimAttributeMapping(ctx context.Context, scimAttributeMappingName string, scimResourceTypeName string) ApiDeleteScimAttributeMappingRequest {
	return ApiDeleteScimAttributeMappingRequest{
		ApiService:               a,
		ctx:                      ctx,
		scimAttributeMappingName: scimAttributeMappingName,
		scimResourceTypeName:     scimResourceTypeName,
	}
}

// Execute executes the request
func (a *ScimAttributeMappingApiService) DeleteScimAttributeMappingExecute(r ApiDeleteScimAttributeMappingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeMappingApiService.DeleteScimAttributeMapping")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-mapping-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeMappingName, "scimAttributeMappingName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScimAttributeMappingRequest struct {
	ctx                      context.Context
	ApiService               *ScimAttributeMappingApiService
	scimAttributeMappingName string
	scimResourceTypeName     string
}

func (r ApiGetScimAttributeMappingRequest) Execute() (*ScimAttributeMappingResponse, *http.Response, error) {
	return r.ApiService.GetScimAttributeMappingExecute(r)
}

/*
GetScimAttributeMapping Returns a single SCIM Attribute Mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeMappingName Name of the SCIM Attribute Mapping
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiGetScimAttributeMappingRequest
*/
func (a *ScimAttributeMappingApiService) GetScimAttributeMapping(ctx context.Context, scimAttributeMappingName string, scimResourceTypeName string) ApiGetScimAttributeMappingRequest {
	return ApiGetScimAttributeMappingRequest{
		ApiService:               a,
		ctx:                      ctx,
		scimAttributeMappingName: scimAttributeMappingName,
		scimResourceTypeName:     scimResourceTypeName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeMappingResponse
func (a *ScimAttributeMappingApiService) GetScimAttributeMappingExecute(r ApiGetScimAttributeMappingRequest) (*ScimAttributeMappingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeMappingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeMappingApiService.GetScimAttributeMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-mapping-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeMappingName, "scimAttributeMappingName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListScimAttributeMappingsRequest struct {
	ctx                  context.Context
	ApiService           *ScimAttributeMappingApiService
	scimResourceTypeName string
	filter               *string
}

// SCIM filter
func (r ApiListScimAttributeMappingsRequest) Filter(filter string) ApiListScimAttributeMappingsRequest {
	r.filter = &filter
	return r
}

func (r ApiListScimAttributeMappingsRequest) Execute() (*ScimAttributeMappingListResponse, *http.Response, error) {
	return r.ApiService.ListScimAttributeMappingsExecute(r)
}

/*
ListScimAttributeMappings Returns a list of all SCIM Attribute Mapping objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiListScimAttributeMappingsRequest
*/
func (a *ScimAttributeMappingApiService) ListScimAttributeMappings(ctx context.Context, scimResourceTypeName string) ApiListScimAttributeMappingsRequest {
	return ApiListScimAttributeMappingsRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimResourceTypeName: scimResourceTypeName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeMappingListResponse
func (a *ScimAttributeMappingApiService) ListScimAttributeMappingsExecute(r ApiListScimAttributeMappingsRequest) (*ScimAttributeMappingListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeMappingListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeMappingApiService.ListScimAttributeMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateScimAttributeMappingRequest struct {
	ctx                      context.Context
	ApiService               *ScimAttributeMappingApiService
	scimAttributeMappingName string
	scimResourceTypeName     string
	updateRequest            *UpdateRequest
}

// Update an existing SCIM Attribute Mapping
func (r ApiUpdateScimAttributeMappingRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateScimAttributeMappingRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateScimAttributeMappingRequest) Execute() (*ScimAttributeMappingResponse, *http.Response, error) {
	return r.ApiService.UpdateScimAttributeMappingExecute(r)
}

/*
UpdateScimAttributeMapping Update an existing SCIM Attribute Mapping by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeMappingName Name of the SCIM Attribute Mapping
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiUpdateScimAttributeMappingRequest
*/
func (a *ScimAttributeMappingApiService) UpdateScimAttributeMapping(ctx context.Context, scimAttributeMappingName string, scimResourceTypeName string) ApiUpdateScimAttributeMappingRequest {
	return ApiUpdateScimAttributeMappingRequest{
		ApiService:               a,
		ctx:                      ctx,
		scimAttributeMappingName: scimAttributeMappingName,
		scimResourceTypeName:     scimResourceTypeName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeMappingResponse
func (a *ScimAttributeMappingApiService) UpdateScimAttributeMappingExecute(r ApiUpdateScimAttributeMappingRequest) (*ScimAttributeMappingResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeMappingResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeMappingApiService.UpdateScimAttributeMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-mapping-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeMappingName, "scimAttributeMappingName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
