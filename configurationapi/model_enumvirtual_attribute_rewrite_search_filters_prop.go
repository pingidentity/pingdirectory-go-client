/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumvirtualAttributeRewriteSearchFiltersProp Search filters that include Is Member Of Virtual Attribute searches on dynamic groups can be updated to include the dynamic group filter in the search filter itself. This can allow the backend to more efficiently process the search filter by using attribute indexes sooner in the search processing.
type EnumvirtualAttributeRewriteSearchFiltersProp string

// List of Enumvirtual-attribute-rewriteSearchFiltersProp
const (
	ENUMVIRTUALATTRIBUTEREWRITESEARCHFILTERSPROP_ALWAYS             EnumvirtualAttributeRewriteSearchFiltersProp = "always"
	ENUMVIRTUALATTRIBUTEREWRITESEARCHFILTERSPROP_WITHIN_GROUP_SCOPE EnumvirtualAttributeRewriteSearchFiltersProp = "within-group-scope"
	ENUMVIRTUALATTRIBUTEREWRITESEARCHFILTERSPROP_NEVER              EnumvirtualAttributeRewriteSearchFiltersProp = "never"
)

// All allowed values of EnumvirtualAttributeRewriteSearchFiltersProp enum
var AllowedEnumvirtualAttributeRewriteSearchFiltersPropEnumValues = []EnumvirtualAttributeRewriteSearchFiltersProp{
	"always",
	"within-group-scope",
	"never",
}

func (v *EnumvirtualAttributeRewriteSearchFiltersProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvirtualAttributeRewriteSearchFiltersProp(value)
	for _, existing := range AllowedEnumvirtualAttributeRewriteSearchFiltersPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvirtualAttributeRewriteSearchFiltersProp", value)
}

// NewEnumvirtualAttributeRewriteSearchFiltersPropFromValue returns a pointer to a valid EnumvirtualAttributeRewriteSearchFiltersProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvirtualAttributeRewriteSearchFiltersPropFromValue(v string) (*EnumvirtualAttributeRewriteSearchFiltersProp, error) {
	ev := EnumvirtualAttributeRewriteSearchFiltersProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvirtualAttributeRewriteSearchFiltersProp: valid values are %v", v, AllowedEnumvirtualAttributeRewriteSearchFiltersPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvirtualAttributeRewriteSearchFiltersProp) IsValid() bool {
	for _, existing := range AllowedEnumvirtualAttributeRewriteSearchFiltersPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvirtual-attribute-rewriteSearchFiltersProp value
func (v EnumvirtualAttributeRewriteSearchFiltersProp) Ptr() *EnumvirtualAttributeRewriteSearchFiltersProp {
	return &v
}

type NullableEnumvirtualAttributeRewriteSearchFiltersProp struct {
	value *EnumvirtualAttributeRewriteSearchFiltersProp
	isSet bool
}

func (v NullableEnumvirtualAttributeRewriteSearchFiltersProp) Get() *EnumvirtualAttributeRewriteSearchFiltersProp {
	return v.value
}

func (v *NullableEnumvirtualAttributeRewriteSearchFiltersProp) Set(val *EnumvirtualAttributeRewriteSearchFiltersProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvirtualAttributeRewriteSearchFiltersProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvirtualAttributeRewriteSearchFiltersProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvirtualAttributeRewriteSearchFiltersProp(val *EnumvirtualAttributeRewriteSearchFiltersProp) *NullableEnumvirtualAttributeRewriteSearchFiltersProp {
	return &NullableEnumvirtualAttributeRewriteSearchFiltersProp{value: val, isSet: true}
}

func (v NullableEnumvirtualAttributeRewriteSearchFiltersProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvirtualAttributeRewriteSearchFiltersProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
