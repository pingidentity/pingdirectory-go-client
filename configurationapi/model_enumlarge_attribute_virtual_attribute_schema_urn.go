/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlargeAttributeVirtualAttributeSchemaUrn the model 'EnumlargeAttributeVirtualAttributeSchemaUrn'
type EnumlargeAttributeVirtualAttributeSchemaUrn string

// List of Enumlarge-attribute-virtual-attributeSchemaUrn
const (
	ENUMLARGEATTRIBUTEVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTELARGE_ATTRIBUTE EnumlargeAttributeVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:large-attribute"
)

// All allowed values of EnumlargeAttributeVirtualAttributeSchemaUrn enum
var AllowedEnumlargeAttributeVirtualAttributeSchemaUrnEnumValues = []EnumlargeAttributeVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:large-attribute",
}

func (v *EnumlargeAttributeVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlargeAttributeVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumlargeAttributeVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlargeAttributeVirtualAttributeSchemaUrn", value)
}

// NewEnumlargeAttributeVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumlargeAttributeVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlargeAttributeVirtualAttributeSchemaUrnFromValue(v string) (*EnumlargeAttributeVirtualAttributeSchemaUrn, error) {
	ev := EnumlargeAttributeVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlargeAttributeVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumlargeAttributeVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlargeAttributeVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumlargeAttributeVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlarge-attribute-virtual-attributeSchemaUrn value
func (v EnumlargeAttributeVirtualAttributeSchemaUrn) Ptr() *EnumlargeAttributeVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumlargeAttributeVirtualAttributeSchemaUrn struct {
	value *EnumlargeAttributeVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumlargeAttributeVirtualAttributeSchemaUrn) Get() *EnumlargeAttributeVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumlargeAttributeVirtualAttributeSchemaUrn) Set(val *EnumlargeAttributeVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlargeAttributeVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlargeAttributeVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlargeAttributeVirtualAttributeSchemaUrn(val *EnumlargeAttributeVirtualAttributeSchemaUrn) *NullableEnumlargeAttributeVirtualAttributeSchemaUrn {
	return &NullableEnumlargeAttributeVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumlargeAttributeVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlargeAttributeVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
