/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddLdapPassThroughAuthenticationHandlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddLdapPassThroughAuthenticationHandlerRequest{}

// AddLdapPassThroughAuthenticationHandlerRequest struct for AddLdapPassThroughAuthenticationHandlerRequest
type AddLdapPassThroughAuthenticationHandlerRequest struct {
	Schemas []EnumldapPassThroughAuthenticationHandlerSchemaUrn `json:"schemas"`
	// Specifies the LDAP external server(s) to which authentication attempts should be forwarded.
	Server           []string                                                  `json:"server"`
	ServerAccessMode *EnumpassThroughAuthenticationHandlerServerAccessModeProp `json:"serverAccessMode,omitempty"`
	// Specifies one or more DN mappings that may be used to transform bind DNs before attempting to bind to the external servers.
	DnMap []string `json:"dnMap,omitempty"`
	// A pattern to use to construct the bind DN for the simple bind request to send to the remote server. This may consist of a combination of static text and attribute values and other directives enclosed in curly braces.  For example, the value \"cn={cn},ou=People,dc=example,dc=com\" indicates that the remote bind DN should be constructed from the text \"cn=\" followed by the value of the local entry's cn attribute followed by the text \"ou=People,dc=example,dc=com\". If an attribute contains the value to use as the bind DN for pass-through authentication, then the pattern may simply be the name of that attribute in curly braces (e.g., if the seeAlso attribute contains the bind DN for the target user, then a bind DN pattern of \"{seeAlso}\" would be appropriate).  Note that a bind DN pattern can be used to construct a bind DN that is not actually a valid LDAP distinguished name. For example, if authentication is being passed through to a Microsoft Active Directory server, then a bind DN pattern could be used to construct a user principal name (UPN) as an alternative to a distinguished name.
	BindDNPattern *string `json:"bindDNPattern,omitempty"`
	// The base DN to use when searching for the user entry using a filter constructed from the pattern defined in the search-filter-pattern property. If no base DN is specified, the null DN will be used as the search base DN.
	SearchBaseDN *string `json:"searchBaseDN,omitempty"`
	// A pattern to use to construct a filter to use when searching an external server for the entry of the user as whom to bind. For example, \"(mail={uid:ldapFilterEscape}@example.com)\" would construct a search filter to search for a user whose entry in the local server contains a uid attribute whose value appears before \"@example.com\" in the mail attribute in the external server. Note that the \"ldapFilterEscape\" modifier should almost always be used with attributes specified in the pattern.
	SearchFilterPattern *string `json:"searchFilterPattern,omitempty"`
	// Specifies the initial number of connections to establish to each external server against which authentication may be attempted.
	InitialConnections *int64 `json:"initialConnections,omitempty"`
	// Specifies the maximum number of connections to maintain to each external server against which authentication may be attempted. This value must be greater than or equal to the value for the initial-connections property.
	MaxConnections *int64 `json:"maxConnections,omitempty"`
	// Indicates whether to take server locations into account when prioritizing the servers to use for pass-through authentication attempts.
	UseLocation *bool `json:"useLocation,omitempty"`
	// The maximum length of time to wait for a response from an external server in the same location as this Directory Server before considering it unavailable.
	MaximumAllowedLocalResponseTime *string `json:"maximumAllowedLocalResponseTime,omitempty"`
	// The maximum length of time to wait for a response from an external server in a different location from this Directory Server before considering it unavailable.
	MaximumAllowedNonlocalResponseTime *string `json:"maximumAllowedNonlocalResponseTime,omitempty"`
	// Indicates whether to include the password policy request control (as defined in draft-behera-ldap-password-policy-10) in bind requests sent to the external server.
	UsePasswordPolicyControl *bool `json:"usePasswordPolicyControl,omitempty"`
	// A description for this Pass Through Authentication Handler
	Description *string `json:"description,omitempty"`
	// The base DNs for the local users whose authentication attempts may be passed through to the external authentication service.
	IncludedLocalEntryBaseDN []string `json:"includedLocalEntryBaseDN,omitempty"`
	// A reference to connection criteria that will be used to indicate which bind requests should be passed through to the external authentication service.
	ConnectionCriteria *string `json:"connectionCriteria,omitempty"`
	// A reference to request criteria that will be used to indicate which bind requests should be passed through to the external authentication service.
	RequestCriteria *string `json:"requestCriteria,omitempty"`
	// Name of the new Pass Through Authentication Handler
	HandlerName string `json:"handlerName"`
}

// NewAddLdapPassThroughAuthenticationHandlerRequest instantiates a new AddLdapPassThroughAuthenticationHandlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLdapPassThroughAuthenticationHandlerRequest(schemas []EnumldapPassThroughAuthenticationHandlerSchemaUrn, server []string, handlerName string) *AddLdapPassThroughAuthenticationHandlerRequest {
	this := AddLdapPassThroughAuthenticationHandlerRequest{}
	this.Schemas = schemas
	this.Server = server
	this.HandlerName = handlerName
	return &this
}

// NewAddLdapPassThroughAuthenticationHandlerRequestWithDefaults instantiates a new AddLdapPassThroughAuthenticationHandlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLdapPassThroughAuthenticationHandlerRequestWithDefaults() *AddLdapPassThroughAuthenticationHandlerRequest {
	this := AddLdapPassThroughAuthenticationHandlerRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetSchemas() []EnumldapPassThroughAuthenticationHandlerSchemaUrn {
	if o == nil {
		var ret []EnumldapPassThroughAuthenticationHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetSchemasOk() ([]EnumldapPassThroughAuthenticationHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetSchemas(v []EnumldapPassThroughAuthenticationHandlerSchemaUrn) {
	o.Schemas = v
}

// GetServer returns the Server field value
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetServer() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetServerOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Server, true
}

// SetServer sets field value
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetServer(v []string) {
	o.Server = v
}

// GetServerAccessMode returns the ServerAccessMode field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetServerAccessMode() EnumpassThroughAuthenticationHandlerServerAccessModeProp {
	if o == nil || IsNil(o.ServerAccessMode) {
		var ret EnumpassThroughAuthenticationHandlerServerAccessModeProp
		return ret
	}
	return *o.ServerAccessMode
}

// GetServerAccessModeOk returns a tuple with the ServerAccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetServerAccessModeOk() (*EnumpassThroughAuthenticationHandlerServerAccessModeProp, bool) {
	if o == nil || IsNil(o.ServerAccessMode) {
		return nil, false
	}
	return o.ServerAccessMode, true
}

// HasServerAccessMode returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasServerAccessMode() bool {
	if o != nil && !IsNil(o.ServerAccessMode) {
		return true
	}

	return false
}

// SetServerAccessMode gets a reference to the given EnumpassThroughAuthenticationHandlerServerAccessModeProp and assigns it to the ServerAccessMode field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetServerAccessMode(v EnumpassThroughAuthenticationHandlerServerAccessModeProp) {
	o.ServerAccessMode = &v
}

// GetDnMap returns the DnMap field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetDnMap() []string {
	if o == nil || IsNil(o.DnMap) {
		var ret []string
		return ret
	}
	return o.DnMap
}

// GetDnMapOk returns a tuple with the DnMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetDnMapOk() ([]string, bool) {
	if o == nil || IsNil(o.DnMap) {
		return nil, false
	}
	return o.DnMap, true
}

// HasDnMap returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasDnMap() bool {
	if o != nil && !IsNil(o.DnMap) {
		return true
	}

	return false
}

// SetDnMap gets a reference to the given []string and assigns it to the DnMap field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetDnMap(v []string) {
	o.DnMap = v
}

// GetBindDNPattern returns the BindDNPattern field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetBindDNPattern() string {
	if o == nil || IsNil(o.BindDNPattern) {
		var ret string
		return ret
	}
	return *o.BindDNPattern
}

// GetBindDNPatternOk returns a tuple with the BindDNPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetBindDNPatternOk() (*string, bool) {
	if o == nil || IsNil(o.BindDNPattern) {
		return nil, false
	}
	return o.BindDNPattern, true
}

// HasBindDNPattern returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasBindDNPattern() bool {
	if o != nil && !IsNil(o.BindDNPattern) {
		return true
	}

	return false
}

// SetBindDNPattern gets a reference to the given string and assigns it to the BindDNPattern field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetBindDNPattern(v string) {
	o.BindDNPattern = &v
}

// GetSearchBaseDN returns the SearchBaseDN field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetSearchBaseDN() string {
	if o == nil || IsNil(o.SearchBaseDN) {
		var ret string
		return ret
	}
	return *o.SearchBaseDN
}

// GetSearchBaseDNOk returns a tuple with the SearchBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetSearchBaseDNOk() (*string, bool) {
	if o == nil || IsNil(o.SearchBaseDN) {
		return nil, false
	}
	return o.SearchBaseDN, true
}

// HasSearchBaseDN returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasSearchBaseDN() bool {
	if o != nil && !IsNil(o.SearchBaseDN) {
		return true
	}

	return false
}

// SetSearchBaseDN gets a reference to the given string and assigns it to the SearchBaseDN field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetSearchBaseDN(v string) {
	o.SearchBaseDN = &v
}

// GetSearchFilterPattern returns the SearchFilterPattern field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetSearchFilterPattern() string {
	if o == nil || IsNil(o.SearchFilterPattern) {
		var ret string
		return ret
	}
	return *o.SearchFilterPattern
}

// GetSearchFilterPatternOk returns a tuple with the SearchFilterPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetSearchFilterPatternOk() (*string, bool) {
	if o == nil || IsNil(o.SearchFilterPattern) {
		return nil, false
	}
	return o.SearchFilterPattern, true
}

// HasSearchFilterPattern returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasSearchFilterPattern() bool {
	if o != nil && !IsNil(o.SearchFilterPattern) {
		return true
	}

	return false
}

// SetSearchFilterPattern gets a reference to the given string and assigns it to the SearchFilterPattern field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetSearchFilterPattern(v string) {
	o.SearchFilterPattern = &v
}

// GetInitialConnections returns the InitialConnections field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetInitialConnections() int64 {
	if o == nil || IsNil(o.InitialConnections) {
		var ret int64
		return ret
	}
	return *o.InitialConnections
}

// GetInitialConnectionsOk returns a tuple with the InitialConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetInitialConnectionsOk() (*int64, bool) {
	if o == nil || IsNil(o.InitialConnections) {
		return nil, false
	}
	return o.InitialConnections, true
}

// HasInitialConnections returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasInitialConnections() bool {
	if o != nil && !IsNil(o.InitialConnections) {
		return true
	}

	return false
}

// SetInitialConnections gets a reference to the given int64 and assigns it to the InitialConnections field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetInitialConnections(v int64) {
	o.InitialConnections = &v
}

// GetMaxConnections returns the MaxConnections field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetMaxConnections() int64 {
	if o == nil || IsNil(o.MaxConnections) {
		var ret int64
		return ret
	}
	return *o.MaxConnections
}

// GetMaxConnectionsOk returns a tuple with the MaxConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetMaxConnectionsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxConnections) {
		return nil, false
	}
	return o.MaxConnections, true
}

// HasMaxConnections returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasMaxConnections() bool {
	if o != nil && !IsNil(o.MaxConnections) {
		return true
	}

	return false
}

// SetMaxConnections gets a reference to the given int64 and assigns it to the MaxConnections field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetMaxConnections(v int64) {
	o.MaxConnections = &v
}

// GetUseLocation returns the UseLocation field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetUseLocation() bool {
	if o == nil || IsNil(o.UseLocation) {
		var ret bool
		return ret
	}
	return *o.UseLocation
}

// GetUseLocationOk returns a tuple with the UseLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetUseLocationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLocation) {
		return nil, false
	}
	return o.UseLocation, true
}

// HasUseLocation returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasUseLocation() bool {
	if o != nil && !IsNil(o.UseLocation) {
		return true
	}

	return false
}

// SetUseLocation gets a reference to the given bool and assigns it to the UseLocation field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetUseLocation(v bool) {
	o.UseLocation = &v
}

// GetMaximumAllowedLocalResponseTime returns the MaximumAllowedLocalResponseTime field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetMaximumAllowedLocalResponseTime() string {
	if o == nil || IsNil(o.MaximumAllowedLocalResponseTime) {
		var ret string
		return ret
	}
	return *o.MaximumAllowedLocalResponseTime
}

// GetMaximumAllowedLocalResponseTimeOk returns a tuple with the MaximumAllowedLocalResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetMaximumAllowedLocalResponseTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumAllowedLocalResponseTime) {
		return nil, false
	}
	return o.MaximumAllowedLocalResponseTime, true
}

// HasMaximumAllowedLocalResponseTime returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasMaximumAllowedLocalResponseTime() bool {
	if o != nil && !IsNil(o.MaximumAllowedLocalResponseTime) {
		return true
	}

	return false
}

// SetMaximumAllowedLocalResponseTime gets a reference to the given string and assigns it to the MaximumAllowedLocalResponseTime field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetMaximumAllowedLocalResponseTime(v string) {
	o.MaximumAllowedLocalResponseTime = &v
}

// GetMaximumAllowedNonlocalResponseTime returns the MaximumAllowedNonlocalResponseTime field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetMaximumAllowedNonlocalResponseTime() string {
	if o == nil || IsNil(o.MaximumAllowedNonlocalResponseTime) {
		var ret string
		return ret
	}
	return *o.MaximumAllowedNonlocalResponseTime
}

// GetMaximumAllowedNonlocalResponseTimeOk returns a tuple with the MaximumAllowedNonlocalResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetMaximumAllowedNonlocalResponseTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumAllowedNonlocalResponseTime) {
		return nil, false
	}
	return o.MaximumAllowedNonlocalResponseTime, true
}

// HasMaximumAllowedNonlocalResponseTime returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasMaximumAllowedNonlocalResponseTime() bool {
	if o != nil && !IsNil(o.MaximumAllowedNonlocalResponseTime) {
		return true
	}

	return false
}

// SetMaximumAllowedNonlocalResponseTime gets a reference to the given string and assigns it to the MaximumAllowedNonlocalResponseTime field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetMaximumAllowedNonlocalResponseTime(v string) {
	o.MaximumAllowedNonlocalResponseTime = &v
}

// GetUsePasswordPolicyControl returns the UsePasswordPolicyControl field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetUsePasswordPolicyControl() bool {
	if o == nil || IsNil(o.UsePasswordPolicyControl) {
		var ret bool
		return ret
	}
	return *o.UsePasswordPolicyControl
}

// GetUsePasswordPolicyControlOk returns a tuple with the UsePasswordPolicyControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetUsePasswordPolicyControlOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePasswordPolicyControl) {
		return nil, false
	}
	return o.UsePasswordPolicyControl, true
}

// HasUsePasswordPolicyControl returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasUsePasswordPolicyControl() bool {
	if o != nil && !IsNil(o.UsePasswordPolicyControl) {
		return true
	}

	return false
}

// SetUsePasswordPolicyControl gets a reference to the given bool and assigns it to the UsePasswordPolicyControl field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetUsePasswordPolicyControl(v bool) {
	o.UsePasswordPolicyControl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIncludedLocalEntryBaseDN returns the IncludedLocalEntryBaseDN field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetIncludedLocalEntryBaseDN() []string {
	if o == nil || IsNil(o.IncludedLocalEntryBaseDN) {
		var ret []string
		return ret
	}
	return o.IncludedLocalEntryBaseDN
}

// GetIncludedLocalEntryBaseDNOk returns a tuple with the IncludedLocalEntryBaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetIncludedLocalEntryBaseDNOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedLocalEntryBaseDN) {
		return nil, false
	}
	return o.IncludedLocalEntryBaseDN, true
}

// HasIncludedLocalEntryBaseDN returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasIncludedLocalEntryBaseDN() bool {
	if o != nil && !IsNil(o.IncludedLocalEntryBaseDN) {
		return true
	}

	return false
}

// SetIncludedLocalEntryBaseDN gets a reference to the given []string and assigns it to the IncludedLocalEntryBaseDN field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetIncludedLocalEntryBaseDN(v []string) {
	o.IncludedLocalEntryBaseDN = v
}

// GetConnectionCriteria returns the ConnectionCriteria field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetConnectionCriteria() string {
	if o == nil || IsNil(o.ConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.ConnectionCriteria
}

// GetConnectionCriteriaOk returns a tuple with the ConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetConnectionCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionCriteria) {
		return nil, false
	}
	return o.ConnectionCriteria, true
}

// HasConnectionCriteria returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasConnectionCriteria() bool {
	if o != nil && !IsNil(o.ConnectionCriteria) {
		return true
	}

	return false
}

// SetConnectionCriteria gets a reference to the given string and assigns it to the ConnectionCriteria field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetConnectionCriteria(v string) {
	o.ConnectionCriteria = &v
}

// GetRequestCriteria returns the RequestCriteria field value if set, zero value otherwise.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetRequestCriteria() string {
	if o == nil || IsNil(o.RequestCriteria) {
		var ret string
		return ret
	}
	return *o.RequestCriteria
}

// GetRequestCriteriaOk returns a tuple with the RequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetRequestCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.RequestCriteria) {
		return nil, false
	}
	return o.RequestCriteria, true
}

// HasRequestCriteria returns a boolean if a field has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) HasRequestCriteria() bool {
	if o != nil && !IsNil(o.RequestCriteria) {
		return true
	}

	return false
}

// SetRequestCriteria gets a reference to the given string and assigns it to the RequestCriteria field.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetRequestCriteria(v string) {
	o.RequestCriteria = &v
}

// GetHandlerName returns the HandlerName field value
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetHandlerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HandlerName
}

// GetHandlerNameOk returns a tuple with the HandlerName field value
// and a boolean to check if the value has been set.
func (o *AddLdapPassThroughAuthenticationHandlerRequest) GetHandlerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HandlerName, true
}

// SetHandlerName sets field value
func (o *AddLdapPassThroughAuthenticationHandlerRequest) SetHandlerName(v string) {
	o.HandlerName = v
}

func (o AddLdapPassThroughAuthenticationHandlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddLdapPassThroughAuthenticationHandlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["server"] = o.Server
	if !IsNil(o.ServerAccessMode) {
		toSerialize["serverAccessMode"] = o.ServerAccessMode
	}
	if !IsNil(o.DnMap) {
		toSerialize["dnMap"] = o.DnMap
	}
	if !IsNil(o.BindDNPattern) {
		toSerialize["bindDNPattern"] = o.BindDNPattern
	}
	if !IsNil(o.SearchBaseDN) {
		toSerialize["searchBaseDN"] = o.SearchBaseDN
	}
	if !IsNil(o.SearchFilterPattern) {
		toSerialize["searchFilterPattern"] = o.SearchFilterPattern
	}
	if !IsNil(o.InitialConnections) {
		toSerialize["initialConnections"] = o.InitialConnections
	}
	if !IsNil(o.MaxConnections) {
		toSerialize["maxConnections"] = o.MaxConnections
	}
	if !IsNil(o.UseLocation) {
		toSerialize["useLocation"] = o.UseLocation
	}
	if !IsNil(o.MaximumAllowedLocalResponseTime) {
		toSerialize["maximumAllowedLocalResponseTime"] = o.MaximumAllowedLocalResponseTime
	}
	if !IsNil(o.MaximumAllowedNonlocalResponseTime) {
		toSerialize["maximumAllowedNonlocalResponseTime"] = o.MaximumAllowedNonlocalResponseTime
	}
	if !IsNil(o.UsePasswordPolicyControl) {
		toSerialize["usePasswordPolicyControl"] = o.UsePasswordPolicyControl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IncludedLocalEntryBaseDN) {
		toSerialize["includedLocalEntryBaseDN"] = o.IncludedLocalEntryBaseDN
	}
	if !IsNil(o.ConnectionCriteria) {
		toSerialize["connectionCriteria"] = o.ConnectionCriteria
	}
	if !IsNil(o.RequestCriteria) {
		toSerialize["requestCriteria"] = o.RequestCriteria
	}
	toSerialize["handlerName"] = o.HandlerName
	return toSerialize, nil
}

type NullableAddLdapPassThroughAuthenticationHandlerRequest struct {
	value *AddLdapPassThroughAuthenticationHandlerRequest
	isSet bool
}

func (v NullableAddLdapPassThroughAuthenticationHandlerRequest) Get() *AddLdapPassThroughAuthenticationHandlerRequest {
	return v.value
}

func (v *NullableAddLdapPassThroughAuthenticationHandlerRequest) Set(val *AddLdapPassThroughAuthenticationHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLdapPassThroughAuthenticationHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLdapPassThroughAuthenticationHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLdapPassThroughAuthenticationHandlerRequest(val *AddLdapPassThroughAuthenticationHandlerRequest) *NullableAddLdapPassThroughAuthenticationHandlerRequest {
	return &NullableAddLdapPassThroughAuthenticationHandlerRequest{value: val, isSet: true}
}

func (v NullableAddLdapPassThroughAuthenticationHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLdapPassThroughAuthenticationHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
