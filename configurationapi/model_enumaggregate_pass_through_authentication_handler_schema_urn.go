/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumaggregatePassThroughAuthenticationHandlerSchemaUrn the model 'EnumaggregatePassThroughAuthenticationHandlerSchemaUrn'
type EnumaggregatePassThroughAuthenticationHandlerSchemaUrn string

// List of Enumaggregate-pass-through-authentication-handlerSchemaUrn
const (
	ENUMAGGREGATEPASSTHROUGHAUTHENTICATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASS_THROUGH_AUTHENTICATION_HANDLERAGGREGATE EnumaggregatePassThroughAuthenticationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:pass-through-authentication-handler:aggregate"
)

// All allowed values of EnumaggregatePassThroughAuthenticationHandlerSchemaUrn enum
var AllowedEnumaggregatePassThroughAuthenticationHandlerSchemaUrnEnumValues = []EnumaggregatePassThroughAuthenticationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:pass-through-authentication-handler:aggregate",
}

func (v *EnumaggregatePassThroughAuthenticationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumaggregatePassThroughAuthenticationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumaggregatePassThroughAuthenticationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumaggregatePassThroughAuthenticationHandlerSchemaUrn", value)
}

// NewEnumaggregatePassThroughAuthenticationHandlerSchemaUrnFromValue returns a pointer to a valid EnumaggregatePassThroughAuthenticationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumaggregatePassThroughAuthenticationHandlerSchemaUrnFromValue(v string) (*EnumaggregatePassThroughAuthenticationHandlerSchemaUrn, error) {
	ev := EnumaggregatePassThroughAuthenticationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumaggregatePassThroughAuthenticationHandlerSchemaUrn: valid values are %v", v, AllowedEnumaggregatePassThroughAuthenticationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumaggregatePassThroughAuthenticationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumaggregatePassThroughAuthenticationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaggregate-pass-through-authentication-handlerSchemaUrn value
func (v EnumaggregatePassThroughAuthenticationHandlerSchemaUrn) Ptr() *EnumaggregatePassThroughAuthenticationHandlerSchemaUrn {
	return &v
}

type NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn struct {
	value *EnumaggregatePassThroughAuthenticationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn) Get() *EnumaggregatePassThroughAuthenticationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn) Set(val *EnumaggregatePassThroughAuthenticationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn(val *EnumaggregatePassThroughAuthenticationHandlerSchemaUrn) *NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn {
	return &NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumaggregatePassThroughAuthenticationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
