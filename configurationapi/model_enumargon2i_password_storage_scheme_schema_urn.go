/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// Enumargon2iPasswordStorageSchemeSchemaUrn the model 'Enumargon2iPasswordStorageSchemeSchemaUrn'
type Enumargon2iPasswordStorageSchemeSchemaUrn string

// List of Enumargon2i-password-storage-schemeSchemaUrn
const (
	ENUMARGON2IPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEARGON2I Enumargon2iPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:argon2i"
)

// All allowed values of Enumargon2iPasswordStorageSchemeSchemaUrn enum
var AllowedEnumargon2iPasswordStorageSchemeSchemaUrnEnumValues = []Enumargon2iPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:argon2i",
}

func (v *Enumargon2iPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumargon2iPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumargon2iPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumargon2iPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumargon2iPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid Enumargon2iPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumargon2iPasswordStorageSchemeSchemaUrnFromValue(v string) (*Enumargon2iPasswordStorageSchemeSchemaUrn, error) {
	ev := Enumargon2iPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumargon2iPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumargon2iPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumargon2iPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumargon2iPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumargon2i-password-storage-schemeSchemaUrn value
func (v Enumargon2iPasswordStorageSchemeSchemaUrn) Ptr() *Enumargon2iPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumargon2iPasswordStorageSchemeSchemaUrn struct {
	value *Enumargon2iPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumargon2iPasswordStorageSchemeSchemaUrn) Get() *Enumargon2iPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumargon2iPasswordStorageSchemeSchemaUrn) Set(val *Enumargon2iPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumargon2iPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumargon2iPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumargon2iPasswordStorageSchemeSchemaUrn(val *Enumargon2iPasswordStorageSchemeSchemaUrn) *NullableEnumargon2iPasswordStorageSchemeSchemaUrn {
	return &NullableEnumargon2iPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumargon2iPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumargon2iPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
