/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PostLdifExportTaskProcessorAPIService PostLdifExportTaskProcessorAPI service
type PostLdifExportTaskProcessorAPIService service

type ApiAddPostLdifExportTaskProcessorRequest struct {
	ctx                                   context.Context
	ApiService                            *PostLdifExportTaskProcessorAPIService
	addPostLdifExportTaskProcessorRequest *AddPostLdifExportTaskProcessorRequest
}

// Create a new Post LDIF Export Task Processor in the config
func (r ApiAddPostLdifExportTaskProcessorRequest) AddPostLdifExportTaskProcessorRequest(addPostLdifExportTaskProcessorRequest AddPostLdifExportTaskProcessorRequest) ApiAddPostLdifExportTaskProcessorRequest {
	r.addPostLdifExportTaskProcessorRequest = &addPostLdifExportTaskProcessorRequest
	return r
}

func (r ApiAddPostLdifExportTaskProcessorRequest) Execute() (*AddPostLdifExportTaskProcessor200Response, *http.Response, error) {
	return r.ApiService.AddPostLdifExportTaskProcessorExecute(r)
}

/*
AddPostLdifExportTaskProcessor Add a new Post LDIF Export Task Processor to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddPostLdifExportTaskProcessorRequest
*/
func (a *PostLdifExportTaskProcessorAPIService) AddPostLdifExportTaskProcessor(ctx context.Context) ApiAddPostLdifExportTaskProcessorRequest {
	return ApiAddPostLdifExportTaskProcessorRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddPostLdifExportTaskProcessor200Response
func (a *PostLdifExportTaskProcessorAPIService) AddPostLdifExportTaskProcessorExecute(r ApiAddPostLdifExportTaskProcessorRequest) (*AddPostLdifExportTaskProcessor200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPostLdifExportTaskProcessor200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostLdifExportTaskProcessorAPIService.AddPostLdifExportTaskProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post-ldif-export-task-processors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addPostLdifExportTaskProcessorRequest == nil {
		return localVarReturnValue, nil, reportError("addPostLdifExportTaskProcessorRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addPostLdifExportTaskProcessorRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePostLdifExportTaskProcessorRequest struct {
	ctx                             context.Context
	ApiService                      *PostLdifExportTaskProcessorAPIService
	postLdifExportTaskProcessorName string
}

func (r ApiDeletePostLdifExportTaskProcessorRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePostLdifExportTaskProcessorExecute(r)
}

/*
DeletePostLdifExportTaskProcessor Delete a Post LDIF Export Task Processor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param postLdifExportTaskProcessorName Name of the Post LDIF Export Task Processor
	@return ApiDeletePostLdifExportTaskProcessorRequest
*/
func (a *PostLdifExportTaskProcessorAPIService) DeletePostLdifExportTaskProcessor(ctx context.Context, postLdifExportTaskProcessorName string) ApiDeletePostLdifExportTaskProcessorRequest {
	return ApiDeletePostLdifExportTaskProcessorRequest{
		ApiService:                      a,
		ctx:                             ctx,
		postLdifExportTaskProcessorName: postLdifExportTaskProcessorName,
	}
}

// Execute executes the request
func (a *PostLdifExportTaskProcessorAPIService) DeletePostLdifExportTaskProcessorExecute(r ApiDeletePostLdifExportTaskProcessorRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostLdifExportTaskProcessorAPIService.DeletePostLdifExportTaskProcessor")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post-ldif-export-task-processors/{post-ldif-export-task-processor-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"post-ldif-export-task-processor-name"+"}", url.PathEscape(parameterValueToString(r.postLdifExportTaskProcessorName, "postLdifExportTaskProcessorName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPostLdifExportTaskProcessorRequest struct {
	ctx                             context.Context
	ApiService                      *PostLdifExportTaskProcessorAPIService
	postLdifExportTaskProcessorName string
}

func (r ApiGetPostLdifExportTaskProcessorRequest) Execute() (*AddPostLdifExportTaskProcessor200Response, *http.Response, error) {
	return r.ApiService.GetPostLdifExportTaskProcessorExecute(r)
}

/*
GetPostLdifExportTaskProcessor Returns a single Post LDIF Export Task Processor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param postLdifExportTaskProcessorName Name of the Post LDIF Export Task Processor
	@return ApiGetPostLdifExportTaskProcessorRequest
*/
func (a *PostLdifExportTaskProcessorAPIService) GetPostLdifExportTaskProcessor(ctx context.Context, postLdifExportTaskProcessorName string) ApiGetPostLdifExportTaskProcessorRequest {
	return ApiGetPostLdifExportTaskProcessorRequest{
		ApiService:                      a,
		ctx:                             ctx,
		postLdifExportTaskProcessorName: postLdifExportTaskProcessorName,
	}
}

// Execute executes the request
//
//	@return AddPostLdifExportTaskProcessor200Response
func (a *PostLdifExportTaskProcessorAPIService) GetPostLdifExportTaskProcessorExecute(r ApiGetPostLdifExportTaskProcessorRequest) (*AddPostLdifExportTaskProcessor200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPostLdifExportTaskProcessor200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostLdifExportTaskProcessorAPIService.GetPostLdifExportTaskProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post-ldif-export-task-processors/{post-ldif-export-task-processor-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"post-ldif-export-task-processor-name"+"}", url.PathEscape(parameterValueToString(r.postLdifExportTaskProcessorName, "postLdifExportTaskProcessorName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPostLdifExportTaskProcessorsRequest struct {
	ctx        context.Context
	ApiService *PostLdifExportTaskProcessorAPIService
	filter     *string
}

// SCIM filter
func (r ApiListPostLdifExportTaskProcessorsRequest) Filter(filter string) ApiListPostLdifExportTaskProcessorsRequest {
	r.filter = &filter
	return r
}

func (r ApiListPostLdifExportTaskProcessorsRequest) Execute() (*PostLdifExportTaskProcessorListResponse, *http.Response, error) {
	return r.ApiService.ListPostLdifExportTaskProcessorsExecute(r)
}

/*
ListPostLdifExportTaskProcessors Returns a list of all Post LDIF Export Task Processor objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListPostLdifExportTaskProcessorsRequest
*/
func (a *PostLdifExportTaskProcessorAPIService) ListPostLdifExportTaskProcessors(ctx context.Context) ApiListPostLdifExportTaskProcessorsRequest {
	return ApiListPostLdifExportTaskProcessorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PostLdifExportTaskProcessorListResponse
func (a *PostLdifExportTaskProcessorAPIService) ListPostLdifExportTaskProcessorsExecute(r ApiListPostLdifExportTaskProcessorsRequest) (*PostLdifExportTaskProcessorListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostLdifExportTaskProcessorListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostLdifExportTaskProcessorAPIService.ListPostLdifExportTaskProcessors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post-ldif-export-task-processors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePostLdifExportTaskProcessorRequest struct {
	ctx                             context.Context
	ApiService                      *PostLdifExportTaskProcessorAPIService
	postLdifExportTaskProcessorName string
	updateRequest                   *UpdateRequest
}

// Update an existing Post LDIF Export Task Processor
func (r ApiUpdatePostLdifExportTaskProcessorRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdatePostLdifExportTaskProcessorRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdatePostLdifExportTaskProcessorRequest) Execute() (*AddPostLdifExportTaskProcessor200Response, *http.Response, error) {
	return r.ApiService.UpdatePostLdifExportTaskProcessorExecute(r)
}

/*
UpdatePostLdifExportTaskProcessor Update an existing Post LDIF Export Task Processor by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param postLdifExportTaskProcessorName Name of the Post LDIF Export Task Processor
	@return ApiUpdatePostLdifExportTaskProcessorRequest
*/
func (a *PostLdifExportTaskProcessorAPIService) UpdatePostLdifExportTaskProcessor(ctx context.Context, postLdifExportTaskProcessorName string) ApiUpdatePostLdifExportTaskProcessorRequest {
	return ApiUpdatePostLdifExportTaskProcessorRequest{
		ApiService:                      a,
		ctx:                             ctx,
		postLdifExportTaskProcessorName: postLdifExportTaskProcessorName,
	}
}

// Execute executes the request
//
//	@return AddPostLdifExportTaskProcessor200Response
func (a *PostLdifExportTaskProcessorAPIService) UpdatePostLdifExportTaskProcessorExecute(r ApiUpdatePostLdifExportTaskProcessorRequest) (*AddPostLdifExportTaskProcessor200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPostLdifExportTaskProcessor200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostLdifExportTaskProcessorAPIService.UpdatePostLdifExportTaskProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post-ldif-export-task-processors/{post-ldif-export-task-processor-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"post-ldif-export-task-processor-name"+"}", url.PathEscape(parameterValueToString(r.postLdifExportTaskProcessorName, "postLdifExportTaskProcessorName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
