/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcustomSynchronizationProviderSchemaUrn the model 'EnumcustomSynchronizationProviderSchemaUrn'
type EnumcustomSynchronizationProviderSchemaUrn string

// List of Enumcustom-synchronization-providerSchemaUrn
const (
	ENUMCUSTOMSYNCHRONIZATIONPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SYNCHRONIZATION_PROVIDERCUSTOM EnumcustomSynchronizationProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:synchronization-provider:custom"
)

// All allowed values of EnumcustomSynchronizationProviderSchemaUrn enum
var AllowedEnumcustomSynchronizationProviderSchemaUrnEnumValues = []EnumcustomSynchronizationProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:synchronization-provider:custom",
}

func (v *EnumcustomSynchronizationProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcustomSynchronizationProviderSchemaUrn(value)
	for _, existing := range AllowedEnumcustomSynchronizationProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcustomSynchronizationProviderSchemaUrn", value)
}

// NewEnumcustomSynchronizationProviderSchemaUrnFromValue returns a pointer to a valid EnumcustomSynchronizationProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcustomSynchronizationProviderSchemaUrnFromValue(v string) (*EnumcustomSynchronizationProviderSchemaUrn, error) {
	ev := EnumcustomSynchronizationProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcustomSynchronizationProviderSchemaUrn: valid values are %v", v, AllowedEnumcustomSynchronizationProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcustomSynchronizationProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcustomSynchronizationProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcustom-synchronization-providerSchemaUrn value
func (v EnumcustomSynchronizationProviderSchemaUrn) Ptr() *EnumcustomSynchronizationProviderSchemaUrn {
	return &v
}

type NullableEnumcustomSynchronizationProviderSchemaUrn struct {
	value *EnumcustomSynchronizationProviderSchemaUrn
	isSet bool
}

func (v NullableEnumcustomSynchronizationProviderSchemaUrn) Get() *EnumcustomSynchronizationProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumcustomSynchronizationProviderSchemaUrn) Set(val *EnumcustomSynchronizationProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcustomSynchronizationProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcustomSynchronizationProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcustomSynchronizationProviderSchemaUrn(val *EnumcustomSynchronizationProviderSchemaUrn) *NullableEnumcustomSynchronizationProviderSchemaUrn {
	return &NullableEnumcustomSynchronizationProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcustomSynchronizationProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcustomSynchronizationProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
