/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumprometheusMonitorAttributeMetricMetricTypeProp The metric type that should be used for the value of the specified monitor attribute.
type EnumprometheusMonitorAttributeMetricMetricTypeProp string

// List of Enumprometheus-monitor-attribute-metric-metricTypeProp
const (
	ENUMPROMETHEUSMONITORATTRIBUTEMETRICMETRICTYPEPROP_COUNTER EnumprometheusMonitorAttributeMetricMetricTypeProp = "counter"
	ENUMPROMETHEUSMONITORATTRIBUTEMETRICMETRICTYPEPROP_GAUGE   EnumprometheusMonitorAttributeMetricMetricTypeProp = "gauge"
)

// All allowed values of EnumprometheusMonitorAttributeMetricMetricTypeProp enum
var AllowedEnumprometheusMonitorAttributeMetricMetricTypePropEnumValues = []EnumprometheusMonitorAttributeMetricMetricTypeProp{
	"counter",
	"gauge",
}

func (v *EnumprometheusMonitorAttributeMetricMetricTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumprometheusMonitorAttributeMetricMetricTypeProp(value)
	for _, existing := range AllowedEnumprometheusMonitorAttributeMetricMetricTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumprometheusMonitorAttributeMetricMetricTypeProp", value)
}

// NewEnumprometheusMonitorAttributeMetricMetricTypePropFromValue returns a pointer to a valid EnumprometheusMonitorAttributeMetricMetricTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumprometheusMonitorAttributeMetricMetricTypePropFromValue(v string) (*EnumprometheusMonitorAttributeMetricMetricTypeProp, error) {
	ev := EnumprometheusMonitorAttributeMetricMetricTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumprometheusMonitorAttributeMetricMetricTypeProp: valid values are %v", v, AllowedEnumprometheusMonitorAttributeMetricMetricTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumprometheusMonitorAttributeMetricMetricTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumprometheusMonitorAttributeMetricMetricTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumprometheus-monitor-attribute-metric-metricTypeProp value
func (v EnumprometheusMonitorAttributeMetricMetricTypeProp) Ptr() *EnumprometheusMonitorAttributeMetricMetricTypeProp {
	return &v
}

type NullableEnumprometheusMonitorAttributeMetricMetricTypeProp struct {
	value *EnumprometheusMonitorAttributeMetricMetricTypeProp
	isSet bool
}

func (v NullableEnumprometheusMonitorAttributeMetricMetricTypeProp) Get() *EnumprometheusMonitorAttributeMetricMetricTypeProp {
	return v.value
}

func (v *NullableEnumprometheusMonitorAttributeMetricMetricTypeProp) Set(val *EnumprometheusMonitorAttributeMetricMetricTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumprometheusMonitorAttributeMetricMetricTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumprometheusMonitorAttributeMetricMetricTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumprometheusMonitorAttributeMetricMetricTypeProp(val *EnumprometheusMonitorAttributeMetricMetricTypeProp) *NullableEnumprometheusMonitorAttributeMetricMetricTypeProp {
	return &NullableEnumprometheusMonitorAttributeMetricMetricTypeProp{value: val, isSet: true}
}

func (v NullableEnumprometheusMonitorAttributeMetricMetricTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumprometheusMonitorAttributeMetricMetricTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
