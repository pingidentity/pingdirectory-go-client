/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// GetPasswordValidator200Response - struct for GetPasswordValidator200Response
type GetPasswordValidator200Response struct {
	AttributeValuePasswordValidatorResponse     *AttributeValuePasswordValidatorResponse
	CharacterSetPasswordValidatorResponse       *CharacterSetPasswordValidatorResponse
	CustomPasswordValidatorResponse             *CustomPasswordValidatorResponse
	DictionaryPasswordValidatorResponse         *DictionaryPasswordValidatorResponse
	GroovyScriptedPasswordValidatorResponse     *GroovyScriptedPasswordValidatorResponse
	HaystackPasswordValidatorResponse           *HaystackPasswordValidatorResponse
	LengthBasedPasswordValidatorResponse        *LengthBasedPasswordValidatorResponse
	PwnedPasswordsPasswordValidatorResponse     *PwnedPasswordsPasswordValidatorResponse
	RegularExpressionPasswordValidatorResponse  *RegularExpressionPasswordValidatorResponse
	RepeatedCharactersPasswordValidatorResponse *RepeatedCharactersPasswordValidatorResponse
	SimilarityBasedPasswordValidatorResponse    *SimilarityBasedPasswordValidatorResponse
	ThirdPartyPasswordValidatorResponse         *ThirdPartyPasswordValidatorResponse
	UniqueCharactersPasswordValidatorResponse   *UniqueCharactersPasswordValidatorResponse
}

// AttributeValuePasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns AttributeValuePasswordValidatorResponse wrapped in GetPasswordValidator200Response
func AttributeValuePasswordValidatorResponseAsGetPasswordValidator200Response(v *AttributeValuePasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		AttributeValuePasswordValidatorResponse: v,
	}
}

// CharacterSetPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns CharacterSetPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func CharacterSetPasswordValidatorResponseAsGetPasswordValidator200Response(v *CharacterSetPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		CharacterSetPasswordValidatorResponse: v,
	}
}

// CustomPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns CustomPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func CustomPasswordValidatorResponseAsGetPasswordValidator200Response(v *CustomPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		CustomPasswordValidatorResponse: v,
	}
}

// DictionaryPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns DictionaryPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func DictionaryPasswordValidatorResponseAsGetPasswordValidator200Response(v *DictionaryPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		DictionaryPasswordValidatorResponse: v,
	}
}

// GroovyScriptedPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns GroovyScriptedPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func GroovyScriptedPasswordValidatorResponseAsGetPasswordValidator200Response(v *GroovyScriptedPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		GroovyScriptedPasswordValidatorResponse: v,
	}
}

// HaystackPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns HaystackPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func HaystackPasswordValidatorResponseAsGetPasswordValidator200Response(v *HaystackPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		HaystackPasswordValidatorResponse: v,
	}
}

// LengthBasedPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns LengthBasedPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func LengthBasedPasswordValidatorResponseAsGetPasswordValidator200Response(v *LengthBasedPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		LengthBasedPasswordValidatorResponse: v,
	}
}

// PwnedPasswordsPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns PwnedPasswordsPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func PwnedPasswordsPasswordValidatorResponseAsGetPasswordValidator200Response(v *PwnedPasswordsPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		PwnedPasswordsPasswordValidatorResponse: v,
	}
}

// RegularExpressionPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns RegularExpressionPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func RegularExpressionPasswordValidatorResponseAsGetPasswordValidator200Response(v *RegularExpressionPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		RegularExpressionPasswordValidatorResponse: v,
	}
}

// RepeatedCharactersPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns RepeatedCharactersPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func RepeatedCharactersPasswordValidatorResponseAsGetPasswordValidator200Response(v *RepeatedCharactersPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		RepeatedCharactersPasswordValidatorResponse: v,
	}
}

// SimilarityBasedPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns SimilarityBasedPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func SimilarityBasedPasswordValidatorResponseAsGetPasswordValidator200Response(v *SimilarityBasedPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		SimilarityBasedPasswordValidatorResponse: v,
	}
}

// ThirdPartyPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns ThirdPartyPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func ThirdPartyPasswordValidatorResponseAsGetPasswordValidator200Response(v *ThirdPartyPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		ThirdPartyPasswordValidatorResponse: v,
	}
}

// UniqueCharactersPasswordValidatorResponseAsGetPasswordValidator200Response is a convenience function that returns UniqueCharactersPasswordValidatorResponse wrapped in GetPasswordValidator200Response
func UniqueCharactersPasswordValidatorResponseAsGetPasswordValidator200Response(v *UniqueCharactersPasswordValidatorResponse) GetPasswordValidator200Response {
	return GetPasswordValidator200Response{
		UniqueCharactersPasswordValidatorResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetPasswordValidator200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AttributeValuePasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.AttributeValuePasswordValidatorResponse)
	if err == nil {
		jsonAttributeValuePasswordValidatorResponse, _ := json.Marshal(dst.AttributeValuePasswordValidatorResponse)
		if string(jsonAttributeValuePasswordValidatorResponse) == "{}" { // empty struct
			dst.AttributeValuePasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.AttributeValuePasswordValidatorResponse = nil
	}

	// try to unmarshal data into CharacterSetPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.CharacterSetPasswordValidatorResponse)
	if err == nil {
		jsonCharacterSetPasswordValidatorResponse, _ := json.Marshal(dst.CharacterSetPasswordValidatorResponse)
		if string(jsonCharacterSetPasswordValidatorResponse) == "{}" { // empty struct
			dst.CharacterSetPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.CharacterSetPasswordValidatorResponse = nil
	}

	// try to unmarshal data into CustomPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.CustomPasswordValidatorResponse)
	if err == nil {
		jsonCustomPasswordValidatorResponse, _ := json.Marshal(dst.CustomPasswordValidatorResponse)
		if string(jsonCustomPasswordValidatorResponse) == "{}" { // empty struct
			dst.CustomPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.CustomPasswordValidatorResponse = nil
	}

	// try to unmarshal data into DictionaryPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.DictionaryPasswordValidatorResponse)
	if err == nil {
		jsonDictionaryPasswordValidatorResponse, _ := json.Marshal(dst.DictionaryPasswordValidatorResponse)
		if string(jsonDictionaryPasswordValidatorResponse) == "{}" { // empty struct
			dst.DictionaryPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.DictionaryPasswordValidatorResponse = nil
	}

	// try to unmarshal data into GroovyScriptedPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.GroovyScriptedPasswordValidatorResponse)
	if err == nil {
		jsonGroovyScriptedPasswordValidatorResponse, _ := json.Marshal(dst.GroovyScriptedPasswordValidatorResponse)
		if string(jsonGroovyScriptedPasswordValidatorResponse) == "{}" { // empty struct
			dst.GroovyScriptedPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.GroovyScriptedPasswordValidatorResponse = nil
	}

	// try to unmarshal data into HaystackPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.HaystackPasswordValidatorResponse)
	if err == nil {
		jsonHaystackPasswordValidatorResponse, _ := json.Marshal(dst.HaystackPasswordValidatorResponse)
		if string(jsonHaystackPasswordValidatorResponse) == "{}" { // empty struct
			dst.HaystackPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.HaystackPasswordValidatorResponse = nil
	}

	// try to unmarshal data into LengthBasedPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.LengthBasedPasswordValidatorResponse)
	if err == nil {
		jsonLengthBasedPasswordValidatorResponse, _ := json.Marshal(dst.LengthBasedPasswordValidatorResponse)
		if string(jsonLengthBasedPasswordValidatorResponse) == "{}" { // empty struct
			dst.LengthBasedPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.LengthBasedPasswordValidatorResponse = nil
	}

	// try to unmarshal data into PwnedPasswordsPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.PwnedPasswordsPasswordValidatorResponse)
	if err == nil {
		jsonPwnedPasswordsPasswordValidatorResponse, _ := json.Marshal(dst.PwnedPasswordsPasswordValidatorResponse)
		if string(jsonPwnedPasswordsPasswordValidatorResponse) == "{}" { // empty struct
			dst.PwnedPasswordsPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.PwnedPasswordsPasswordValidatorResponse = nil
	}

	// try to unmarshal data into RegularExpressionPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.RegularExpressionPasswordValidatorResponse)
	if err == nil {
		jsonRegularExpressionPasswordValidatorResponse, _ := json.Marshal(dst.RegularExpressionPasswordValidatorResponse)
		if string(jsonRegularExpressionPasswordValidatorResponse) == "{}" { // empty struct
			dst.RegularExpressionPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.RegularExpressionPasswordValidatorResponse = nil
	}

	// try to unmarshal data into RepeatedCharactersPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.RepeatedCharactersPasswordValidatorResponse)
	if err == nil {
		jsonRepeatedCharactersPasswordValidatorResponse, _ := json.Marshal(dst.RepeatedCharactersPasswordValidatorResponse)
		if string(jsonRepeatedCharactersPasswordValidatorResponse) == "{}" { // empty struct
			dst.RepeatedCharactersPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.RepeatedCharactersPasswordValidatorResponse = nil
	}

	// try to unmarshal data into SimilarityBasedPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.SimilarityBasedPasswordValidatorResponse)
	if err == nil {
		jsonSimilarityBasedPasswordValidatorResponse, _ := json.Marshal(dst.SimilarityBasedPasswordValidatorResponse)
		if string(jsonSimilarityBasedPasswordValidatorResponse) == "{}" { // empty struct
			dst.SimilarityBasedPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.SimilarityBasedPasswordValidatorResponse = nil
	}

	// try to unmarshal data into ThirdPartyPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyPasswordValidatorResponse)
	if err == nil {
		jsonThirdPartyPasswordValidatorResponse, _ := json.Marshal(dst.ThirdPartyPasswordValidatorResponse)
		if string(jsonThirdPartyPasswordValidatorResponse) == "{}" { // empty struct
			dst.ThirdPartyPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyPasswordValidatorResponse = nil
	}

	// try to unmarshal data into UniqueCharactersPasswordValidatorResponse
	err = newStrictDecoder(data).Decode(&dst.UniqueCharactersPasswordValidatorResponse)
	if err == nil {
		jsonUniqueCharactersPasswordValidatorResponse, _ := json.Marshal(dst.UniqueCharactersPasswordValidatorResponse)
		if string(jsonUniqueCharactersPasswordValidatorResponse) == "{}" { // empty struct
			dst.UniqueCharactersPasswordValidatorResponse = nil
		} else {
			match++
		}
	} else {
		dst.UniqueCharactersPasswordValidatorResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AttributeValuePasswordValidatorResponse = nil
		dst.CharacterSetPasswordValidatorResponse = nil
		dst.CustomPasswordValidatorResponse = nil
		dst.DictionaryPasswordValidatorResponse = nil
		dst.GroovyScriptedPasswordValidatorResponse = nil
		dst.HaystackPasswordValidatorResponse = nil
		dst.LengthBasedPasswordValidatorResponse = nil
		dst.PwnedPasswordsPasswordValidatorResponse = nil
		dst.RegularExpressionPasswordValidatorResponse = nil
		dst.RepeatedCharactersPasswordValidatorResponse = nil
		dst.SimilarityBasedPasswordValidatorResponse = nil
		dst.ThirdPartyPasswordValidatorResponse = nil
		dst.UniqueCharactersPasswordValidatorResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetPasswordValidator200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetPasswordValidator200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetPasswordValidator200Response) MarshalJSON() ([]byte, error) {
	if src.AttributeValuePasswordValidatorResponse != nil {
		return json.Marshal(&src.AttributeValuePasswordValidatorResponse)
	}

	if src.CharacterSetPasswordValidatorResponse != nil {
		return json.Marshal(&src.CharacterSetPasswordValidatorResponse)
	}

	if src.CustomPasswordValidatorResponse != nil {
		return json.Marshal(&src.CustomPasswordValidatorResponse)
	}

	if src.DictionaryPasswordValidatorResponse != nil {
		return json.Marshal(&src.DictionaryPasswordValidatorResponse)
	}

	if src.GroovyScriptedPasswordValidatorResponse != nil {
		return json.Marshal(&src.GroovyScriptedPasswordValidatorResponse)
	}

	if src.HaystackPasswordValidatorResponse != nil {
		return json.Marshal(&src.HaystackPasswordValidatorResponse)
	}

	if src.LengthBasedPasswordValidatorResponse != nil {
		return json.Marshal(&src.LengthBasedPasswordValidatorResponse)
	}

	if src.PwnedPasswordsPasswordValidatorResponse != nil {
		return json.Marshal(&src.PwnedPasswordsPasswordValidatorResponse)
	}

	if src.RegularExpressionPasswordValidatorResponse != nil {
		return json.Marshal(&src.RegularExpressionPasswordValidatorResponse)
	}

	if src.RepeatedCharactersPasswordValidatorResponse != nil {
		return json.Marshal(&src.RepeatedCharactersPasswordValidatorResponse)
	}

	if src.SimilarityBasedPasswordValidatorResponse != nil {
		return json.Marshal(&src.SimilarityBasedPasswordValidatorResponse)
	}

	if src.ThirdPartyPasswordValidatorResponse != nil {
		return json.Marshal(&src.ThirdPartyPasswordValidatorResponse)
	}

	if src.UniqueCharactersPasswordValidatorResponse != nil {
		return json.Marshal(&src.UniqueCharactersPasswordValidatorResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetPasswordValidator200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AttributeValuePasswordValidatorResponse != nil {
		return obj.AttributeValuePasswordValidatorResponse
	}

	if obj.CharacterSetPasswordValidatorResponse != nil {
		return obj.CharacterSetPasswordValidatorResponse
	}

	if obj.CustomPasswordValidatorResponse != nil {
		return obj.CustomPasswordValidatorResponse
	}

	if obj.DictionaryPasswordValidatorResponse != nil {
		return obj.DictionaryPasswordValidatorResponse
	}

	if obj.GroovyScriptedPasswordValidatorResponse != nil {
		return obj.GroovyScriptedPasswordValidatorResponse
	}

	if obj.HaystackPasswordValidatorResponse != nil {
		return obj.HaystackPasswordValidatorResponse
	}

	if obj.LengthBasedPasswordValidatorResponse != nil {
		return obj.LengthBasedPasswordValidatorResponse
	}

	if obj.PwnedPasswordsPasswordValidatorResponse != nil {
		return obj.PwnedPasswordsPasswordValidatorResponse
	}

	if obj.RegularExpressionPasswordValidatorResponse != nil {
		return obj.RegularExpressionPasswordValidatorResponse
	}

	if obj.RepeatedCharactersPasswordValidatorResponse != nil {
		return obj.RepeatedCharactersPasswordValidatorResponse
	}

	if obj.SimilarityBasedPasswordValidatorResponse != nil {
		return obj.SimilarityBasedPasswordValidatorResponse
	}

	if obj.ThirdPartyPasswordValidatorResponse != nil {
		return obj.ThirdPartyPasswordValidatorResponse
	}

	if obj.UniqueCharactersPasswordValidatorResponse != nil {
		return obj.UniqueCharactersPasswordValidatorResponse
	}

	// all schemas are nil
	return nil
}

type NullableGetPasswordValidator200Response struct {
	value *GetPasswordValidator200Response
	isSet bool
}

func (v NullableGetPasswordValidator200Response) Get() *GetPasswordValidator200Response {
	return v.value
}

func (v *NullableGetPasswordValidator200Response) Set(val *GetPasswordValidator200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPasswordValidator200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPasswordValidator200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPasswordValidator200Response(val *GetPasswordValidator200Response) *NullableGetPasswordValidator200Response {
	return &NullableGetPasswordValidator200Response{value: val, isSet: true}
}

func (v NullableGetPasswordValidator200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPasswordValidator200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
