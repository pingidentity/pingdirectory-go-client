/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// Enumargon2idPasswordStorageSchemeSchemaUrn the model 'Enumargon2idPasswordStorageSchemeSchemaUrn'
type Enumargon2idPasswordStorageSchemeSchemaUrn string

// List of Enumargon2id-password-storage-schemeSchemaUrn
const (
	ENUMARGON2IDPASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEARGON2ID Enumargon2idPasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:argon2id"
)

// All allowed values of Enumargon2idPasswordStorageSchemeSchemaUrn enum
var AllowedEnumargon2idPasswordStorageSchemeSchemaUrnEnumValues = []Enumargon2idPasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:argon2id",
}

func (v *Enumargon2idPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumargon2idPasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumargon2idPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumargon2idPasswordStorageSchemeSchemaUrn", value)
}

// NewEnumargon2idPasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid Enumargon2idPasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumargon2idPasswordStorageSchemeSchemaUrnFromValue(v string) (*Enumargon2idPasswordStorageSchemeSchemaUrn, error) {
	ev := Enumargon2idPasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumargon2idPasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumargon2idPasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumargon2idPasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumargon2idPasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumargon2id-password-storage-schemeSchemaUrn value
func (v Enumargon2idPasswordStorageSchemeSchemaUrn) Ptr() *Enumargon2idPasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumargon2idPasswordStorageSchemeSchemaUrn struct {
	value *Enumargon2idPasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumargon2idPasswordStorageSchemeSchemaUrn) Get() *Enumargon2idPasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumargon2idPasswordStorageSchemeSchemaUrn) Set(val *Enumargon2idPasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumargon2idPasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumargon2idPasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumargon2idPasswordStorageSchemeSchemaUrn(val *Enumargon2idPasswordStorageSchemeSchemaUrn) *NullableEnumargon2idPasswordStorageSchemeSchemaUrn {
	return &NullableEnumargon2idPasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumargon2idPasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumargon2idPasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
