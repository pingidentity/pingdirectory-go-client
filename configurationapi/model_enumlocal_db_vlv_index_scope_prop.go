/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlocalDbVlvIndexScopeProp Specifies the LDAP scope of the query that is being indexed.
type EnumlocalDbVlvIndexScopeProp string

// List of Enumlocal-db-vlv-index-scopeProp
const (
	ENUMLOCALDBVLVINDEXSCOPEPROP_BASE_OBJECT         EnumlocalDbVlvIndexScopeProp = "base-object"
	ENUMLOCALDBVLVINDEXSCOPEPROP_SINGLE_LEVEL        EnumlocalDbVlvIndexScopeProp = "single-level"
	ENUMLOCALDBVLVINDEXSCOPEPROP_WHOLE_SUBTREE       EnumlocalDbVlvIndexScopeProp = "whole-subtree"
	ENUMLOCALDBVLVINDEXSCOPEPROP_SUBORDINATE_SUBTREE EnumlocalDbVlvIndexScopeProp = "subordinate-subtree"
)

// All allowed values of EnumlocalDbVlvIndexScopeProp enum
var AllowedEnumlocalDbVlvIndexScopePropEnumValues = []EnumlocalDbVlvIndexScopeProp{
	"base-object",
	"single-level",
	"whole-subtree",
	"subordinate-subtree",
}

func (v *EnumlocalDbVlvIndexScopeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlocalDbVlvIndexScopeProp(value)
	for _, existing := range AllowedEnumlocalDbVlvIndexScopePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlocalDbVlvIndexScopeProp", value)
}

// NewEnumlocalDbVlvIndexScopePropFromValue returns a pointer to a valid EnumlocalDbVlvIndexScopeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlocalDbVlvIndexScopePropFromValue(v string) (*EnumlocalDbVlvIndexScopeProp, error) {
	ev := EnumlocalDbVlvIndexScopeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlocalDbVlvIndexScopeProp: valid values are %v", v, AllowedEnumlocalDbVlvIndexScopePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlocalDbVlvIndexScopeProp) IsValid() bool {
	for _, existing := range AllowedEnumlocalDbVlvIndexScopePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlocal-db-vlv-index-scopeProp value
func (v EnumlocalDbVlvIndexScopeProp) Ptr() *EnumlocalDbVlvIndexScopeProp {
	return &v
}

type NullableEnumlocalDbVlvIndexScopeProp struct {
	value *EnumlocalDbVlvIndexScopeProp
	isSet bool
}

func (v NullableEnumlocalDbVlvIndexScopeProp) Get() *EnumlocalDbVlvIndexScopeProp {
	return v.value
}

func (v *NullableEnumlocalDbVlvIndexScopeProp) Set(val *EnumlocalDbVlvIndexScopeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlocalDbVlvIndexScopeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlocalDbVlvIndexScopeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlocalDbVlvIndexScopeProp(val *EnumlocalDbVlvIndexScopeProp) *NullableEnumlocalDbVlvIndexScopeProp {
	return &NullableEnumlocalDbVlvIndexScopeProp{value: val, isSet: true}
}

func (v NullableEnumlocalDbVlvIndexScopeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlocalDbVlvIndexScopeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
