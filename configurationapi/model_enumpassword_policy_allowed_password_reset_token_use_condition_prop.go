/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp The set of conditions under which a user governed by this Password Policy will be permitted to generate a password reset token via the deliver password reset token extended operation, and to use that token in lieu of the current password via the password modify extended operation.
type EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp string

// List of Enumpassword-policy-allowedPasswordResetTokenUseConditionProp
const (
	ENUMPASSWORDPOLICYALLOWEDPASSWORDRESETTOKENUSECONDITIONPROP_ACCOUNT_USABLE                            EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp = "account-usable"
	ENUMPASSWORDPOLICYALLOWEDPASSWORDRESETTOKENUSECONDITIONPROP_PASSWORD_EXPIRED                          EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp = "password-expired"
	ENUMPASSWORDPOLICYALLOWEDPASSWORDRESETTOKENUSECONDITIONPROP_ACCOUNT_LOCKED_DUE_TO_FAILURES            EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp = "account-locked-due-to-failures"
	ENUMPASSWORDPOLICYALLOWEDPASSWORDRESETTOKENUSECONDITIONPROP_ACCOUNT_LOCKED_DUE_TO_IDLE_TIME_LIMIT     EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp = "account-locked-due-to-idle-time-limit"
	ENUMPASSWORDPOLICYALLOWEDPASSWORDRESETTOKENUSECONDITIONPROP_ACCOUNT_LOCKED_DUE_TO_ADMIN_RESET_TIMEOUT EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp = "account-locked-due-to-admin-reset-timeout"
	ENUMPASSWORDPOLICYALLOWEDPASSWORDRESETTOKENUSECONDITIONPROP_ACCOUNT_LOCKED_DUE_TO_VALIDATION_FAILURE  EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp = "account-locked-due-to-validation-failure"
)

// All allowed values of EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp enum
var AllowedEnumpasswordPolicyAllowedPasswordResetTokenUseConditionPropEnumValues = []EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp{
	"account-usable",
	"password-expired",
	"account-locked-due-to-failures",
	"account-locked-due-to-idle-time-limit",
	"account-locked-due-to-admin-reset-timeout",
	"account-locked-due-to-validation-failure",
}

func (v *EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp(value)
	for _, existing := range AllowedEnumpasswordPolicyAllowedPasswordResetTokenUseConditionPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp", value)
}

// NewEnumpasswordPolicyAllowedPasswordResetTokenUseConditionPropFromValue returns a pointer to a valid EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicyAllowedPasswordResetTokenUseConditionPropFromValue(v string) (*EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp, error) {
	ev := EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp: valid values are %v", v, AllowedEnumpasswordPolicyAllowedPasswordResetTokenUseConditionPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicyAllowedPasswordResetTokenUseConditionPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policy-allowedPasswordResetTokenUseConditionProp value
func (v EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) Ptr() *EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp {
	return &v
}

type NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp struct {
	value *EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp
	isSet bool
}

func (v NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) Get() *EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp {
	return v.value
}

func (v *NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) Set(val *EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp(val *EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) *NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp {
	return &NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
