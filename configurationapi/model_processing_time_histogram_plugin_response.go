/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the ProcessingTimeHistogramPluginResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessingTimeHistogramPluginResponse{}

// ProcessingTimeHistogramPluginResponse struct for ProcessingTimeHistogramPluginResponse
type ProcessingTimeHistogramPluginResponse struct {
	Schemas []EnumprocessingTimeHistogramPluginSchemaUrn `json:"schemas"`
	// Name of the Plugin Root
	Id         string                     `json:"id"`
	PluginType []EnumpluginPluginTypeProp `json:"pluginType"`
	// Specifies the boundary values that will be used to separate the processing times into categories. Values should be specified as durations, and all values must be greater than zero.
	HistogramCategoryBoundary []string `json:"histogramCategoryBoundary"`
	// Indicates whether operation processing times should include the time spent waiting on the work queue. This will only be available if the work queue is configured to monitor the queue time.
	IncludeQueueTime *bool `json:"includeQueueTime,omitempty"`
	// When enabled, separate monitor entries will be included for each application defined in the Global Configuration's tracked-application property.
	SeparateMonitorEntryPerTrackedApplication *bool `json:"separateMonitorEntryPerTrackedApplication,omitempty"`
	// A description for this Plugin
	Description *string `json:"description,omitempty"`
	// Indicates whether the plug-in is enabled for use.
	Enabled bool `json:"enabled"`
	// Indicates whether the plug-in should be invoked for internal operations.
	InvokeForInternalOperations                   *bool                                              `json:"invokeForInternalOperations,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewProcessingTimeHistogramPluginResponse instantiates a new ProcessingTimeHistogramPluginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessingTimeHistogramPluginResponse(schemas []EnumprocessingTimeHistogramPluginSchemaUrn, id string, pluginType []EnumpluginPluginTypeProp, histogramCategoryBoundary []string, enabled bool) *ProcessingTimeHistogramPluginResponse {
	this := ProcessingTimeHistogramPluginResponse{}
	this.Schemas = schemas
	this.Id = id
	this.PluginType = pluginType
	this.HistogramCategoryBoundary = histogramCategoryBoundary
	this.Enabled = enabled
	return &this
}

// NewProcessingTimeHistogramPluginResponseWithDefaults instantiates a new ProcessingTimeHistogramPluginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessingTimeHistogramPluginResponseWithDefaults() *ProcessingTimeHistogramPluginResponse {
	this := ProcessingTimeHistogramPluginResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *ProcessingTimeHistogramPluginResponse) GetSchemas() []EnumprocessingTimeHistogramPluginSchemaUrn {
	if o == nil {
		var ret []EnumprocessingTimeHistogramPluginSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetSchemasOk() ([]EnumprocessingTimeHistogramPluginSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ProcessingTimeHistogramPluginResponse) SetSchemas(v []EnumprocessingTimeHistogramPluginSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *ProcessingTimeHistogramPluginResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProcessingTimeHistogramPluginResponse) SetId(v string) {
	o.Id = v
}

// GetPluginType returns the PluginType field value
func (o *ProcessingTimeHistogramPluginResponse) GetPluginType() []EnumpluginPluginTypeProp {
	if o == nil {
		var ret []EnumpluginPluginTypeProp
		return ret
	}

	return o.PluginType
}

// GetPluginTypeOk returns a tuple with the PluginType field value
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetPluginTypeOk() ([]EnumpluginPluginTypeProp, bool) {
	if o == nil {
		return nil, false
	}
	return o.PluginType, true
}

// SetPluginType sets field value
func (o *ProcessingTimeHistogramPluginResponse) SetPluginType(v []EnumpluginPluginTypeProp) {
	o.PluginType = v
}

// GetHistogramCategoryBoundary returns the HistogramCategoryBoundary field value
func (o *ProcessingTimeHistogramPluginResponse) GetHistogramCategoryBoundary() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HistogramCategoryBoundary
}

// GetHistogramCategoryBoundaryOk returns a tuple with the HistogramCategoryBoundary field value
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetHistogramCategoryBoundaryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HistogramCategoryBoundary, true
}

// SetHistogramCategoryBoundary sets field value
func (o *ProcessingTimeHistogramPluginResponse) SetHistogramCategoryBoundary(v []string) {
	o.HistogramCategoryBoundary = v
}

// GetIncludeQueueTime returns the IncludeQueueTime field value if set, zero value otherwise.
func (o *ProcessingTimeHistogramPluginResponse) GetIncludeQueueTime() bool {
	if o == nil || IsNil(o.IncludeQueueTime) {
		var ret bool
		return ret
	}
	return *o.IncludeQueueTime
}

// GetIncludeQueueTimeOk returns a tuple with the IncludeQueueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetIncludeQueueTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeQueueTime) {
		return nil, false
	}
	return o.IncludeQueueTime, true
}

// HasIncludeQueueTime returns a boolean if a field has been set.
func (o *ProcessingTimeHistogramPluginResponse) HasIncludeQueueTime() bool {
	if o != nil && !IsNil(o.IncludeQueueTime) {
		return true
	}

	return false
}

// SetIncludeQueueTime gets a reference to the given bool and assigns it to the IncludeQueueTime field.
func (o *ProcessingTimeHistogramPluginResponse) SetIncludeQueueTime(v bool) {
	o.IncludeQueueTime = &v
}

// GetSeparateMonitorEntryPerTrackedApplication returns the SeparateMonitorEntryPerTrackedApplication field value if set, zero value otherwise.
func (o *ProcessingTimeHistogramPluginResponse) GetSeparateMonitorEntryPerTrackedApplication() bool {
	if o == nil || IsNil(o.SeparateMonitorEntryPerTrackedApplication) {
		var ret bool
		return ret
	}
	return *o.SeparateMonitorEntryPerTrackedApplication
}

// GetSeparateMonitorEntryPerTrackedApplicationOk returns a tuple with the SeparateMonitorEntryPerTrackedApplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetSeparateMonitorEntryPerTrackedApplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.SeparateMonitorEntryPerTrackedApplication) {
		return nil, false
	}
	return o.SeparateMonitorEntryPerTrackedApplication, true
}

// HasSeparateMonitorEntryPerTrackedApplication returns a boolean if a field has been set.
func (o *ProcessingTimeHistogramPluginResponse) HasSeparateMonitorEntryPerTrackedApplication() bool {
	if o != nil && !IsNil(o.SeparateMonitorEntryPerTrackedApplication) {
		return true
	}

	return false
}

// SetSeparateMonitorEntryPerTrackedApplication gets a reference to the given bool and assigns it to the SeparateMonitorEntryPerTrackedApplication field.
func (o *ProcessingTimeHistogramPluginResponse) SetSeparateMonitorEntryPerTrackedApplication(v bool) {
	o.SeparateMonitorEntryPerTrackedApplication = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProcessingTimeHistogramPluginResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProcessingTimeHistogramPluginResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProcessingTimeHistogramPluginResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *ProcessingTimeHistogramPluginResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ProcessingTimeHistogramPluginResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetInvokeForInternalOperations returns the InvokeForInternalOperations field value if set, zero value otherwise.
func (o *ProcessingTimeHistogramPluginResponse) GetInvokeForInternalOperations() bool {
	if o == nil || IsNil(o.InvokeForInternalOperations) {
		var ret bool
		return ret
	}
	return *o.InvokeForInternalOperations
}

// GetInvokeForInternalOperationsOk returns a tuple with the InvokeForInternalOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetInvokeForInternalOperationsOk() (*bool, bool) {
	if o == nil || IsNil(o.InvokeForInternalOperations) {
		return nil, false
	}
	return o.InvokeForInternalOperations, true
}

// HasInvokeForInternalOperations returns a boolean if a field has been set.
func (o *ProcessingTimeHistogramPluginResponse) HasInvokeForInternalOperations() bool {
	if o != nil && !IsNil(o.InvokeForInternalOperations) {
		return true
	}

	return false
}

// SetInvokeForInternalOperations gets a reference to the given bool and assigns it to the InvokeForInternalOperations field.
func (o *ProcessingTimeHistogramPluginResponse) SetInvokeForInternalOperations(v bool) {
	o.InvokeForInternalOperations = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ProcessingTimeHistogramPluginResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ProcessingTimeHistogramPluginResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *ProcessingTimeHistogramPluginResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *ProcessingTimeHistogramPluginResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingTimeHistogramPluginResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *ProcessingTimeHistogramPluginResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *ProcessingTimeHistogramPluginResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o ProcessingTimeHistogramPluginResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessingTimeHistogramPluginResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["id"] = o.Id
	toSerialize["pluginType"] = o.PluginType
	toSerialize["histogramCategoryBoundary"] = o.HistogramCategoryBoundary
	if !IsNil(o.IncludeQueueTime) {
		toSerialize["includeQueueTime"] = o.IncludeQueueTime
	}
	if !IsNil(o.SeparateMonitorEntryPerTrackedApplication) {
		toSerialize["separateMonitorEntryPerTrackedApplication"] = o.SeparateMonitorEntryPerTrackedApplication
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.InvokeForInternalOperations) {
		toSerialize["invokeForInternalOperations"] = o.InvokeForInternalOperations
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableProcessingTimeHistogramPluginResponse struct {
	value *ProcessingTimeHistogramPluginResponse
	isSet bool
}

func (v NullableProcessingTimeHistogramPluginResponse) Get() *ProcessingTimeHistogramPluginResponse {
	return v.value
}

func (v *NullableProcessingTimeHistogramPluginResponse) Set(val *ProcessingTimeHistogramPluginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessingTimeHistogramPluginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessingTimeHistogramPluginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessingTimeHistogramPluginResponse(val *ProcessingTimeHistogramPluginResponse) *NullableProcessingTimeHistogramPluginResponse {
	return &NullableProcessingTimeHistogramPluginResponse{value: val, isSet: true}
}

func (v NullableProcessingTimeHistogramPluginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessingTimeHistogramPluginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
