/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumtimeLimitLogRotationPolicySchemaUrn the model 'EnumtimeLimitLogRotationPolicySchemaUrn'
type EnumtimeLimitLogRotationPolicySchemaUrn string

// List of Enumtime-limit-log-rotation-policySchemaUrn
const (
	ENUMTIMELIMITLOGROTATIONPOLICYSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_ROTATION_POLICYTIME_LIMIT EnumtimeLimitLogRotationPolicySchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:time-limit"
)

// All allowed values of EnumtimeLimitLogRotationPolicySchemaUrn enum
var AllowedEnumtimeLimitLogRotationPolicySchemaUrnEnumValues = []EnumtimeLimitLogRotationPolicySchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-rotation-policy:time-limit",
}

func (v *EnumtimeLimitLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumtimeLimitLogRotationPolicySchemaUrn(value)
	for _, existing := range AllowedEnumtimeLimitLogRotationPolicySchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumtimeLimitLogRotationPolicySchemaUrn", value)
}

// NewEnumtimeLimitLogRotationPolicySchemaUrnFromValue returns a pointer to a valid EnumtimeLimitLogRotationPolicySchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumtimeLimitLogRotationPolicySchemaUrnFromValue(v string) (*EnumtimeLimitLogRotationPolicySchemaUrn, error) {
	ev := EnumtimeLimitLogRotationPolicySchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumtimeLimitLogRotationPolicySchemaUrn: valid values are %v", v, AllowedEnumtimeLimitLogRotationPolicySchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumtimeLimitLogRotationPolicySchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumtimeLimitLogRotationPolicySchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumtime-limit-log-rotation-policySchemaUrn value
func (v EnumtimeLimitLogRotationPolicySchemaUrn) Ptr() *EnumtimeLimitLogRotationPolicySchemaUrn {
	return &v
}

type NullableEnumtimeLimitLogRotationPolicySchemaUrn struct {
	value *EnumtimeLimitLogRotationPolicySchemaUrn
	isSet bool
}

func (v NullableEnumtimeLimitLogRotationPolicySchemaUrn) Get() *EnumtimeLimitLogRotationPolicySchemaUrn {
	return v.value
}

func (v *NullableEnumtimeLimitLogRotationPolicySchemaUrn) Set(val *EnumtimeLimitLogRotationPolicySchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumtimeLimitLogRotationPolicySchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumtimeLimitLogRotationPolicySchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumtimeLimitLogRotationPolicySchemaUrn(val *EnumtimeLimitLogRotationPolicySchemaUrn) *NullableEnumtimeLimitLogRotationPolicySchemaUrn {
	return &NullableEnumtimeLimitLogRotationPolicySchemaUrn{value: val, isSet: true}
}

func (v NullableEnumtimeLimitLogRotationPolicySchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumtimeLimitLogRotationPolicySchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
