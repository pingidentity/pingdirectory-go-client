/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddLogRotationPolicyRequest - struct for AddLogRotationPolicyRequest
type AddLogRotationPolicyRequest struct {
	AddFixedTimeLogRotationPolicyRequest   *AddFixedTimeLogRotationPolicyRequest
	AddNeverRotateLogRotationPolicyRequest *AddNeverRotateLogRotationPolicyRequest
	AddSizeLimitLogRotationPolicyRequest   *AddSizeLimitLogRotationPolicyRequest
	AddTimeLimitLogRotationPolicyRequest   *AddTimeLimitLogRotationPolicyRequest
}

// AddFixedTimeLogRotationPolicyRequestAsAddLogRotationPolicyRequest is a convenience function that returns AddFixedTimeLogRotationPolicyRequest wrapped in AddLogRotationPolicyRequest
func AddFixedTimeLogRotationPolicyRequestAsAddLogRotationPolicyRequest(v *AddFixedTimeLogRotationPolicyRequest) AddLogRotationPolicyRequest {
	return AddLogRotationPolicyRequest{
		AddFixedTimeLogRotationPolicyRequest: v,
	}
}

// AddNeverRotateLogRotationPolicyRequestAsAddLogRotationPolicyRequest is a convenience function that returns AddNeverRotateLogRotationPolicyRequest wrapped in AddLogRotationPolicyRequest
func AddNeverRotateLogRotationPolicyRequestAsAddLogRotationPolicyRequest(v *AddNeverRotateLogRotationPolicyRequest) AddLogRotationPolicyRequest {
	return AddLogRotationPolicyRequest{
		AddNeverRotateLogRotationPolicyRequest: v,
	}
}

// AddSizeLimitLogRotationPolicyRequestAsAddLogRotationPolicyRequest is a convenience function that returns AddSizeLimitLogRotationPolicyRequest wrapped in AddLogRotationPolicyRequest
func AddSizeLimitLogRotationPolicyRequestAsAddLogRotationPolicyRequest(v *AddSizeLimitLogRotationPolicyRequest) AddLogRotationPolicyRequest {
	return AddLogRotationPolicyRequest{
		AddSizeLimitLogRotationPolicyRequest: v,
	}
}

// AddTimeLimitLogRotationPolicyRequestAsAddLogRotationPolicyRequest is a convenience function that returns AddTimeLimitLogRotationPolicyRequest wrapped in AddLogRotationPolicyRequest
func AddTimeLimitLogRotationPolicyRequestAsAddLogRotationPolicyRequest(v *AddTimeLimitLogRotationPolicyRequest) AddLogRotationPolicyRequest {
	return AddLogRotationPolicyRequest{
		AddTimeLimitLogRotationPolicyRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogRotationPolicyRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddFixedTimeLogRotationPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddFixedTimeLogRotationPolicyRequest)
	if err == nil {
		jsonAddFixedTimeLogRotationPolicyRequest, _ := json.Marshal(dst.AddFixedTimeLogRotationPolicyRequest)
		if string(jsonAddFixedTimeLogRotationPolicyRequest) == "{}" { // empty struct
			dst.AddFixedTimeLogRotationPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFixedTimeLogRotationPolicyRequest = nil
	}

	// try to unmarshal data into AddNeverRotateLogRotationPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddNeverRotateLogRotationPolicyRequest)
	if err == nil {
		jsonAddNeverRotateLogRotationPolicyRequest, _ := json.Marshal(dst.AddNeverRotateLogRotationPolicyRequest)
		if string(jsonAddNeverRotateLogRotationPolicyRequest) == "{}" { // empty struct
			dst.AddNeverRotateLogRotationPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddNeverRotateLogRotationPolicyRequest = nil
	}

	// try to unmarshal data into AddSizeLimitLogRotationPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddSizeLimitLogRotationPolicyRequest)
	if err == nil {
		jsonAddSizeLimitLogRotationPolicyRequest, _ := json.Marshal(dst.AddSizeLimitLogRotationPolicyRequest)
		if string(jsonAddSizeLimitLogRotationPolicyRequest) == "{}" { // empty struct
			dst.AddSizeLimitLogRotationPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddSizeLimitLogRotationPolicyRequest = nil
	}

	// try to unmarshal data into AddTimeLimitLogRotationPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddTimeLimitLogRotationPolicyRequest)
	if err == nil {
		jsonAddTimeLimitLogRotationPolicyRequest, _ := json.Marshal(dst.AddTimeLimitLogRotationPolicyRequest)
		if string(jsonAddTimeLimitLogRotationPolicyRequest) == "{}" { // empty struct
			dst.AddTimeLimitLogRotationPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddTimeLimitLogRotationPolicyRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddFixedTimeLogRotationPolicyRequest = nil
		dst.AddNeverRotateLogRotationPolicyRequest = nil
		dst.AddSizeLimitLogRotationPolicyRequest = nil
		dst.AddTimeLimitLogRotationPolicyRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogRotationPolicyRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogRotationPolicyRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogRotationPolicyRequest) MarshalJSON() ([]byte, error) {
	if src.AddFixedTimeLogRotationPolicyRequest != nil {
		return json.Marshal(&src.AddFixedTimeLogRotationPolicyRequest)
	}

	if src.AddNeverRotateLogRotationPolicyRequest != nil {
		return json.Marshal(&src.AddNeverRotateLogRotationPolicyRequest)
	}

	if src.AddSizeLimitLogRotationPolicyRequest != nil {
		return json.Marshal(&src.AddSizeLimitLogRotationPolicyRequest)
	}

	if src.AddTimeLimitLogRotationPolicyRequest != nil {
		return json.Marshal(&src.AddTimeLimitLogRotationPolicyRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogRotationPolicyRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddFixedTimeLogRotationPolicyRequest != nil {
		return obj.AddFixedTimeLogRotationPolicyRequest
	}

	if obj.AddNeverRotateLogRotationPolicyRequest != nil {
		return obj.AddNeverRotateLogRotationPolicyRequest
	}

	if obj.AddSizeLimitLogRotationPolicyRequest != nil {
		return obj.AddSizeLimitLogRotationPolicyRequest
	}

	if obj.AddTimeLimitLogRotationPolicyRequest != nil {
		return obj.AddTimeLimitLogRotationPolicyRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddLogRotationPolicyRequest struct {
	value *AddLogRotationPolicyRequest
	isSet bool
}

func (v NullableAddLogRotationPolicyRequest) Get() *AddLogRotationPolicyRequest {
	return v.value
}

func (v *NullableAddLogRotationPolicyRequest) Set(val *AddLogRotationPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogRotationPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogRotationPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogRotationPolicyRequest(val *AddLogRotationPolicyRequest) *NullableAddLogRotationPolicyRequest {
	return &NullableAddLogRotationPolicyRequest{value: val, isSet: true}
}

func (v NullableAddLogRotationPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogRotationPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
