/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcustomVelocityContextProviderSchemaUrn the model 'EnumcustomVelocityContextProviderSchemaUrn'
type EnumcustomVelocityContextProviderSchemaUrn string

// List of Enumcustom-velocity-context-providerSchemaUrn
const (
	ENUMCUSTOMVELOCITYCONTEXTPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VELOCITY_CONTEXT_PROVIDERCUSTOM EnumcustomVelocityContextProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:velocity-context-provider:custom"
)

// All allowed values of EnumcustomVelocityContextProviderSchemaUrn enum
var AllowedEnumcustomVelocityContextProviderSchemaUrnEnumValues = []EnumcustomVelocityContextProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:velocity-context-provider:custom",
}

func (v *EnumcustomVelocityContextProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcustomVelocityContextProviderSchemaUrn(value)
	for _, existing := range AllowedEnumcustomVelocityContextProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcustomVelocityContextProviderSchemaUrn", value)
}

// NewEnumcustomVelocityContextProviderSchemaUrnFromValue returns a pointer to a valid EnumcustomVelocityContextProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcustomVelocityContextProviderSchemaUrnFromValue(v string) (*EnumcustomVelocityContextProviderSchemaUrn, error) {
	ev := EnumcustomVelocityContextProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcustomVelocityContextProviderSchemaUrn: valid values are %v", v, AllowedEnumcustomVelocityContextProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcustomVelocityContextProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcustomVelocityContextProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcustom-velocity-context-providerSchemaUrn value
func (v EnumcustomVelocityContextProviderSchemaUrn) Ptr() *EnumcustomVelocityContextProviderSchemaUrn {
	return &v
}

type NullableEnumcustomVelocityContextProviderSchemaUrn struct {
	value *EnumcustomVelocityContextProviderSchemaUrn
	isSet bool
}

func (v NullableEnumcustomVelocityContextProviderSchemaUrn) Get() *EnumcustomVelocityContextProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumcustomVelocityContextProviderSchemaUrn) Set(val *EnumcustomVelocityContextProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcustomVelocityContextProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcustomVelocityContextProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcustomVelocityContextProviderSchemaUrn(val *EnumcustomVelocityContextProviderSchemaUrn) *NullableEnumcustomVelocityContextProviderSchemaUrn {
	return &NullableEnumcustomVelocityContextProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcustomVelocityContextProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcustomVelocityContextProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
