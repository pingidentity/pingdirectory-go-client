/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationDomainMissingChangesPolicyProp Determines how the server responds when replication detects that some changes might have been missed. Each missing changes policy is a set of missing changes actions to take for a set of missing changes types. The value configured here only applies to this particular replication domain.
type EnumreplicationDomainMissingChangesPolicyProp string

// List of Enumreplication-domain-missingChangesPolicyProp
const (
	ENUMREPLICATIONDOMAINMISSINGCHANGESPOLICYPROP_MAXIMUM_INTEGRITY    EnumreplicationDomainMissingChangesPolicyProp = "maximum-integrity"
	ENUMREPLICATIONDOMAINMISSINGCHANGESPOLICYPROP_FAVOR_INTEGRITY      EnumreplicationDomainMissingChangesPolicyProp = "favor-integrity"
	ENUMREPLICATIONDOMAINMISSINGCHANGESPOLICYPROP_FAVOR_AVAILABILITY   EnumreplicationDomainMissingChangesPolicyProp = "favor-availability"
	ENUMREPLICATIONDOMAINMISSINGCHANGESPOLICYPROP_MAXIMUM_AVAILABILITY EnumreplicationDomainMissingChangesPolicyProp = "maximum-availability"
	ENUMREPLICATIONDOMAINMISSINGCHANGESPOLICYPROP_USE_SERVER_DEFAULT   EnumreplicationDomainMissingChangesPolicyProp = "use-server-default"
)

// All allowed values of EnumreplicationDomainMissingChangesPolicyProp enum
var AllowedEnumreplicationDomainMissingChangesPolicyPropEnumValues = []EnumreplicationDomainMissingChangesPolicyProp{
	"maximum-integrity",
	"favor-integrity",
	"favor-availability",
	"maximum-availability",
	"use-server-default",
}

func (v *EnumreplicationDomainMissingChangesPolicyProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationDomainMissingChangesPolicyProp(value)
	for _, existing := range AllowedEnumreplicationDomainMissingChangesPolicyPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationDomainMissingChangesPolicyProp", value)
}

// NewEnumreplicationDomainMissingChangesPolicyPropFromValue returns a pointer to a valid EnumreplicationDomainMissingChangesPolicyProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationDomainMissingChangesPolicyPropFromValue(v string) (*EnumreplicationDomainMissingChangesPolicyProp, error) {
	ev := EnumreplicationDomainMissingChangesPolicyProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationDomainMissingChangesPolicyProp: valid values are %v", v, AllowedEnumreplicationDomainMissingChangesPolicyPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationDomainMissingChangesPolicyProp) IsValid() bool {
	for _, existing := range AllowedEnumreplicationDomainMissingChangesPolicyPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-domain-missingChangesPolicyProp value
func (v EnumreplicationDomainMissingChangesPolicyProp) Ptr() *EnumreplicationDomainMissingChangesPolicyProp {
	return &v
}

type NullableEnumreplicationDomainMissingChangesPolicyProp struct {
	value *EnumreplicationDomainMissingChangesPolicyProp
	isSet bool
}

func (v NullableEnumreplicationDomainMissingChangesPolicyProp) Get() *EnumreplicationDomainMissingChangesPolicyProp {
	return v.value
}

func (v *NullableEnumreplicationDomainMissingChangesPolicyProp) Set(val *EnumreplicationDomainMissingChangesPolicyProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationDomainMissingChangesPolicyProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationDomainMissingChangesPolicyProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationDomainMissingChangesPolicyProp(val *EnumreplicationDomainMissingChangesPolicyProp) *NullableEnumreplicationDomainMissingChangesPolicyProp {
	return &NullableEnumreplicationDomainMissingChangesPolicyProp{value: val, isSet: true}
}

func (v NullableEnumreplicationDomainMissingChangesPolicyProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationDomainMissingChangesPolicyProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
