/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumavailabilityStateHttpServletExtensionSchemaUrn the model 'EnumavailabilityStateHttpServletExtensionSchemaUrn'
type EnumavailabilityStateHttpServletExtensionSchemaUrn string

// List of Enumavailability-state-http-servlet-extensionSchemaUrn
const (
	ENUMAVAILABILITYSTATEHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONAVAILABILITY_STATE EnumavailabilityStateHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:availability-state"
)

// All allowed values of EnumavailabilityStateHttpServletExtensionSchemaUrn enum
var AllowedEnumavailabilityStateHttpServletExtensionSchemaUrnEnumValues = []EnumavailabilityStateHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:availability-state",
}

func (v *EnumavailabilityStateHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumavailabilityStateHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumavailabilityStateHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumavailabilityStateHttpServletExtensionSchemaUrn", value)
}

// NewEnumavailabilityStateHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumavailabilityStateHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumavailabilityStateHttpServletExtensionSchemaUrnFromValue(v string) (*EnumavailabilityStateHttpServletExtensionSchemaUrn, error) {
	ev := EnumavailabilityStateHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumavailabilityStateHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumavailabilityStateHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumavailabilityStateHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumavailabilityStateHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumavailability-state-http-servlet-extensionSchemaUrn value
func (v EnumavailabilityStateHttpServletExtensionSchemaUrn) Ptr() *EnumavailabilityStateHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumavailabilityStateHttpServletExtensionSchemaUrn struct {
	value *EnumavailabilityStateHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumavailabilityStateHttpServletExtensionSchemaUrn) Get() *EnumavailabilityStateHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumavailabilityStateHttpServletExtensionSchemaUrn) Set(val *EnumavailabilityStateHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumavailabilityStateHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumavailabilityStateHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumavailabilityStateHttpServletExtensionSchemaUrn(val *EnumavailabilityStateHttpServletExtensionSchemaUrn) *NullableEnumavailabilityStateHttpServletExtensionSchemaUrn {
	return &NullableEnumavailabilityStateHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumavailabilityStateHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumavailabilityStateHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
