/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyKeyManagerProviderSchemaUrn the model 'EnumthirdPartyKeyManagerProviderSchemaUrn'
type EnumthirdPartyKeyManagerProviderSchemaUrn string

// List of Enumthird-party-key-manager-providerSchemaUrn
const (
	ENUMTHIRDPARTYKEYMANAGERPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0KEY_MANAGER_PROVIDERTHIRD_PARTY EnumthirdPartyKeyManagerProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:key-manager-provider:third-party"
)

// All allowed values of EnumthirdPartyKeyManagerProviderSchemaUrn enum
var AllowedEnumthirdPartyKeyManagerProviderSchemaUrnEnumValues = []EnumthirdPartyKeyManagerProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:key-manager-provider:third-party",
}

func (v *EnumthirdPartyKeyManagerProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyKeyManagerProviderSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyKeyManagerProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyKeyManagerProviderSchemaUrn", value)
}

// NewEnumthirdPartyKeyManagerProviderSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyKeyManagerProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyKeyManagerProviderSchemaUrnFromValue(v string) (*EnumthirdPartyKeyManagerProviderSchemaUrn, error) {
	ev := EnumthirdPartyKeyManagerProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyKeyManagerProviderSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyKeyManagerProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyKeyManagerProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyKeyManagerProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-key-manager-providerSchemaUrn value
func (v EnumthirdPartyKeyManagerProviderSchemaUrn) Ptr() *EnumthirdPartyKeyManagerProviderSchemaUrn {
	return &v
}

type NullableEnumthirdPartyKeyManagerProviderSchemaUrn struct {
	value *EnumthirdPartyKeyManagerProviderSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyKeyManagerProviderSchemaUrn) Get() *EnumthirdPartyKeyManagerProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyKeyManagerProviderSchemaUrn) Set(val *EnumthirdPartyKeyManagerProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyKeyManagerProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyKeyManagerProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyKeyManagerProviderSchemaUrn(val *EnumthirdPartyKeyManagerProviderSchemaUrn) *NullableEnumthirdPartyKeyManagerProviderSchemaUrn {
	return &NullableEnumthirdPartyKeyManagerProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyKeyManagerProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyKeyManagerProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
