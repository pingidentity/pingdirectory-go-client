/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddLoggingChangeSubscriptionHandlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddLoggingChangeSubscriptionHandlerRequest{}

// AddLoggingChangeSubscriptionHandlerRequest struct for AddLoggingChangeSubscriptionHandlerRequest
type AddLoggingChangeSubscriptionHandlerRequest struct {
	Schemas []EnumloggingChangeSubscriptionHandlerSchemaUrn `json:"schemas"`
	// Specifies the log file in which the change notification messages will be written.
	LogFile *string `json:"logFile,omitempty"`
	// A description for this Change Subscription Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether this change subscription handler is enabled within the server.
	Enabled bool `json:"enabled"`
	// The set of change subscriptions for which this change subscription handler should be notified. If no values are provided then it will be notified for all change subscriptions defined in the server.
	ChangeSubscription []string `json:"changeSubscription,omitempty"`
	// Name of the new Change Subscription Handler
	HandlerName string `json:"handlerName"`
}

// NewAddLoggingChangeSubscriptionHandlerRequest instantiates a new AddLoggingChangeSubscriptionHandlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLoggingChangeSubscriptionHandlerRequest(schemas []EnumloggingChangeSubscriptionHandlerSchemaUrn, enabled bool, handlerName string) *AddLoggingChangeSubscriptionHandlerRequest {
	this := AddLoggingChangeSubscriptionHandlerRequest{}
	this.Schemas = schemas
	this.Enabled = enabled
	this.HandlerName = handlerName
	return &this
}

// NewAddLoggingChangeSubscriptionHandlerRequestWithDefaults instantiates a new AddLoggingChangeSubscriptionHandlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLoggingChangeSubscriptionHandlerRequestWithDefaults() *AddLoggingChangeSubscriptionHandlerRequest {
	this := AddLoggingChangeSubscriptionHandlerRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetSchemas() []EnumloggingChangeSubscriptionHandlerSchemaUrn {
	if o == nil {
		var ret []EnumloggingChangeSubscriptionHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetSchemasOk() ([]EnumloggingChangeSubscriptionHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddLoggingChangeSubscriptionHandlerRequest) SetSchemas(v []EnumloggingChangeSubscriptionHandlerSchemaUrn) {
	o.Schemas = v
}

// GetLogFile returns the LogFile field value if set, zero value otherwise.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetLogFile() string {
	if o == nil || IsNil(o.LogFile) {
		var ret string
		return ret
	}
	return *o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetLogFileOk() (*string, bool) {
	if o == nil || IsNil(o.LogFile) {
		return nil, false
	}
	return o.LogFile, true
}

// HasLogFile returns a boolean if a field has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) HasLogFile() bool {
	if o != nil && !IsNil(o.LogFile) {
		return true
	}

	return false
}

// SetLogFile gets a reference to the given string and assigns it to the LogFile field.
func (o *AddLoggingChangeSubscriptionHandlerRequest) SetLogFile(v string) {
	o.LogFile = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddLoggingChangeSubscriptionHandlerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddLoggingChangeSubscriptionHandlerRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetChangeSubscription returns the ChangeSubscription field value if set, zero value otherwise.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetChangeSubscription() []string {
	if o == nil || IsNil(o.ChangeSubscription) {
		var ret []string
		return ret
	}
	return o.ChangeSubscription
}

// GetChangeSubscriptionOk returns a tuple with the ChangeSubscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetChangeSubscriptionOk() ([]string, bool) {
	if o == nil || IsNil(o.ChangeSubscription) {
		return nil, false
	}
	return o.ChangeSubscription, true
}

// HasChangeSubscription returns a boolean if a field has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) HasChangeSubscription() bool {
	if o != nil && !IsNil(o.ChangeSubscription) {
		return true
	}

	return false
}

// SetChangeSubscription gets a reference to the given []string and assigns it to the ChangeSubscription field.
func (o *AddLoggingChangeSubscriptionHandlerRequest) SetChangeSubscription(v []string) {
	o.ChangeSubscription = v
}

// GetHandlerName returns the HandlerName field value
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetHandlerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HandlerName
}

// GetHandlerNameOk returns a tuple with the HandlerName field value
// and a boolean to check if the value has been set.
func (o *AddLoggingChangeSubscriptionHandlerRequest) GetHandlerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HandlerName, true
}

// SetHandlerName sets field value
func (o *AddLoggingChangeSubscriptionHandlerRequest) SetHandlerName(v string) {
	o.HandlerName = v
}

func (o AddLoggingChangeSubscriptionHandlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddLoggingChangeSubscriptionHandlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.LogFile) {
		toSerialize["logFile"] = o.LogFile
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ChangeSubscription) {
		toSerialize["changeSubscription"] = o.ChangeSubscription
	}
	toSerialize["handlerName"] = o.HandlerName
	return toSerialize, nil
}

type NullableAddLoggingChangeSubscriptionHandlerRequest struct {
	value *AddLoggingChangeSubscriptionHandlerRequest
	isSet bool
}

func (v NullableAddLoggingChangeSubscriptionHandlerRequest) Get() *AddLoggingChangeSubscriptionHandlerRequest {
	return v.value
}

func (v *NullableAddLoggingChangeSubscriptionHandlerRequest) Set(val *AddLoggingChangeSubscriptionHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLoggingChangeSubscriptionHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLoggingChangeSubscriptionHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLoggingChangeSubscriptionHandlerRequest(val *AddLoggingChangeSubscriptionHandlerRequest) *NullableAddLoggingChangeSubscriptionHandlerRequest {
	return &NullableAddLoggingChangeSubscriptionHandlerRequest{value: val, isSet: true}
}

func (v NullableAddLoggingChangeSubscriptionHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLoggingChangeSubscriptionHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
