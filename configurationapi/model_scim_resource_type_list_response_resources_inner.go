/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// ScimResourceTypeListResponseResourcesInner - struct for ScimResourceTypeListResponseResourcesInner
type ScimResourceTypeListResponseResourcesInner struct {
	LdapMappingScimResourceTypeResponse     *LdapMappingScimResourceTypeResponse
	LdapPassThroughScimResourceTypeResponse *LdapPassThroughScimResourceTypeResponse
	MappingScimResourceTypeResponse         *MappingScimResourceTypeResponse
	PassThroughScimResourceTypeResponse     *PassThroughScimResourceTypeResponse
}

// LdapMappingScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner is a convenience function that returns LdapMappingScimResourceTypeResponse wrapped in ScimResourceTypeListResponseResourcesInner
func LdapMappingScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner(v *LdapMappingScimResourceTypeResponse) ScimResourceTypeListResponseResourcesInner {
	return ScimResourceTypeListResponseResourcesInner{
		LdapMappingScimResourceTypeResponse: v,
	}
}

// LdapPassThroughScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner is a convenience function that returns LdapPassThroughScimResourceTypeResponse wrapped in ScimResourceTypeListResponseResourcesInner
func LdapPassThroughScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner(v *LdapPassThroughScimResourceTypeResponse) ScimResourceTypeListResponseResourcesInner {
	return ScimResourceTypeListResponseResourcesInner{
		LdapPassThroughScimResourceTypeResponse: v,
	}
}

// MappingScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner is a convenience function that returns MappingScimResourceTypeResponse wrapped in ScimResourceTypeListResponseResourcesInner
func MappingScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner(v *MappingScimResourceTypeResponse) ScimResourceTypeListResponseResourcesInner {
	return ScimResourceTypeListResponseResourcesInner{
		MappingScimResourceTypeResponse: v,
	}
}

// PassThroughScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner is a convenience function that returns PassThroughScimResourceTypeResponse wrapped in ScimResourceTypeListResponseResourcesInner
func PassThroughScimResourceTypeResponseAsScimResourceTypeListResponseResourcesInner(v *PassThroughScimResourceTypeResponse) ScimResourceTypeListResponseResourcesInner {
	return ScimResourceTypeListResponseResourcesInner{
		PassThroughScimResourceTypeResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScimResourceTypeListResponseResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LdapMappingScimResourceTypeResponse
	err = newStrictDecoder(data).Decode(&dst.LdapMappingScimResourceTypeResponse)
	if err == nil {
		jsonLdapMappingScimResourceTypeResponse, _ := json.Marshal(dst.LdapMappingScimResourceTypeResponse)
		if string(jsonLdapMappingScimResourceTypeResponse) == "{}" { // empty struct
			dst.LdapMappingScimResourceTypeResponse = nil
		} else {
			match++
		}
	} else {
		dst.LdapMappingScimResourceTypeResponse = nil
	}

	// try to unmarshal data into LdapPassThroughScimResourceTypeResponse
	err = newStrictDecoder(data).Decode(&dst.LdapPassThroughScimResourceTypeResponse)
	if err == nil {
		jsonLdapPassThroughScimResourceTypeResponse, _ := json.Marshal(dst.LdapPassThroughScimResourceTypeResponse)
		if string(jsonLdapPassThroughScimResourceTypeResponse) == "{}" { // empty struct
			dst.LdapPassThroughScimResourceTypeResponse = nil
		} else {
			match++
		}
	} else {
		dst.LdapPassThroughScimResourceTypeResponse = nil
	}

	// try to unmarshal data into MappingScimResourceTypeResponse
	err = newStrictDecoder(data).Decode(&dst.MappingScimResourceTypeResponse)
	if err == nil {
		jsonMappingScimResourceTypeResponse, _ := json.Marshal(dst.MappingScimResourceTypeResponse)
		if string(jsonMappingScimResourceTypeResponse) == "{}" { // empty struct
			dst.MappingScimResourceTypeResponse = nil
		} else {
			match++
		}
	} else {
		dst.MappingScimResourceTypeResponse = nil
	}

	// try to unmarshal data into PassThroughScimResourceTypeResponse
	err = newStrictDecoder(data).Decode(&dst.PassThroughScimResourceTypeResponse)
	if err == nil {
		jsonPassThroughScimResourceTypeResponse, _ := json.Marshal(dst.PassThroughScimResourceTypeResponse)
		if string(jsonPassThroughScimResourceTypeResponse) == "{}" { // empty struct
			dst.PassThroughScimResourceTypeResponse = nil
		} else {
			match++
		}
	} else {
		dst.PassThroughScimResourceTypeResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LdapMappingScimResourceTypeResponse = nil
		dst.LdapPassThroughScimResourceTypeResponse = nil
		dst.MappingScimResourceTypeResponse = nil
		dst.PassThroughScimResourceTypeResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScimResourceTypeListResponseResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScimResourceTypeListResponseResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScimResourceTypeListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	if src.LdapMappingScimResourceTypeResponse != nil {
		return json.Marshal(&src.LdapMappingScimResourceTypeResponse)
	}

	if src.LdapPassThroughScimResourceTypeResponse != nil {
		return json.Marshal(&src.LdapPassThroughScimResourceTypeResponse)
	}

	if src.MappingScimResourceTypeResponse != nil {
		return json.Marshal(&src.MappingScimResourceTypeResponse)
	}

	if src.PassThroughScimResourceTypeResponse != nil {
		return json.Marshal(&src.PassThroughScimResourceTypeResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScimResourceTypeListResponseResourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.LdapMappingScimResourceTypeResponse != nil {
		return obj.LdapMappingScimResourceTypeResponse
	}

	if obj.LdapPassThroughScimResourceTypeResponse != nil {
		return obj.LdapPassThroughScimResourceTypeResponse
	}

	if obj.MappingScimResourceTypeResponse != nil {
		return obj.MappingScimResourceTypeResponse
	}

	if obj.PassThroughScimResourceTypeResponse != nil {
		return obj.PassThroughScimResourceTypeResponse
	}

	// all schemas are nil
	return nil
}

type NullableScimResourceTypeListResponseResourcesInner struct {
	value *ScimResourceTypeListResponseResourcesInner
	isSet bool
}

func (v NullableScimResourceTypeListResponseResourcesInner) Get() *ScimResourceTypeListResponseResourcesInner {
	return v.value
}

func (v *NullableScimResourceTypeListResponseResourcesInner) Set(val *ScimResourceTypeListResponseResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableScimResourceTypeListResponseResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableScimResourceTypeListResponseResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimResourceTypeListResponseResourcesInner(val *ScimResourceTypeListResponseResourcesInner) *NullableScimResourceTypeListResponseResourcesInner {
	return &NullableScimResourceTypeListResponseResourcesInner{value: val, isSet: true}
}

func (v NullableScimResourceTypeListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimResourceTypeListResponseResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
