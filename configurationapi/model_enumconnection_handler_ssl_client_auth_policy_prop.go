/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumconnectionHandlerSslClientAuthPolicyProp Specifies the policy that the HTTP Connection Handler should use regarding client SSL certificates. In order for a client certificate to be accepted it must be known to the trust-manager-provider associated with this HTTP Connection Handler. Client certificates received by the HTTP Connection Handler are by default used for TLS mutual authentication only, as there is no support for user authentication.
type EnumconnectionHandlerSslClientAuthPolicyProp string

// List of Enumconnection-handler-sslClientAuthPolicyProp
const (
	ENUMCONNECTIONHANDLERSSLCLIENTAUTHPOLICYPROP_DISABLED EnumconnectionHandlerSslClientAuthPolicyProp = "disabled"
	ENUMCONNECTIONHANDLERSSLCLIENTAUTHPOLICYPROP_OPTIONAL EnumconnectionHandlerSslClientAuthPolicyProp = "optional"
	ENUMCONNECTIONHANDLERSSLCLIENTAUTHPOLICYPROP_REQUIRED EnumconnectionHandlerSslClientAuthPolicyProp = "required"
)

// All allowed values of EnumconnectionHandlerSslClientAuthPolicyProp enum
var AllowedEnumconnectionHandlerSslClientAuthPolicyPropEnumValues = []EnumconnectionHandlerSslClientAuthPolicyProp{
	"disabled",
	"optional",
	"required",
}

func (v *EnumconnectionHandlerSslClientAuthPolicyProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconnectionHandlerSslClientAuthPolicyProp(value)
	for _, existing := range AllowedEnumconnectionHandlerSslClientAuthPolicyPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconnectionHandlerSslClientAuthPolicyProp", value)
}

// NewEnumconnectionHandlerSslClientAuthPolicyPropFromValue returns a pointer to a valid EnumconnectionHandlerSslClientAuthPolicyProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconnectionHandlerSslClientAuthPolicyPropFromValue(v string) (*EnumconnectionHandlerSslClientAuthPolicyProp, error) {
	ev := EnumconnectionHandlerSslClientAuthPolicyProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconnectionHandlerSslClientAuthPolicyProp: valid values are %v", v, AllowedEnumconnectionHandlerSslClientAuthPolicyPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconnectionHandlerSslClientAuthPolicyProp) IsValid() bool {
	for _, existing := range AllowedEnumconnectionHandlerSslClientAuthPolicyPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconnection-handler-sslClientAuthPolicyProp value
func (v EnumconnectionHandlerSslClientAuthPolicyProp) Ptr() *EnumconnectionHandlerSslClientAuthPolicyProp {
	return &v
}

type NullableEnumconnectionHandlerSslClientAuthPolicyProp struct {
	value *EnumconnectionHandlerSslClientAuthPolicyProp
	isSet bool
}

func (v NullableEnumconnectionHandlerSslClientAuthPolicyProp) Get() *EnumconnectionHandlerSslClientAuthPolicyProp {
	return v.value
}

func (v *NullableEnumconnectionHandlerSslClientAuthPolicyProp) Set(val *EnumconnectionHandlerSslClientAuthPolicyProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconnectionHandlerSslClientAuthPolicyProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconnectionHandlerSslClientAuthPolicyProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconnectionHandlerSslClientAuthPolicyProp(val *EnumconnectionHandlerSslClientAuthPolicyProp) *NullableEnumconnectionHandlerSslClientAuthPolicyProp {
	return &NullableEnumconnectionHandlerSslClientAuthPolicyProp{value: val, isSet: true}
}

func (v NullableEnumconnectionHandlerSslClientAuthPolicyProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconnectionHandlerSslClientAuthPolicyProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
