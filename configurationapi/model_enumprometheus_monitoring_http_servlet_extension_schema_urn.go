/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumprometheusMonitoringHttpServletExtensionSchemaUrn the model 'EnumprometheusMonitoringHttpServletExtensionSchemaUrn'
type EnumprometheusMonitoringHttpServletExtensionSchemaUrn string

// List of Enumprometheus-monitoring-http-servlet-extensionSchemaUrn
const (
	ENUMPROMETHEUSMONITORINGHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONPROMETHEUS_MONITORING EnumprometheusMonitoringHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:prometheus-monitoring"
)

// All allowed values of EnumprometheusMonitoringHttpServletExtensionSchemaUrn enum
var AllowedEnumprometheusMonitoringHttpServletExtensionSchemaUrnEnumValues = []EnumprometheusMonitoringHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:prometheus-monitoring",
}

func (v *EnumprometheusMonitoringHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumprometheusMonitoringHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumprometheusMonitoringHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumprometheusMonitoringHttpServletExtensionSchemaUrn", value)
}

// NewEnumprometheusMonitoringHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumprometheusMonitoringHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumprometheusMonitoringHttpServletExtensionSchemaUrnFromValue(v string) (*EnumprometheusMonitoringHttpServletExtensionSchemaUrn, error) {
	ev := EnumprometheusMonitoringHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumprometheusMonitoringHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumprometheusMonitoringHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumprometheusMonitoringHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumprometheusMonitoringHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumprometheus-monitoring-http-servlet-extensionSchemaUrn value
func (v EnumprometheusMonitoringHttpServletExtensionSchemaUrn) Ptr() *EnumprometheusMonitoringHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn struct {
	value *EnumprometheusMonitoringHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn) Get() *EnumprometheusMonitoringHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn) Set(val *EnumprometheusMonitoringHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn(val *EnumprometheusMonitoringHttpServletExtensionSchemaUrn) *NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn {
	return &NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumprometheusMonitoringHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
