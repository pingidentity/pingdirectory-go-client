/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ServerInstanceListenerApiService ServerInstanceListenerApi service
type ServerInstanceListenerApiService service

type ApiGetServerInstanceListenerRequest struct {
	ctx                        context.Context
	ApiService                 *ServerInstanceListenerApiService
	serverInstanceListenerName string
	serverInstanceName         string
}

func (r ApiGetServerInstanceListenerRequest) Execute() (*GetServerInstanceListener200Response, *http.Response, error) {
	return r.ApiService.GetServerInstanceListenerExecute(r)
}

/*
GetServerInstanceListener Returns a single Server Instance Listener

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverInstanceListenerName Name of the Server Instance Listener
	@param serverInstanceName Name of the Server Instance
	@return ApiGetServerInstanceListenerRequest
*/
func (a *ServerInstanceListenerApiService) GetServerInstanceListener(ctx context.Context, serverInstanceListenerName string, serverInstanceName string) ApiGetServerInstanceListenerRequest {
	return ApiGetServerInstanceListenerRequest{
		ApiService:                 a,
		ctx:                        ctx,
		serverInstanceListenerName: serverInstanceListenerName,
		serverInstanceName:         serverInstanceName,
	}
}

// Execute executes the request
//
//	@return GetServerInstanceListener200Response
func (a *ServerInstanceListenerApiService) GetServerInstanceListenerExecute(r ApiGetServerInstanceListenerRequest) (*GetServerInstanceListener200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetServerInstanceListener200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceListenerApiService.GetServerInstanceListener")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/server-instances/{server-instance-name}/server-instance-listeners/{server-instance-listener-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"server-instance-listener-name"+"}", url.PathEscape(parameterValueToString(r.serverInstanceListenerName, "serverInstanceListenerName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server-instance-name"+"}", url.PathEscape(parameterValueToString(r.serverInstanceName, "serverInstanceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListServerInstanceListenersRequest struct {
	ctx                context.Context
	ApiService         *ServerInstanceListenerApiService
	serverInstanceName string
	filter             *string
}

// SCIM filter
func (r ApiListServerInstanceListenersRequest) Filter(filter string) ApiListServerInstanceListenersRequest {
	r.filter = &filter
	return r
}

func (r ApiListServerInstanceListenersRequest) Execute() (*ServerInstanceListenerListResponse, *http.Response, error) {
	return r.ApiService.ListServerInstanceListenersExecute(r)
}

/*
ListServerInstanceListeners Returns a list of all Server Instance Listener objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverInstanceName Name of the Server Instance
	@return ApiListServerInstanceListenersRequest
*/
func (a *ServerInstanceListenerApiService) ListServerInstanceListeners(ctx context.Context, serverInstanceName string) ApiListServerInstanceListenersRequest {
	return ApiListServerInstanceListenersRequest{
		ApiService:         a,
		ctx:                ctx,
		serverInstanceName: serverInstanceName,
	}
}

// Execute executes the request
//
//	@return ServerInstanceListenerListResponse
func (a *ServerInstanceListenerApiService) ListServerInstanceListenersExecute(r ApiListServerInstanceListenersRequest) (*ServerInstanceListenerListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerInstanceListenerListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceListenerApiService.ListServerInstanceListeners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/server-instances/{server-instance-name}/server-instance-listeners"
	localVarPath = strings.Replace(localVarPath, "{"+"server-instance-name"+"}", url.PathEscape(parameterValueToString(r.serverInstanceName, "serverInstanceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateServerInstanceListenerRequest struct {
	ctx                        context.Context
	ApiService                 *ServerInstanceListenerApiService
	serverInstanceListenerName string
	serverInstanceName         string
	updateRequest              *UpdateRequest
}

// Update an existing Server Instance Listener
func (r ApiUpdateServerInstanceListenerRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateServerInstanceListenerRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateServerInstanceListenerRequest) Execute() (*GetServerInstanceListener200Response, *http.Response, error) {
	return r.ApiService.UpdateServerInstanceListenerExecute(r)
}

/*
UpdateServerInstanceListener Update an existing Server Instance Listener by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serverInstanceListenerName Name of the Server Instance Listener
	@param serverInstanceName Name of the Server Instance
	@return ApiUpdateServerInstanceListenerRequest
*/
func (a *ServerInstanceListenerApiService) UpdateServerInstanceListener(ctx context.Context, serverInstanceListenerName string, serverInstanceName string) ApiUpdateServerInstanceListenerRequest {
	return ApiUpdateServerInstanceListenerRequest{
		ApiService:                 a,
		ctx:                        ctx,
		serverInstanceListenerName: serverInstanceListenerName,
		serverInstanceName:         serverInstanceName,
	}
}

// Execute executes the request
//
//	@return GetServerInstanceListener200Response
func (a *ServerInstanceListenerApiService) UpdateServerInstanceListenerExecute(r ApiUpdateServerInstanceListenerRequest) (*GetServerInstanceListener200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetServerInstanceListener200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceListenerApiService.UpdateServerInstanceListener")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/server-instances/{server-instance-name}/server-instance-listeners/{server-instance-listener-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"server-instance-listener-name"+"}", url.PathEscape(parameterValueToString(r.serverInstanceListenerName, "serverInstanceListenerName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"server-instance-name"+"}", url.PathEscape(parameterValueToString(r.serverInstanceName, "serverInstanceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
