/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddReplaceCertificateExtendedOperationHandlerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddReplaceCertificateExtendedOperationHandlerRequest{}

// AddReplaceCertificateExtendedOperationHandlerRequest struct for AddReplaceCertificateExtendedOperationHandlerRequest
type AddReplaceCertificateExtendedOperationHandlerRequest struct {
	Schemas []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn `json:"schemas"`
	// Indicates whether clients should be allowed to directly provide a new listener or inter-server certificate chain in the extended request.
	AllowRemotelyProvidedCertificates *bool                                              `json:"allowRemotelyProvidedCertificates,omitempty"`
	AllowedOperation                  []EnumextendedOperationHandlerAllowedOperationProp `json:"allowedOperation,omitempty"`
	// A set of criteria that client connections must satisfy before they will be allowed to request the associated extended operations.
	ConnectionCriteria *string `json:"connectionCriteria,omitempty"`
	// A set of criteria that the extended requests must satisfy before they will be processed by the server.
	RequestCriteria *string `json:"requestCriteria,omitempty"`
	// A description for this Extended Operation Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether the Extended Operation Handler is enabled (that is, whether the types of extended operations are allowed in the server).
	Enabled bool `json:"enabled"`
	// Name of the new Extended Operation Handler
	HandlerName string `json:"handlerName"`
}

// NewAddReplaceCertificateExtendedOperationHandlerRequest instantiates a new AddReplaceCertificateExtendedOperationHandlerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddReplaceCertificateExtendedOperationHandlerRequest(schemas []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn, enabled bool, handlerName string) *AddReplaceCertificateExtendedOperationHandlerRequest {
	this := AddReplaceCertificateExtendedOperationHandlerRequest{}
	this.Schemas = schemas
	this.Enabled = enabled
	this.HandlerName = handlerName
	return &this
}

// NewAddReplaceCertificateExtendedOperationHandlerRequestWithDefaults instantiates a new AddReplaceCertificateExtendedOperationHandlerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddReplaceCertificateExtendedOperationHandlerRequestWithDefaults() *AddReplaceCertificateExtendedOperationHandlerRequest {
	this := AddReplaceCertificateExtendedOperationHandlerRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetSchemas() []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn {
	if o == nil {
		var ret []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetSchemasOk() ([]EnumreplaceCertificateExtendedOperationHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetSchemas(v []EnumreplaceCertificateExtendedOperationHandlerSchemaUrn) {
	o.Schemas = v
}

// GetAllowRemotelyProvidedCertificates returns the AllowRemotelyProvidedCertificates field value if set, zero value otherwise.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetAllowRemotelyProvidedCertificates() bool {
	if o == nil || IsNil(o.AllowRemotelyProvidedCertificates) {
		var ret bool
		return ret
	}
	return *o.AllowRemotelyProvidedCertificates
}

// GetAllowRemotelyProvidedCertificatesOk returns a tuple with the AllowRemotelyProvidedCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetAllowRemotelyProvidedCertificatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRemotelyProvidedCertificates) {
		return nil, false
	}
	return o.AllowRemotelyProvidedCertificates, true
}

// HasAllowRemotelyProvidedCertificates returns a boolean if a field has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) HasAllowRemotelyProvidedCertificates() bool {
	if o != nil && !IsNil(o.AllowRemotelyProvidedCertificates) {
		return true
	}

	return false
}

// SetAllowRemotelyProvidedCertificates gets a reference to the given bool and assigns it to the AllowRemotelyProvidedCertificates field.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetAllowRemotelyProvidedCertificates(v bool) {
	o.AllowRemotelyProvidedCertificates = &v
}

// GetAllowedOperation returns the AllowedOperation field value if set, zero value otherwise.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetAllowedOperation() []EnumextendedOperationHandlerAllowedOperationProp {
	if o == nil || IsNil(o.AllowedOperation) {
		var ret []EnumextendedOperationHandlerAllowedOperationProp
		return ret
	}
	return o.AllowedOperation
}

// GetAllowedOperationOk returns a tuple with the AllowedOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetAllowedOperationOk() ([]EnumextendedOperationHandlerAllowedOperationProp, bool) {
	if o == nil || IsNil(o.AllowedOperation) {
		return nil, false
	}
	return o.AllowedOperation, true
}

// HasAllowedOperation returns a boolean if a field has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) HasAllowedOperation() bool {
	if o != nil && !IsNil(o.AllowedOperation) {
		return true
	}

	return false
}

// SetAllowedOperation gets a reference to the given []EnumextendedOperationHandlerAllowedOperationProp and assigns it to the AllowedOperation field.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetAllowedOperation(v []EnumextendedOperationHandlerAllowedOperationProp) {
	o.AllowedOperation = v
}

// GetConnectionCriteria returns the ConnectionCriteria field value if set, zero value otherwise.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetConnectionCriteria() string {
	if o == nil || IsNil(o.ConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.ConnectionCriteria
}

// GetConnectionCriteriaOk returns a tuple with the ConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetConnectionCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionCriteria) {
		return nil, false
	}
	return o.ConnectionCriteria, true
}

// HasConnectionCriteria returns a boolean if a field has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) HasConnectionCriteria() bool {
	if o != nil && !IsNil(o.ConnectionCriteria) {
		return true
	}

	return false
}

// SetConnectionCriteria gets a reference to the given string and assigns it to the ConnectionCriteria field.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetConnectionCriteria(v string) {
	o.ConnectionCriteria = &v
}

// GetRequestCriteria returns the RequestCriteria field value if set, zero value otherwise.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetRequestCriteria() string {
	if o == nil || IsNil(o.RequestCriteria) {
		var ret string
		return ret
	}
	return *o.RequestCriteria
}

// GetRequestCriteriaOk returns a tuple with the RequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetRequestCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.RequestCriteria) {
		return nil, false
	}
	return o.RequestCriteria, true
}

// HasRequestCriteria returns a boolean if a field has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) HasRequestCriteria() bool {
	if o != nil && !IsNil(o.RequestCriteria) {
		return true
	}

	return false
}

// SetRequestCriteria gets a reference to the given string and assigns it to the RequestCriteria field.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetRequestCriteria(v string) {
	o.RequestCriteria = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetHandlerName returns the HandlerName field value
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetHandlerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HandlerName
}

// GetHandlerNameOk returns a tuple with the HandlerName field value
// and a boolean to check if the value has been set.
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) GetHandlerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HandlerName, true
}

// SetHandlerName sets field value
func (o *AddReplaceCertificateExtendedOperationHandlerRequest) SetHandlerName(v string) {
	o.HandlerName = v
}

func (o AddReplaceCertificateExtendedOperationHandlerRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddReplaceCertificateExtendedOperationHandlerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.AllowRemotelyProvidedCertificates) {
		toSerialize["allowRemotelyProvidedCertificates"] = o.AllowRemotelyProvidedCertificates
	}
	if !IsNil(o.AllowedOperation) {
		toSerialize["allowedOperation"] = o.AllowedOperation
	}
	if !IsNil(o.ConnectionCriteria) {
		toSerialize["connectionCriteria"] = o.ConnectionCriteria
	}
	if !IsNil(o.RequestCriteria) {
		toSerialize["requestCriteria"] = o.RequestCriteria
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["handlerName"] = o.HandlerName
	return toSerialize, nil
}

type NullableAddReplaceCertificateExtendedOperationHandlerRequest struct {
	value *AddReplaceCertificateExtendedOperationHandlerRequest
	isSet bool
}

func (v NullableAddReplaceCertificateExtendedOperationHandlerRequest) Get() *AddReplaceCertificateExtendedOperationHandlerRequest {
	return v.value
}

func (v *NullableAddReplaceCertificateExtendedOperationHandlerRequest) Set(val *AddReplaceCertificateExtendedOperationHandlerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddReplaceCertificateExtendedOperationHandlerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddReplaceCertificateExtendedOperationHandlerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddReplaceCertificateExtendedOperationHandlerRequest(val *AddReplaceCertificateExtendedOperationHandlerRequest) *NullableAddReplaceCertificateExtendedOperationHandlerRequest {
	return &NullableAddReplaceCertificateExtendedOperationHandlerRequest{value: val, isSet: true}
}

func (v NullableAddReplaceCertificateExtendedOperationHandlerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddReplaceCertificateExtendedOperationHandlerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
