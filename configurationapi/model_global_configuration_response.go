/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// GlobalConfigurationResponse struct for GlobalConfigurationResponse
type GlobalConfigurationResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas                                       []EnumglobalConfigurationSchemaUrn                 `json:"schemas,omitempty"`
	// Specifies a name that may be used to uniquely identify this Directory Server instance among other instances in the environment.
	InstanceName string `json:"instanceName"`
	// Specifies the location for this Directory Server. Operations performed which involve communication with other servers may prefer servers in the same location to help ensure low-latency responses.
	Location *string `json:"location,omitempty"`
	// When this property is set, changes made to this server using the console or dsconfig can be automatically applied to all servers in the specified server group.
	ConfigurationServerGroup *string `json:"configurationServerGroup,omitempty"`
	// Indicates whether this server should be forced to assume the master role if no other suitable server is found to act as master or if multiple masters are detected. A master is only needed when changes are made to mirrored data, i.e. data specific to the topology itself and cluster-wide configuration data.
	ForceAsMasterForMirroredData *bool `json:"forceAsMasterForMirroredData,omitempty"`
	// Indicates whether the Directory Server should encrypt the data that it stores in all components that support it. This may include certain types of backends (including local DB and large attribute backends), the LDAP changelog, and the replication server database.
	EncryptData *bool `json:"encryptData,omitempty"`
	// Specifies the cipher stream provider that should be used to protect the contents of the encryption settings database.
	EncryptionSettingsCipherStreamProvider *string `json:"encryptionSettingsCipherStreamProvider,omitempty"`
	// Indicates whether the server should encrypt backups by default.
	EncryptBackupsByDefault *bool `json:"encryptBackupsByDefault,omitempty"`
	// The unique identifier for the encryption settings definition to use to generate the encryption key for encrypted backups by default.
	BackupEncryptionSettingsDefinitionID *string `json:"backupEncryptionSettingsDefinitionID,omitempty"`
	// Indicates whether the server should encrypt LDIF exports by default.
	EncryptLDIFExportsByDefault *bool `json:"encryptLDIFExportsByDefault,omitempty"`
	// The unique identifier for the encryption settings definition to use to generate the encryption key for encrypted LDIF exports by default.
	LdifExportEncryptionSettingsDefinitionID *string `json:"ldifExportEncryptionSettingsDefinitionID,omitempty"`
	// Indicates whether to automatically compress LDIF exports that are also encrypted.
	AutomaticallyCompressEncryptedLDIFExports *bool `json:"automaticallyCompressEncryptedLDIFExports,omitempty"`
	// Indicates whether the values of sensitive configuration properties should be redacted when logging configuration changes, including in the configuration audit log, the error log, and the server.out log file.
	RedactSensitiveValuesInConfigLogs *bool `json:"redactSensitiveValuesInConfigLogs,omitempty"`
	// Provides the ability to indicate that some attributes should be considered sensitive and additional protection should be in place when interacting with those attributes.
	SensitiveAttribute []string `json:"sensitiveAttribute,omitempty"`
	// Indicates whether the Directory Server should reject any LDAP request (other than StartTLS) received from a client that is not using an encrypted connection.
	RejectInsecureRequests *bool `json:"rejectInsecureRequests,omitempty"`
	// A set of criteria that may be used to match LDAP requests that may be permitted over an insecure connection even if reject-insecure-requests is true. Note that some types of requests will always be permitted, including StartTLS and start administrative session requests.
	AllowedInsecureRequestCriteria *string `json:"allowedInsecureRequestCriteria,omitempty"`
	// Indicates whether the Directory Server should reject any LDAP request (other than bind or StartTLS requests) received from a client that has not yet been authenticated, whose last authentication attempt was unsuccessful, or whose last authentication attempt used anonymous authentication.
	RejectUnauthenticatedRequests *bool `json:"rejectUnauthenticatedRequests,omitempty"`
	// A set of criteria that may be used to match LDAP requests that may be permitted over an unauthenticated connection even if reject-unauthenticated-requests is true. Note that some types of requests will always be permitted, including bind, StartTLS, and start administrative session requests.
	AllowedUnauthenticatedRequestCriteria *string `json:"allowedUnauthenticatedRequestCriteria,omitempty"`
	// Indicates whether the Directory Server should reject any simple bind request that contains a DN but no password.
	BindWithDNRequiresPassword *bool                                          `json:"bindWithDNRequiresPassword,omitempty"`
	DisabledPrivilege          []EnumglobalConfigurationDisabledPrivilegeProp `json:"disabledPrivilege,omitempty"`
	// Specifies the name of the password policy that is in effect for users whose entries do not specify an alternate password policy (either via a real or virtual attribute).
	DefaultPasswordPolicy string `json:"defaultPasswordPolicy"`
	// Specifies the maximum number of password policies that are defined in the user data (that is, outside of the configuration) that the server should cache in memory for faster access. A value of zero indicates that the server should not cache any user data password policies.
	MaximumUserDataPasswordPoliciesToCache *int32 `json:"maximumUserDataPasswordPoliciesToCache,omitempty"`
	// Specifies the name of the identity mapper to map authorization ID values (using the \"u:\" form) provided in the proxied authorization control to the corresponding user entry.
	ProxiedAuthorizationIdentityMapper string `json:"proxiedAuthorizationIdentityMapper"`
	// Indicates whether the digest should always be verified whenever an entry containing a digest is decoded. If this is \"true\", then if a digest exists, it will always be verified. Otherwise, the digest will be written when encoding entries but ignored when decoding entries but may still be available for other verification processing.
	VerifyEntryDigests         *bool                                                   `json:"verifyEntryDigests,omitempty"`
	AllowedInsecureTLSProtocol []EnumglobalConfigurationAllowedInsecureTLSProtocolProp `json:"allowedInsecureTLSProtocol,omitempty"`
	// Indicates that processes attaching to this server's local JVM are allowed to access internal data through JMX without the authentication requirements that remote JMX connections are subject to. Please review and understand the data that this option will expose (such as cn=monitor) to client applications to ensure there are no security concerns.
	AllowInsecureLocalJMXConnections *bool `json:"allowInsecureLocalJMXConnections,omitempty"`
	// Specifies the client connection policy that will be used by default for internal operations.
	DefaultInternalOperationClientConnectionPolicy *string `json:"defaultInternalOperationClientConnectionPolicy,omitempty"`
	// Specifies the maximum number of entries that the Directory Server should return to the client during a search operation.
	SizeLimit *int32 `json:"sizeLimit,omitempty"`
	// Specifies the maximum length of time that the Directory Server should be allowed to spend processing a search operation.
	TimeLimit *string `json:"timeLimit,omitempty"`
	// Specifies the maximum length of time that a client connection may remain established since its last completed operation.
	IdleTimeLimit *string `json:"idleTimeLimit,omitempty"`
	// Specifies the maximum number of entries that the Directory Server should \"look through\" in the course of processing a search request.
	LookthroughLimit *int32 `json:"lookthroughLimit,omitempty"`
	// Specifies the maximum number of entries that may be directly joined with any individual search result entry.
	LdapJoinSizeLimit *int32 `json:"ldapJoinSizeLimit,omitempty"`
	// Specifies the maximum number of LDAP client connections which may be established to this Directory Server at the same time.
	MaximumConcurrentConnections *int32 `json:"maximumConcurrentConnections,omitempty"`
	// Specifies the maximum number of LDAP client connections originating from the same IP address which may be established to this Directory Server at the same time.
	MaximumConcurrentConnectionsPerIPAddress *int32 `json:"maximumConcurrentConnectionsPerIPAddress,omitempty"`
	// Specifies the maximum number of LDAP client connections which may be established to this Directory Server at the same time and authenticated as the same user.
	MaximumConcurrentConnectionsPerBindDN *int32 `json:"maximumConcurrentConnectionsPerBindDN,omitempty"`
	// Specifies the maximum number of unindexed searches that may be in progress in this backend at any given time. Any unindexed searches requested while the maximum number of unindexed searches are already being processed will be rejected. A value of zero indicates that no limit will be enforced.
	MaximumConcurrentUnindexedSearches *int32 `json:"maximumConcurrentUnindexedSearches,omitempty"`
	// Specifies the maximum number of attributes that may be included in an add request. This property does not impose any limit on the number of values that an attribute may have.
	MaximumAttributesPerAddRequest *int32 `json:"maximumAttributesPerAddRequest,omitempty"`
	// Specifies the maximum number of modifications that may be included in a modify request. This property does not impose any limit on the number of attribute values that a modification may have.
	MaximumModificationsPerModifyRequest *int32 `json:"maximumModificationsPerModifyRequest,omitempty"`
	// Indicates whether the server should use a separate background thread for each persistent search.
	BackgroundThreadForEachPersistentSearch *bool `json:"backgroundThreadForEachPersistentSearch,omitempty"`
	// Indicates whether the Directory Server should allow underscores in attribute names and allow attribute names to begin with numeric digits (both of which are violations of the LDAP standards).
	AllowAttributeNameExceptions   *bool                                                      `json:"allowAttributeNameExceptions,omitempty"`
	InvalidAttributeSyntaxBehavior *EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp `json:"invalidAttributeSyntaxBehavior,omitempty"`
	// Specifies a set of attribute types for which the server will permit values that do not conform to the associated attribute syntax.
	PermitSyntaxViolationsForAttribute                             []string                                                                                    `json:"permitSyntaxViolationsForAttribute,omitempty"`
	SingleStructuralObjectclassBehavior                            *EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp                             `json:"singleStructuralObjectclassBehavior,omitempty"`
	AttributesModifiableWithIgnoreNoUserModificationRequestControl []EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp `json:"attributesModifiableWithIgnoreNoUserModificationRequestControl,omitempty"`
	// The maximum allowed size that the server.out log file will be allowed to have. If a write would cause the file to exceed this size, then the current file will be rotated out of place and a new empty file will be created and the message written to it.
	MaximumServerOutLogFileSize *string `json:"maximumServerOutLogFileSize,omitempty"`
	// The maximum number of server.out log files (including the current active log file) that should be retained. When rotating the log file, if the total number of files exceeds this count, then the oldest file(s) will be removed so that the total number of log files is within this limit.
	MaximumServerOutLogFileCount     *int32                                                       `json:"maximumServerOutLogFileCount,omitempty"`
	StartupErrorLoggerOutputLocation *EnumglobalConfigurationStartupErrorLoggerOutputLocationProp `json:"startupErrorLoggerOutputLocation,omitempty"`
	// Indicates whether the Directory Server should be shut down if a severe error is raised (e.g., an out of memory error) which may prevent the JVM from continuing to run properly.
	ExitOnJVMError *bool `json:"exitOnJVMError,omitempty"`
	// Specifies the numeric value of the result code when request processing fails due to an internal server error.
	ServerErrorResultCode *int32 `json:"serverErrorResultCode,omitempty"`
	// Specifies a result code map that should be used for clients that do not have a map associated with their client connection policy. If the associated client connection policy has a result code map, then that map will be used instead. If no map is associated either with the client connection policy or the global configuration, then an internal default will be used.
	ResultCodeMap *string `json:"resultCodeMap,omitempty"`
	// Indicates whether responses for failed bind operations should include a message string providing the reason for the authentication failure.
	ReturnBindErrorMessages *bool `json:"returnBindErrorMessages,omitempty"`
	// Indicates whether the Directory Server should send a response to any operation that is interrupted via an abandon request.
	NotifyAbandonedOperations *bool `json:"notifyAbandonedOperations,omitempty"`
	// Specifies the maximum number of duplicate error log messages that should be logged in the time window specified by the duplicate-error-log-time-limit property.
	DuplicateErrorLogLimit int32 `json:"duplicateErrorLogLimit"`
	// Specifies the length of time that must expire before duplicate log messages above the duplicate-error-log-limit threshold are logged again to the error log.
	DuplicateErrorLogTimeLimit string `json:"duplicateErrorLogTimeLimit"`
	// Specifies the maximum number of duplicate alert messages that should be sent via the administrative alert framework in the time window specified by the duplicate-alert-time-limit property.
	DuplicateAlertLimit int32 `json:"duplicateAlertLimit"`
	// Specifies the length of time that must expire before duplicate messages are sent via the administrative alert framework.
	DuplicateAlertTimeLimit        string                                                     `json:"duplicateAlertTimeLimit"`
	WritabilityMode                *EnumglobalConfigurationWritabilityModeProp                `json:"writabilityMode,omitempty"`
	UnrecoverableDatabaseErrorMode *EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp `json:"unrecoverableDatabaseErrorMode,omitempty"`
	// This setting provides data integrity options when the Directory Server is installed with a database on a network storage device. A storage device may be accessed directly by a physical server, or indirectly through a virtual machine running on a hypervisor. Enabling this setting will apply changes to all Local DB Backends, the LDAP Changelog Backend, and the replication changelog database.
	DatabaseOnVirtualizedOrNetworkStorage *bool `json:"databaseOnVirtualizedOrNetworkStorage,omitempty"`
	// Connection criteria that may be used to identify clients whose add requests should use entryUUID as the naming attribute.
	AutoNameWithEntryUUIDConnectionCriteria *string `json:"autoNameWithEntryUUIDConnectionCriteria,omitempty"`
	// Request criteria that may be used to identify add requests that should use entryUUID as the naming attribute.
	AutoNameWithEntryUUIDRequestCriteria *string `json:"autoNameWithEntryUUIDRequestCriteria,omitempty"`
	// Specifies the soft delete policy that will be used by default for delete operations. Soft delete operations introduce the ability to control the server behavior of the delete operation. Instead of performing a permanent delete of an entry, deleted entries can be retained as soft deleted entries by their entryUUID values and are available for undelete at a later time. In addition to a soft delete policy enabling soft deletes, delete operations sent to the server must have the soft delete request control present with sufficient access privileges to access the soft delete request control.
	SoftDeletePolicy *string `json:"softDeletePolicy,omitempty"`
	// Specifies the length of time that a subtree may remain hidden or read-only before an administrative alert is sent.
	SubtreeAccessibilityAlertTimeLimit *string `json:"subtreeAccessibilityAlertTimeLimit,omitempty"`
	// Indicates whether the server should issue a warning when enabling a backend that contains multiple base DNs.
	WarnForBackendsWithMultipleBaseDns *bool `json:"warnForBackendsWithMultipleBaseDns,omitempty"`
	// Specifies the minimum length of time required for backend or request processor initialization that will trigger the server to force an explicit garbage collection. A value of \"0 seconds\" indicates that the server should never invoke an explicit garbage collection regardless of the length of time required to initialize the server backends.
	ForcedGCPrimeDuration *string `json:"forcedGCPrimeDuration,omitempty"`
	// The name of the replication set assigned to this Directory Server. Restricted domains are only replicated within instances using the same replication set name.
	ReplicationSetName *string `json:"replicationSetName,omitempty"`
	// The number of outstanding changes any replica can have before the Directory Server will start accepting connections. The Directory Server may never accept connections if this setting is too low. If you are unsure which value to use, you can use the number of expected updates within a five second interval.
	StartupMinReplicationBacklogCount int32 `json:"startupMinReplicationBacklogCount"`
	// An alert is sent when the number of outstanding replication changes for the Directory Server has exceeded this threshold for longer than the replication backlog duration alert threshold.
	ReplicationBacklogCountAlertThreshold int32 `json:"replicationBacklogCountAlertThreshold"`
	// An alert is sent when the number of outstanding replication changes for the Directory Server has exceeded the replication backlog count alert threshold for longer than this duration.
	ReplicationBacklogDurationAlertThreshold string `json:"replicationBacklogDurationAlertThreshold"`
	// The amount of time a replication assurance source (i.e. a peer Directory Server) will be suspended from assurance requirements on this Directory Server if it experiences an assurance timeout.
	ReplicationAssuranceSourceTimeoutSuspendDuration string `json:"replicationAssuranceSourceTimeoutSuspendDuration"`
	// The maximum number of replication backlog updates a replication assurance source (i.e. a peer Directory Server) can have and be immediately recognized as an available assurance source by this Directory Server.
	ReplicationAssuranceSourceBacklogFastStartThreshold int32 `json:"replicationAssuranceSourceBacklogFastStartThreshold"`
	// Specifies the size limit for historical information.
	ReplicationHistoryLimit *int32 `json:"replicationHistoryLimit,omitempty"`
	// Allow replication to be inherited by subordinate/child backends.
	AllowInheritedReplicationOfSubordinateBackends bool `json:"allowInheritedReplicationOfSubordinateBackends"`
	// Indicates whether state about obsolete replicas is automatically purged.
	ReplicationPurgeObsoleteReplicas *bool `json:"replicationPurgeObsoleteReplicas,omitempty"`
	// Specifies the set of servers that will be used to send email messages. The order in which the servers are listed indicates the order in which the Directory Server will attempt to use them in the course of sending a message. The first attempt will always go to the server at the top of the list, and servers further down the list will only be used if none of the servers listed above it were able to successfully send the message.
	SmtpServer []string `json:"smtpServer,omitempty"`
	// The maximum number of SMTP connections that will be maintained for delivering email messages.
	MaxSMTPConnectionCount *int32 `json:"maxSMTPConnectionCount,omitempty"`
	// The maximum length of time that a connection to an SMTP server should be considered valid.
	MaxSMTPConnectionAge *string `json:"maxSMTPConnectionAge,omitempty"`
	// The length of time between checks to ensure that available SMTP connections are still valid.
	SmtpConnectionHealthCheckInterval *string `json:"smtpConnectionHealthCheckInterval,omitempty"`
	// Specifies the fully-qualified name of a Java class that may be invoked in the server.
	AllowedTask []string `json:"allowedTask,omitempty"`
	// Indicates whether the Directory Server should attempt to record information about the length of time required to process various phases of an operation. Enabling this feature may impact performance, but could make it easier to identify potential bottlenecks in operation processing.
	EnableSubOperationTimer *bool `json:"enableSubOperationTimer,omitempty"`
	// Specifies the maximum amount of time the shutdown of Directory Server may take.
	MaximumShutdownTime *string `json:"maximumShutdownTime,omitempty"`
	// Specifies the length of time that the Directory Server should cache the IP addresses associated with the names of systems with which it interacts.
	NetworkAddressCacheTTL *string `json:"networkAddressCacheTTL,omitempty"`
	// Specifies whether the Directory Server should cache the last valid IP addresses associated with the names of systems with which it interacts with when the domain name service returns an unknown host exception. Java may return an unknown host exception when there is unexpected interruption in domain name service so this setting protects the Directory Server from temporary DNS server outages if previous results have been cached.
	NetworkAddressOutageCacheEnabled *bool `json:"networkAddressOutageCacheEnabled,omitempty"`
	// Specifies criteria for identifying specific applications that access the server to enable tracking throughput and latency of LDAP operations issued by an application.
	TrackedApplication []string                                     `json:"trackedApplication,omitempty"`
	JmxValueBehavior   *EnumglobalConfigurationJmxValueBehaviorProp `json:"jmxValueBehavior,omitempty"`
	// When set to true, the server will use its original, non-standard JMX MBean names for the monitoring MBeans. These include RDN keys of \"Rdn1\" and \"Rdn2\" instead of the recommended \"type\" and \"name\" keys. This should option should only be enabled for installations that have monitoring infrastructure that depends on the old keys.
	JmxUseLegacyMbeanNames *bool `json:"jmxUseLegacyMbeanNames,omitempty"`
}

// NewGlobalConfigurationResponse instantiates a new GlobalConfigurationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalConfigurationResponse(instanceName string, defaultPasswordPolicy string, proxiedAuthorizationIdentityMapper string, duplicateErrorLogLimit int32, duplicateErrorLogTimeLimit string, duplicateAlertLimit int32, duplicateAlertTimeLimit string, startupMinReplicationBacklogCount int32, replicationBacklogCountAlertThreshold int32, replicationBacklogDurationAlertThreshold string, replicationAssuranceSourceTimeoutSuspendDuration string, replicationAssuranceSourceBacklogFastStartThreshold int32, allowInheritedReplicationOfSubordinateBackends bool) *GlobalConfigurationResponse {
	this := GlobalConfigurationResponse{}
	this.InstanceName = instanceName
	this.DefaultPasswordPolicy = defaultPasswordPolicy
	this.ProxiedAuthorizationIdentityMapper = proxiedAuthorizationIdentityMapper
	this.DuplicateErrorLogLimit = duplicateErrorLogLimit
	this.DuplicateErrorLogTimeLimit = duplicateErrorLogTimeLimit
	this.DuplicateAlertLimit = duplicateAlertLimit
	this.DuplicateAlertTimeLimit = duplicateAlertTimeLimit
	this.StartupMinReplicationBacklogCount = startupMinReplicationBacklogCount
	this.ReplicationBacklogCountAlertThreshold = replicationBacklogCountAlertThreshold
	this.ReplicationBacklogDurationAlertThreshold = replicationBacklogDurationAlertThreshold
	this.ReplicationAssuranceSourceTimeoutSuspendDuration = replicationAssuranceSourceTimeoutSuspendDuration
	this.ReplicationAssuranceSourceBacklogFastStartThreshold = replicationAssuranceSourceBacklogFastStartThreshold
	this.AllowInheritedReplicationOfSubordinateBackends = allowInheritedReplicationOfSubordinateBackends
	return &this
}

// NewGlobalConfigurationResponseWithDefaults instantiates a new GlobalConfigurationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalConfigurationResponseWithDefaults() *GlobalConfigurationResponse {
	this := GlobalConfigurationResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *GlobalConfigurationResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *GlobalConfigurationResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSchemas() []EnumglobalConfigurationSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumglobalConfigurationSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSchemasOk() ([]EnumglobalConfigurationSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumglobalConfigurationSchemaUrn and assigns it to the Schemas field.
func (o *GlobalConfigurationResponse) SetSchemas(v []EnumglobalConfigurationSchemaUrn) {
	o.Schemas = v
}

// GetInstanceName returns the InstanceName field value
func (o *GlobalConfigurationResponse) GetInstanceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetInstanceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceName, true
}

// SetInstanceName sets field value
func (o *GlobalConfigurationResponse) SetInstanceName(v string) {
	o.InstanceName = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetLocation() string {
	if o == nil || isNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetLocationOk() (*string, bool) {
	if o == nil || isNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *GlobalConfigurationResponse) SetLocation(v string) {
	o.Location = &v
}

// GetConfigurationServerGroup returns the ConfigurationServerGroup field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetConfigurationServerGroup() string {
	if o == nil || isNil(o.ConfigurationServerGroup) {
		var ret string
		return ret
	}
	return *o.ConfigurationServerGroup
}

// GetConfigurationServerGroupOk returns a tuple with the ConfigurationServerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetConfigurationServerGroupOk() (*string, bool) {
	if o == nil || isNil(o.ConfigurationServerGroup) {
		return nil, false
	}
	return o.ConfigurationServerGroup, true
}

// HasConfigurationServerGroup returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasConfigurationServerGroup() bool {
	if o != nil && !isNil(o.ConfigurationServerGroup) {
		return true
	}

	return false
}

// SetConfigurationServerGroup gets a reference to the given string and assigns it to the ConfigurationServerGroup field.
func (o *GlobalConfigurationResponse) SetConfigurationServerGroup(v string) {
	o.ConfigurationServerGroup = &v
}

// GetForceAsMasterForMirroredData returns the ForceAsMasterForMirroredData field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetForceAsMasterForMirroredData() bool {
	if o == nil || isNil(o.ForceAsMasterForMirroredData) {
		var ret bool
		return ret
	}
	return *o.ForceAsMasterForMirroredData
}

// GetForceAsMasterForMirroredDataOk returns a tuple with the ForceAsMasterForMirroredData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetForceAsMasterForMirroredDataOk() (*bool, bool) {
	if o == nil || isNil(o.ForceAsMasterForMirroredData) {
		return nil, false
	}
	return o.ForceAsMasterForMirroredData, true
}

// HasForceAsMasterForMirroredData returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasForceAsMasterForMirroredData() bool {
	if o != nil && !isNil(o.ForceAsMasterForMirroredData) {
		return true
	}

	return false
}

// SetForceAsMasterForMirroredData gets a reference to the given bool and assigns it to the ForceAsMasterForMirroredData field.
func (o *GlobalConfigurationResponse) SetForceAsMasterForMirroredData(v bool) {
	o.ForceAsMasterForMirroredData = &v
}

// GetEncryptData returns the EncryptData field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetEncryptData() bool {
	if o == nil || isNil(o.EncryptData) {
		var ret bool
		return ret
	}
	return *o.EncryptData
}

// GetEncryptDataOk returns a tuple with the EncryptData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetEncryptDataOk() (*bool, bool) {
	if o == nil || isNil(o.EncryptData) {
		return nil, false
	}
	return o.EncryptData, true
}

// HasEncryptData returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasEncryptData() bool {
	if o != nil && !isNil(o.EncryptData) {
		return true
	}

	return false
}

// SetEncryptData gets a reference to the given bool and assigns it to the EncryptData field.
func (o *GlobalConfigurationResponse) SetEncryptData(v bool) {
	o.EncryptData = &v
}

// GetEncryptionSettingsCipherStreamProvider returns the EncryptionSettingsCipherStreamProvider field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetEncryptionSettingsCipherStreamProvider() string {
	if o == nil || isNil(o.EncryptionSettingsCipherStreamProvider) {
		var ret string
		return ret
	}
	return *o.EncryptionSettingsCipherStreamProvider
}

// GetEncryptionSettingsCipherStreamProviderOk returns a tuple with the EncryptionSettingsCipherStreamProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetEncryptionSettingsCipherStreamProviderOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionSettingsCipherStreamProvider) {
		return nil, false
	}
	return o.EncryptionSettingsCipherStreamProvider, true
}

// HasEncryptionSettingsCipherStreamProvider returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasEncryptionSettingsCipherStreamProvider() bool {
	if o != nil && !isNil(o.EncryptionSettingsCipherStreamProvider) {
		return true
	}

	return false
}

// SetEncryptionSettingsCipherStreamProvider gets a reference to the given string and assigns it to the EncryptionSettingsCipherStreamProvider field.
func (o *GlobalConfigurationResponse) SetEncryptionSettingsCipherStreamProvider(v string) {
	o.EncryptionSettingsCipherStreamProvider = &v
}

// GetEncryptBackupsByDefault returns the EncryptBackupsByDefault field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetEncryptBackupsByDefault() bool {
	if o == nil || isNil(o.EncryptBackupsByDefault) {
		var ret bool
		return ret
	}
	return *o.EncryptBackupsByDefault
}

// GetEncryptBackupsByDefaultOk returns a tuple with the EncryptBackupsByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetEncryptBackupsByDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.EncryptBackupsByDefault) {
		return nil, false
	}
	return o.EncryptBackupsByDefault, true
}

// HasEncryptBackupsByDefault returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasEncryptBackupsByDefault() bool {
	if o != nil && !isNil(o.EncryptBackupsByDefault) {
		return true
	}

	return false
}

// SetEncryptBackupsByDefault gets a reference to the given bool and assigns it to the EncryptBackupsByDefault field.
func (o *GlobalConfigurationResponse) SetEncryptBackupsByDefault(v bool) {
	o.EncryptBackupsByDefault = &v
}

// GetBackupEncryptionSettingsDefinitionID returns the BackupEncryptionSettingsDefinitionID field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetBackupEncryptionSettingsDefinitionID() string {
	if o == nil || isNil(o.BackupEncryptionSettingsDefinitionID) {
		var ret string
		return ret
	}
	return *o.BackupEncryptionSettingsDefinitionID
}

// GetBackupEncryptionSettingsDefinitionIDOk returns a tuple with the BackupEncryptionSettingsDefinitionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetBackupEncryptionSettingsDefinitionIDOk() (*string, bool) {
	if o == nil || isNil(o.BackupEncryptionSettingsDefinitionID) {
		return nil, false
	}
	return o.BackupEncryptionSettingsDefinitionID, true
}

// HasBackupEncryptionSettingsDefinitionID returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasBackupEncryptionSettingsDefinitionID() bool {
	if o != nil && !isNil(o.BackupEncryptionSettingsDefinitionID) {
		return true
	}

	return false
}

// SetBackupEncryptionSettingsDefinitionID gets a reference to the given string and assigns it to the BackupEncryptionSettingsDefinitionID field.
func (o *GlobalConfigurationResponse) SetBackupEncryptionSettingsDefinitionID(v string) {
	o.BackupEncryptionSettingsDefinitionID = &v
}

// GetEncryptLDIFExportsByDefault returns the EncryptLDIFExportsByDefault field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetEncryptLDIFExportsByDefault() bool {
	if o == nil || isNil(o.EncryptLDIFExportsByDefault) {
		var ret bool
		return ret
	}
	return *o.EncryptLDIFExportsByDefault
}

// GetEncryptLDIFExportsByDefaultOk returns a tuple with the EncryptLDIFExportsByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetEncryptLDIFExportsByDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.EncryptLDIFExportsByDefault) {
		return nil, false
	}
	return o.EncryptLDIFExportsByDefault, true
}

// HasEncryptLDIFExportsByDefault returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasEncryptLDIFExportsByDefault() bool {
	if o != nil && !isNil(o.EncryptLDIFExportsByDefault) {
		return true
	}

	return false
}

// SetEncryptLDIFExportsByDefault gets a reference to the given bool and assigns it to the EncryptLDIFExportsByDefault field.
func (o *GlobalConfigurationResponse) SetEncryptLDIFExportsByDefault(v bool) {
	o.EncryptLDIFExportsByDefault = &v
}

// GetLdifExportEncryptionSettingsDefinitionID returns the LdifExportEncryptionSettingsDefinitionID field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetLdifExportEncryptionSettingsDefinitionID() string {
	if o == nil || isNil(o.LdifExportEncryptionSettingsDefinitionID) {
		var ret string
		return ret
	}
	return *o.LdifExportEncryptionSettingsDefinitionID
}

// GetLdifExportEncryptionSettingsDefinitionIDOk returns a tuple with the LdifExportEncryptionSettingsDefinitionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetLdifExportEncryptionSettingsDefinitionIDOk() (*string, bool) {
	if o == nil || isNil(o.LdifExportEncryptionSettingsDefinitionID) {
		return nil, false
	}
	return o.LdifExportEncryptionSettingsDefinitionID, true
}

// HasLdifExportEncryptionSettingsDefinitionID returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasLdifExportEncryptionSettingsDefinitionID() bool {
	if o != nil && !isNil(o.LdifExportEncryptionSettingsDefinitionID) {
		return true
	}

	return false
}

// SetLdifExportEncryptionSettingsDefinitionID gets a reference to the given string and assigns it to the LdifExportEncryptionSettingsDefinitionID field.
func (o *GlobalConfigurationResponse) SetLdifExportEncryptionSettingsDefinitionID(v string) {
	o.LdifExportEncryptionSettingsDefinitionID = &v
}

// GetAutomaticallyCompressEncryptedLDIFExports returns the AutomaticallyCompressEncryptedLDIFExports field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAutomaticallyCompressEncryptedLDIFExports() bool {
	if o == nil || isNil(o.AutomaticallyCompressEncryptedLDIFExports) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyCompressEncryptedLDIFExports
}

// GetAutomaticallyCompressEncryptedLDIFExportsOk returns a tuple with the AutomaticallyCompressEncryptedLDIFExports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAutomaticallyCompressEncryptedLDIFExportsOk() (*bool, bool) {
	if o == nil || isNil(o.AutomaticallyCompressEncryptedLDIFExports) {
		return nil, false
	}
	return o.AutomaticallyCompressEncryptedLDIFExports, true
}

// HasAutomaticallyCompressEncryptedLDIFExports returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAutomaticallyCompressEncryptedLDIFExports() bool {
	if o != nil && !isNil(o.AutomaticallyCompressEncryptedLDIFExports) {
		return true
	}

	return false
}

// SetAutomaticallyCompressEncryptedLDIFExports gets a reference to the given bool and assigns it to the AutomaticallyCompressEncryptedLDIFExports field.
func (o *GlobalConfigurationResponse) SetAutomaticallyCompressEncryptedLDIFExports(v bool) {
	o.AutomaticallyCompressEncryptedLDIFExports = &v
}

// GetRedactSensitiveValuesInConfigLogs returns the RedactSensitiveValuesInConfigLogs field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetRedactSensitiveValuesInConfigLogs() bool {
	if o == nil || isNil(o.RedactSensitiveValuesInConfigLogs) {
		var ret bool
		return ret
	}
	return *o.RedactSensitiveValuesInConfigLogs
}

// GetRedactSensitiveValuesInConfigLogsOk returns a tuple with the RedactSensitiveValuesInConfigLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetRedactSensitiveValuesInConfigLogsOk() (*bool, bool) {
	if o == nil || isNil(o.RedactSensitiveValuesInConfigLogs) {
		return nil, false
	}
	return o.RedactSensitiveValuesInConfigLogs, true
}

// HasRedactSensitiveValuesInConfigLogs returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasRedactSensitiveValuesInConfigLogs() bool {
	if o != nil && !isNil(o.RedactSensitiveValuesInConfigLogs) {
		return true
	}

	return false
}

// SetRedactSensitiveValuesInConfigLogs gets a reference to the given bool and assigns it to the RedactSensitiveValuesInConfigLogs field.
func (o *GlobalConfigurationResponse) SetRedactSensitiveValuesInConfigLogs(v bool) {
	o.RedactSensitiveValuesInConfigLogs = &v
}

// GetSensitiveAttribute returns the SensitiveAttribute field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSensitiveAttribute() []string {
	if o == nil || isNil(o.SensitiveAttribute) {
		var ret []string
		return ret
	}
	return o.SensitiveAttribute
}

// GetSensitiveAttributeOk returns a tuple with the SensitiveAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSensitiveAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.SensitiveAttribute) {
		return nil, false
	}
	return o.SensitiveAttribute, true
}

// HasSensitiveAttribute returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSensitiveAttribute() bool {
	if o != nil && !isNil(o.SensitiveAttribute) {
		return true
	}

	return false
}

// SetSensitiveAttribute gets a reference to the given []string and assigns it to the SensitiveAttribute field.
func (o *GlobalConfigurationResponse) SetSensitiveAttribute(v []string) {
	o.SensitiveAttribute = v
}

// GetRejectInsecureRequests returns the RejectInsecureRequests field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetRejectInsecureRequests() bool {
	if o == nil || isNil(o.RejectInsecureRequests) {
		var ret bool
		return ret
	}
	return *o.RejectInsecureRequests
}

// GetRejectInsecureRequestsOk returns a tuple with the RejectInsecureRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetRejectInsecureRequestsOk() (*bool, bool) {
	if o == nil || isNil(o.RejectInsecureRequests) {
		return nil, false
	}
	return o.RejectInsecureRequests, true
}

// HasRejectInsecureRequests returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasRejectInsecureRequests() bool {
	if o != nil && !isNil(o.RejectInsecureRequests) {
		return true
	}

	return false
}

// SetRejectInsecureRequests gets a reference to the given bool and assigns it to the RejectInsecureRequests field.
func (o *GlobalConfigurationResponse) SetRejectInsecureRequests(v bool) {
	o.RejectInsecureRequests = &v
}

// GetAllowedInsecureRequestCriteria returns the AllowedInsecureRequestCriteria field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAllowedInsecureRequestCriteria() string {
	if o == nil || isNil(o.AllowedInsecureRequestCriteria) {
		var ret string
		return ret
	}
	return *o.AllowedInsecureRequestCriteria
}

// GetAllowedInsecureRequestCriteriaOk returns a tuple with the AllowedInsecureRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowedInsecureRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.AllowedInsecureRequestCriteria) {
		return nil, false
	}
	return o.AllowedInsecureRequestCriteria, true
}

// HasAllowedInsecureRequestCriteria returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAllowedInsecureRequestCriteria() bool {
	if o != nil && !isNil(o.AllowedInsecureRequestCriteria) {
		return true
	}

	return false
}

// SetAllowedInsecureRequestCriteria gets a reference to the given string and assigns it to the AllowedInsecureRequestCriteria field.
func (o *GlobalConfigurationResponse) SetAllowedInsecureRequestCriteria(v string) {
	o.AllowedInsecureRequestCriteria = &v
}

// GetRejectUnauthenticatedRequests returns the RejectUnauthenticatedRequests field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetRejectUnauthenticatedRequests() bool {
	if o == nil || isNil(o.RejectUnauthenticatedRequests) {
		var ret bool
		return ret
	}
	return *o.RejectUnauthenticatedRequests
}

// GetRejectUnauthenticatedRequestsOk returns a tuple with the RejectUnauthenticatedRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetRejectUnauthenticatedRequestsOk() (*bool, bool) {
	if o == nil || isNil(o.RejectUnauthenticatedRequests) {
		return nil, false
	}
	return o.RejectUnauthenticatedRequests, true
}

// HasRejectUnauthenticatedRequests returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasRejectUnauthenticatedRequests() bool {
	if o != nil && !isNil(o.RejectUnauthenticatedRequests) {
		return true
	}

	return false
}

// SetRejectUnauthenticatedRequests gets a reference to the given bool and assigns it to the RejectUnauthenticatedRequests field.
func (o *GlobalConfigurationResponse) SetRejectUnauthenticatedRequests(v bool) {
	o.RejectUnauthenticatedRequests = &v
}

// GetAllowedUnauthenticatedRequestCriteria returns the AllowedUnauthenticatedRequestCriteria field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAllowedUnauthenticatedRequestCriteria() string {
	if o == nil || isNil(o.AllowedUnauthenticatedRequestCriteria) {
		var ret string
		return ret
	}
	return *o.AllowedUnauthenticatedRequestCriteria
}

// GetAllowedUnauthenticatedRequestCriteriaOk returns a tuple with the AllowedUnauthenticatedRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowedUnauthenticatedRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.AllowedUnauthenticatedRequestCriteria) {
		return nil, false
	}
	return o.AllowedUnauthenticatedRequestCriteria, true
}

// HasAllowedUnauthenticatedRequestCriteria returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAllowedUnauthenticatedRequestCriteria() bool {
	if o != nil && !isNil(o.AllowedUnauthenticatedRequestCriteria) {
		return true
	}

	return false
}

// SetAllowedUnauthenticatedRequestCriteria gets a reference to the given string and assigns it to the AllowedUnauthenticatedRequestCriteria field.
func (o *GlobalConfigurationResponse) SetAllowedUnauthenticatedRequestCriteria(v string) {
	o.AllowedUnauthenticatedRequestCriteria = &v
}

// GetBindWithDNRequiresPassword returns the BindWithDNRequiresPassword field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetBindWithDNRequiresPassword() bool {
	if o == nil || isNil(o.BindWithDNRequiresPassword) {
		var ret bool
		return ret
	}
	return *o.BindWithDNRequiresPassword
}

// GetBindWithDNRequiresPasswordOk returns a tuple with the BindWithDNRequiresPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetBindWithDNRequiresPasswordOk() (*bool, bool) {
	if o == nil || isNil(o.BindWithDNRequiresPassword) {
		return nil, false
	}
	return o.BindWithDNRequiresPassword, true
}

// HasBindWithDNRequiresPassword returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasBindWithDNRequiresPassword() bool {
	if o != nil && !isNil(o.BindWithDNRequiresPassword) {
		return true
	}

	return false
}

// SetBindWithDNRequiresPassword gets a reference to the given bool and assigns it to the BindWithDNRequiresPassword field.
func (o *GlobalConfigurationResponse) SetBindWithDNRequiresPassword(v bool) {
	o.BindWithDNRequiresPassword = &v
}

// GetDisabledPrivilege returns the DisabledPrivilege field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetDisabledPrivilege() []EnumglobalConfigurationDisabledPrivilegeProp {
	if o == nil || isNil(o.DisabledPrivilege) {
		var ret []EnumglobalConfigurationDisabledPrivilegeProp
		return ret
	}
	return o.DisabledPrivilege
}

// GetDisabledPrivilegeOk returns a tuple with the DisabledPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDisabledPrivilegeOk() ([]EnumglobalConfigurationDisabledPrivilegeProp, bool) {
	if o == nil || isNil(o.DisabledPrivilege) {
		return nil, false
	}
	return o.DisabledPrivilege, true
}

// HasDisabledPrivilege returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasDisabledPrivilege() bool {
	if o != nil && !isNil(o.DisabledPrivilege) {
		return true
	}

	return false
}

// SetDisabledPrivilege gets a reference to the given []EnumglobalConfigurationDisabledPrivilegeProp and assigns it to the DisabledPrivilege field.
func (o *GlobalConfigurationResponse) SetDisabledPrivilege(v []EnumglobalConfigurationDisabledPrivilegeProp) {
	o.DisabledPrivilege = v
}

// GetDefaultPasswordPolicy returns the DefaultPasswordPolicy field value
func (o *GlobalConfigurationResponse) GetDefaultPasswordPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultPasswordPolicy
}

// GetDefaultPasswordPolicyOk returns a tuple with the DefaultPasswordPolicy field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDefaultPasswordPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultPasswordPolicy, true
}

// SetDefaultPasswordPolicy sets field value
func (o *GlobalConfigurationResponse) SetDefaultPasswordPolicy(v string) {
	o.DefaultPasswordPolicy = v
}

// GetMaximumUserDataPasswordPoliciesToCache returns the MaximumUserDataPasswordPoliciesToCache field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumUserDataPasswordPoliciesToCache() int32 {
	if o == nil || isNil(o.MaximumUserDataPasswordPoliciesToCache) {
		var ret int32
		return ret
	}
	return *o.MaximumUserDataPasswordPoliciesToCache
}

// GetMaximumUserDataPasswordPoliciesToCacheOk returns a tuple with the MaximumUserDataPasswordPoliciesToCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumUserDataPasswordPoliciesToCacheOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumUserDataPasswordPoliciesToCache) {
		return nil, false
	}
	return o.MaximumUserDataPasswordPoliciesToCache, true
}

// HasMaximumUserDataPasswordPoliciesToCache returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumUserDataPasswordPoliciesToCache() bool {
	if o != nil && !isNil(o.MaximumUserDataPasswordPoliciesToCache) {
		return true
	}

	return false
}

// SetMaximumUserDataPasswordPoliciesToCache gets a reference to the given int32 and assigns it to the MaximumUserDataPasswordPoliciesToCache field.
func (o *GlobalConfigurationResponse) SetMaximumUserDataPasswordPoliciesToCache(v int32) {
	o.MaximumUserDataPasswordPoliciesToCache = &v
}

// GetProxiedAuthorizationIdentityMapper returns the ProxiedAuthorizationIdentityMapper field value
func (o *GlobalConfigurationResponse) GetProxiedAuthorizationIdentityMapper() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProxiedAuthorizationIdentityMapper
}

// GetProxiedAuthorizationIdentityMapperOk returns a tuple with the ProxiedAuthorizationIdentityMapper field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetProxiedAuthorizationIdentityMapperOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProxiedAuthorizationIdentityMapper, true
}

// SetProxiedAuthorizationIdentityMapper sets field value
func (o *GlobalConfigurationResponse) SetProxiedAuthorizationIdentityMapper(v string) {
	o.ProxiedAuthorizationIdentityMapper = v
}

// GetVerifyEntryDigests returns the VerifyEntryDigests field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetVerifyEntryDigests() bool {
	if o == nil || isNil(o.VerifyEntryDigests) {
		var ret bool
		return ret
	}
	return *o.VerifyEntryDigests
}

// GetVerifyEntryDigestsOk returns a tuple with the VerifyEntryDigests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetVerifyEntryDigestsOk() (*bool, bool) {
	if o == nil || isNil(o.VerifyEntryDigests) {
		return nil, false
	}
	return o.VerifyEntryDigests, true
}

// HasVerifyEntryDigests returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasVerifyEntryDigests() bool {
	if o != nil && !isNil(o.VerifyEntryDigests) {
		return true
	}

	return false
}

// SetVerifyEntryDigests gets a reference to the given bool and assigns it to the VerifyEntryDigests field.
func (o *GlobalConfigurationResponse) SetVerifyEntryDigests(v bool) {
	o.VerifyEntryDigests = &v
}

// GetAllowedInsecureTLSProtocol returns the AllowedInsecureTLSProtocol field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAllowedInsecureTLSProtocol() []EnumglobalConfigurationAllowedInsecureTLSProtocolProp {
	if o == nil || isNil(o.AllowedInsecureTLSProtocol) {
		var ret []EnumglobalConfigurationAllowedInsecureTLSProtocolProp
		return ret
	}
	return o.AllowedInsecureTLSProtocol
}

// GetAllowedInsecureTLSProtocolOk returns a tuple with the AllowedInsecureTLSProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowedInsecureTLSProtocolOk() ([]EnumglobalConfigurationAllowedInsecureTLSProtocolProp, bool) {
	if o == nil || isNil(o.AllowedInsecureTLSProtocol) {
		return nil, false
	}
	return o.AllowedInsecureTLSProtocol, true
}

// HasAllowedInsecureTLSProtocol returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAllowedInsecureTLSProtocol() bool {
	if o != nil && !isNil(o.AllowedInsecureTLSProtocol) {
		return true
	}

	return false
}

// SetAllowedInsecureTLSProtocol gets a reference to the given []EnumglobalConfigurationAllowedInsecureTLSProtocolProp and assigns it to the AllowedInsecureTLSProtocol field.
func (o *GlobalConfigurationResponse) SetAllowedInsecureTLSProtocol(v []EnumglobalConfigurationAllowedInsecureTLSProtocolProp) {
	o.AllowedInsecureTLSProtocol = v
}

// GetAllowInsecureLocalJMXConnections returns the AllowInsecureLocalJMXConnections field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAllowInsecureLocalJMXConnections() bool {
	if o == nil || isNil(o.AllowInsecureLocalJMXConnections) {
		var ret bool
		return ret
	}
	return *o.AllowInsecureLocalJMXConnections
}

// GetAllowInsecureLocalJMXConnectionsOk returns a tuple with the AllowInsecureLocalJMXConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowInsecureLocalJMXConnectionsOk() (*bool, bool) {
	if o == nil || isNil(o.AllowInsecureLocalJMXConnections) {
		return nil, false
	}
	return o.AllowInsecureLocalJMXConnections, true
}

// HasAllowInsecureLocalJMXConnections returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAllowInsecureLocalJMXConnections() bool {
	if o != nil && !isNil(o.AllowInsecureLocalJMXConnections) {
		return true
	}

	return false
}

// SetAllowInsecureLocalJMXConnections gets a reference to the given bool and assigns it to the AllowInsecureLocalJMXConnections field.
func (o *GlobalConfigurationResponse) SetAllowInsecureLocalJMXConnections(v bool) {
	o.AllowInsecureLocalJMXConnections = &v
}

// GetDefaultInternalOperationClientConnectionPolicy returns the DefaultInternalOperationClientConnectionPolicy field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetDefaultInternalOperationClientConnectionPolicy() string {
	if o == nil || isNil(o.DefaultInternalOperationClientConnectionPolicy) {
		var ret string
		return ret
	}
	return *o.DefaultInternalOperationClientConnectionPolicy
}

// GetDefaultInternalOperationClientConnectionPolicyOk returns a tuple with the DefaultInternalOperationClientConnectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDefaultInternalOperationClientConnectionPolicyOk() (*string, bool) {
	if o == nil || isNil(o.DefaultInternalOperationClientConnectionPolicy) {
		return nil, false
	}
	return o.DefaultInternalOperationClientConnectionPolicy, true
}

// HasDefaultInternalOperationClientConnectionPolicy returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasDefaultInternalOperationClientConnectionPolicy() bool {
	if o != nil && !isNil(o.DefaultInternalOperationClientConnectionPolicy) {
		return true
	}

	return false
}

// SetDefaultInternalOperationClientConnectionPolicy gets a reference to the given string and assigns it to the DefaultInternalOperationClientConnectionPolicy field.
func (o *GlobalConfigurationResponse) SetDefaultInternalOperationClientConnectionPolicy(v string) {
	o.DefaultInternalOperationClientConnectionPolicy = &v
}

// GetSizeLimit returns the SizeLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSizeLimit() int32 {
	if o == nil || isNil(o.SizeLimit) {
		var ret int32
		return ret
	}
	return *o.SizeLimit
}

// GetSizeLimitOk returns a tuple with the SizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSizeLimitOk() (*int32, bool) {
	if o == nil || isNil(o.SizeLimit) {
		return nil, false
	}
	return o.SizeLimit, true
}

// HasSizeLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSizeLimit() bool {
	if o != nil && !isNil(o.SizeLimit) {
		return true
	}

	return false
}

// SetSizeLimit gets a reference to the given int32 and assigns it to the SizeLimit field.
func (o *GlobalConfigurationResponse) SetSizeLimit(v int32) {
	o.SizeLimit = &v
}

// GetTimeLimit returns the TimeLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetTimeLimit() string {
	if o == nil || isNil(o.TimeLimit) {
		var ret string
		return ret
	}
	return *o.TimeLimit
}

// GetTimeLimitOk returns a tuple with the TimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.TimeLimit) {
		return nil, false
	}
	return o.TimeLimit, true
}

// HasTimeLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasTimeLimit() bool {
	if o != nil && !isNil(o.TimeLimit) {
		return true
	}

	return false
}

// SetTimeLimit gets a reference to the given string and assigns it to the TimeLimit field.
func (o *GlobalConfigurationResponse) SetTimeLimit(v string) {
	o.TimeLimit = &v
}

// GetIdleTimeLimit returns the IdleTimeLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetIdleTimeLimit() string {
	if o == nil || isNil(o.IdleTimeLimit) {
		var ret string
		return ret
	}
	return *o.IdleTimeLimit
}

// GetIdleTimeLimitOk returns a tuple with the IdleTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetIdleTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.IdleTimeLimit) {
		return nil, false
	}
	return o.IdleTimeLimit, true
}

// HasIdleTimeLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasIdleTimeLimit() bool {
	if o != nil && !isNil(o.IdleTimeLimit) {
		return true
	}

	return false
}

// SetIdleTimeLimit gets a reference to the given string and assigns it to the IdleTimeLimit field.
func (o *GlobalConfigurationResponse) SetIdleTimeLimit(v string) {
	o.IdleTimeLimit = &v
}

// GetLookthroughLimit returns the LookthroughLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetLookthroughLimit() int32 {
	if o == nil || isNil(o.LookthroughLimit) {
		var ret int32
		return ret
	}
	return *o.LookthroughLimit
}

// GetLookthroughLimitOk returns a tuple with the LookthroughLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetLookthroughLimitOk() (*int32, bool) {
	if o == nil || isNil(o.LookthroughLimit) {
		return nil, false
	}
	return o.LookthroughLimit, true
}

// HasLookthroughLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasLookthroughLimit() bool {
	if o != nil && !isNil(o.LookthroughLimit) {
		return true
	}

	return false
}

// SetLookthroughLimit gets a reference to the given int32 and assigns it to the LookthroughLimit field.
func (o *GlobalConfigurationResponse) SetLookthroughLimit(v int32) {
	o.LookthroughLimit = &v
}

// GetLdapJoinSizeLimit returns the LdapJoinSizeLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetLdapJoinSizeLimit() int32 {
	if o == nil || isNil(o.LdapJoinSizeLimit) {
		var ret int32
		return ret
	}
	return *o.LdapJoinSizeLimit
}

// GetLdapJoinSizeLimitOk returns a tuple with the LdapJoinSizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetLdapJoinSizeLimitOk() (*int32, bool) {
	if o == nil || isNil(o.LdapJoinSizeLimit) {
		return nil, false
	}
	return o.LdapJoinSizeLimit, true
}

// HasLdapJoinSizeLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasLdapJoinSizeLimit() bool {
	if o != nil && !isNil(o.LdapJoinSizeLimit) {
		return true
	}

	return false
}

// SetLdapJoinSizeLimit gets a reference to the given int32 and assigns it to the LdapJoinSizeLimit field.
func (o *GlobalConfigurationResponse) SetLdapJoinSizeLimit(v int32) {
	o.LdapJoinSizeLimit = &v
}

// GetMaximumConcurrentConnections returns the MaximumConcurrentConnections field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentConnections() int32 {
	if o == nil || isNil(o.MaximumConcurrentConnections) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentConnections
}

// GetMaximumConcurrentConnectionsOk returns a tuple with the MaximumConcurrentConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentConnectionsOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumConcurrentConnections) {
		return nil, false
	}
	return o.MaximumConcurrentConnections, true
}

// HasMaximumConcurrentConnections returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumConcurrentConnections() bool {
	if o != nil && !isNil(o.MaximumConcurrentConnections) {
		return true
	}

	return false
}

// SetMaximumConcurrentConnections gets a reference to the given int32 and assigns it to the MaximumConcurrentConnections field.
func (o *GlobalConfigurationResponse) SetMaximumConcurrentConnections(v int32) {
	o.MaximumConcurrentConnections = &v
}

// GetMaximumConcurrentConnectionsPerIPAddress returns the MaximumConcurrentConnectionsPerIPAddress field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentConnectionsPerIPAddress() int32 {
	if o == nil || isNil(o.MaximumConcurrentConnectionsPerIPAddress) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentConnectionsPerIPAddress
}

// GetMaximumConcurrentConnectionsPerIPAddressOk returns a tuple with the MaximumConcurrentConnectionsPerIPAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentConnectionsPerIPAddressOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumConcurrentConnectionsPerIPAddress) {
		return nil, false
	}
	return o.MaximumConcurrentConnectionsPerIPAddress, true
}

// HasMaximumConcurrentConnectionsPerIPAddress returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumConcurrentConnectionsPerIPAddress() bool {
	if o != nil && !isNil(o.MaximumConcurrentConnectionsPerIPAddress) {
		return true
	}

	return false
}

// SetMaximumConcurrentConnectionsPerIPAddress gets a reference to the given int32 and assigns it to the MaximumConcurrentConnectionsPerIPAddress field.
func (o *GlobalConfigurationResponse) SetMaximumConcurrentConnectionsPerIPAddress(v int32) {
	o.MaximumConcurrentConnectionsPerIPAddress = &v
}

// GetMaximumConcurrentConnectionsPerBindDN returns the MaximumConcurrentConnectionsPerBindDN field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentConnectionsPerBindDN() int32 {
	if o == nil || isNil(o.MaximumConcurrentConnectionsPerBindDN) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentConnectionsPerBindDN
}

// GetMaximumConcurrentConnectionsPerBindDNOk returns a tuple with the MaximumConcurrentConnectionsPerBindDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentConnectionsPerBindDNOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumConcurrentConnectionsPerBindDN) {
		return nil, false
	}
	return o.MaximumConcurrentConnectionsPerBindDN, true
}

// HasMaximumConcurrentConnectionsPerBindDN returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumConcurrentConnectionsPerBindDN() bool {
	if o != nil && !isNil(o.MaximumConcurrentConnectionsPerBindDN) {
		return true
	}

	return false
}

// SetMaximumConcurrentConnectionsPerBindDN gets a reference to the given int32 and assigns it to the MaximumConcurrentConnectionsPerBindDN field.
func (o *GlobalConfigurationResponse) SetMaximumConcurrentConnectionsPerBindDN(v int32) {
	o.MaximumConcurrentConnectionsPerBindDN = &v
}

// GetMaximumConcurrentUnindexedSearches returns the MaximumConcurrentUnindexedSearches field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentUnindexedSearches() int32 {
	if o == nil || isNil(o.MaximumConcurrentUnindexedSearches) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentUnindexedSearches
}

// GetMaximumConcurrentUnindexedSearchesOk returns a tuple with the MaximumConcurrentUnindexedSearches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumConcurrentUnindexedSearchesOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumConcurrentUnindexedSearches) {
		return nil, false
	}
	return o.MaximumConcurrentUnindexedSearches, true
}

// HasMaximumConcurrentUnindexedSearches returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumConcurrentUnindexedSearches() bool {
	if o != nil && !isNil(o.MaximumConcurrentUnindexedSearches) {
		return true
	}

	return false
}

// SetMaximumConcurrentUnindexedSearches gets a reference to the given int32 and assigns it to the MaximumConcurrentUnindexedSearches field.
func (o *GlobalConfigurationResponse) SetMaximumConcurrentUnindexedSearches(v int32) {
	o.MaximumConcurrentUnindexedSearches = &v
}

// GetMaximumAttributesPerAddRequest returns the MaximumAttributesPerAddRequest field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumAttributesPerAddRequest() int32 {
	if o == nil || isNil(o.MaximumAttributesPerAddRequest) {
		var ret int32
		return ret
	}
	return *o.MaximumAttributesPerAddRequest
}

// GetMaximumAttributesPerAddRequestOk returns a tuple with the MaximumAttributesPerAddRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumAttributesPerAddRequestOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumAttributesPerAddRequest) {
		return nil, false
	}
	return o.MaximumAttributesPerAddRequest, true
}

// HasMaximumAttributesPerAddRequest returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumAttributesPerAddRequest() bool {
	if o != nil && !isNil(o.MaximumAttributesPerAddRequest) {
		return true
	}

	return false
}

// SetMaximumAttributesPerAddRequest gets a reference to the given int32 and assigns it to the MaximumAttributesPerAddRequest field.
func (o *GlobalConfigurationResponse) SetMaximumAttributesPerAddRequest(v int32) {
	o.MaximumAttributesPerAddRequest = &v
}

// GetMaximumModificationsPerModifyRequest returns the MaximumModificationsPerModifyRequest field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumModificationsPerModifyRequest() int32 {
	if o == nil || isNil(o.MaximumModificationsPerModifyRequest) {
		var ret int32
		return ret
	}
	return *o.MaximumModificationsPerModifyRequest
}

// GetMaximumModificationsPerModifyRequestOk returns a tuple with the MaximumModificationsPerModifyRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumModificationsPerModifyRequestOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumModificationsPerModifyRequest) {
		return nil, false
	}
	return o.MaximumModificationsPerModifyRequest, true
}

// HasMaximumModificationsPerModifyRequest returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumModificationsPerModifyRequest() bool {
	if o != nil && !isNil(o.MaximumModificationsPerModifyRequest) {
		return true
	}

	return false
}

// SetMaximumModificationsPerModifyRequest gets a reference to the given int32 and assigns it to the MaximumModificationsPerModifyRequest field.
func (o *GlobalConfigurationResponse) SetMaximumModificationsPerModifyRequest(v int32) {
	o.MaximumModificationsPerModifyRequest = &v
}

// GetBackgroundThreadForEachPersistentSearch returns the BackgroundThreadForEachPersistentSearch field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetBackgroundThreadForEachPersistentSearch() bool {
	if o == nil || isNil(o.BackgroundThreadForEachPersistentSearch) {
		var ret bool
		return ret
	}
	return *o.BackgroundThreadForEachPersistentSearch
}

// GetBackgroundThreadForEachPersistentSearchOk returns a tuple with the BackgroundThreadForEachPersistentSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetBackgroundThreadForEachPersistentSearchOk() (*bool, bool) {
	if o == nil || isNil(o.BackgroundThreadForEachPersistentSearch) {
		return nil, false
	}
	return o.BackgroundThreadForEachPersistentSearch, true
}

// HasBackgroundThreadForEachPersistentSearch returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasBackgroundThreadForEachPersistentSearch() bool {
	if o != nil && !isNil(o.BackgroundThreadForEachPersistentSearch) {
		return true
	}

	return false
}

// SetBackgroundThreadForEachPersistentSearch gets a reference to the given bool and assigns it to the BackgroundThreadForEachPersistentSearch field.
func (o *GlobalConfigurationResponse) SetBackgroundThreadForEachPersistentSearch(v bool) {
	o.BackgroundThreadForEachPersistentSearch = &v
}

// GetAllowAttributeNameExceptions returns the AllowAttributeNameExceptions field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAllowAttributeNameExceptions() bool {
	if o == nil || isNil(o.AllowAttributeNameExceptions) {
		var ret bool
		return ret
	}
	return *o.AllowAttributeNameExceptions
}

// GetAllowAttributeNameExceptionsOk returns a tuple with the AllowAttributeNameExceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowAttributeNameExceptionsOk() (*bool, bool) {
	if o == nil || isNil(o.AllowAttributeNameExceptions) {
		return nil, false
	}
	return o.AllowAttributeNameExceptions, true
}

// HasAllowAttributeNameExceptions returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAllowAttributeNameExceptions() bool {
	if o != nil && !isNil(o.AllowAttributeNameExceptions) {
		return true
	}

	return false
}

// SetAllowAttributeNameExceptions gets a reference to the given bool and assigns it to the AllowAttributeNameExceptions field.
func (o *GlobalConfigurationResponse) SetAllowAttributeNameExceptions(v bool) {
	o.AllowAttributeNameExceptions = &v
}

// GetInvalidAttributeSyntaxBehavior returns the InvalidAttributeSyntaxBehavior field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetInvalidAttributeSyntaxBehavior() EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp {
	if o == nil || isNil(o.InvalidAttributeSyntaxBehavior) {
		var ret EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp
		return ret
	}
	return *o.InvalidAttributeSyntaxBehavior
}

// GetInvalidAttributeSyntaxBehaviorOk returns a tuple with the InvalidAttributeSyntaxBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetInvalidAttributeSyntaxBehaviorOk() (*EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp, bool) {
	if o == nil || isNil(o.InvalidAttributeSyntaxBehavior) {
		return nil, false
	}
	return o.InvalidAttributeSyntaxBehavior, true
}

// HasInvalidAttributeSyntaxBehavior returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasInvalidAttributeSyntaxBehavior() bool {
	if o != nil && !isNil(o.InvalidAttributeSyntaxBehavior) {
		return true
	}

	return false
}

// SetInvalidAttributeSyntaxBehavior gets a reference to the given EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp and assigns it to the InvalidAttributeSyntaxBehavior field.
func (o *GlobalConfigurationResponse) SetInvalidAttributeSyntaxBehavior(v EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp) {
	o.InvalidAttributeSyntaxBehavior = &v
}

// GetPermitSyntaxViolationsForAttribute returns the PermitSyntaxViolationsForAttribute field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetPermitSyntaxViolationsForAttribute() []string {
	if o == nil || isNil(o.PermitSyntaxViolationsForAttribute) {
		var ret []string
		return ret
	}
	return o.PermitSyntaxViolationsForAttribute
}

// GetPermitSyntaxViolationsForAttributeOk returns a tuple with the PermitSyntaxViolationsForAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetPermitSyntaxViolationsForAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.PermitSyntaxViolationsForAttribute) {
		return nil, false
	}
	return o.PermitSyntaxViolationsForAttribute, true
}

// HasPermitSyntaxViolationsForAttribute returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasPermitSyntaxViolationsForAttribute() bool {
	if o != nil && !isNil(o.PermitSyntaxViolationsForAttribute) {
		return true
	}

	return false
}

// SetPermitSyntaxViolationsForAttribute gets a reference to the given []string and assigns it to the PermitSyntaxViolationsForAttribute field.
func (o *GlobalConfigurationResponse) SetPermitSyntaxViolationsForAttribute(v []string) {
	o.PermitSyntaxViolationsForAttribute = v
}

// GetSingleStructuralObjectclassBehavior returns the SingleStructuralObjectclassBehavior field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSingleStructuralObjectclassBehavior() EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp {
	if o == nil || isNil(o.SingleStructuralObjectclassBehavior) {
		var ret EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp
		return ret
	}
	return *o.SingleStructuralObjectclassBehavior
}

// GetSingleStructuralObjectclassBehaviorOk returns a tuple with the SingleStructuralObjectclassBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSingleStructuralObjectclassBehaviorOk() (*EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp, bool) {
	if o == nil || isNil(o.SingleStructuralObjectclassBehavior) {
		return nil, false
	}
	return o.SingleStructuralObjectclassBehavior, true
}

// HasSingleStructuralObjectclassBehavior returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSingleStructuralObjectclassBehavior() bool {
	if o != nil && !isNil(o.SingleStructuralObjectclassBehavior) {
		return true
	}

	return false
}

// SetSingleStructuralObjectclassBehavior gets a reference to the given EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp and assigns it to the SingleStructuralObjectclassBehavior field.
func (o *GlobalConfigurationResponse) SetSingleStructuralObjectclassBehavior(v EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp) {
	o.SingleStructuralObjectclassBehavior = &v
}

// GetAttributesModifiableWithIgnoreNoUserModificationRequestControl returns the AttributesModifiableWithIgnoreNoUserModificationRequestControl field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAttributesModifiableWithIgnoreNoUserModificationRequestControl() []EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp {
	if o == nil || isNil(o.AttributesModifiableWithIgnoreNoUserModificationRequestControl) {
		var ret []EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp
		return ret
	}
	return o.AttributesModifiableWithIgnoreNoUserModificationRequestControl
}

// GetAttributesModifiableWithIgnoreNoUserModificationRequestControlOk returns a tuple with the AttributesModifiableWithIgnoreNoUserModificationRequestControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAttributesModifiableWithIgnoreNoUserModificationRequestControlOk() ([]EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp, bool) {
	if o == nil || isNil(o.AttributesModifiableWithIgnoreNoUserModificationRequestControl) {
		return nil, false
	}
	return o.AttributesModifiableWithIgnoreNoUserModificationRequestControl, true
}

// HasAttributesModifiableWithIgnoreNoUserModificationRequestControl returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAttributesModifiableWithIgnoreNoUserModificationRequestControl() bool {
	if o != nil && !isNil(o.AttributesModifiableWithIgnoreNoUserModificationRequestControl) {
		return true
	}

	return false
}

// SetAttributesModifiableWithIgnoreNoUserModificationRequestControl gets a reference to the given []EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp and assigns it to the AttributesModifiableWithIgnoreNoUserModificationRequestControl field.
func (o *GlobalConfigurationResponse) SetAttributesModifiableWithIgnoreNoUserModificationRequestControl(v []EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp) {
	o.AttributesModifiableWithIgnoreNoUserModificationRequestControl = v
}

// GetMaximumServerOutLogFileSize returns the MaximumServerOutLogFileSize field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumServerOutLogFileSize() string {
	if o == nil || isNil(o.MaximumServerOutLogFileSize) {
		var ret string
		return ret
	}
	return *o.MaximumServerOutLogFileSize
}

// GetMaximumServerOutLogFileSizeOk returns a tuple with the MaximumServerOutLogFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumServerOutLogFileSizeOk() (*string, bool) {
	if o == nil || isNil(o.MaximumServerOutLogFileSize) {
		return nil, false
	}
	return o.MaximumServerOutLogFileSize, true
}

// HasMaximumServerOutLogFileSize returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumServerOutLogFileSize() bool {
	if o != nil && !isNil(o.MaximumServerOutLogFileSize) {
		return true
	}

	return false
}

// SetMaximumServerOutLogFileSize gets a reference to the given string and assigns it to the MaximumServerOutLogFileSize field.
func (o *GlobalConfigurationResponse) SetMaximumServerOutLogFileSize(v string) {
	o.MaximumServerOutLogFileSize = &v
}

// GetMaximumServerOutLogFileCount returns the MaximumServerOutLogFileCount field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumServerOutLogFileCount() int32 {
	if o == nil || isNil(o.MaximumServerOutLogFileCount) {
		var ret int32
		return ret
	}
	return *o.MaximumServerOutLogFileCount
}

// GetMaximumServerOutLogFileCountOk returns a tuple with the MaximumServerOutLogFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumServerOutLogFileCountOk() (*int32, bool) {
	if o == nil || isNil(o.MaximumServerOutLogFileCount) {
		return nil, false
	}
	return o.MaximumServerOutLogFileCount, true
}

// HasMaximumServerOutLogFileCount returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumServerOutLogFileCount() bool {
	if o != nil && !isNil(o.MaximumServerOutLogFileCount) {
		return true
	}

	return false
}

// SetMaximumServerOutLogFileCount gets a reference to the given int32 and assigns it to the MaximumServerOutLogFileCount field.
func (o *GlobalConfigurationResponse) SetMaximumServerOutLogFileCount(v int32) {
	o.MaximumServerOutLogFileCount = &v
}

// GetStartupErrorLoggerOutputLocation returns the StartupErrorLoggerOutputLocation field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetStartupErrorLoggerOutputLocation() EnumglobalConfigurationStartupErrorLoggerOutputLocationProp {
	if o == nil || isNil(o.StartupErrorLoggerOutputLocation) {
		var ret EnumglobalConfigurationStartupErrorLoggerOutputLocationProp
		return ret
	}
	return *o.StartupErrorLoggerOutputLocation
}

// GetStartupErrorLoggerOutputLocationOk returns a tuple with the StartupErrorLoggerOutputLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetStartupErrorLoggerOutputLocationOk() (*EnumglobalConfigurationStartupErrorLoggerOutputLocationProp, bool) {
	if o == nil || isNil(o.StartupErrorLoggerOutputLocation) {
		return nil, false
	}
	return o.StartupErrorLoggerOutputLocation, true
}

// HasStartupErrorLoggerOutputLocation returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasStartupErrorLoggerOutputLocation() bool {
	if o != nil && !isNil(o.StartupErrorLoggerOutputLocation) {
		return true
	}

	return false
}

// SetStartupErrorLoggerOutputLocation gets a reference to the given EnumglobalConfigurationStartupErrorLoggerOutputLocationProp and assigns it to the StartupErrorLoggerOutputLocation field.
func (o *GlobalConfigurationResponse) SetStartupErrorLoggerOutputLocation(v EnumglobalConfigurationStartupErrorLoggerOutputLocationProp) {
	o.StartupErrorLoggerOutputLocation = &v
}

// GetExitOnJVMError returns the ExitOnJVMError field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetExitOnJVMError() bool {
	if o == nil || isNil(o.ExitOnJVMError) {
		var ret bool
		return ret
	}
	return *o.ExitOnJVMError
}

// GetExitOnJVMErrorOk returns a tuple with the ExitOnJVMError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetExitOnJVMErrorOk() (*bool, bool) {
	if o == nil || isNil(o.ExitOnJVMError) {
		return nil, false
	}
	return o.ExitOnJVMError, true
}

// HasExitOnJVMError returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasExitOnJVMError() bool {
	if o != nil && !isNil(o.ExitOnJVMError) {
		return true
	}

	return false
}

// SetExitOnJVMError gets a reference to the given bool and assigns it to the ExitOnJVMError field.
func (o *GlobalConfigurationResponse) SetExitOnJVMError(v bool) {
	o.ExitOnJVMError = &v
}

// GetServerErrorResultCode returns the ServerErrorResultCode field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetServerErrorResultCode() int32 {
	if o == nil || isNil(o.ServerErrorResultCode) {
		var ret int32
		return ret
	}
	return *o.ServerErrorResultCode
}

// GetServerErrorResultCodeOk returns a tuple with the ServerErrorResultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetServerErrorResultCodeOk() (*int32, bool) {
	if o == nil || isNil(o.ServerErrorResultCode) {
		return nil, false
	}
	return o.ServerErrorResultCode, true
}

// HasServerErrorResultCode returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasServerErrorResultCode() bool {
	if o != nil && !isNil(o.ServerErrorResultCode) {
		return true
	}

	return false
}

// SetServerErrorResultCode gets a reference to the given int32 and assigns it to the ServerErrorResultCode field.
func (o *GlobalConfigurationResponse) SetServerErrorResultCode(v int32) {
	o.ServerErrorResultCode = &v
}

// GetResultCodeMap returns the ResultCodeMap field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetResultCodeMap() string {
	if o == nil || isNil(o.ResultCodeMap) {
		var ret string
		return ret
	}
	return *o.ResultCodeMap
}

// GetResultCodeMapOk returns a tuple with the ResultCodeMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetResultCodeMapOk() (*string, bool) {
	if o == nil || isNil(o.ResultCodeMap) {
		return nil, false
	}
	return o.ResultCodeMap, true
}

// HasResultCodeMap returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasResultCodeMap() bool {
	if o != nil && !isNil(o.ResultCodeMap) {
		return true
	}

	return false
}

// SetResultCodeMap gets a reference to the given string and assigns it to the ResultCodeMap field.
func (o *GlobalConfigurationResponse) SetResultCodeMap(v string) {
	o.ResultCodeMap = &v
}

// GetReturnBindErrorMessages returns the ReturnBindErrorMessages field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetReturnBindErrorMessages() bool {
	if o == nil || isNil(o.ReturnBindErrorMessages) {
		var ret bool
		return ret
	}
	return *o.ReturnBindErrorMessages
}

// GetReturnBindErrorMessagesOk returns a tuple with the ReturnBindErrorMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReturnBindErrorMessagesOk() (*bool, bool) {
	if o == nil || isNil(o.ReturnBindErrorMessages) {
		return nil, false
	}
	return o.ReturnBindErrorMessages, true
}

// HasReturnBindErrorMessages returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasReturnBindErrorMessages() bool {
	if o != nil && !isNil(o.ReturnBindErrorMessages) {
		return true
	}

	return false
}

// SetReturnBindErrorMessages gets a reference to the given bool and assigns it to the ReturnBindErrorMessages field.
func (o *GlobalConfigurationResponse) SetReturnBindErrorMessages(v bool) {
	o.ReturnBindErrorMessages = &v
}

// GetNotifyAbandonedOperations returns the NotifyAbandonedOperations field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetNotifyAbandonedOperations() bool {
	if o == nil || isNil(o.NotifyAbandonedOperations) {
		var ret bool
		return ret
	}
	return *o.NotifyAbandonedOperations
}

// GetNotifyAbandonedOperationsOk returns a tuple with the NotifyAbandonedOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetNotifyAbandonedOperationsOk() (*bool, bool) {
	if o == nil || isNil(o.NotifyAbandonedOperations) {
		return nil, false
	}
	return o.NotifyAbandonedOperations, true
}

// HasNotifyAbandonedOperations returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasNotifyAbandonedOperations() bool {
	if o != nil && !isNil(o.NotifyAbandonedOperations) {
		return true
	}

	return false
}

// SetNotifyAbandonedOperations gets a reference to the given bool and assigns it to the NotifyAbandonedOperations field.
func (o *GlobalConfigurationResponse) SetNotifyAbandonedOperations(v bool) {
	o.NotifyAbandonedOperations = &v
}

// GetDuplicateErrorLogLimit returns the DuplicateErrorLogLimit field value
func (o *GlobalConfigurationResponse) GetDuplicateErrorLogLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DuplicateErrorLogLimit
}

// GetDuplicateErrorLogLimitOk returns a tuple with the DuplicateErrorLogLimit field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDuplicateErrorLogLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuplicateErrorLogLimit, true
}

// SetDuplicateErrorLogLimit sets field value
func (o *GlobalConfigurationResponse) SetDuplicateErrorLogLimit(v int32) {
	o.DuplicateErrorLogLimit = v
}

// GetDuplicateErrorLogTimeLimit returns the DuplicateErrorLogTimeLimit field value
func (o *GlobalConfigurationResponse) GetDuplicateErrorLogTimeLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DuplicateErrorLogTimeLimit
}

// GetDuplicateErrorLogTimeLimitOk returns a tuple with the DuplicateErrorLogTimeLimit field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDuplicateErrorLogTimeLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuplicateErrorLogTimeLimit, true
}

// SetDuplicateErrorLogTimeLimit sets field value
func (o *GlobalConfigurationResponse) SetDuplicateErrorLogTimeLimit(v string) {
	o.DuplicateErrorLogTimeLimit = v
}

// GetDuplicateAlertLimit returns the DuplicateAlertLimit field value
func (o *GlobalConfigurationResponse) GetDuplicateAlertLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DuplicateAlertLimit
}

// GetDuplicateAlertLimitOk returns a tuple with the DuplicateAlertLimit field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDuplicateAlertLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuplicateAlertLimit, true
}

// SetDuplicateAlertLimit sets field value
func (o *GlobalConfigurationResponse) SetDuplicateAlertLimit(v int32) {
	o.DuplicateAlertLimit = v
}

// GetDuplicateAlertTimeLimit returns the DuplicateAlertTimeLimit field value
func (o *GlobalConfigurationResponse) GetDuplicateAlertTimeLimit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DuplicateAlertTimeLimit
}

// GetDuplicateAlertTimeLimitOk returns a tuple with the DuplicateAlertTimeLimit field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDuplicateAlertTimeLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DuplicateAlertTimeLimit, true
}

// SetDuplicateAlertTimeLimit sets field value
func (o *GlobalConfigurationResponse) SetDuplicateAlertTimeLimit(v string) {
	o.DuplicateAlertTimeLimit = v
}

// GetWritabilityMode returns the WritabilityMode field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetWritabilityMode() EnumglobalConfigurationWritabilityModeProp {
	if o == nil || isNil(o.WritabilityMode) {
		var ret EnumglobalConfigurationWritabilityModeProp
		return ret
	}
	return *o.WritabilityMode
}

// GetWritabilityModeOk returns a tuple with the WritabilityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetWritabilityModeOk() (*EnumglobalConfigurationWritabilityModeProp, bool) {
	if o == nil || isNil(o.WritabilityMode) {
		return nil, false
	}
	return o.WritabilityMode, true
}

// HasWritabilityMode returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasWritabilityMode() bool {
	if o != nil && !isNil(o.WritabilityMode) {
		return true
	}

	return false
}

// SetWritabilityMode gets a reference to the given EnumglobalConfigurationWritabilityModeProp and assigns it to the WritabilityMode field.
func (o *GlobalConfigurationResponse) SetWritabilityMode(v EnumglobalConfigurationWritabilityModeProp) {
	o.WritabilityMode = &v
}

// GetUnrecoverableDatabaseErrorMode returns the UnrecoverableDatabaseErrorMode field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetUnrecoverableDatabaseErrorMode() EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp {
	if o == nil || isNil(o.UnrecoverableDatabaseErrorMode) {
		var ret EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp
		return ret
	}
	return *o.UnrecoverableDatabaseErrorMode
}

// GetUnrecoverableDatabaseErrorModeOk returns a tuple with the UnrecoverableDatabaseErrorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetUnrecoverableDatabaseErrorModeOk() (*EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp, bool) {
	if o == nil || isNil(o.UnrecoverableDatabaseErrorMode) {
		return nil, false
	}
	return o.UnrecoverableDatabaseErrorMode, true
}

// HasUnrecoverableDatabaseErrorMode returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasUnrecoverableDatabaseErrorMode() bool {
	if o != nil && !isNil(o.UnrecoverableDatabaseErrorMode) {
		return true
	}

	return false
}

// SetUnrecoverableDatabaseErrorMode gets a reference to the given EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp and assigns it to the UnrecoverableDatabaseErrorMode field.
func (o *GlobalConfigurationResponse) SetUnrecoverableDatabaseErrorMode(v EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp) {
	o.UnrecoverableDatabaseErrorMode = &v
}

// GetDatabaseOnVirtualizedOrNetworkStorage returns the DatabaseOnVirtualizedOrNetworkStorage field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetDatabaseOnVirtualizedOrNetworkStorage() bool {
	if o == nil || isNil(o.DatabaseOnVirtualizedOrNetworkStorage) {
		var ret bool
		return ret
	}
	return *o.DatabaseOnVirtualizedOrNetworkStorage
}

// GetDatabaseOnVirtualizedOrNetworkStorageOk returns a tuple with the DatabaseOnVirtualizedOrNetworkStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetDatabaseOnVirtualizedOrNetworkStorageOk() (*bool, bool) {
	if o == nil || isNil(o.DatabaseOnVirtualizedOrNetworkStorage) {
		return nil, false
	}
	return o.DatabaseOnVirtualizedOrNetworkStorage, true
}

// HasDatabaseOnVirtualizedOrNetworkStorage returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasDatabaseOnVirtualizedOrNetworkStorage() bool {
	if o != nil && !isNil(o.DatabaseOnVirtualizedOrNetworkStorage) {
		return true
	}

	return false
}

// SetDatabaseOnVirtualizedOrNetworkStorage gets a reference to the given bool and assigns it to the DatabaseOnVirtualizedOrNetworkStorage field.
func (o *GlobalConfigurationResponse) SetDatabaseOnVirtualizedOrNetworkStorage(v bool) {
	o.DatabaseOnVirtualizedOrNetworkStorage = &v
}

// GetAutoNameWithEntryUUIDConnectionCriteria returns the AutoNameWithEntryUUIDConnectionCriteria field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAutoNameWithEntryUUIDConnectionCriteria() string {
	if o == nil || isNil(o.AutoNameWithEntryUUIDConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.AutoNameWithEntryUUIDConnectionCriteria
}

// GetAutoNameWithEntryUUIDConnectionCriteriaOk returns a tuple with the AutoNameWithEntryUUIDConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAutoNameWithEntryUUIDConnectionCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.AutoNameWithEntryUUIDConnectionCriteria) {
		return nil, false
	}
	return o.AutoNameWithEntryUUIDConnectionCriteria, true
}

// HasAutoNameWithEntryUUIDConnectionCriteria returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAutoNameWithEntryUUIDConnectionCriteria() bool {
	if o != nil && !isNil(o.AutoNameWithEntryUUIDConnectionCriteria) {
		return true
	}

	return false
}

// SetAutoNameWithEntryUUIDConnectionCriteria gets a reference to the given string and assigns it to the AutoNameWithEntryUUIDConnectionCriteria field.
func (o *GlobalConfigurationResponse) SetAutoNameWithEntryUUIDConnectionCriteria(v string) {
	o.AutoNameWithEntryUUIDConnectionCriteria = &v
}

// GetAutoNameWithEntryUUIDRequestCriteria returns the AutoNameWithEntryUUIDRequestCriteria field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAutoNameWithEntryUUIDRequestCriteria() string {
	if o == nil || isNil(o.AutoNameWithEntryUUIDRequestCriteria) {
		var ret string
		return ret
	}
	return *o.AutoNameWithEntryUUIDRequestCriteria
}

// GetAutoNameWithEntryUUIDRequestCriteriaOk returns a tuple with the AutoNameWithEntryUUIDRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAutoNameWithEntryUUIDRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.AutoNameWithEntryUUIDRequestCriteria) {
		return nil, false
	}
	return o.AutoNameWithEntryUUIDRequestCriteria, true
}

// HasAutoNameWithEntryUUIDRequestCriteria returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAutoNameWithEntryUUIDRequestCriteria() bool {
	if o != nil && !isNil(o.AutoNameWithEntryUUIDRequestCriteria) {
		return true
	}

	return false
}

// SetAutoNameWithEntryUUIDRequestCriteria gets a reference to the given string and assigns it to the AutoNameWithEntryUUIDRequestCriteria field.
func (o *GlobalConfigurationResponse) SetAutoNameWithEntryUUIDRequestCriteria(v string) {
	o.AutoNameWithEntryUUIDRequestCriteria = &v
}

// GetSoftDeletePolicy returns the SoftDeletePolicy field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSoftDeletePolicy() string {
	if o == nil || isNil(o.SoftDeletePolicy) {
		var ret string
		return ret
	}
	return *o.SoftDeletePolicy
}

// GetSoftDeletePolicyOk returns a tuple with the SoftDeletePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSoftDeletePolicyOk() (*string, bool) {
	if o == nil || isNil(o.SoftDeletePolicy) {
		return nil, false
	}
	return o.SoftDeletePolicy, true
}

// HasSoftDeletePolicy returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSoftDeletePolicy() bool {
	if o != nil && !isNil(o.SoftDeletePolicy) {
		return true
	}

	return false
}

// SetSoftDeletePolicy gets a reference to the given string and assigns it to the SoftDeletePolicy field.
func (o *GlobalConfigurationResponse) SetSoftDeletePolicy(v string) {
	o.SoftDeletePolicy = &v
}

// GetSubtreeAccessibilityAlertTimeLimit returns the SubtreeAccessibilityAlertTimeLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSubtreeAccessibilityAlertTimeLimit() string {
	if o == nil || isNil(o.SubtreeAccessibilityAlertTimeLimit) {
		var ret string
		return ret
	}
	return *o.SubtreeAccessibilityAlertTimeLimit
}

// GetSubtreeAccessibilityAlertTimeLimitOk returns a tuple with the SubtreeAccessibilityAlertTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSubtreeAccessibilityAlertTimeLimitOk() (*string, bool) {
	if o == nil || isNil(o.SubtreeAccessibilityAlertTimeLimit) {
		return nil, false
	}
	return o.SubtreeAccessibilityAlertTimeLimit, true
}

// HasSubtreeAccessibilityAlertTimeLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSubtreeAccessibilityAlertTimeLimit() bool {
	if o != nil && !isNil(o.SubtreeAccessibilityAlertTimeLimit) {
		return true
	}

	return false
}

// SetSubtreeAccessibilityAlertTimeLimit gets a reference to the given string and assigns it to the SubtreeAccessibilityAlertTimeLimit field.
func (o *GlobalConfigurationResponse) SetSubtreeAccessibilityAlertTimeLimit(v string) {
	o.SubtreeAccessibilityAlertTimeLimit = &v
}

// GetWarnForBackendsWithMultipleBaseDns returns the WarnForBackendsWithMultipleBaseDns field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetWarnForBackendsWithMultipleBaseDns() bool {
	if o == nil || isNil(o.WarnForBackendsWithMultipleBaseDns) {
		var ret bool
		return ret
	}
	return *o.WarnForBackendsWithMultipleBaseDns
}

// GetWarnForBackendsWithMultipleBaseDnsOk returns a tuple with the WarnForBackendsWithMultipleBaseDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetWarnForBackendsWithMultipleBaseDnsOk() (*bool, bool) {
	if o == nil || isNil(o.WarnForBackendsWithMultipleBaseDns) {
		return nil, false
	}
	return o.WarnForBackendsWithMultipleBaseDns, true
}

// HasWarnForBackendsWithMultipleBaseDns returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasWarnForBackendsWithMultipleBaseDns() bool {
	if o != nil && !isNil(o.WarnForBackendsWithMultipleBaseDns) {
		return true
	}

	return false
}

// SetWarnForBackendsWithMultipleBaseDns gets a reference to the given bool and assigns it to the WarnForBackendsWithMultipleBaseDns field.
func (o *GlobalConfigurationResponse) SetWarnForBackendsWithMultipleBaseDns(v bool) {
	o.WarnForBackendsWithMultipleBaseDns = &v
}

// GetForcedGCPrimeDuration returns the ForcedGCPrimeDuration field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetForcedGCPrimeDuration() string {
	if o == nil || isNil(o.ForcedGCPrimeDuration) {
		var ret string
		return ret
	}
	return *o.ForcedGCPrimeDuration
}

// GetForcedGCPrimeDurationOk returns a tuple with the ForcedGCPrimeDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetForcedGCPrimeDurationOk() (*string, bool) {
	if o == nil || isNil(o.ForcedGCPrimeDuration) {
		return nil, false
	}
	return o.ForcedGCPrimeDuration, true
}

// HasForcedGCPrimeDuration returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasForcedGCPrimeDuration() bool {
	if o != nil && !isNil(o.ForcedGCPrimeDuration) {
		return true
	}

	return false
}

// SetForcedGCPrimeDuration gets a reference to the given string and assigns it to the ForcedGCPrimeDuration field.
func (o *GlobalConfigurationResponse) SetForcedGCPrimeDuration(v string) {
	o.ForcedGCPrimeDuration = &v
}

// GetReplicationSetName returns the ReplicationSetName field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetReplicationSetName() string {
	if o == nil || isNil(o.ReplicationSetName) {
		var ret string
		return ret
	}
	return *o.ReplicationSetName
}

// GetReplicationSetNameOk returns a tuple with the ReplicationSetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationSetNameOk() (*string, bool) {
	if o == nil || isNil(o.ReplicationSetName) {
		return nil, false
	}
	return o.ReplicationSetName, true
}

// HasReplicationSetName returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasReplicationSetName() bool {
	if o != nil && !isNil(o.ReplicationSetName) {
		return true
	}

	return false
}

// SetReplicationSetName gets a reference to the given string and assigns it to the ReplicationSetName field.
func (o *GlobalConfigurationResponse) SetReplicationSetName(v string) {
	o.ReplicationSetName = &v
}

// GetStartupMinReplicationBacklogCount returns the StartupMinReplicationBacklogCount field value
func (o *GlobalConfigurationResponse) GetStartupMinReplicationBacklogCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartupMinReplicationBacklogCount
}

// GetStartupMinReplicationBacklogCountOk returns a tuple with the StartupMinReplicationBacklogCount field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetStartupMinReplicationBacklogCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartupMinReplicationBacklogCount, true
}

// SetStartupMinReplicationBacklogCount sets field value
func (o *GlobalConfigurationResponse) SetStartupMinReplicationBacklogCount(v int32) {
	o.StartupMinReplicationBacklogCount = v
}

// GetReplicationBacklogCountAlertThreshold returns the ReplicationBacklogCountAlertThreshold field value
func (o *GlobalConfigurationResponse) GetReplicationBacklogCountAlertThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReplicationBacklogCountAlertThreshold
}

// GetReplicationBacklogCountAlertThresholdOk returns a tuple with the ReplicationBacklogCountAlertThreshold field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationBacklogCountAlertThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationBacklogCountAlertThreshold, true
}

// SetReplicationBacklogCountAlertThreshold sets field value
func (o *GlobalConfigurationResponse) SetReplicationBacklogCountAlertThreshold(v int32) {
	o.ReplicationBacklogCountAlertThreshold = v
}

// GetReplicationBacklogDurationAlertThreshold returns the ReplicationBacklogDurationAlertThreshold field value
func (o *GlobalConfigurationResponse) GetReplicationBacklogDurationAlertThreshold() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplicationBacklogDurationAlertThreshold
}

// GetReplicationBacklogDurationAlertThresholdOk returns a tuple with the ReplicationBacklogDurationAlertThreshold field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationBacklogDurationAlertThresholdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationBacklogDurationAlertThreshold, true
}

// SetReplicationBacklogDurationAlertThreshold sets field value
func (o *GlobalConfigurationResponse) SetReplicationBacklogDurationAlertThreshold(v string) {
	o.ReplicationBacklogDurationAlertThreshold = v
}

// GetReplicationAssuranceSourceTimeoutSuspendDuration returns the ReplicationAssuranceSourceTimeoutSuspendDuration field value
func (o *GlobalConfigurationResponse) GetReplicationAssuranceSourceTimeoutSuspendDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplicationAssuranceSourceTimeoutSuspendDuration
}

// GetReplicationAssuranceSourceTimeoutSuspendDurationOk returns a tuple with the ReplicationAssuranceSourceTimeoutSuspendDuration field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationAssuranceSourceTimeoutSuspendDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationAssuranceSourceTimeoutSuspendDuration, true
}

// SetReplicationAssuranceSourceTimeoutSuspendDuration sets field value
func (o *GlobalConfigurationResponse) SetReplicationAssuranceSourceTimeoutSuspendDuration(v string) {
	o.ReplicationAssuranceSourceTimeoutSuspendDuration = v
}

// GetReplicationAssuranceSourceBacklogFastStartThreshold returns the ReplicationAssuranceSourceBacklogFastStartThreshold field value
func (o *GlobalConfigurationResponse) GetReplicationAssuranceSourceBacklogFastStartThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReplicationAssuranceSourceBacklogFastStartThreshold
}

// GetReplicationAssuranceSourceBacklogFastStartThresholdOk returns a tuple with the ReplicationAssuranceSourceBacklogFastStartThreshold field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationAssuranceSourceBacklogFastStartThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationAssuranceSourceBacklogFastStartThreshold, true
}

// SetReplicationAssuranceSourceBacklogFastStartThreshold sets field value
func (o *GlobalConfigurationResponse) SetReplicationAssuranceSourceBacklogFastStartThreshold(v int32) {
	o.ReplicationAssuranceSourceBacklogFastStartThreshold = v
}

// GetReplicationHistoryLimit returns the ReplicationHistoryLimit field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetReplicationHistoryLimit() int32 {
	if o == nil || isNil(o.ReplicationHistoryLimit) {
		var ret int32
		return ret
	}
	return *o.ReplicationHistoryLimit
}

// GetReplicationHistoryLimitOk returns a tuple with the ReplicationHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationHistoryLimitOk() (*int32, bool) {
	if o == nil || isNil(o.ReplicationHistoryLimit) {
		return nil, false
	}
	return o.ReplicationHistoryLimit, true
}

// HasReplicationHistoryLimit returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasReplicationHistoryLimit() bool {
	if o != nil && !isNil(o.ReplicationHistoryLimit) {
		return true
	}

	return false
}

// SetReplicationHistoryLimit gets a reference to the given int32 and assigns it to the ReplicationHistoryLimit field.
func (o *GlobalConfigurationResponse) SetReplicationHistoryLimit(v int32) {
	o.ReplicationHistoryLimit = &v
}

// GetAllowInheritedReplicationOfSubordinateBackends returns the AllowInheritedReplicationOfSubordinateBackends field value
func (o *GlobalConfigurationResponse) GetAllowInheritedReplicationOfSubordinateBackends() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowInheritedReplicationOfSubordinateBackends
}

// GetAllowInheritedReplicationOfSubordinateBackendsOk returns a tuple with the AllowInheritedReplicationOfSubordinateBackends field value
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowInheritedReplicationOfSubordinateBackendsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowInheritedReplicationOfSubordinateBackends, true
}

// SetAllowInheritedReplicationOfSubordinateBackends sets field value
func (o *GlobalConfigurationResponse) SetAllowInheritedReplicationOfSubordinateBackends(v bool) {
	o.AllowInheritedReplicationOfSubordinateBackends = v
}

// GetReplicationPurgeObsoleteReplicas returns the ReplicationPurgeObsoleteReplicas field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetReplicationPurgeObsoleteReplicas() bool {
	if o == nil || isNil(o.ReplicationPurgeObsoleteReplicas) {
		var ret bool
		return ret
	}
	return *o.ReplicationPurgeObsoleteReplicas
}

// GetReplicationPurgeObsoleteReplicasOk returns a tuple with the ReplicationPurgeObsoleteReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetReplicationPurgeObsoleteReplicasOk() (*bool, bool) {
	if o == nil || isNil(o.ReplicationPurgeObsoleteReplicas) {
		return nil, false
	}
	return o.ReplicationPurgeObsoleteReplicas, true
}

// HasReplicationPurgeObsoleteReplicas returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasReplicationPurgeObsoleteReplicas() bool {
	if o != nil && !isNil(o.ReplicationPurgeObsoleteReplicas) {
		return true
	}

	return false
}

// SetReplicationPurgeObsoleteReplicas gets a reference to the given bool and assigns it to the ReplicationPurgeObsoleteReplicas field.
func (o *GlobalConfigurationResponse) SetReplicationPurgeObsoleteReplicas(v bool) {
	o.ReplicationPurgeObsoleteReplicas = &v
}

// GetSmtpServer returns the SmtpServer field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSmtpServer() []string {
	if o == nil || isNil(o.SmtpServer) {
		var ret []string
		return ret
	}
	return o.SmtpServer
}

// GetSmtpServerOk returns a tuple with the SmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSmtpServerOk() ([]string, bool) {
	if o == nil || isNil(o.SmtpServer) {
		return nil, false
	}
	return o.SmtpServer, true
}

// HasSmtpServer returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSmtpServer() bool {
	if o != nil && !isNil(o.SmtpServer) {
		return true
	}

	return false
}

// SetSmtpServer gets a reference to the given []string and assigns it to the SmtpServer field.
func (o *GlobalConfigurationResponse) SetSmtpServer(v []string) {
	o.SmtpServer = v
}

// GetMaxSMTPConnectionCount returns the MaxSMTPConnectionCount field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaxSMTPConnectionCount() int32 {
	if o == nil || isNil(o.MaxSMTPConnectionCount) {
		var ret int32
		return ret
	}
	return *o.MaxSMTPConnectionCount
}

// GetMaxSMTPConnectionCountOk returns a tuple with the MaxSMTPConnectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaxSMTPConnectionCountOk() (*int32, bool) {
	if o == nil || isNil(o.MaxSMTPConnectionCount) {
		return nil, false
	}
	return o.MaxSMTPConnectionCount, true
}

// HasMaxSMTPConnectionCount returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaxSMTPConnectionCount() bool {
	if o != nil && !isNil(o.MaxSMTPConnectionCount) {
		return true
	}

	return false
}

// SetMaxSMTPConnectionCount gets a reference to the given int32 and assigns it to the MaxSMTPConnectionCount field.
func (o *GlobalConfigurationResponse) SetMaxSMTPConnectionCount(v int32) {
	o.MaxSMTPConnectionCount = &v
}

// GetMaxSMTPConnectionAge returns the MaxSMTPConnectionAge field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaxSMTPConnectionAge() string {
	if o == nil || isNil(o.MaxSMTPConnectionAge) {
		var ret string
		return ret
	}
	return *o.MaxSMTPConnectionAge
}

// GetMaxSMTPConnectionAgeOk returns a tuple with the MaxSMTPConnectionAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaxSMTPConnectionAgeOk() (*string, bool) {
	if o == nil || isNil(o.MaxSMTPConnectionAge) {
		return nil, false
	}
	return o.MaxSMTPConnectionAge, true
}

// HasMaxSMTPConnectionAge returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaxSMTPConnectionAge() bool {
	if o != nil && !isNil(o.MaxSMTPConnectionAge) {
		return true
	}

	return false
}

// SetMaxSMTPConnectionAge gets a reference to the given string and assigns it to the MaxSMTPConnectionAge field.
func (o *GlobalConfigurationResponse) SetMaxSMTPConnectionAge(v string) {
	o.MaxSMTPConnectionAge = &v
}

// GetSmtpConnectionHealthCheckInterval returns the SmtpConnectionHealthCheckInterval field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetSmtpConnectionHealthCheckInterval() string {
	if o == nil || isNil(o.SmtpConnectionHealthCheckInterval) {
		var ret string
		return ret
	}
	return *o.SmtpConnectionHealthCheckInterval
}

// GetSmtpConnectionHealthCheckIntervalOk returns a tuple with the SmtpConnectionHealthCheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetSmtpConnectionHealthCheckIntervalOk() (*string, bool) {
	if o == nil || isNil(o.SmtpConnectionHealthCheckInterval) {
		return nil, false
	}
	return o.SmtpConnectionHealthCheckInterval, true
}

// HasSmtpConnectionHealthCheckInterval returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasSmtpConnectionHealthCheckInterval() bool {
	if o != nil && !isNil(o.SmtpConnectionHealthCheckInterval) {
		return true
	}

	return false
}

// SetSmtpConnectionHealthCheckInterval gets a reference to the given string and assigns it to the SmtpConnectionHealthCheckInterval field.
func (o *GlobalConfigurationResponse) SetSmtpConnectionHealthCheckInterval(v string) {
	o.SmtpConnectionHealthCheckInterval = &v
}

// GetAllowedTask returns the AllowedTask field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetAllowedTask() []string {
	if o == nil || isNil(o.AllowedTask) {
		var ret []string
		return ret
	}
	return o.AllowedTask
}

// GetAllowedTaskOk returns a tuple with the AllowedTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetAllowedTaskOk() ([]string, bool) {
	if o == nil || isNil(o.AllowedTask) {
		return nil, false
	}
	return o.AllowedTask, true
}

// HasAllowedTask returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasAllowedTask() bool {
	if o != nil && !isNil(o.AllowedTask) {
		return true
	}

	return false
}

// SetAllowedTask gets a reference to the given []string and assigns it to the AllowedTask field.
func (o *GlobalConfigurationResponse) SetAllowedTask(v []string) {
	o.AllowedTask = v
}

// GetEnableSubOperationTimer returns the EnableSubOperationTimer field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetEnableSubOperationTimer() bool {
	if o == nil || isNil(o.EnableSubOperationTimer) {
		var ret bool
		return ret
	}
	return *o.EnableSubOperationTimer
}

// GetEnableSubOperationTimerOk returns a tuple with the EnableSubOperationTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetEnableSubOperationTimerOk() (*bool, bool) {
	if o == nil || isNil(o.EnableSubOperationTimer) {
		return nil, false
	}
	return o.EnableSubOperationTimer, true
}

// HasEnableSubOperationTimer returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasEnableSubOperationTimer() bool {
	if o != nil && !isNil(o.EnableSubOperationTimer) {
		return true
	}

	return false
}

// SetEnableSubOperationTimer gets a reference to the given bool and assigns it to the EnableSubOperationTimer field.
func (o *GlobalConfigurationResponse) SetEnableSubOperationTimer(v bool) {
	o.EnableSubOperationTimer = &v
}

// GetMaximumShutdownTime returns the MaximumShutdownTime field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetMaximumShutdownTime() string {
	if o == nil || isNil(o.MaximumShutdownTime) {
		var ret string
		return ret
	}
	return *o.MaximumShutdownTime
}

// GetMaximumShutdownTimeOk returns a tuple with the MaximumShutdownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetMaximumShutdownTimeOk() (*string, bool) {
	if o == nil || isNil(o.MaximumShutdownTime) {
		return nil, false
	}
	return o.MaximumShutdownTime, true
}

// HasMaximumShutdownTime returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasMaximumShutdownTime() bool {
	if o != nil && !isNil(o.MaximumShutdownTime) {
		return true
	}

	return false
}

// SetMaximumShutdownTime gets a reference to the given string and assigns it to the MaximumShutdownTime field.
func (o *GlobalConfigurationResponse) SetMaximumShutdownTime(v string) {
	o.MaximumShutdownTime = &v
}

// GetNetworkAddressCacheTTL returns the NetworkAddressCacheTTL field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetNetworkAddressCacheTTL() string {
	if o == nil || isNil(o.NetworkAddressCacheTTL) {
		var ret string
		return ret
	}
	return *o.NetworkAddressCacheTTL
}

// GetNetworkAddressCacheTTLOk returns a tuple with the NetworkAddressCacheTTL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetNetworkAddressCacheTTLOk() (*string, bool) {
	if o == nil || isNil(o.NetworkAddressCacheTTL) {
		return nil, false
	}
	return o.NetworkAddressCacheTTL, true
}

// HasNetworkAddressCacheTTL returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasNetworkAddressCacheTTL() bool {
	if o != nil && !isNil(o.NetworkAddressCacheTTL) {
		return true
	}

	return false
}

// SetNetworkAddressCacheTTL gets a reference to the given string and assigns it to the NetworkAddressCacheTTL field.
func (o *GlobalConfigurationResponse) SetNetworkAddressCacheTTL(v string) {
	o.NetworkAddressCacheTTL = &v
}

// GetNetworkAddressOutageCacheEnabled returns the NetworkAddressOutageCacheEnabled field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetNetworkAddressOutageCacheEnabled() bool {
	if o == nil || isNil(o.NetworkAddressOutageCacheEnabled) {
		var ret bool
		return ret
	}
	return *o.NetworkAddressOutageCacheEnabled
}

// GetNetworkAddressOutageCacheEnabledOk returns a tuple with the NetworkAddressOutageCacheEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetNetworkAddressOutageCacheEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.NetworkAddressOutageCacheEnabled) {
		return nil, false
	}
	return o.NetworkAddressOutageCacheEnabled, true
}

// HasNetworkAddressOutageCacheEnabled returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasNetworkAddressOutageCacheEnabled() bool {
	if o != nil && !isNil(o.NetworkAddressOutageCacheEnabled) {
		return true
	}

	return false
}

// SetNetworkAddressOutageCacheEnabled gets a reference to the given bool and assigns it to the NetworkAddressOutageCacheEnabled field.
func (o *GlobalConfigurationResponse) SetNetworkAddressOutageCacheEnabled(v bool) {
	o.NetworkAddressOutageCacheEnabled = &v
}

// GetTrackedApplication returns the TrackedApplication field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetTrackedApplication() []string {
	if o == nil || isNil(o.TrackedApplication) {
		var ret []string
		return ret
	}
	return o.TrackedApplication
}

// GetTrackedApplicationOk returns a tuple with the TrackedApplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetTrackedApplicationOk() ([]string, bool) {
	if o == nil || isNil(o.TrackedApplication) {
		return nil, false
	}
	return o.TrackedApplication, true
}

// HasTrackedApplication returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasTrackedApplication() bool {
	if o != nil && !isNil(o.TrackedApplication) {
		return true
	}

	return false
}

// SetTrackedApplication gets a reference to the given []string and assigns it to the TrackedApplication field.
func (o *GlobalConfigurationResponse) SetTrackedApplication(v []string) {
	o.TrackedApplication = v
}

// GetJmxValueBehavior returns the JmxValueBehavior field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetJmxValueBehavior() EnumglobalConfigurationJmxValueBehaviorProp {
	if o == nil || isNil(o.JmxValueBehavior) {
		var ret EnumglobalConfigurationJmxValueBehaviorProp
		return ret
	}
	return *o.JmxValueBehavior
}

// GetJmxValueBehaviorOk returns a tuple with the JmxValueBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetJmxValueBehaviorOk() (*EnumglobalConfigurationJmxValueBehaviorProp, bool) {
	if o == nil || isNil(o.JmxValueBehavior) {
		return nil, false
	}
	return o.JmxValueBehavior, true
}

// HasJmxValueBehavior returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasJmxValueBehavior() bool {
	if o != nil && !isNil(o.JmxValueBehavior) {
		return true
	}

	return false
}

// SetJmxValueBehavior gets a reference to the given EnumglobalConfigurationJmxValueBehaviorProp and assigns it to the JmxValueBehavior field.
func (o *GlobalConfigurationResponse) SetJmxValueBehavior(v EnumglobalConfigurationJmxValueBehaviorProp) {
	o.JmxValueBehavior = &v
}

// GetJmxUseLegacyMbeanNames returns the JmxUseLegacyMbeanNames field value if set, zero value otherwise.
func (o *GlobalConfigurationResponse) GetJmxUseLegacyMbeanNames() bool {
	if o == nil || isNil(o.JmxUseLegacyMbeanNames) {
		var ret bool
		return ret
	}
	return *o.JmxUseLegacyMbeanNames
}

// GetJmxUseLegacyMbeanNamesOk returns a tuple with the JmxUseLegacyMbeanNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalConfigurationResponse) GetJmxUseLegacyMbeanNamesOk() (*bool, bool) {
	if o == nil || isNil(o.JmxUseLegacyMbeanNames) {
		return nil, false
	}
	return o.JmxUseLegacyMbeanNames, true
}

// HasJmxUseLegacyMbeanNames returns a boolean if a field has been set.
func (o *GlobalConfigurationResponse) HasJmxUseLegacyMbeanNames() bool {
	if o != nil && !isNil(o.JmxUseLegacyMbeanNames) {
		return true
	}

	return false
}

// SetJmxUseLegacyMbeanNames gets a reference to the given bool and assigns it to the JmxUseLegacyMbeanNames field.
func (o *GlobalConfigurationResponse) SetJmxUseLegacyMbeanNames(v bool) {
	o.JmxUseLegacyMbeanNames = &v
}

func (o GlobalConfigurationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["instanceName"] = o.InstanceName
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !isNil(o.ConfigurationServerGroup) {
		toSerialize["configurationServerGroup"] = o.ConfigurationServerGroup
	}
	if !isNil(o.ForceAsMasterForMirroredData) {
		toSerialize["forceAsMasterForMirroredData"] = o.ForceAsMasterForMirroredData
	}
	if !isNil(o.EncryptData) {
		toSerialize["encryptData"] = o.EncryptData
	}
	if !isNil(o.EncryptionSettingsCipherStreamProvider) {
		toSerialize["encryptionSettingsCipherStreamProvider"] = o.EncryptionSettingsCipherStreamProvider
	}
	if !isNil(o.EncryptBackupsByDefault) {
		toSerialize["encryptBackupsByDefault"] = o.EncryptBackupsByDefault
	}
	if !isNil(o.BackupEncryptionSettingsDefinitionID) {
		toSerialize["backupEncryptionSettingsDefinitionID"] = o.BackupEncryptionSettingsDefinitionID
	}
	if !isNil(o.EncryptLDIFExportsByDefault) {
		toSerialize["encryptLDIFExportsByDefault"] = o.EncryptLDIFExportsByDefault
	}
	if !isNil(o.LdifExportEncryptionSettingsDefinitionID) {
		toSerialize["ldifExportEncryptionSettingsDefinitionID"] = o.LdifExportEncryptionSettingsDefinitionID
	}
	if !isNil(o.AutomaticallyCompressEncryptedLDIFExports) {
		toSerialize["automaticallyCompressEncryptedLDIFExports"] = o.AutomaticallyCompressEncryptedLDIFExports
	}
	if !isNil(o.RedactSensitiveValuesInConfigLogs) {
		toSerialize["redactSensitiveValuesInConfigLogs"] = o.RedactSensitiveValuesInConfigLogs
	}
	if !isNil(o.SensitiveAttribute) {
		toSerialize["sensitiveAttribute"] = o.SensitiveAttribute
	}
	if !isNil(o.RejectInsecureRequests) {
		toSerialize["rejectInsecureRequests"] = o.RejectInsecureRequests
	}
	if !isNil(o.AllowedInsecureRequestCriteria) {
		toSerialize["allowedInsecureRequestCriteria"] = o.AllowedInsecureRequestCriteria
	}
	if !isNil(o.RejectUnauthenticatedRequests) {
		toSerialize["rejectUnauthenticatedRequests"] = o.RejectUnauthenticatedRequests
	}
	if !isNil(o.AllowedUnauthenticatedRequestCriteria) {
		toSerialize["allowedUnauthenticatedRequestCriteria"] = o.AllowedUnauthenticatedRequestCriteria
	}
	if !isNil(o.BindWithDNRequiresPassword) {
		toSerialize["bindWithDNRequiresPassword"] = o.BindWithDNRequiresPassword
	}
	if !isNil(o.DisabledPrivilege) {
		toSerialize["disabledPrivilege"] = o.DisabledPrivilege
	}
	if true {
		toSerialize["defaultPasswordPolicy"] = o.DefaultPasswordPolicy
	}
	if !isNil(o.MaximumUserDataPasswordPoliciesToCache) {
		toSerialize["maximumUserDataPasswordPoliciesToCache"] = o.MaximumUserDataPasswordPoliciesToCache
	}
	if true {
		toSerialize["proxiedAuthorizationIdentityMapper"] = o.ProxiedAuthorizationIdentityMapper
	}
	if !isNil(o.VerifyEntryDigests) {
		toSerialize["verifyEntryDigests"] = o.VerifyEntryDigests
	}
	if !isNil(o.AllowedInsecureTLSProtocol) {
		toSerialize["allowedInsecureTLSProtocol"] = o.AllowedInsecureTLSProtocol
	}
	if !isNil(o.AllowInsecureLocalJMXConnections) {
		toSerialize["allowInsecureLocalJMXConnections"] = o.AllowInsecureLocalJMXConnections
	}
	if !isNil(o.DefaultInternalOperationClientConnectionPolicy) {
		toSerialize["defaultInternalOperationClientConnectionPolicy"] = o.DefaultInternalOperationClientConnectionPolicy
	}
	if !isNil(o.SizeLimit) {
		toSerialize["sizeLimit"] = o.SizeLimit
	}
	if !isNil(o.TimeLimit) {
		toSerialize["timeLimit"] = o.TimeLimit
	}
	if !isNil(o.IdleTimeLimit) {
		toSerialize["idleTimeLimit"] = o.IdleTimeLimit
	}
	if !isNil(o.LookthroughLimit) {
		toSerialize["lookthroughLimit"] = o.LookthroughLimit
	}
	if !isNil(o.LdapJoinSizeLimit) {
		toSerialize["ldapJoinSizeLimit"] = o.LdapJoinSizeLimit
	}
	if !isNil(o.MaximumConcurrentConnections) {
		toSerialize["maximumConcurrentConnections"] = o.MaximumConcurrentConnections
	}
	if !isNil(o.MaximumConcurrentConnectionsPerIPAddress) {
		toSerialize["maximumConcurrentConnectionsPerIPAddress"] = o.MaximumConcurrentConnectionsPerIPAddress
	}
	if !isNil(o.MaximumConcurrentConnectionsPerBindDN) {
		toSerialize["maximumConcurrentConnectionsPerBindDN"] = o.MaximumConcurrentConnectionsPerBindDN
	}
	if !isNil(o.MaximumConcurrentUnindexedSearches) {
		toSerialize["maximumConcurrentUnindexedSearches"] = o.MaximumConcurrentUnindexedSearches
	}
	if !isNil(o.MaximumAttributesPerAddRequest) {
		toSerialize["maximumAttributesPerAddRequest"] = o.MaximumAttributesPerAddRequest
	}
	if !isNil(o.MaximumModificationsPerModifyRequest) {
		toSerialize["maximumModificationsPerModifyRequest"] = o.MaximumModificationsPerModifyRequest
	}
	if !isNil(o.BackgroundThreadForEachPersistentSearch) {
		toSerialize["backgroundThreadForEachPersistentSearch"] = o.BackgroundThreadForEachPersistentSearch
	}
	if !isNil(o.AllowAttributeNameExceptions) {
		toSerialize["allowAttributeNameExceptions"] = o.AllowAttributeNameExceptions
	}
	if !isNil(o.InvalidAttributeSyntaxBehavior) {
		toSerialize["invalidAttributeSyntaxBehavior"] = o.InvalidAttributeSyntaxBehavior
	}
	if !isNil(o.PermitSyntaxViolationsForAttribute) {
		toSerialize["permitSyntaxViolationsForAttribute"] = o.PermitSyntaxViolationsForAttribute
	}
	if !isNil(o.SingleStructuralObjectclassBehavior) {
		toSerialize["singleStructuralObjectclassBehavior"] = o.SingleStructuralObjectclassBehavior
	}
	if !isNil(o.AttributesModifiableWithIgnoreNoUserModificationRequestControl) {
		toSerialize["attributesModifiableWithIgnoreNoUserModificationRequestControl"] = o.AttributesModifiableWithIgnoreNoUserModificationRequestControl
	}
	if !isNil(o.MaximumServerOutLogFileSize) {
		toSerialize["maximumServerOutLogFileSize"] = o.MaximumServerOutLogFileSize
	}
	if !isNil(o.MaximumServerOutLogFileCount) {
		toSerialize["maximumServerOutLogFileCount"] = o.MaximumServerOutLogFileCount
	}
	if !isNil(o.StartupErrorLoggerOutputLocation) {
		toSerialize["startupErrorLoggerOutputLocation"] = o.StartupErrorLoggerOutputLocation
	}
	if !isNil(o.ExitOnJVMError) {
		toSerialize["exitOnJVMError"] = o.ExitOnJVMError
	}
	if !isNil(o.ServerErrorResultCode) {
		toSerialize["serverErrorResultCode"] = o.ServerErrorResultCode
	}
	if !isNil(o.ResultCodeMap) {
		toSerialize["resultCodeMap"] = o.ResultCodeMap
	}
	if !isNil(o.ReturnBindErrorMessages) {
		toSerialize["returnBindErrorMessages"] = o.ReturnBindErrorMessages
	}
	if !isNil(o.NotifyAbandonedOperations) {
		toSerialize["notifyAbandonedOperations"] = o.NotifyAbandonedOperations
	}
	if true {
		toSerialize["duplicateErrorLogLimit"] = o.DuplicateErrorLogLimit
	}
	if true {
		toSerialize["duplicateErrorLogTimeLimit"] = o.DuplicateErrorLogTimeLimit
	}
	if true {
		toSerialize["duplicateAlertLimit"] = o.DuplicateAlertLimit
	}
	if true {
		toSerialize["duplicateAlertTimeLimit"] = o.DuplicateAlertTimeLimit
	}
	if !isNil(o.WritabilityMode) {
		toSerialize["writabilityMode"] = o.WritabilityMode
	}
	if !isNil(o.UnrecoverableDatabaseErrorMode) {
		toSerialize["unrecoverableDatabaseErrorMode"] = o.UnrecoverableDatabaseErrorMode
	}
	if !isNil(o.DatabaseOnVirtualizedOrNetworkStorage) {
		toSerialize["databaseOnVirtualizedOrNetworkStorage"] = o.DatabaseOnVirtualizedOrNetworkStorage
	}
	if !isNil(o.AutoNameWithEntryUUIDConnectionCriteria) {
		toSerialize["autoNameWithEntryUUIDConnectionCriteria"] = o.AutoNameWithEntryUUIDConnectionCriteria
	}
	if !isNil(o.AutoNameWithEntryUUIDRequestCriteria) {
		toSerialize["autoNameWithEntryUUIDRequestCriteria"] = o.AutoNameWithEntryUUIDRequestCriteria
	}
	if !isNil(o.SoftDeletePolicy) {
		toSerialize["softDeletePolicy"] = o.SoftDeletePolicy
	}
	if !isNil(o.SubtreeAccessibilityAlertTimeLimit) {
		toSerialize["subtreeAccessibilityAlertTimeLimit"] = o.SubtreeAccessibilityAlertTimeLimit
	}
	if !isNil(o.WarnForBackendsWithMultipleBaseDns) {
		toSerialize["warnForBackendsWithMultipleBaseDns"] = o.WarnForBackendsWithMultipleBaseDns
	}
	if !isNil(o.ForcedGCPrimeDuration) {
		toSerialize["forcedGCPrimeDuration"] = o.ForcedGCPrimeDuration
	}
	if !isNil(o.ReplicationSetName) {
		toSerialize["replicationSetName"] = o.ReplicationSetName
	}
	if true {
		toSerialize["startupMinReplicationBacklogCount"] = o.StartupMinReplicationBacklogCount
	}
	if true {
		toSerialize["replicationBacklogCountAlertThreshold"] = o.ReplicationBacklogCountAlertThreshold
	}
	if true {
		toSerialize["replicationBacklogDurationAlertThreshold"] = o.ReplicationBacklogDurationAlertThreshold
	}
	if true {
		toSerialize["replicationAssuranceSourceTimeoutSuspendDuration"] = o.ReplicationAssuranceSourceTimeoutSuspendDuration
	}
	if true {
		toSerialize["replicationAssuranceSourceBacklogFastStartThreshold"] = o.ReplicationAssuranceSourceBacklogFastStartThreshold
	}
	if !isNil(o.ReplicationHistoryLimit) {
		toSerialize["replicationHistoryLimit"] = o.ReplicationHistoryLimit
	}
	if true {
		toSerialize["allowInheritedReplicationOfSubordinateBackends"] = o.AllowInheritedReplicationOfSubordinateBackends
	}
	if !isNil(o.ReplicationPurgeObsoleteReplicas) {
		toSerialize["replicationPurgeObsoleteReplicas"] = o.ReplicationPurgeObsoleteReplicas
	}
	if !isNil(o.SmtpServer) {
		toSerialize["smtpServer"] = o.SmtpServer
	}
	if !isNil(o.MaxSMTPConnectionCount) {
		toSerialize["maxSMTPConnectionCount"] = o.MaxSMTPConnectionCount
	}
	if !isNil(o.MaxSMTPConnectionAge) {
		toSerialize["maxSMTPConnectionAge"] = o.MaxSMTPConnectionAge
	}
	if !isNil(o.SmtpConnectionHealthCheckInterval) {
		toSerialize["smtpConnectionHealthCheckInterval"] = o.SmtpConnectionHealthCheckInterval
	}
	if !isNil(o.AllowedTask) {
		toSerialize["allowedTask"] = o.AllowedTask
	}
	if !isNil(o.EnableSubOperationTimer) {
		toSerialize["enableSubOperationTimer"] = o.EnableSubOperationTimer
	}
	if !isNil(o.MaximumShutdownTime) {
		toSerialize["maximumShutdownTime"] = o.MaximumShutdownTime
	}
	if !isNil(o.NetworkAddressCacheTTL) {
		toSerialize["networkAddressCacheTTL"] = o.NetworkAddressCacheTTL
	}
	if !isNil(o.NetworkAddressOutageCacheEnabled) {
		toSerialize["networkAddressOutageCacheEnabled"] = o.NetworkAddressOutageCacheEnabled
	}
	if !isNil(o.TrackedApplication) {
		toSerialize["trackedApplication"] = o.TrackedApplication
	}
	if !isNil(o.JmxValueBehavior) {
		toSerialize["jmxValueBehavior"] = o.JmxValueBehavior
	}
	if !isNil(o.JmxUseLegacyMbeanNames) {
		toSerialize["jmxUseLegacyMbeanNames"] = o.JmxUseLegacyMbeanNames
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalConfigurationResponse struct {
	value *GlobalConfigurationResponse
	isSet bool
}

func (v NullableGlobalConfigurationResponse) Get() *GlobalConfigurationResponse {
	return v.value
}

func (v *NullableGlobalConfigurationResponse) Set(val *GlobalConfigurationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalConfigurationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalConfigurationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalConfigurationResponse(val *GlobalConfigurationResponse) *NullableGlobalConfigurationResponse {
	return &NullableGlobalConfigurationResponse{value: val, isSet: true}
}

func (v NullableGlobalConfigurationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalConfigurationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
