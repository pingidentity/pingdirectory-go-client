/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsuccessfulBindResultCriteriaSchemaUrn the model 'EnumsuccessfulBindResultCriteriaSchemaUrn'
type EnumsuccessfulBindResultCriteriaSchemaUrn string

// List of Enumsuccessful-bind-result-criteriaSchemaUrn
const (
	ENUMSUCCESSFULBINDRESULTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RESULT_CRITERIASUCCESSFUL_BIND EnumsuccessfulBindResultCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:result-criteria:successful-bind"
)

// All allowed values of EnumsuccessfulBindResultCriteriaSchemaUrn enum
var AllowedEnumsuccessfulBindResultCriteriaSchemaUrnEnumValues = []EnumsuccessfulBindResultCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:result-criteria:successful-bind",
}

func (v *EnumsuccessfulBindResultCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsuccessfulBindResultCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumsuccessfulBindResultCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsuccessfulBindResultCriteriaSchemaUrn", value)
}

// NewEnumsuccessfulBindResultCriteriaSchemaUrnFromValue returns a pointer to a valid EnumsuccessfulBindResultCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsuccessfulBindResultCriteriaSchemaUrnFromValue(v string) (*EnumsuccessfulBindResultCriteriaSchemaUrn, error) {
	ev := EnumsuccessfulBindResultCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsuccessfulBindResultCriteriaSchemaUrn: valid values are %v", v, AllowedEnumsuccessfulBindResultCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsuccessfulBindResultCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsuccessfulBindResultCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsuccessful-bind-result-criteriaSchemaUrn value
func (v EnumsuccessfulBindResultCriteriaSchemaUrn) Ptr() *EnumsuccessfulBindResultCriteriaSchemaUrn {
	return &v
}

type NullableEnumsuccessfulBindResultCriteriaSchemaUrn struct {
	value *EnumsuccessfulBindResultCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumsuccessfulBindResultCriteriaSchemaUrn) Get() *EnumsuccessfulBindResultCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumsuccessfulBindResultCriteriaSchemaUrn) Set(val *EnumsuccessfulBindResultCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsuccessfulBindResultCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsuccessfulBindResultCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsuccessfulBindResultCriteriaSchemaUrn(val *EnumsuccessfulBindResultCriteriaSchemaUrn) *NullableEnumsuccessfulBindResultCriteriaSchemaUrn {
	return &NullableEnumsuccessfulBindResultCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsuccessfulBindResultCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsuccessfulBindResultCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
