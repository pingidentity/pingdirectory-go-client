/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// ExternalServerListResponseResourcesInner - struct for ExternalServerListResponseResourcesInner
type ExternalServerListResponseResourcesInner struct {
	ActiveDirectoryExternalServerResponse         *ActiveDirectoryExternalServerResponse
	AmazonAwsExternalServerResponse               *AmazonAwsExternalServerResponse
	ApiExternalServerResponse                     *ApiExternalServerResponse
	BrokerExternalServerResponse                  *BrokerExternalServerResponse
	ConjurExternalServerResponse                  *ConjurExternalServerResponse
	ConsentServiceExternalServerResponse          *ConsentServiceExternalServerResponse
	HttpExternalServerResponse                    *HttpExternalServerResponse
	HttpProxyExternalServerResponse               *HttpProxyExternalServerResponse
	JdbcExternalServerResponse                    *JdbcExternalServerResponse
	KafkaClusterExternalServerResponse            *KafkaClusterExternalServerResponse
	LdapExternalServerResponse                    *LdapExternalServerResponse
	MetricsEngineExternalServerResponse           *MetricsEngineExternalServerResponse
	MockExternalServerResponse                    *MockExternalServerResponse
	NokiaDsExternalServerResponse                 *NokiaDsExternalServerResponse
	NokiaProxyServerExternalServerResponse        *NokiaProxyServerExternalServerResponse
	OpendjExternalServerResponse                  *OpendjExternalServerResponse
	OracleUnifiedDirectoryExternalServerResponse  *OracleUnifiedDirectoryExternalServerResponse
	PingIdentityDsExternalServerResponse          *PingIdentityDsExternalServerResponse
	PingIdentityProxyServerExternalServerResponse *PingIdentityProxyServerExternalServerResponse
	PingOneHttpExternalServerResponse             *PingOneHttpExternalServerResponse
	PolicyExternalServerResponse                  *PolicyExternalServerResponse
	RedHatDsExternalServerResponse                *RedHatDsExternalServerResponse
	Scim2ExternalServerResponse                   *Scim2ExternalServerResponse
	ScimExternalServerResponse                    *ScimExternalServerResponse
	SmtpExternalServerResponse                    *SmtpExternalServerResponse
	SunDsExternalServerResponse                   *SunDsExternalServerResponse
	SyncServerExternalServerResponse              *SyncServerExternalServerResponse
	SyslogExternalServerResponse                  *SyslogExternalServerResponse
	VaultExternalServerResponse                   *VaultExternalServerResponse
}

// ActiveDirectoryExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns ActiveDirectoryExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func ActiveDirectoryExternalServerResponseAsExternalServerListResponseResourcesInner(v *ActiveDirectoryExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		ActiveDirectoryExternalServerResponse: v,
	}
}

// AmazonAwsExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns AmazonAwsExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func AmazonAwsExternalServerResponseAsExternalServerListResponseResourcesInner(v *AmazonAwsExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		AmazonAwsExternalServerResponse: v,
	}
}

// ApiExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns ApiExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func ApiExternalServerResponseAsExternalServerListResponseResourcesInner(v *ApiExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		ApiExternalServerResponse: v,
	}
}

// BrokerExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns BrokerExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func BrokerExternalServerResponseAsExternalServerListResponseResourcesInner(v *BrokerExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		BrokerExternalServerResponse: v,
	}
}

// ConjurExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns ConjurExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func ConjurExternalServerResponseAsExternalServerListResponseResourcesInner(v *ConjurExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		ConjurExternalServerResponse: v,
	}
}

// ConsentServiceExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns ConsentServiceExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func ConsentServiceExternalServerResponseAsExternalServerListResponseResourcesInner(v *ConsentServiceExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		ConsentServiceExternalServerResponse: v,
	}
}

// HttpExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns HttpExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func HttpExternalServerResponseAsExternalServerListResponseResourcesInner(v *HttpExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		HttpExternalServerResponse: v,
	}
}

// HttpProxyExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns HttpProxyExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func HttpProxyExternalServerResponseAsExternalServerListResponseResourcesInner(v *HttpProxyExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		HttpProxyExternalServerResponse: v,
	}
}

// JdbcExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns JdbcExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func JdbcExternalServerResponseAsExternalServerListResponseResourcesInner(v *JdbcExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		JdbcExternalServerResponse: v,
	}
}

// KafkaClusterExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns KafkaClusterExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func KafkaClusterExternalServerResponseAsExternalServerListResponseResourcesInner(v *KafkaClusterExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		KafkaClusterExternalServerResponse: v,
	}
}

// LdapExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns LdapExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func LdapExternalServerResponseAsExternalServerListResponseResourcesInner(v *LdapExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		LdapExternalServerResponse: v,
	}
}

// MetricsEngineExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns MetricsEngineExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func MetricsEngineExternalServerResponseAsExternalServerListResponseResourcesInner(v *MetricsEngineExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		MetricsEngineExternalServerResponse: v,
	}
}

// MockExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns MockExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func MockExternalServerResponseAsExternalServerListResponseResourcesInner(v *MockExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		MockExternalServerResponse: v,
	}
}

// NokiaDsExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns NokiaDsExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func NokiaDsExternalServerResponseAsExternalServerListResponseResourcesInner(v *NokiaDsExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		NokiaDsExternalServerResponse: v,
	}
}

// NokiaProxyServerExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns NokiaProxyServerExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func NokiaProxyServerExternalServerResponseAsExternalServerListResponseResourcesInner(v *NokiaProxyServerExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		NokiaProxyServerExternalServerResponse: v,
	}
}

// OpendjExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns OpendjExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func OpendjExternalServerResponseAsExternalServerListResponseResourcesInner(v *OpendjExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		OpendjExternalServerResponse: v,
	}
}

// OracleUnifiedDirectoryExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns OracleUnifiedDirectoryExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func OracleUnifiedDirectoryExternalServerResponseAsExternalServerListResponseResourcesInner(v *OracleUnifiedDirectoryExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		OracleUnifiedDirectoryExternalServerResponse: v,
	}
}

// PingIdentityDsExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns PingIdentityDsExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func PingIdentityDsExternalServerResponseAsExternalServerListResponseResourcesInner(v *PingIdentityDsExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		PingIdentityDsExternalServerResponse: v,
	}
}

// PingIdentityProxyServerExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns PingIdentityProxyServerExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func PingIdentityProxyServerExternalServerResponseAsExternalServerListResponseResourcesInner(v *PingIdentityProxyServerExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		PingIdentityProxyServerExternalServerResponse: v,
	}
}

// PingOneHttpExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns PingOneHttpExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func PingOneHttpExternalServerResponseAsExternalServerListResponseResourcesInner(v *PingOneHttpExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		PingOneHttpExternalServerResponse: v,
	}
}

// PolicyExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns PolicyExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func PolicyExternalServerResponseAsExternalServerListResponseResourcesInner(v *PolicyExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		PolicyExternalServerResponse: v,
	}
}

// RedHatDsExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns RedHatDsExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func RedHatDsExternalServerResponseAsExternalServerListResponseResourcesInner(v *RedHatDsExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		RedHatDsExternalServerResponse: v,
	}
}

// Scim2ExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns Scim2ExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func Scim2ExternalServerResponseAsExternalServerListResponseResourcesInner(v *Scim2ExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		Scim2ExternalServerResponse: v,
	}
}

// ScimExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns ScimExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func ScimExternalServerResponseAsExternalServerListResponseResourcesInner(v *ScimExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		ScimExternalServerResponse: v,
	}
}

// SmtpExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns SmtpExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func SmtpExternalServerResponseAsExternalServerListResponseResourcesInner(v *SmtpExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		SmtpExternalServerResponse: v,
	}
}

// SunDsExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns SunDsExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func SunDsExternalServerResponseAsExternalServerListResponseResourcesInner(v *SunDsExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		SunDsExternalServerResponse: v,
	}
}

// SyncServerExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns SyncServerExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func SyncServerExternalServerResponseAsExternalServerListResponseResourcesInner(v *SyncServerExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		SyncServerExternalServerResponse: v,
	}
}

// SyslogExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns SyslogExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func SyslogExternalServerResponseAsExternalServerListResponseResourcesInner(v *SyslogExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		SyslogExternalServerResponse: v,
	}
}

// VaultExternalServerResponseAsExternalServerListResponseResourcesInner is a convenience function that returns VaultExternalServerResponse wrapped in ExternalServerListResponseResourcesInner
func VaultExternalServerResponseAsExternalServerListResponseResourcesInner(v *VaultExternalServerResponse) ExternalServerListResponseResourcesInner {
	return ExternalServerListResponseResourcesInner{
		VaultExternalServerResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ExternalServerListResponseResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActiveDirectoryExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.ActiveDirectoryExternalServerResponse)
	if err == nil {
		jsonActiveDirectoryExternalServerResponse, _ := json.Marshal(dst.ActiveDirectoryExternalServerResponse)
		if string(jsonActiveDirectoryExternalServerResponse) == "{}" { // empty struct
			dst.ActiveDirectoryExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ActiveDirectoryExternalServerResponse = nil
	}

	// try to unmarshal data into AmazonAwsExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.AmazonAwsExternalServerResponse)
	if err == nil {
		jsonAmazonAwsExternalServerResponse, _ := json.Marshal(dst.AmazonAwsExternalServerResponse)
		if string(jsonAmazonAwsExternalServerResponse) == "{}" { // empty struct
			dst.AmazonAwsExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.AmazonAwsExternalServerResponse = nil
	}

	// try to unmarshal data into ApiExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.ApiExternalServerResponse)
	if err == nil {
		jsonApiExternalServerResponse, _ := json.Marshal(dst.ApiExternalServerResponse)
		if string(jsonApiExternalServerResponse) == "{}" { // empty struct
			dst.ApiExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ApiExternalServerResponse = nil
	}

	// try to unmarshal data into BrokerExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.BrokerExternalServerResponse)
	if err == nil {
		jsonBrokerExternalServerResponse, _ := json.Marshal(dst.BrokerExternalServerResponse)
		if string(jsonBrokerExternalServerResponse) == "{}" { // empty struct
			dst.BrokerExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.BrokerExternalServerResponse = nil
	}

	// try to unmarshal data into ConjurExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.ConjurExternalServerResponse)
	if err == nil {
		jsonConjurExternalServerResponse, _ := json.Marshal(dst.ConjurExternalServerResponse)
		if string(jsonConjurExternalServerResponse) == "{}" { // empty struct
			dst.ConjurExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ConjurExternalServerResponse = nil
	}

	// try to unmarshal data into ConsentServiceExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.ConsentServiceExternalServerResponse)
	if err == nil {
		jsonConsentServiceExternalServerResponse, _ := json.Marshal(dst.ConsentServiceExternalServerResponse)
		if string(jsonConsentServiceExternalServerResponse) == "{}" { // empty struct
			dst.ConsentServiceExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ConsentServiceExternalServerResponse = nil
	}

	// try to unmarshal data into HttpExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.HttpExternalServerResponse)
	if err == nil {
		jsonHttpExternalServerResponse, _ := json.Marshal(dst.HttpExternalServerResponse)
		if string(jsonHttpExternalServerResponse) == "{}" { // empty struct
			dst.HttpExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.HttpExternalServerResponse = nil
	}

	// try to unmarshal data into HttpProxyExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.HttpProxyExternalServerResponse)
	if err == nil {
		jsonHttpProxyExternalServerResponse, _ := json.Marshal(dst.HttpProxyExternalServerResponse)
		if string(jsonHttpProxyExternalServerResponse) == "{}" { // empty struct
			dst.HttpProxyExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.HttpProxyExternalServerResponse = nil
	}

	// try to unmarshal data into JdbcExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.JdbcExternalServerResponse)
	if err == nil {
		jsonJdbcExternalServerResponse, _ := json.Marshal(dst.JdbcExternalServerResponse)
		if string(jsonJdbcExternalServerResponse) == "{}" { // empty struct
			dst.JdbcExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.JdbcExternalServerResponse = nil
	}

	// try to unmarshal data into KafkaClusterExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.KafkaClusterExternalServerResponse)
	if err == nil {
		jsonKafkaClusterExternalServerResponse, _ := json.Marshal(dst.KafkaClusterExternalServerResponse)
		if string(jsonKafkaClusterExternalServerResponse) == "{}" { // empty struct
			dst.KafkaClusterExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.KafkaClusterExternalServerResponse = nil
	}

	// try to unmarshal data into LdapExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.LdapExternalServerResponse)
	if err == nil {
		jsonLdapExternalServerResponse, _ := json.Marshal(dst.LdapExternalServerResponse)
		if string(jsonLdapExternalServerResponse) == "{}" { // empty struct
			dst.LdapExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.LdapExternalServerResponse = nil
	}

	// try to unmarshal data into MetricsEngineExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.MetricsEngineExternalServerResponse)
	if err == nil {
		jsonMetricsEngineExternalServerResponse, _ := json.Marshal(dst.MetricsEngineExternalServerResponse)
		if string(jsonMetricsEngineExternalServerResponse) == "{}" { // empty struct
			dst.MetricsEngineExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.MetricsEngineExternalServerResponse = nil
	}

	// try to unmarshal data into MockExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.MockExternalServerResponse)
	if err == nil {
		jsonMockExternalServerResponse, _ := json.Marshal(dst.MockExternalServerResponse)
		if string(jsonMockExternalServerResponse) == "{}" { // empty struct
			dst.MockExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.MockExternalServerResponse = nil
	}

	// try to unmarshal data into NokiaDsExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.NokiaDsExternalServerResponse)
	if err == nil {
		jsonNokiaDsExternalServerResponse, _ := json.Marshal(dst.NokiaDsExternalServerResponse)
		if string(jsonNokiaDsExternalServerResponse) == "{}" { // empty struct
			dst.NokiaDsExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.NokiaDsExternalServerResponse = nil
	}

	// try to unmarshal data into NokiaProxyServerExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.NokiaProxyServerExternalServerResponse)
	if err == nil {
		jsonNokiaProxyServerExternalServerResponse, _ := json.Marshal(dst.NokiaProxyServerExternalServerResponse)
		if string(jsonNokiaProxyServerExternalServerResponse) == "{}" { // empty struct
			dst.NokiaProxyServerExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.NokiaProxyServerExternalServerResponse = nil
	}

	// try to unmarshal data into OpendjExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.OpendjExternalServerResponse)
	if err == nil {
		jsonOpendjExternalServerResponse, _ := json.Marshal(dst.OpendjExternalServerResponse)
		if string(jsonOpendjExternalServerResponse) == "{}" { // empty struct
			dst.OpendjExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.OpendjExternalServerResponse = nil
	}

	// try to unmarshal data into OracleUnifiedDirectoryExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.OracleUnifiedDirectoryExternalServerResponse)
	if err == nil {
		jsonOracleUnifiedDirectoryExternalServerResponse, _ := json.Marshal(dst.OracleUnifiedDirectoryExternalServerResponse)
		if string(jsonOracleUnifiedDirectoryExternalServerResponse) == "{}" { // empty struct
			dst.OracleUnifiedDirectoryExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.OracleUnifiedDirectoryExternalServerResponse = nil
	}

	// try to unmarshal data into PingIdentityDsExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.PingIdentityDsExternalServerResponse)
	if err == nil {
		jsonPingIdentityDsExternalServerResponse, _ := json.Marshal(dst.PingIdentityDsExternalServerResponse)
		if string(jsonPingIdentityDsExternalServerResponse) == "{}" { // empty struct
			dst.PingIdentityDsExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.PingIdentityDsExternalServerResponse = nil
	}

	// try to unmarshal data into PingIdentityProxyServerExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.PingIdentityProxyServerExternalServerResponse)
	if err == nil {
		jsonPingIdentityProxyServerExternalServerResponse, _ := json.Marshal(dst.PingIdentityProxyServerExternalServerResponse)
		if string(jsonPingIdentityProxyServerExternalServerResponse) == "{}" { // empty struct
			dst.PingIdentityProxyServerExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.PingIdentityProxyServerExternalServerResponse = nil
	}

	// try to unmarshal data into PingOneHttpExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.PingOneHttpExternalServerResponse)
	if err == nil {
		jsonPingOneHttpExternalServerResponse, _ := json.Marshal(dst.PingOneHttpExternalServerResponse)
		if string(jsonPingOneHttpExternalServerResponse) == "{}" { // empty struct
			dst.PingOneHttpExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.PingOneHttpExternalServerResponse = nil
	}

	// try to unmarshal data into PolicyExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.PolicyExternalServerResponse)
	if err == nil {
		jsonPolicyExternalServerResponse, _ := json.Marshal(dst.PolicyExternalServerResponse)
		if string(jsonPolicyExternalServerResponse) == "{}" { // empty struct
			dst.PolicyExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.PolicyExternalServerResponse = nil
	}

	// try to unmarshal data into RedHatDsExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.RedHatDsExternalServerResponse)
	if err == nil {
		jsonRedHatDsExternalServerResponse, _ := json.Marshal(dst.RedHatDsExternalServerResponse)
		if string(jsonRedHatDsExternalServerResponse) == "{}" { // empty struct
			dst.RedHatDsExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.RedHatDsExternalServerResponse = nil
	}

	// try to unmarshal data into Scim2ExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.Scim2ExternalServerResponse)
	if err == nil {
		jsonScim2ExternalServerResponse, _ := json.Marshal(dst.Scim2ExternalServerResponse)
		if string(jsonScim2ExternalServerResponse) == "{}" { // empty struct
			dst.Scim2ExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.Scim2ExternalServerResponse = nil
	}

	// try to unmarshal data into ScimExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.ScimExternalServerResponse)
	if err == nil {
		jsonScimExternalServerResponse, _ := json.Marshal(dst.ScimExternalServerResponse)
		if string(jsonScimExternalServerResponse) == "{}" { // empty struct
			dst.ScimExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ScimExternalServerResponse = nil
	}

	// try to unmarshal data into SmtpExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.SmtpExternalServerResponse)
	if err == nil {
		jsonSmtpExternalServerResponse, _ := json.Marshal(dst.SmtpExternalServerResponse)
		if string(jsonSmtpExternalServerResponse) == "{}" { // empty struct
			dst.SmtpExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.SmtpExternalServerResponse = nil
	}

	// try to unmarshal data into SunDsExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.SunDsExternalServerResponse)
	if err == nil {
		jsonSunDsExternalServerResponse, _ := json.Marshal(dst.SunDsExternalServerResponse)
		if string(jsonSunDsExternalServerResponse) == "{}" { // empty struct
			dst.SunDsExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.SunDsExternalServerResponse = nil
	}

	// try to unmarshal data into SyncServerExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.SyncServerExternalServerResponse)
	if err == nil {
		jsonSyncServerExternalServerResponse, _ := json.Marshal(dst.SyncServerExternalServerResponse)
		if string(jsonSyncServerExternalServerResponse) == "{}" { // empty struct
			dst.SyncServerExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.SyncServerExternalServerResponse = nil
	}

	// try to unmarshal data into SyslogExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.SyslogExternalServerResponse)
	if err == nil {
		jsonSyslogExternalServerResponse, _ := json.Marshal(dst.SyslogExternalServerResponse)
		if string(jsonSyslogExternalServerResponse) == "{}" { // empty struct
			dst.SyslogExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.SyslogExternalServerResponse = nil
	}

	// try to unmarshal data into VaultExternalServerResponse
	err = newStrictDecoder(data).Decode(&dst.VaultExternalServerResponse)
	if err == nil {
		jsonVaultExternalServerResponse, _ := json.Marshal(dst.VaultExternalServerResponse)
		if string(jsonVaultExternalServerResponse) == "{}" { // empty struct
			dst.VaultExternalServerResponse = nil
		} else {
			match++
		}
	} else {
		dst.VaultExternalServerResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActiveDirectoryExternalServerResponse = nil
		dst.AmazonAwsExternalServerResponse = nil
		dst.ApiExternalServerResponse = nil
		dst.BrokerExternalServerResponse = nil
		dst.ConjurExternalServerResponse = nil
		dst.ConsentServiceExternalServerResponse = nil
		dst.HttpExternalServerResponse = nil
		dst.HttpProxyExternalServerResponse = nil
		dst.JdbcExternalServerResponse = nil
		dst.KafkaClusterExternalServerResponse = nil
		dst.LdapExternalServerResponse = nil
		dst.MetricsEngineExternalServerResponse = nil
		dst.MockExternalServerResponse = nil
		dst.NokiaDsExternalServerResponse = nil
		dst.NokiaProxyServerExternalServerResponse = nil
		dst.OpendjExternalServerResponse = nil
		dst.OracleUnifiedDirectoryExternalServerResponse = nil
		dst.PingIdentityDsExternalServerResponse = nil
		dst.PingIdentityProxyServerExternalServerResponse = nil
		dst.PingOneHttpExternalServerResponse = nil
		dst.PolicyExternalServerResponse = nil
		dst.RedHatDsExternalServerResponse = nil
		dst.Scim2ExternalServerResponse = nil
		dst.ScimExternalServerResponse = nil
		dst.SmtpExternalServerResponse = nil
		dst.SunDsExternalServerResponse = nil
		dst.SyncServerExternalServerResponse = nil
		dst.SyslogExternalServerResponse = nil
		dst.VaultExternalServerResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ExternalServerListResponseResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ExternalServerListResponseResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ExternalServerListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	if src.ActiveDirectoryExternalServerResponse != nil {
		return json.Marshal(&src.ActiveDirectoryExternalServerResponse)
	}

	if src.AmazonAwsExternalServerResponse != nil {
		return json.Marshal(&src.AmazonAwsExternalServerResponse)
	}

	if src.ApiExternalServerResponse != nil {
		return json.Marshal(&src.ApiExternalServerResponse)
	}

	if src.BrokerExternalServerResponse != nil {
		return json.Marshal(&src.BrokerExternalServerResponse)
	}

	if src.ConjurExternalServerResponse != nil {
		return json.Marshal(&src.ConjurExternalServerResponse)
	}

	if src.ConsentServiceExternalServerResponse != nil {
		return json.Marshal(&src.ConsentServiceExternalServerResponse)
	}

	if src.HttpExternalServerResponse != nil {
		return json.Marshal(&src.HttpExternalServerResponse)
	}

	if src.HttpProxyExternalServerResponse != nil {
		return json.Marshal(&src.HttpProxyExternalServerResponse)
	}

	if src.JdbcExternalServerResponse != nil {
		return json.Marshal(&src.JdbcExternalServerResponse)
	}

	if src.KafkaClusterExternalServerResponse != nil {
		return json.Marshal(&src.KafkaClusterExternalServerResponse)
	}

	if src.LdapExternalServerResponse != nil {
		return json.Marshal(&src.LdapExternalServerResponse)
	}

	if src.MetricsEngineExternalServerResponse != nil {
		return json.Marshal(&src.MetricsEngineExternalServerResponse)
	}

	if src.MockExternalServerResponse != nil {
		return json.Marshal(&src.MockExternalServerResponse)
	}

	if src.NokiaDsExternalServerResponse != nil {
		return json.Marshal(&src.NokiaDsExternalServerResponse)
	}

	if src.NokiaProxyServerExternalServerResponse != nil {
		return json.Marshal(&src.NokiaProxyServerExternalServerResponse)
	}

	if src.OpendjExternalServerResponse != nil {
		return json.Marshal(&src.OpendjExternalServerResponse)
	}

	if src.OracleUnifiedDirectoryExternalServerResponse != nil {
		return json.Marshal(&src.OracleUnifiedDirectoryExternalServerResponse)
	}

	if src.PingIdentityDsExternalServerResponse != nil {
		return json.Marshal(&src.PingIdentityDsExternalServerResponse)
	}

	if src.PingIdentityProxyServerExternalServerResponse != nil {
		return json.Marshal(&src.PingIdentityProxyServerExternalServerResponse)
	}

	if src.PingOneHttpExternalServerResponse != nil {
		return json.Marshal(&src.PingOneHttpExternalServerResponse)
	}

	if src.PolicyExternalServerResponse != nil {
		return json.Marshal(&src.PolicyExternalServerResponse)
	}

	if src.RedHatDsExternalServerResponse != nil {
		return json.Marshal(&src.RedHatDsExternalServerResponse)
	}

	if src.Scim2ExternalServerResponse != nil {
		return json.Marshal(&src.Scim2ExternalServerResponse)
	}

	if src.ScimExternalServerResponse != nil {
		return json.Marshal(&src.ScimExternalServerResponse)
	}

	if src.SmtpExternalServerResponse != nil {
		return json.Marshal(&src.SmtpExternalServerResponse)
	}

	if src.SunDsExternalServerResponse != nil {
		return json.Marshal(&src.SunDsExternalServerResponse)
	}

	if src.SyncServerExternalServerResponse != nil {
		return json.Marshal(&src.SyncServerExternalServerResponse)
	}

	if src.SyslogExternalServerResponse != nil {
		return json.Marshal(&src.SyslogExternalServerResponse)
	}

	if src.VaultExternalServerResponse != nil {
		return json.Marshal(&src.VaultExternalServerResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ExternalServerListResponseResourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ActiveDirectoryExternalServerResponse != nil {
		return obj.ActiveDirectoryExternalServerResponse
	}

	if obj.AmazonAwsExternalServerResponse != nil {
		return obj.AmazonAwsExternalServerResponse
	}

	if obj.ApiExternalServerResponse != nil {
		return obj.ApiExternalServerResponse
	}

	if obj.BrokerExternalServerResponse != nil {
		return obj.BrokerExternalServerResponse
	}

	if obj.ConjurExternalServerResponse != nil {
		return obj.ConjurExternalServerResponse
	}

	if obj.ConsentServiceExternalServerResponse != nil {
		return obj.ConsentServiceExternalServerResponse
	}

	if obj.HttpExternalServerResponse != nil {
		return obj.HttpExternalServerResponse
	}

	if obj.HttpProxyExternalServerResponse != nil {
		return obj.HttpProxyExternalServerResponse
	}

	if obj.JdbcExternalServerResponse != nil {
		return obj.JdbcExternalServerResponse
	}

	if obj.KafkaClusterExternalServerResponse != nil {
		return obj.KafkaClusterExternalServerResponse
	}

	if obj.LdapExternalServerResponse != nil {
		return obj.LdapExternalServerResponse
	}

	if obj.MetricsEngineExternalServerResponse != nil {
		return obj.MetricsEngineExternalServerResponse
	}

	if obj.MockExternalServerResponse != nil {
		return obj.MockExternalServerResponse
	}

	if obj.NokiaDsExternalServerResponse != nil {
		return obj.NokiaDsExternalServerResponse
	}

	if obj.NokiaProxyServerExternalServerResponse != nil {
		return obj.NokiaProxyServerExternalServerResponse
	}

	if obj.OpendjExternalServerResponse != nil {
		return obj.OpendjExternalServerResponse
	}

	if obj.OracleUnifiedDirectoryExternalServerResponse != nil {
		return obj.OracleUnifiedDirectoryExternalServerResponse
	}

	if obj.PingIdentityDsExternalServerResponse != nil {
		return obj.PingIdentityDsExternalServerResponse
	}

	if obj.PingIdentityProxyServerExternalServerResponse != nil {
		return obj.PingIdentityProxyServerExternalServerResponse
	}

	if obj.PingOneHttpExternalServerResponse != nil {
		return obj.PingOneHttpExternalServerResponse
	}

	if obj.PolicyExternalServerResponse != nil {
		return obj.PolicyExternalServerResponse
	}

	if obj.RedHatDsExternalServerResponse != nil {
		return obj.RedHatDsExternalServerResponse
	}

	if obj.Scim2ExternalServerResponse != nil {
		return obj.Scim2ExternalServerResponse
	}

	if obj.ScimExternalServerResponse != nil {
		return obj.ScimExternalServerResponse
	}

	if obj.SmtpExternalServerResponse != nil {
		return obj.SmtpExternalServerResponse
	}

	if obj.SunDsExternalServerResponse != nil {
		return obj.SunDsExternalServerResponse
	}

	if obj.SyncServerExternalServerResponse != nil {
		return obj.SyncServerExternalServerResponse
	}

	if obj.SyslogExternalServerResponse != nil {
		return obj.SyslogExternalServerResponse
	}

	if obj.VaultExternalServerResponse != nil {
		return obj.VaultExternalServerResponse
	}

	// all schemas are nil
	return nil
}

type NullableExternalServerListResponseResourcesInner struct {
	value *ExternalServerListResponseResourcesInner
	isSet bool
}

func (v NullableExternalServerListResponseResourcesInner) Get() *ExternalServerListResponseResourcesInner {
	return v.value
}

func (v *NullableExternalServerListResponseResourcesInner) Set(val *ExternalServerListResponseResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalServerListResponseResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalServerListResponseResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalServerListResponseResourcesInner(val *ExternalServerListResponseResourcesInner) *NullableExternalServerListResponseResourcesInner {
	return &NullableExternalServerListResponseResourcesInner{value: val, isSet: true}
}

func (v NullableExternalServerListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalServerListResponseResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
