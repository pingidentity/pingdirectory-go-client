/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// MonitorProviderApiService MonitorProviderApi service
type MonitorProviderApiService service

type ApiAddMonitorProviderRequest struct {
	ctx                                 context.Context
	ApiService                          *MonitorProviderApiService
	addThirdPartyMonitorProviderRequest *AddThirdPartyMonitorProviderRequest
}

// Create a new Monitor Provider in the config
func (r ApiAddMonitorProviderRequest) AddThirdPartyMonitorProviderRequest(addThirdPartyMonitorProviderRequest AddThirdPartyMonitorProviderRequest) ApiAddMonitorProviderRequest {
	r.addThirdPartyMonitorProviderRequest = &addThirdPartyMonitorProviderRequest
	return r
}

func (r ApiAddMonitorProviderRequest) Execute() (*AddMonitorProvider200Response, *http.Response, error) {
	return r.ApiService.AddMonitorProviderExecute(r)
}

/*
AddMonitorProvider Add a new Monitor Provider to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddMonitorProviderRequest
*/
func (a *MonitorProviderApiService) AddMonitorProvider(ctx context.Context) ApiAddMonitorProviderRequest {
	return ApiAddMonitorProviderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddMonitorProvider200Response
func (a *MonitorProviderApiService) AddMonitorProviderExecute(r ApiAddMonitorProviderRequest) (*AddMonitorProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddMonitorProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorProviderApiService.AddMonitorProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitor-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addThirdPartyMonitorProviderRequest == nil {
		return localVarReturnValue, nil, reportError("addThirdPartyMonitorProviderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addThirdPartyMonitorProviderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMonitorProviderRequest struct {
	ctx                 context.Context
	ApiService          *MonitorProviderApiService
	monitorProviderName string
}

func (r ApiDeleteMonitorProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMonitorProviderExecute(r)
}

/*
DeleteMonitorProvider Delete a Monitor Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param monitorProviderName Name of the Monitor Provider
	@return ApiDeleteMonitorProviderRequest
*/
func (a *MonitorProviderApiService) DeleteMonitorProvider(ctx context.Context, monitorProviderName string) ApiDeleteMonitorProviderRequest {
	return ApiDeleteMonitorProviderRequest{
		ApiService:          a,
		ctx:                 ctx,
		monitorProviderName: monitorProviderName,
	}
}

// Execute executes the request
func (a *MonitorProviderApiService) DeleteMonitorProviderExecute(r ApiDeleteMonitorProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorProviderApiService.DeleteMonitorProvider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitor-providers/{monitor-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitor-provider-name"+"}", url.PathEscape(parameterToString(r.monitorProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMonitorProviderRequest struct {
	ctx                 context.Context
	ApiService          *MonitorProviderApiService
	monitorProviderName string
}

func (r ApiGetMonitorProviderRequest) Execute() (*GetMonitorProvider200Response, *http.Response, error) {
	return r.ApiService.GetMonitorProviderExecute(r)
}

/*
GetMonitorProvider Returns a single Monitor Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param monitorProviderName Name of the Monitor Provider
	@return ApiGetMonitorProviderRequest
*/
func (a *MonitorProviderApiService) GetMonitorProvider(ctx context.Context, monitorProviderName string) ApiGetMonitorProviderRequest {
	return ApiGetMonitorProviderRequest{
		ApiService:          a,
		ctx:                 ctx,
		monitorProviderName: monitorProviderName,
	}
}

// Execute executes the request
//
//	@return GetMonitorProvider200Response
func (a *MonitorProviderApiService) GetMonitorProviderExecute(r ApiGetMonitorProviderRequest) (*GetMonitorProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetMonitorProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorProviderApiService.GetMonitorProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitor-providers/{monitor-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitor-provider-name"+"}", url.PathEscape(parameterToString(r.monitorProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMonitorProviderRequest struct {
	ctx                 context.Context
	ApiService          *MonitorProviderApiService
	monitorProviderName string
	updateRequest       *UpdateRequest
}

// Update an existing Monitor Provider
func (r ApiUpdateMonitorProviderRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateMonitorProviderRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateMonitorProviderRequest) Execute() (*GetMonitorProvider200Response, *http.Response, error) {
	return r.ApiService.UpdateMonitorProviderExecute(r)
}

/*
UpdateMonitorProvider Update an existing Monitor Provider by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param monitorProviderName Name of the Monitor Provider
	@return ApiUpdateMonitorProviderRequest
*/
func (a *MonitorProviderApiService) UpdateMonitorProvider(ctx context.Context, monitorProviderName string) ApiUpdateMonitorProviderRequest {
	return ApiUpdateMonitorProviderRequest{
		ApiService:          a,
		ctx:                 ctx,
		monitorProviderName: monitorProviderName,
	}
}

// Execute executes the request
//
//	@return GetMonitorProvider200Response
func (a *MonitorProviderApiService) UpdateMonitorProviderExecute(r ApiUpdateMonitorProviderRequest) (*GetMonitorProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetMonitorProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorProviderApiService.UpdateMonitorProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitor-providers/{monitor-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitor-provider-name"+"}", url.PathEscape(parameterToString(r.monitorProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
