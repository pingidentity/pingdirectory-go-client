/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// SaslMechanismHandlerApiService SaslMechanismHandlerApi service
type SaslMechanismHandlerApiService service

type ApiAddSaslMechanismHandlerRequest struct {
	ctx                            context.Context
	ApiService                     *SaslMechanismHandlerApiService
	addSaslMechanismHandlerRequest *AddSaslMechanismHandlerRequest
}

// Create a new SASL Mechanism Handler in the config
func (r ApiAddSaslMechanismHandlerRequest) AddSaslMechanismHandlerRequest(addSaslMechanismHandlerRequest AddSaslMechanismHandlerRequest) ApiAddSaslMechanismHandlerRequest {
	r.addSaslMechanismHandlerRequest = &addSaslMechanismHandlerRequest
	return r
}

func (r ApiAddSaslMechanismHandlerRequest) Execute() (*AddSaslMechanismHandler200Response, *http.Response, error) {
	return r.ApiService.AddSaslMechanismHandlerExecute(r)
}

/*
AddSaslMechanismHandler Add a new SASL Mechanism Handler to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddSaslMechanismHandlerRequest
*/
func (a *SaslMechanismHandlerApiService) AddSaslMechanismHandler(ctx context.Context) ApiAddSaslMechanismHandlerRequest {
	return ApiAddSaslMechanismHandlerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddSaslMechanismHandler200Response
func (a *SaslMechanismHandlerApiService) AddSaslMechanismHandlerExecute(r ApiAddSaslMechanismHandlerRequest) (*AddSaslMechanismHandler200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddSaslMechanismHandler200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SaslMechanismHandlerApiService.AddSaslMechanismHandler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sasl-mechanism-handlers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addSaslMechanismHandlerRequest == nil {
		return localVarReturnValue, nil, reportError("addSaslMechanismHandlerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addSaslMechanismHandlerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSaslMechanismHandlerRequest struct {
	ctx                      context.Context
	ApiService               *SaslMechanismHandlerApiService
	saslMechanismHandlerName string
}

func (r ApiDeleteSaslMechanismHandlerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSaslMechanismHandlerExecute(r)
}

/*
DeleteSaslMechanismHandler Delete a SASL Mechanism Handler

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param saslMechanismHandlerName Name of the SASL Mechanism Handler
	@return ApiDeleteSaslMechanismHandlerRequest
*/
func (a *SaslMechanismHandlerApiService) DeleteSaslMechanismHandler(ctx context.Context, saslMechanismHandlerName string) ApiDeleteSaslMechanismHandlerRequest {
	return ApiDeleteSaslMechanismHandlerRequest{
		ApiService:               a,
		ctx:                      ctx,
		saslMechanismHandlerName: saslMechanismHandlerName,
	}
}

// Execute executes the request
func (a *SaslMechanismHandlerApiService) DeleteSaslMechanismHandlerExecute(r ApiDeleteSaslMechanismHandlerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SaslMechanismHandlerApiService.DeleteSaslMechanismHandler")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sasl-mechanism-handlers/{sasl-mechanism-handler-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"sasl-mechanism-handler-name"+"}", url.PathEscape(parameterToString(r.saslMechanismHandlerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSaslMechanismHandlerRequest struct {
	ctx                      context.Context
	ApiService               *SaslMechanismHandlerApiService
	saslMechanismHandlerName string
}

func (r ApiGetSaslMechanismHandlerRequest) Execute() (*GetSaslMechanismHandler200Response, *http.Response, error) {
	return r.ApiService.GetSaslMechanismHandlerExecute(r)
}

/*
GetSaslMechanismHandler Returns a single SASL Mechanism Handler

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param saslMechanismHandlerName Name of the SASL Mechanism Handler
	@return ApiGetSaslMechanismHandlerRequest
*/
func (a *SaslMechanismHandlerApiService) GetSaslMechanismHandler(ctx context.Context, saslMechanismHandlerName string) ApiGetSaslMechanismHandlerRequest {
	return ApiGetSaslMechanismHandlerRequest{
		ApiService:               a,
		ctx:                      ctx,
		saslMechanismHandlerName: saslMechanismHandlerName,
	}
}

// Execute executes the request
//
//	@return GetSaslMechanismHandler200Response
func (a *SaslMechanismHandlerApiService) GetSaslMechanismHandlerExecute(r ApiGetSaslMechanismHandlerRequest) (*GetSaslMechanismHandler200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetSaslMechanismHandler200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SaslMechanismHandlerApiService.GetSaslMechanismHandler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sasl-mechanism-handlers/{sasl-mechanism-handler-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"sasl-mechanism-handler-name"+"}", url.PathEscape(parameterToString(r.saslMechanismHandlerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSaslMechanismHandlerRequest struct {
	ctx                      context.Context
	ApiService               *SaslMechanismHandlerApiService
	saslMechanismHandlerName string
	updateRequest            *UpdateRequest
}

// Update an existing SASL Mechanism Handler
func (r ApiUpdateSaslMechanismHandlerRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateSaslMechanismHandlerRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateSaslMechanismHandlerRequest) Execute() (*GetSaslMechanismHandler200Response, *http.Response, error) {
	return r.ApiService.UpdateSaslMechanismHandlerExecute(r)
}

/*
UpdateSaslMechanismHandler Update an existing SASL Mechanism Handler by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param saslMechanismHandlerName Name of the SASL Mechanism Handler
	@return ApiUpdateSaslMechanismHandlerRequest
*/
func (a *SaslMechanismHandlerApiService) UpdateSaslMechanismHandler(ctx context.Context, saslMechanismHandlerName string) ApiUpdateSaslMechanismHandlerRequest {
	return ApiUpdateSaslMechanismHandlerRequest{
		ApiService:               a,
		ctx:                      ctx,
		saslMechanismHandlerName: saslMechanismHandlerName,
	}
}

// Execute executes the request
//
//	@return GetSaslMechanismHandler200Response
func (a *SaslMechanismHandlerApiService) UpdateSaslMechanismHandlerExecute(r ApiUpdateSaslMechanismHandlerRequest) (*GetSaslMechanismHandler200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetSaslMechanismHandler200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SaslMechanismHandlerApiService.UpdateSaslMechanismHandler")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sasl-mechanism-handlers/{sasl-mechanism-handler-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"sasl-mechanism-handler-name"+"}", url.PathEscape(parameterToString(r.saslMechanismHandlerName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
