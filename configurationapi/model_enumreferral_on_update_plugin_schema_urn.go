/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreferralOnUpdatePluginSchemaUrn the model 'EnumreferralOnUpdatePluginSchemaUrn'
type EnumreferralOnUpdatePluginSchemaUrn string

// List of Enumreferral-on-update-pluginSchemaUrn
const (
	ENUMREFERRALONUPDATEPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINREFERRAL_ON_UPDATE EnumreferralOnUpdatePluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:referral-on-update"
)

// All allowed values of EnumreferralOnUpdatePluginSchemaUrn enum
var AllowedEnumreferralOnUpdatePluginSchemaUrnEnumValues = []EnumreferralOnUpdatePluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:referral-on-update",
}

func (v *EnumreferralOnUpdatePluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreferralOnUpdatePluginSchemaUrn(value)
	for _, existing := range AllowedEnumreferralOnUpdatePluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreferralOnUpdatePluginSchemaUrn", value)
}

// NewEnumreferralOnUpdatePluginSchemaUrnFromValue returns a pointer to a valid EnumreferralOnUpdatePluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreferralOnUpdatePluginSchemaUrnFromValue(v string) (*EnumreferralOnUpdatePluginSchemaUrn, error) {
	ev := EnumreferralOnUpdatePluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreferralOnUpdatePluginSchemaUrn: valid values are %v", v, AllowedEnumreferralOnUpdatePluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreferralOnUpdatePluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumreferralOnUpdatePluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreferral-on-update-pluginSchemaUrn value
func (v EnumreferralOnUpdatePluginSchemaUrn) Ptr() *EnumreferralOnUpdatePluginSchemaUrn {
	return &v
}

type NullableEnumreferralOnUpdatePluginSchemaUrn struct {
	value *EnumreferralOnUpdatePluginSchemaUrn
	isSet bool
}

func (v NullableEnumreferralOnUpdatePluginSchemaUrn) Get() *EnumreferralOnUpdatePluginSchemaUrn {
	return v.value
}

func (v *NullableEnumreferralOnUpdatePluginSchemaUrn) Set(val *EnumreferralOnUpdatePluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreferralOnUpdatePluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreferralOnUpdatePluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreferralOnUpdatePluginSchemaUrn(val *EnumreferralOnUpdatePluginSchemaUrn) *NullableEnumreferralOnUpdatePluginSchemaUrn {
	return &NullableEnumreferralOnUpdatePluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumreferralOnUpdatePluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreferralOnUpdatePluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
