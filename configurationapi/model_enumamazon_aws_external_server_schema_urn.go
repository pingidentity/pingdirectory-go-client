/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumamazonAwsExternalServerSchemaUrn the model 'EnumamazonAwsExternalServerSchemaUrn'
type EnumamazonAwsExternalServerSchemaUrn string

// List of Enumamazon-aws-external-serverSchemaUrn
const (
	ENUMAMAZONAWSEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERAMAZON_AWS EnumamazonAwsExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:amazon-aws"
)

// All allowed values of EnumamazonAwsExternalServerSchemaUrn enum
var AllowedEnumamazonAwsExternalServerSchemaUrnEnumValues = []EnumamazonAwsExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:amazon-aws",
}

func (v *EnumamazonAwsExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumamazonAwsExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumamazonAwsExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumamazonAwsExternalServerSchemaUrn", value)
}

// NewEnumamazonAwsExternalServerSchemaUrnFromValue returns a pointer to a valid EnumamazonAwsExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumamazonAwsExternalServerSchemaUrnFromValue(v string) (*EnumamazonAwsExternalServerSchemaUrn, error) {
	ev := EnumamazonAwsExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumamazonAwsExternalServerSchemaUrn: valid values are %v", v, AllowedEnumamazonAwsExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumamazonAwsExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumamazonAwsExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumamazon-aws-external-serverSchemaUrn value
func (v EnumamazonAwsExternalServerSchemaUrn) Ptr() *EnumamazonAwsExternalServerSchemaUrn {
	return &v
}

type NullableEnumamazonAwsExternalServerSchemaUrn struct {
	value *EnumamazonAwsExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumamazonAwsExternalServerSchemaUrn) Get() *EnumamazonAwsExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumamazonAwsExternalServerSchemaUrn) Set(val *EnumamazonAwsExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumamazonAwsExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumamazonAwsExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumamazonAwsExternalServerSchemaUrn(val *EnumamazonAwsExternalServerSchemaUrn) *NullableEnumamazonAwsExternalServerSchemaUrn {
	return &NullableEnumamazonAwsExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumamazonAwsExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumamazonAwsExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
