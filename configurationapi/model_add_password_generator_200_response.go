/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddPasswordGenerator200Response - struct for AddPasswordGenerator200Response
type AddPasswordGenerator200Response struct {
	GroovyScriptedPasswordGeneratorResponse *GroovyScriptedPasswordGeneratorResponse
	PassphrasePasswordGeneratorResponse     *PassphrasePasswordGeneratorResponse
	RandomPasswordGeneratorResponse         *RandomPasswordGeneratorResponse
	ThirdPartyPasswordGeneratorResponse     *ThirdPartyPasswordGeneratorResponse
}

// GroovyScriptedPasswordGeneratorResponseAsAddPasswordGenerator200Response is a convenience function that returns GroovyScriptedPasswordGeneratorResponse wrapped in AddPasswordGenerator200Response
func GroovyScriptedPasswordGeneratorResponseAsAddPasswordGenerator200Response(v *GroovyScriptedPasswordGeneratorResponse) AddPasswordGenerator200Response {
	return AddPasswordGenerator200Response{
		GroovyScriptedPasswordGeneratorResponse: v,
	}
}

// PassphrasePasswordGeneratorResponseAsAddPasswordGenerator200Response is a convenience function that returns PassphrasePasswordGeneratorResponse wrapped in AddPasswordGenerator200Response
func PassphrasePasswordGeneratorResponseAsAddPasswordGenerator200Response(v *PassphrasePasswordGeneratorResponse) AddPasswordGenerator200Response {
	return AddPasswordGenerator200Response{
		PassphrasePasswordGeneratorResponse: v,
	}
}

// RandomPasswordGeneratorResponseAsAddPasswordGenerator200Response is a convenience function that returns RandomPasswordGeneratorResponse wrapped in AddPasswordGenerator200Response
func RandomPasswordGeneratorResponseAsAddPasswordGenerator200Response(v *RandomPasswordGeneratorResponse) AddPasswordGenerator200Response {
	return AddPasswordGenerator200Response{
		RandomPasswordGeneratorResponse: v,
	}
}

// ThirdPartyPasswordGeneratorResponseAsAddPasswordGenerator200Response is a convenience function that returns ThirdPartyPasswordGeneratorResponse wrapped in AddPasswordGenerator200Response
func ThirdPartyPasswordGeneratorResponseAsAddPasswordGenerator200Response(v *ThirdPartyPasswordGeneratorResponse) AddPasswordGenerator200Response {
	return AddPasswordGenerator200Response{
		ThirdPartyPasswordGeneratorResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddPasswordGenerator200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GroovyScriptedPasswordGeneratorResponse
	err = newStrictDecoder(data).Decode(&dst.GroovyScriptedPasswordGeneratorResponse)
	if err == nil {
		jsonGroovyScriptedPasswordGeneratorResponse, _ := json.Marshal(dst.GroovyScriptedPasswordGeneratorResponse)
		if string(jsonGroovyScriptedPasswordGeneratorResponse) == "{}" { // empty struct
			dst.GroovyScriptedPasswordGeneratorResponse = nil
		} else {
			match++
		}
	} else {
		dst.GroovyScriptedPasswordGeneratorResponse = nil
	}

	// try to unmarshal data into PassphrasePasswordGeneratorResponse
	err = newStrictDecoder(data).Decode(&dst.PassphrasePasswordGeneratorResponse)
	if err == nil {
		jsonPassphrasePasswordGeneratorResponse, _ := json.Marshal(dst.PassphrasePasswordGeneratorResponse)
		if string(jsonPassphrasePasswordGeneratorResponse) == "{}" { // empty struct
			dst.PassphrasePasswordGeneratorResponse = nil
		} else {
			match++
		}
	} else {
		dst.PassphrasePasswordGeneratorResponse = nil
	}

	// try to unmarshal data into RandomPasswordGeneratorResponse
	err = newStrictDecoder(data).Decode(&dst.RandomPasswordGeneratorResponse)
	if err == nil {
		jsonRandomPasswordGeneratorResponse, _ := json.Marshal(dst.RandomPasswordGeneratorResponse)
		if string(jsonRandomPasswordGeneratorResponse) == "{}" { // empty struct
			dst.RandomPasswordGeneratorResponse = nil
		} else {
			match++
		}
	} else {
		dst.RandomPasswordGeneratorResponse = nil
	}

	// try to unmarshal data into ThirdPartyPasswordGeneratorResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyPasswordGeneratorResponse)
	if err == nil {
		jsonThirdPartyPasswordGeneratorResponse, _ := json.Marshal(dst.ThirdPartyPasswordGeneratorResponse)
		if string(jsonThirdPartyPasswordGeneratorResponse) == "{}" { // empty struct
			dst.ThirdPartyPasswordGeneratorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyPasswordGeneratorResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GroovyScriptedPasswordGeneratorResponse = nil
		dst.PassphrasePasswordGeneratorResponse = nil
		dst.RandomPasswordGeneratorResponse = nil
		dst.ThirdPartyPasswordGeneratorResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddPasswordGenerator200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddPasswordGenerator200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddPasswordGenerator200Response) MarshalJSON() ([]byte, error) {
	if src.GroovyScriptedPasswordGeneratorResponse != nil {
		return json.Marshal(&src.GroovyScriptedPasswordGeneratorResponse)
	}

	if src.PassphrasePasswordGeneratorResponse != nil {
		return json.Marshal(&src.PassphrasePasswordGeneratorResponse)
	}

	if src.RandomPasswordGeneratorResponse != nil {
		return json.Marshal(&src.RandomPasswordGeneratorResponse)
	}

	if src.ThirdPartyPasswordGeneratorResponse != nil {
		return json.Marshal(&src.ThirdPartyPasswordGeneratorResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddPasswordGenerator200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GroovyScriptedPasswordGeneratorResponse != nil {
		return obj.GroovyScriptedPasswordGeneratorResponse
	}

	if obj.PassphrasePasswordGeneratorResponse != nil {
		return obj.PassphrasePasswordGeneratorResponse
	}

	if obj.RandomPasswordGeneratorResponse != nil {
		return obj.RandomPasswordGeneratorResponse
	}

	if obj.ThirdPartyPasswordGeneratorResponse != nil {
		return obj.ThirdPartyPasswordGeneratorResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddPasswordGenerator200Response struct {
	value *AddPasswordGenerator200Response
	isSet bool
}

func (v NullableAddPasswordGenerator200Response) Get() *AddPasswordGenerator200Response {
	return v.value
}

func (v *NullableAddPasswordGenerator200Response) Set(val *AddPasswordGenerator200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPasswordGenerator200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPasswordGenerator200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPasswordGenerator200Response(val *AddPasswordGenerator200Response) *NullableAddPasswordGenerator200Response {
	return &NullableAddPasswordGenerator200Response{value: val, isSet: true}
}

func (v NullableAddPasswordGenerator200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPasswordGenerator200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
