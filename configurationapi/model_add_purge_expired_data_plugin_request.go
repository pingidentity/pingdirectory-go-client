/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddPurgeExpiredDataPluginRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddPurgeExpiredDataPluginRequest{}

// AddPurgeExpiredDataPluginRequest struct for AddPurgeExpiredDataPluginRequest
type AddPurgeExpiredDataPluginRequest struct {
	Schemas []EnumpurgeExpiredDataPluginSchemaUrn `json:"schemas"`
	// The LDAP attribute that determines when data should be deleted. This could store the expiration time, or it could store the creation time and the expiration-offset property specifies the duration before data is deleted.
	DatetimeAttribute string `json:"datetimeAttribute"`
	// The top-level JSON field within the configured datetime-attribute that determines when data should be deleted. This could store the expiration time, or it could store the creation time and the expiration-offset property specifies the duration before data is deleted.
	DatetimeJSONField *string                       `json:"datetimeJSONField,omitempty"`
	DatetimeFormat    *EnumpluginDatetimeFormatProp `json:"datetimeFormat,omitempty"`
	// When the datetime-format property is configured with a value of \"custom\", this specifies the format (using a string compatible with the java.text.SimpleDateFormat class) that will be used to search for expired data.
	CustomDatetimeFormat *string `json:"customDatetimeFormat,omitempty"`
	// Specifies the time zone to use when generating a date string using the configured custom-datetime-format value. The provided value must be accepted by java.util.TimeZone.getTimeZone.
	CustomTimezone *string `json:"customTimezone,omitempty"`
	// The duration to wait after the value specified in datetime-attribute (and optionally datetime-json-field) before purging the data.
	ExpirationOffset string                       `json:"expirationOffset"`
	PurgeBehavior    *EnumpluginPurgeBehaviorProp `json:"purgeBehavior,omitempty"`
	// Only entries located within the subtree specified by this base DN are eligible for purging.
	BaseDN *string `json:"baseDN,omitempty"`
	// Only entries that match this LDAP filter will be eligible for having data purged.
	Filter *string `json:"filter,omitempty"`
	// This specifies how often the plugin should check for expired data. It also controls the offset of peer servers (see the peer-server-priority-index for more information).
	PollingInterval *string `json:"pollingInterval,omitempty"`
	// This setting smooths out the performance impact on the server by throttling the purging to the specified maximum number of updates per second. To avoid a large backlog, this value should be set comfortably above the average rate that expired data is generated. When purge-behavior is set to subtree-delete-entries, then deletion of the entire subtree is considered a single update for the purposes of throttling.
	MaxUpdatesPerSecond *int64 `json:"maxUpdatesPerSecond,omitempty"`
	// In a replicated environment, this determines the order in which peer servers should attempt to purge data.
	PeerServerPriorityIndex *int64 `json:"peerServerPriorityIndex,omitempty"`
	// The number of threads used to delete expired entries.
	NumDeleteThreads *int64 `json:"numDeleteThreads,omitempty"`
	// A description for this Plugin
	Description *string `json:"description,omitempty"`
	// Indicates whether the plug-in is enabled for use.
	Enabled bool `json:"enabled"`
	// Name of the new Plugin
	PluginName string `json:"pluginName"`
}

// NewAddPurgeExpiredDataPluginRequest instantiates a new AddPurgeExpiredDataPluginRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddPurgeExpiredDataPluginRequest(schemas []EnumpurgeExpiredDataPluginSchemaUrn, datetimeAttribute string, expirationOffset string, enabled bool, pluginName string) *AddPurgeExpiredDataPluginRequest {
	this := AddPurgeExpiredDataPluginRequest{}
	this.Schemas = schemas
	this.DatetimeAttribute = datetimeAttribute
	this.ExpirationOffset = expirationOffset
	this.Enabled = enabled
	this.PluginName = pluginName
	return &this
}

// NewAddPurgeExpiredDataPluginRequestWithDefaults instantiates a new AddPurgeExpiredDataPluginRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddPurgeExpiredDataPluginRequestWithDefaults() *AddPurgeExpiredDataPluginRequest {
	this := AddPurgeExpiredDataPluginRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddPurgeExpiredDataPluginRequest) GetSchemas() []EnumpurgeExpiredDataPluginSchemaUrn {
	if o == nil {
		var ret []EnumpurgeExpiredDataPluginSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetSchemasOk() ([]EnumpurgeExpiredDataPluginSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddPurgeExpiredDataPluginRequest) SetSchemas(v []EnumpurgeExpiredDataPluginSchemaUrn) {
	o.Schemas = v
}

// GetDatetimeAttribute returns the DatetimeAttribute field value
func (o *AddPurgeExpiredDataPluginRequest) GetDatetimeAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatetimeAttribute
}

// GetDatetimeAttributeOk returns a tuple with the DatetimeAttribute field value
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetDatetimeAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatetimeAttribute, true
}

// SetDatetimeAttribute sets field value
func (o *AddPurgeExpiredDataPluginRequest) SetDatetimeAttribute(v string) {
	o.DatetimeAttribute = v
}

// GetDatetimeJSONField returns the DatetimeJSONField field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetDatetimeJSONField() string {
	if o == nil || IsNil(o.DatetimeJSONField) {
		var ret string
		return ret
	}
	return *o.DatetimeJSONField
}

// GetDatetimeJSONFieldOk returns a tuple with the DatetimeJSONField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetDatetimeJSONFieldOk() (*string, bool) {
	if o == nil || IsNil(o.DatetimeJSONField) {
		return nil, false
	}
	return o.DatetimeJSONField, true
}

// HasDatetimeJSONField returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasDatetimeJSONField() bool {
	if o != nil && !IsNil(o.DatetimeJSONField) {
		return true
	}

	return false
}

// SetDatetimeJSONField gets a reference to the given string and assigns it to the DatetimeJSONField field.
func (o *AddPurgeExpiredDataPluginRequest) SetDatetimeJSONField(v string) {
	o.DatetimeJSONField = &v
}

// GetDatetimeFormat returns the DatetimeFormat field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetDatetimeFormat() EnumpluginDatetimeFormatProp {
	if o == nil || IsNil(o.DatetimeFormat) {
		var ret EnumpluginDatetimeFormatProp
		return ret
	}
	return *o.DatetimeFormat
}

// GetDatetimeFormatOk returns a tuple with the DatetimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetDatetimeFormatOk() (*EnumpluginDatetimeFormatProp, bool) {
	if o == nil || IsNil(o.DatetimeFormat) {
		return nil, false
	}
	return o.DatetimeFormat, true
}

// HasDatetimeFormat returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasDatetimeFormat() bool {
	if o != nil && !IsNil(o.DatetimeFormat) {
		return true
	}

	return false
}

// SetDatetimeFormat gets a reference to the given EnumpluginDatetimeFormatProp and assigns it to the DatetimeFormat field.
func (o *AddPurgeExpiredDataPluginRequest) SetDatetimeFormat(v EnumpluginDatetimeFormatProp) {
	o.DatetimeFormat = &v
}

// GetCustomDatetimeFormat returns the CustomDatetimeFormat field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetCustomDatetimeFormat() string {
	if o == nil || IsNil(o.CustomDatetimeFormat) {
		var ret string
		return ret
	}
	return *o.CustomDatetimeFormat
}

// GetCustomDatetimeFormatOk returns a tuple with the CustomDatetimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetCustomDatetimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.CustomDatetimeFormat) {
		return nil, false
	}
	return o.CustomDatetimeFormat, true
}

// HasCustomDatetimeFormat returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasCustomDatetimeFormat() bool {
	if o != nil && !IsNil(o.CustomDatetimeFormat) {
		return true
	}

	return false
}

// SetCustomDatetimeFormat gets a reference to the given string and assigns it to the CustomDatetimeFormat field.
func (o *AddPurgeExpiredDataPluginRequest) SetCustomDatetimeFormat(v string) {
	o.CustomDatetimeFormat = &v
}

// GetCustomTimezone returns the CustomTimezone field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetCustomTimezone() string {
	if o == nil || IsNil(o.CustomTimezone) {
		var ret string
		return ret
	}
	return *o.CustomTimezone
}

// GetCustomTimezoneOk returns a tuple with the CustomTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetCustomTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.CustomTimezone) {
		return nil, false
	}
	return o.CustomTimezone, true
}

// HasCustomTimezone returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasCustomTimezone() bool {
	if o != nil && !IsNil(o.CustomTimezone) {
		return true
	}

	return false
}

// SetCustomTimezone gets a reference to the given string and assigns it to the CustomTimezone field.
func (o *AddPurgeExpiredDataPluginRequest) SetCustomTimezone(v string) {
	o.CustomTimezone = &v
}

// GetExpirationOffset returns the ExpirationOffset field value
func (o *AddPurgeExpiredDataPluginRequest) GetExpirationOffset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationOffset
}

// GetExpirationOffsetOk returns a tuple with the ExpirationOffset field value
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetExpirationOffsetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationOffset, true
}

// SetExpirationOffset sets field value
func (o *AddPurgeExpiredDataPluginRequest) SetExpirationOffset(v string) {
	o.ExpirationOffset = v
}

// GetPurgeBehavior returns the PurgeBehavior field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetPurgeBehavior() EnumpluginPurgeBehaviorProp {
	if o == nil || IsNil(o.PurgeBehavior) {
		var ret EnumpluginPurgeBehaviorProp
		return ret
	}
	return *o.PurgeBehavior
}

// GetPurgeBehaviorOk returns a tuple with the PurgeBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetPurgeBehaviorOk() (*EnumpluginPurgeBehaviorProp, bool) {
	if o == nil || IsNil(o.PurgeBehavior) {
		return nil, false
	}
	return o.PurgeBehavior, true
}

// HasPurgeBehavior returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasPurgeBehavior() bool {
	if o != nil && !IsNil(o.PurgeBehavior) {
		return true
	}

	return false
}

// SetPurgeBehavior gets a reference to the given EnumpluginPurgeBehaviorProp and assigns it to the PurgeBehavior field.
func (o *AddPurgeExpiredDataPluginRequest) SetPurgeBehavior(v EnumpluginPurgeBehaviorProp) {
	o.PurgeBehavior = &v
}

// GetBaseDN returns the BaseDN field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetBaseDN() string {
	if o == nil || IsNil(o.BaseDN) {
		var ret string
		return ret
	}
	return *o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetBaseDNOk() (*string, bool) {
	if o == nil || IsNil(o.BaseDN) {
		return nil, false
	}
	return o.BaseDN, true
}

// HasBaseDN returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasBaseDN() bool {
	if o != nil && !IsNil(o.BaseDN) {
		return true
	}

	return false
}

// SetBaseDN gets a reference to the given string and assigns it to the BaseDN field.
func (o *AddPurgeExpiredDataPluginRequest) SetBaseDN(v string) {
	o.BaseDN = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *AddPurgeExpiredDataPluginRequest) SetFilter(v string) {
	o.Filter = &v
}

// GetPollingInterval returns the PollingInterval field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetPollingInterval() string {
	if o == nil || IsNil(o.PollingInterval) {
		var ret string
		return ret
	}
	return *o.PollingInterval
}

// GetPollingIntervalOk returns a tuple with the PollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetPollingIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.PollingInterval) {
		return nil, false
	}
	return o.PollingInterval, true
}

// HasPollingInterval returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasPollingInterval() bool {
	if o != nil && !IsNil(o.PollingInterval) {
		return true
	}

	return false
}

// SetPollingInterval gets a reference to the given string and assigns it to the PollingInterval field.
func (o *AddPurgeExpiredDataPluginRequest) SetPollingInterval(v string) {
	o.PollingInterval = &v
}

// GetMaxUpdatesPerSecond returns the MaxUpdatesPerSecond field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetMaxUpdatesPerSecond() int64 {
	if o == nil || IsNil(o.MaxUpdatesPerSecond) {
		var ret int64
		return ret
	}
	return *o.MaxUpdatesPerSecond
}

// GetMaxUpdatesPerSecondOk returns a tuple with the MaxUpdatesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetMaxUpdatesPerSecondOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxUpdatesPerSecond) {
		return nil, false
	}
	return o.MaxUpdatesPerSecond, true
}

// HasMaxUpdatesPerSecond returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasMaxUpdatesPerSecond() bool {
	if o != nil && !IsNil(o.MaxUpdatesPerSecond) {
		return true
	}

	return false
}

// SetMaxUpdatesPerSecond gets a reference to the given int64 and assigns it to the MaxUpdatesPerSecond field.
func (o *AddPurgeExpiredDataPluginRequest) SetMaxUpdatesPerSecond(v int64) {
	o.MaxUpdatesPerSecond = &v
}

// GetPeerServerPriorityIndex returns the PeerServerPriorityIndex field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetPeerServerPriorityIndex() int64 {
	if o == nil || IsNil(o.PeerServerPriorityIndex) {
		var ret int64
		return ret
	}
	return *o.PeerServerPriorityIndex
}

// GetPeerServerPriorityIndexOk returns a tuple with the PeerServerPriorityIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetPeerServerPriorityIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.PeerServerPriorityIndex) {
		return nil, false
	}
	return o.PeerServerPriorityIndex, true
}

// HasPeerServerPriorityIndex returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasPeerServerPriorityIndex() bool {
	if o != nil && !IsNil(o.PeerServerPriorityIndex) {
		return true
	}

	return false
}

// SetPeerServerPriorityIndex gets a reference to the given int64 and assigns it to the PeerServerPriorityIndex field.
func (o *AddPurgeExpiredDataPluginRequest) SetPeerServerPriorityIndex(v int64) {
	o.PeerServerPriorityIndex = &v
}

// GetNumDeleteThreads returns the NumDeleteThreads field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetNumDeleteThreads() int64 {
	if o == nil || IsNil(o.NumDeleteThreads) {
		var ret int64
		return ret
	}
	return *o.NumDeleteThreads
}

// GetNumDeleteThreadsOk returns a tuple with the NumDeleteThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetNumDeleteThreadsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumDeleteThreads) {
		return nil, false
	}
	return o.NumDeleteThreads, true
}

// HasNumDeleteThreads returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasNumDeleteThreads() bool {
	if o != nil && !IsNil(o.NumDeleteThreads) {
		return true
	}

	return false
}

// SetNumDeleteThreads gets a reference to the given int64 and assigns it to the NumDeleteThreads field.
func (o *AddPurgeExpiredDataPluginRequest) SetNumDeleteThreads(v int64) {
	o.NumDeleteThreads = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddPurgeExpiredDataPluginRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddPurgeExpiredDataPluginRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddPurgeExpiredDataPluginRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddPurgeExpiredDataPluginRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddPurgeExpiredDataPluginRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetPluginName returns the PluginName field value
func (o *AddPurgeExpiredDataPluginRequest) GetPluginName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value
// and a boolean to check if the value has been set.
func (o *AddPurgeExpiredDataPluginRequest) GetPluginNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PluginName, true
}

// SetPluginName sets field value
func (o *AddPurgeExpiredDataPluginRequest) SetPluginName(v string) {
	o.PluginName = v
}

func (o AddPurgeExpiredDataPluginRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddPurgeExpiredDataPluginRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["datetimeAttribute"] = o.DatetimeAttribute
	if !IsNil(o.DatetimeJSONField) {
		toSerialize["datetimeJSONField"] = o.DatetimeJSONField
	}
	if !IsNil(o.DatetimeFormat) {
		toSerialize["datetimeFormat"] = o.DatetimeFormat
	}
	if !IsNil(o.CustomDatetimeFormat) {
		toSerialize["customDatetimeFormat"] = o.CustomDatetimeFormat
	}
	if !IsNil(o.CustomTimezone) {
		toSerialize["customTimezone"] = o.CustomTimezone
	}
	toSerialize["expirationOffset"] = o.ExpirationOffset
	if !IsNil(o.PurgeBehavior) {
		toSerialize["purgeBehavior"] = o.PurgeBehavior
	}
	if !IsNil(o.BaseDN) {
		toSerialize["baseDN"] = o.BaseDN
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.PollingInterval) {
		toSerialize["pollingInterval"] = o.PollingInterval
	}
	if !IsNil(o.MaxUpdatesPerSecond) {
		toSerialize["maxUpdatesPerSecond"] = o.MaxUpdatesPerSecond
	}
	if !IsNil(o.PeerServerPriorityIndex) {
		toSerialize["peerServerPriorityIndex"] = o.PeerServerPriorityIndex
	}
	if !IsNil(o.NumDeleteThreads) {
		toSerialize["numDeleteThreads"] = o.NumDeleteThreads
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["pluginName"] = o.PluginName
	return toSerialize, nil
}

type NullableAddPurgeExpiredDataPluginRequest struct {
	value *AddPurgeExpiredDataPluginRequest
	isSet bool
}

func (v NullableAddPurgeExpiredDataPluginRequest) Get() *AddPurgeExpiredDataPluginRequest {
	return v.value
}

func (v *NullableAddPurgeExpiredDataPluginRequest) Set(val *AddPurgeExpiredDataPluginRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPurgeExpiredDataPluginRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPurgeExpiredDataPluginRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPurgeExpiredDataPluginRequest(val *AddPurgeExpiredDataPluginRequest) *NullableAddPurgeExpiredDataPluginRequest {
	return &NullableAddPurgeExpiredDataPluginRequest{value: val, isSet: true}
}

func (v NullableAddPurgeExpiredDataPluginRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPurgeExpiredDataPluginRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
