/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdebugTargetSchemaUrn the model 'EnumdebugTargetSchemaUrn'
type EnumdebugTargetSchemaUrn string

// List of Enumdebug-targetSchemaUrn
const (
	ENUMDEBUGTARGETSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DEBUG_TARGET EnumdebugTargetSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:debug-target"
)

// All allowed values of EnumdebugTargetSchemaUrn enum
var AllowedEnumdebugTargetSchemaUrnEnumValues = []EnumdebugTargetSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:debug-target",
}

func (v *EnumdebugTargetSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdebugTargetSchemaUrn(value)
	for _, existing := range AllowedEnumdebugTargetSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdebugTargetSchemaUrn", value)
}

// NewEnumdebugTargetSchemaUrnFromValue returns a pointer to a valid EnumdebugTargetSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdebugTargetSchemaUrnFromValue(v string) (*EnumdebugTargetSchemaUrn, error) {
	ev := EnumdebugTargetSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdebugTargetSchemaUrn: valid values are %v", v, AllowedEnumdebugTargetSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdebugTargetSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdebugTargetSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdebug-targetSchemaUrn value
func (v EnumdebugTargetSchemaUrn) Ptr() *EnumdebugTargetSchemaUrn {
	return &v
}

type NullableEnumdebugTargetSchemaUrn struct {
	value *EnumdebugTargetSchemaUrn
	isSet bool
}

func (v NullableEnumdebugTargetSchemaUrn) Get() *EnumdebugTargetSchemaUrn {
	return v.value
}

func (v *NullableEnumdebugTargetSchemaUrn) Set(val *EnumdebugTargetSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdebugTargetSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdebugTargetSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdebugTargetSchemaUrn(val *EnumdebugTargetSchemaUrn) *NullableEnumdebugTargetSchemaUrn {
	return &NullableEnumdebugTargetSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdebugTargetSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdebugTargetSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
