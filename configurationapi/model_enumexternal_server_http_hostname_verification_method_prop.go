/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalServerHttpHostnameVerificationMethodProp The mechanism for checking if the hostname of the HTTP External Server matches the name(s) stored inside the server's X.509 certificate. This is only applicable if SSL is being used for connection security.
type EnumexternalServerHttpHostnameVerificationMethodProp string

// List of Enumexternal-server-http-hostnameVerificationMethodProp
const (
	ENUMEXTERNALSERVERHTTPHOSTNAMEVERIFICATIONMETHODPROP_ALLOW_ALL EnumexternalServerHttpHostnameVerificationMethodProp = "allow-all"
	ENUMEXTERNALSERVERHTTPHOSTNAMEVERIFICATIONMETHODPROP_STRICT    EnumexternalServerHttpHostnameVerificationMethodProp = "strict"
)

// All allowed values of EnumexternalServerHttpHostnameVerificationMethodProp enum
var AllowedEnumexternalServerHttpHostnameVerificationMethodPropEnumValues = []EnumexternalServerHttpHostnameVerificationMethodProp{
	"allow-all",
	"strict",
}

func (v *EnumexternalServerHttpHostnameVerificationMethodProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalServerHttpHostnameVerificationMethodProp(value)
	for _, existing := range AllowedEnumexternalServerHttpHostnameVerificationMethodPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalServerHttpHostnameVerificationMethodProp", value)
}

// NewEnumexternalServerHttpHostnameVerificationMethodPropFromValue returns a pointer to a valid EnumexternalServerHttpHostnameVerificationMethodProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalServerHttpHostnameVerificationMethodPropFromValue(v string) (*EnumexternalServerHttpHostnameVerificationMethodProp, error) {
	ev := EnumexternalServerHttpHostnameVerificationMethodProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalServerHttpHostnameVerificationMethodProp: valid values are %v", v, AllowedEnumexternalServerHttpHostnameVerificationMethodPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalServerHttpHostnameVerificationMethodProp) IsValid() bool {
	for _, existing := range AllowedEnumexternalServerHttpHostnameVerificationMethodPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-server-http-hostnameVerificationMethodProp value
func (v EnumexternalServerHttpHostnameVerificationMethodProp) Ptr() *EnumexternalServerHttpHostnameVerificationMethodProp {
	return &v
}

type NullableEnumexternalServerHttpHostnameVerificationMethodProp struct {
	value *EnumexternalServerHttpHostnameVerificationMethodProp
	isSet bool
}

func (v NullableEnumexternalServerHttpHostnameVerificationMethodProp) Get() *EnumexternalServerHttpHostnameVerificationMethodProp {
	return v.value
}

func (v *NullableEnumexternalServerHttpHostnameVerificationMethodProp) Set(val *EnumexternalServerHttpHostnameVerificationMethodProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalServerHttpHostnameVerificationMethodProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalServerHttpHostnameVerificationMethodProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalServerHttpHostnameVerificationMethodProp(val *EnumexternalServerHttpHostnameVerificationMethodProp) *NullableEnumexternalServerHttpHostnameVerificationMethodProp {
	return &NullableEnumexternalServerHttpHostnameVerificationMethodProp{value: val, isSet: true}
}

func (v NullableEnumexternalServerHttpHostnameVerificationMethodProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalServerHttpHostnameVerificationMethodProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
