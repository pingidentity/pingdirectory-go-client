/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpServletExtensionDebugTypeProp The types of debug messages that should be logged.
type EnumhttpServletExtensionDebugTypeProp string

// List of Enumhttp-servlet-extension-debugTypeProp
const (
	ENUMHTTPSERVLETEXTENSIONDEBUGTYPEPROP_CODING_ERROR EnumhttpServletExtensionDebugTypeProp = "coding-error"
	ENUMHTTPSERVLETEXTENSIONDEBUGTYPEPROP_EXCEPTION    EnumhttpServletExtensionDebugTypeProp = "exception"
	ENUMHTTPSERVLETEXTENSIONDEBUGTYPEPROP_OTHER        EnumhttpServletExtensionDebugTypeProp = "other"
)

// All allowed values of EnumhttpServletExtensionDebugTypeProp enum
var AllowedEnumhttpServletExtensionDebugTypePropEnumValues = []EnumhttpServletExtensionDebugTypeProp{
	"coding-error",
	"exception",
	"other",
}

func (v *EnumhttpServletExtensionDebugTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpServletExtensionDebugTypeProp(value)
	for _, existing := range AllowedEnumhttpServletExtensionDebugTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpServletExtensionDebugTypeProp", value)
}

// NewEnumhttpServletExtensionDebugTypePropFromValue returns a pointer to a valid EnumhttpServletExtensionDebugTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpServletExtensionDebugTypePropFromValue(v string) (*EnumhttpServletExtensionDebugTypeProp, error) {
	ev := EnumhttpServletExtensionDebugTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpServletExtensionDebugTypeProp: valid values are %v", v, AllowedEnumhttpServletExtensionDebugTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpServletExtensionDebugTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumhttpServletExtensionDebugTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-servlet-extension-debugTypeProp value
func (v EnumhttpServletExtensionDebugTypeProp) Ptr() *EnumhttpServletExtensionDebugTypeProp {
	return &v
}

type NullableEnumhttpServletExtensionDebugTypeProp struct {
	value *EnumhttpServletExtensionDebugTypeProp
	isSet bool
}

func (v NullableEnumhttpServletExtensionDebugTypeProp) Get() *EnumhttpServletExtensionDebugTypeProp {
	return v.value
}

func (v *NullableEnumhttpServletExtensionDebugTypeProp) Set(val *EnumhttpServletExtensionDebugTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpServletExtensionDebugTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpServletExtensionDebugTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpServletExtensionDebugTypeProp(val *EnumhttpServletExtensionDebugTypeProp) *NullableEnumhttpServletExtensionDebugTypeProp {
	return &NullableEnumhttpServletExtensionDebugTypeProp{value: val, isSet: true}
}

func (v NullableEnumhttpServletExtensionDebugTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpServletExtensionDebugTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
