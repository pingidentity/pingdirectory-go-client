/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddLogFileRotationListenerRequest - struct for AddLogFileRotationListenerRequest
type AddLogFileRotationListenerRequest struct {
	AddCopyLogFileRotationListenerRequest       *AddCopyLogFileRotationListenerRequest
	AddSummarizeLogFileRotationListenerRequest  *AddSummarizeLogFileRotationListenerRequest
	AddThirdPartyLogFileRotationListenerRequest *AddThirdPartyLogFileRotationListenerRequest
	AddUploadToS3LogFileRotationListenerRequest *AddUploadToS3LogFileRotationListenerRequest
}

// AddCopyLogFileRotationListenerRequestAsAddLogFileRotationListenerRequest is a convenience function that returns AddCopyLogFileRotationListenerRequest wrapped in AddLogFileRotationListenerRequest
func AddCopyLogFileRotationListenerRequestAsAddLogFileRotationListenerRequest(v *AddCopyLogFileRotationListenerRequest) AddLogFileRotationListenerRequest {
	return AddLogFileRotationListenerRequest{
		AddCopyLogFileRotationListenerRequest: v,
	}
}

// AddSummarizeLogFileRotationListenerRequestAsAddLogFileRotationListenerRequest is a convenience function that returns AddSummarizeLogFileRotationListenerRequest wrapped in AddLogFileRotationListenerRequest
func AddSummarizeLogFileRotationListenerRequestAsAddLogFileRotationListenerRequest(v *AddSummarizeLogFileRotationListenerRequest) AddLogFileRotationListenerRequest {
	return AddLogFileRotationListenerRequest{
		AddSummarizeLogFileRotationListenerRequest: v,
	}
}

// AddThirdPartyLogFileRotationListenerRequestAsAddLogFileRotationListenerRequest is a convenience function that returns AddThirdPartyLogFileRotationListenerRequest wrapped in AddLogFileRotationListenerRequest
func AddThirdPartyLogFileRotationListenerRequestAsAddLogFileRotationListenerRequest(v *AddThirdPartyLogFileRotationListenerRequest) AddLogFileRotationListenerRequest {
	return AddLogFileRotationListenerRequest{
		AddThirdPartyLogFileRotationListenerRequest: v,
	}
}

// AddUploadToS3LogFileRotationListenerRequestAsAddLogFileRotationListenerRequest is a convenience function that returns AddUploadToS3LogFileRotationListenerRequest wrapped in AddLogFileRotationListenerRequest
func AddUploadToS3LogFileRotationListenerRequestAsAddLogFileRotationListenerRequest(v *AddUploadToS3LogFileRotationListenerRequest) AddLogFileRotationListenerRequest {
	return AddLogFileRotationListenerRequest{
		AddUploadToS3LogFileRotationListenerRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogFileRotationListenerRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddCopyLogFileRotationListenerRequest
	err = newStrictDecoder(data).Decode(&dst.AddCopyLogFileRotationListenerRequest)
	if err == nil {
		jsonAddCopyLogFileRotationListenerRequest, _ := json.Marshal(dst.AddCopyLogFileRotationListenerRequest)
		if string(jsonAddCopyLogFileRotationListenerRequest) == "{}" { // empty struct
			dst.AddCopyLogFileRotationListenerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddCopyLogFileRotationListenerRequest = nil
	}

	// try to unmarshal data into AddSummarizeLogFileRotationListenerRequest
	err = newStrictDecoder(data).Decode(&dst.AddSummarizeLogFileRotationListenerRequest)
	if err == nil {
		jsonAddSummarizeLogFileRotationListenerRequest, _ := json.Marshal(dst.AddSummarizeLogFileRotationListenerRequest)
		if string(jsonAddSummarizeLogFileRotationListenerRequest) == "{}" { // empty struct
			dst.AddSummarizeLogFileRotationListenerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddSummarizeLogFileRotationListenerRequest = nil
	}

	// try to unmarshal data into AddThirdPartyLogFileRotationListenerRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyLogFileRotationListenerRequest)
	if err == nil {
		jsonAddThirdPartyLogFileRotationListenerRequest, _ := json.Marshal(dst.AddThirdPartyLogFileRotationListenerRequest)
		if string(jsonAddThirdPartyLogFileRotationListenerRequest) == "{}" { // empty struct
			dst.AddThirdPartyLogFileRotationListenerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyLogFileRotationListenerRequest = nil
	}

	// try to unmarshal data into AddUploadToS3LogFileRotationListenerRequest
	err = newStrictDecoder(data).Decode(&dst.AddUploadToS3LogFileRotationListenerRequest)
	if err == nil {
		jsonAddUploadToS3LogFileRotationListenerRequest, _ := json.Marshal(dst.AddUploadToS3LogFileRotationListenerRequest)
		if string(jsonAddUploadToS3LogFileRotationListenerRequest) == "{}" { // empty struct
			dst.AddUploadToS3LogFileRotationListenerRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddUploadToS3LogFileRotationListenerRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddCopyLogFileRotationListenerRequest = nil
		dst.AddSummarizeLogFileRotationListenerRequest = nil
		dst.AddThirdPartyLogFileRotationListenerRequest = nil
		dst.AddUploadToS3LogFileRotationListenerRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogFileRotationListenerRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogFileRotationListenerRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogFileRotationListenerRequest) MarshalJSON() ([]byte, error) {
	if src.AddCopyLogFileRotationListenerRequest != nil {
		return json.Marshal(&src.AddCopyLogFileRotationListenerRequest)
	}

	if src.AddSummarizeLogFileRotationListenerRequest != nil {
		return json.Marshal(&src.AddSummarizeLogFileRotationListenerRequest)
	}

	if src.AddThirdPartyLogFileRotationListenerRequest != nil {
		return json.Marshal(&src.AddThirdPartyLogFileRotationListenerRequest)
	}

	if src.AddUploadToS3LogFileRotationListenerRequest != nil {
		return json.Marshal(&src.AddUploadToS3LogFileRotationListenerRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogFileRotationListenerRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddCopyLogFileRotationListenerRequest != nil {
		return obj.AddCopyLogFileRotationListenerRequest
	}

	if obj.AddSummarizeLogFileRotationListenerRequest != nil {
		return obj.AddSummarizeLogFileRotationListenerRequest
	}

	if obj.AddThirdPartyLogFileRotationListenerRequest != nil {
		return obj.AddThirdPartyLogFileRotationListenerRequest
	}

	if obj.AddUploadToS3LogFileRotationListenerRequest != nil {
		return obj.AddUploadToS3LogFileRotationListenerRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddLogFileRotationListenerRequest struct {
	value *AddLogFileRotationListenerRequest
	isSet bool
}

func (v NullableAddLogFileRotationListenerRequest) Get() *AddLogFileRotationListenerRequest {
	return v.value
}

func (v *NullableAddLogFileRotationListenerRequest) Set(val *AddLogFileRotationListenerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogFileRotationListenerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogFileRotationListenerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogFileRotationListenerRequest(val *AddLogFileRotationListenerRequest) *NullableAddLogFileRotationListenerRequest {
	return &NullableAddLogFileRotationListenerRequest{value: val, isSet: true}
}

func (v NullableAddLogFileRotationListenerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogFileRotationListenerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
