/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginReadOperationSupportProp The level of support that the server should offer to allow treating search and compare operations targeting inverted static groups as if they were traditional static groups.
type EnumpluginReadOperationSupportProp string

// List of Enumplugin-readOperationSupportProp
const (
	ENUMPLUGINREADOPERATIONSUPPORTPROP_DISABLED                                              EnumpluginReadOperationSupportProp = "disabled"
	ENUMPLUGINREADOPERATIONSUPPORTPROP_ENABLED_WITHOUT_SUPPORT_FOR_RETRIEVING_MEMBERSHIP     EnumpluginReadOperationSupportProp = "enabled-without-support-for-retrieving-membership"
	ENUMPLUGINREADOPERATIONSUPPORTPROP_ENABLED_WITH_SUPPORT_FOR_RETRIEVING_DIRECT_MEMBERSHIP EnumpluginReadOperationSupportProp = "enabled-with-support-for-retrieving-direct-membership"
	ENUMPLUGINREADOPERATIONSUPPORTPROP_ENABLED_WITH_SUPPORT_FOR_RETRIEVING_NESTED_MEMBERSHIP EnumpluginReadOperationSupportProp = "enabled-with-support-for-retrieving-nested-membership"
)

// All allowed values of EnumpluginReadOperationSupportProp enum
var AllowedEnumpluginReadOperationSupportPropEnumValues = []EnumpluginReadOperationSupportProp{
	"disabled",
	"enabled-without-support-for-retrieving-membership",
	"enabled-with-support-for-retrieving-direct-membership",
	"enabled-with-support-for-retrieving-nested-membership",
}

func (v *EnumpluginReadOperationSupportProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginReadOperationSupportProp(value)
	for _, existing := range AllowedEnumpluginReadOperationSupportPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginReadOperationSupportProp", value)
}

// NewEnumpluginReadOperationSupportPropFromValue returns a pointer to a valid EnumpluginReadOperationSupportProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginReadOperationSupportPropFromValue(v string) (*EnumpluginReadOperationSupportProp, error) {
	ev := EnumpluginReadOperationSupportProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginReadOperationSupportProp: valid values are %v", v, AllowedEnumpluginReadOperationSupportPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginReadOperationSupportProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginReadOperationSupportPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-readOperationSupportProp value
func (v EnumpluginReadOperationSupportProp) Ptr() *EnumpluginReadOperationSupportProp {
	return &v
}

type NullableEnumpluginReadOperationSupportProp struct {
	value *EnumpluginReadOperationSupportProp
	isSet bool
}

func (v NullableEnumpluginReadOperationSupportProp) Get() *EnumpluginReadOperationSupportProp {
	return v.value
}

func (v *NullableEnumpluginReadOperationSupportProp) Set(val *EnumpluginReadOperationSupportProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginReadOperationSupportProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginReadOperationSupportProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginReadOperationSupportProp(val *EnumpluginReadOperationSupportProp) *NullableEnumpluginReadOperationSupportProp {
	return &NullableEnumpluginReadOperationSupportProp{value: val, isSet: true}
}

func (v NullableEnumpluginReadOperationSupportProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginReadOperationSupportProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
