/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumstandardHttpServletExtensionSchemaUrn the model 'EnumstandardHttpServletExtensionSchemaUrn'
type EnumstandardHttpServletExtensionSchemaUrn string

// List of Enumstandard-http-servlet-extensionSchemaUrn
const (
	ENUMSTANDARDHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONSTANDARD EnumstandardHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:standard"
)

// All allowed values of EnumstandardHttpServletExtensionSchemaUrn enum
var AllowedEnumstandardHttpServletExtensionSchemaUrnEnumValues = []EnumstandardHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:standard",
}

func (v *EnumstandardHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumstandardHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumstandardHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumstandardHttpServletExtensionSchemaUrn", value)
}

// NewEnumstandardHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumstandardHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumstandardHttpServletExtensionSchemaUrnFromValue(v string) (*EnumstandardHttpServletExtensionSchemaUrn, error) {
	ev := EnumstandardHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumstandardHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumstandardHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumstandardHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumstandardHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumstandard-http-servlet-extensionSchemaUrn value
func (v EnumstandardHttpServletExtensionSchemaUrn) Ptr() *EnumstandardHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumstandardHttpServletExtensionSchemaUrn struct {
	value *EnumstandardHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumstandardHttpServletExtensionSchemaUrn) Get() *EnumstandardHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumstandardHttpServletExtensionSchemaUrn) Set(val *EnumstandardHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumstandardHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumstandardHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumstandardHttpServletExtensionSchemaUrn(val *EnumstandardHttpServletExtensionSchemaUrn) *NullableEnumstandardHttpServletExtensionSchemaUrn {
	return &NullableEnumstandardHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumstandardHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumstandardHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
