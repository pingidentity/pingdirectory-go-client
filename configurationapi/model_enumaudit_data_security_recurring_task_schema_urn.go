/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumauditDataSecurityRecurringTaskSchemaUrn the model 'EnumauditDataSecurityRecurringTaskSchemaUrn'
type EnumauditDataSecurityRecurringTaskSchemaUrn string

// List of Enumaudit-data-security-recurring-taskSchemaUrn
const (
	ENUMAUDITDATASECURITYRECURRINGTASKSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RECURRING_TASKAUDIT_DATA_SECURITY EnumauditDataSecurityRecurringTaskSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:recurring-task:audit-data-security"
)

// All allowed values of EnumauditDataSecurityRecurringTaskSchemaUrn enum
var AllowedEnumauditDataSecurityRecurringTaskSchemaUrnEnumValues = []EnumauditDataSecurityRecurringTaskSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:recurring-task:audit-data-security",
}

func (v *EnumauditDataSecurityRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumauditDataSecurityRecurringTaskSchemaUrn(value)
	for _, existing := range AllowedEnumauditDataSecurityRecurringTaskSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumauditDataSecurityRecurringTaskSchemaUrn", value)
}

// NewEnumauditDataSecurityRecurringTaskSchemaUrnFromValue returns a pointer to a valid EnumauditDataSecurityRecurringTaskSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumauditDataSecurityRecurringTaskSchemaUrnFromValue(v string) (*EnumauditDataSecurityRecurringTaskSchemaUrn, error) {
	ev := EnumauditDataSecurityRecurringTaskSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumauditDataSecurityRecurringTaskSchemaUrn: valid values are %v", v, AllowedEnumauditDataSecurityRecurringTaskSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumauditDataSecurityRecurringTaskSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumauditDataSecurityRecurringTaskSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaudit-data-security-recurring-taskSchemaUrn value
func (v EnumauditDataSecurityRecurringTaskSchemaUrn) Ptr() *EnumauditDataSecurityRecurringTaskSchemaUrn {
	return &v
}

type NullableEnumauditDataSecurityRecurringTaskSchemaUrn struct {
	value *EnumauditDataSecurityRecurringTaskSchemaUrn
	isSet bool
}

func (v NullableEnumauditDataSecurityRecurringTaskSchemaUrn) Get() *EnumauditDataSecurityRecurringTaskSchemaUrn {
	return v.value
}

func (v *NullableEnumauditDataSecurityRecurringTaskSchemaUrn) Set(val *EnumauditDataSecurityRecurringTaskSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumauditDataSecurityRecurringTaskSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumauditDataSecurityRecurringTaskSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumauditDataSecurityRecurringTaskSchemaUrn(val *EnumauditDataSecurityRecurringTaskSchemaUrn) *NullableEnumauditDataSecurityRecurringTaskSchemaUrn {
	return &NullableEnumauditDataSecurityRecurringTaskSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumauditDataSecurityRecurringTaskSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumauditDataSecurityRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
