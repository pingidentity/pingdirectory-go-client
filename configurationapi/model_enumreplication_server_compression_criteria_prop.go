/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationServerCompressionCriteriaProp Specifies when the replication traffic should be compressed.
type EnumreplicationServerCompressionCriteriaProp string

// List of Enumreplication-server-compressionCriteriaProp
const (
	ENUMREPLICATIONSERVERCOMPRESSIONCRITERIAPROP_ALWAYS EnumreplicationServerCompressionCriteriaProp = "always"
	ENUMREPLICATIONSERVERCOMPRESSIONCRITERIAPROP_REMOTE EnumreplicationServerCompressionCriteriaProp = "remote"
	ENUMREPLICATIONSERVERCOMPRESSIONCRITERIAPROP_NEVER  EnumreplicationServerCompressionCriteriaProp = "never"
)

// All allowed values of EnumreplicationServerCompressionCriteriaProp enum
var AllowedEnumreplicationServerCompressionCriteriaPropEnumValues = []EnumreplicationServerCompressionCriteriaProp{
	"always",
	"remote",
	"never",
}

func (v *EnumreplicationServerCompressionCriteriaProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationServerCompressionCriteriaProp(value)
	for _, existing := range AllowedEnumreplicationServerCompressionCriteriaPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationServerCompressionCriteriaProp", value)
}

// NewEnumreplicationServerCompressionCriteriaPropFromValue returns a pointer to a valid EnumreplicationServerCompressionCriteriaProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationServerCompressionCriteriaPropFromValue(v string) (*EnumreplicationServerCompressionCriteriaProp, error) {
	ev := EnumreplicationServerCompressionCriteriaProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationServerCompressionCriteriaProp: valid values are %v", v, AllowedEnumreplicationServerCompressionCriteriaPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationServerCompressionCriteriaProp) IsValid() bool {
	for _, existing := range AllowedEnumreplicationServerCompressionCriteriaPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-server-compressionCriteriaProp value
func (v EnumreplicationServerCompressionCriteriaProp) Ptr() *EnumreplicationServerCompressionCriteriaProp {
	return &v
}

type NullableEnumreplicationServerCompressionCriteriaProp struct {
	value *EnumreplicationServerCompressionCriteriaProp
	isSet bool
}

func (v NullableEnumreplicationServerCompressionCriteriaProp) Get() *EnumreplicationServerCompressionCriteriaProp {
	return v.value
}

func (v *NullableEnumreplicationServerCompressionCriteriaProp) Set(val *EnumreplicationServerCompressionCriteriaProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationServerCompressionCriteriaProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationServerCompressionCriteriaProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationServerCompressionCriteriaProp(val *EnumreplicationServerCompressionCriteriaProp) *NullableEnumreplicationServerCompressionCriteriaProp {
	return &NullableEnumreplicationServerCompressionCriteriaProp{value: val, isSet: true}
}

func (v NullableEnumreplicationServerCompressionCriteriaProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationServerCompressionCriteriaProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
