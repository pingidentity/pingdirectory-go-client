/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumbooleanAttributeSyntaxSchemaUrn the model 'EnumbooleanAttributeSyntaxSchemaUrn'
type EnumbooleanAttributeSyntaxSchemaUrn string

// List of Enumboolean-attribute-syntaxSchemaUrn
const (
	ENUMBOOLEANATTRIBUTESYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ATTRIBUTE_SYNTAXBOOLEAN EnumbooleanAttributeSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:attribute-syntax:boolean"
)

// All allowed values of EnumbooleanAttributeSyntaxSchemaUrn enum
var AllowedEnumbooleanAttributeSyntaxSchemaUrnEnumValues = []EnumbooleanAttributeSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:attribute-syntax:boolean",
}

func (v *EnumbooleanAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbooleanAttributeSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumbooleanAttributeSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbooleanAttributeSyntaxSchemaUrn", value)
}

// NewEnumbooleanAttributeSyntaxSchemaUrnFromValue returns a pointer to a valid EnumbooleanAttributeSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbooleanAttributeSyntaxSchemaUrnFromValue(v string) (*EnumbooleanAttributeSyntaxSchemaUrn, error) {
	ev := EnumbooleanAttributeSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbooleanAttributeSyntaxSchemaUrn: valid values are %v", v, AllowedEnumbooleanAttributeSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbooleanAttributeSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumbooleanAttributeSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumboolean-attribute-syntaxSchemaUrn value
func (v EnumbooleanAttributeSyntaxSchemaUrn) Ptr() *EnumbooleanAttributeSyntaxSchemaUrn {
	return &v
}

type NullableEnumbooleanAttributeSyntaxSchemaUrn struct {
	value *EnumbooleanAttributeSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumbooleanAttributeSyntaxSchemaUrn) Get() *EnumbooleanAttributeSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumbooleanAttributeSyntaxSchemaUrn) Set(val *EnumbooleanAttributeSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbooleanAttributeSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbooleanAttributeSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbooleanAttributeSyntaxSchemaUrn(val *EnumbooleanAttributeSyntaxSchemaUrn) *NullableEnumbooleanAttributeSyntaxSchemaUrn {
	return &NullableEnumbooleanAttributeSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumbooleanAttributeSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbooleanAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
