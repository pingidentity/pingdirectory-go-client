/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonPdpApiHttpServletExtensionSchemaUrn the model 'EnumjsonPdpApiHttpServletExtensionSchemaUrn'
type EnumjsonPdpApiHttpServletExtensionSchemaUrn string

// List of Enumjson-pdp-api-http-servlet-extensionSchemaUrn
const (
	ENUMJSONPDPAPIHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONJSON_PDP_API EnumjsonPdpApiHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:json-pdp-api"
)

// All allowed values of EnumjsonPdpApiHttpServletExtensionSchemaUrn enum
var AllowedEnumjsonPdpApiHttpServletExtensionSchemaUrnEnumValues = []EnumjsonPdpApiHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:json-pdp-api",
}

func (v *EnumjsonPdpApiHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonPdpApiHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumjsonPdpApiHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonPdpApiHttpServletExtensionSchemaUrn", value)
}

// NewEnumjsonPdpApiHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumjsonPdpApiHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonPdpApiHttpServletExtensionSchemaUrnFromValue(v string) (*EnumjsonPdpApiHttpServletExtensionSchemaUrn, error) {
	ev := EnumjsonPdpApiHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonPdpApiHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumjsonPdpApiHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonPdpApiHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjsonPdpApiHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-pdp-api-http-servlet-extensionSchemaUrn value
func (v EnumjsonPdpApiHttpServletExtensionSchemaUrn) Ptr() *EnumjsonPdpApiHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn struct {
	value *EnumjsonPdpApiHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn) Get() *EnumjsonPdpApiHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn) Set(val *EnumjsonPdpApiHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonPdpApiHttpServletExtensionSchemaUrn(val *EnumjsonPdpApiHttpServletExtensionSchemaUrn) *NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn {
	return &NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonPdpApiHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
