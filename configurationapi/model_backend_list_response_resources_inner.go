/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// BackendListResponseResourcesInner - struct for BackendListResponseResourcesInner
type BackendListResponseResourcesInner struct {
	AlarmBackendResponse              *AlarmBackendResponse
	AlertBackendResponse              *AlertBackendResponse
	BackupBackendResponse             *BackupBackendResponse
	CannedResponseBackendResponse     *CannedResponseBackendResponse
	ChangelogBackendResponse          *ChangelogBackendResponse
	ConfigFileHandlerBackendResponse  *ConfigFileHandlerBackendResponse
	CustomBackendResponse             *CustomBackendResponse
	EncryptionSettingsBackendResponse *EncryptionSettingsBackendResponse
	LargeAttributeBackendResponse     *LargeAttributeBackendResponse
	LdifBackendResponse               *LdifBackendResponse
	LocalDbBackendResponse            *LocalDbBackendResponse
	MemoryBackendResponse             *MemoryBackendResponse
	MetricsBackendResponse            *MetricsBackendResponse
	MirroredLdifBackendResponse       *MirroredLdifBackendResponse
	MonitorBackendResponse            *MonitorBackendResponse
	SchemaBackendResponse             *SchemaBackendResponse
	TaskBackendResponse               *TaskBackendResponse
	TrustStoreBackendResponse         *TrustStoreBackendResponse
}

// AlarmBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns AlarmBackendResponse wrapped in BackendListResponseResourcesInner
func AlarmBackendResponseAsBackendListResponseResourcesInner(v *AlarmBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		AlarmBackendResponse: v,
	}
}

// AlertBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns AlertBackendResponse wrapped in BackendListResponseResourcesInner
func AlertBackendResponseAsBackendListResponseResourcesInner(v *AlertBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		AlertBackendResponse: v,
	}
}

// BackupBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns BackupBackendResponse wrapped in BackendListResponseResourcesInner
func BackupBackendResponseAsBackendListResponseResourcesInner(v *BackupBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		BackupBackendResponse: v,
	}
}

// CannedResponseBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns CannedResponseBackendResponse wrapped in BackendListResponseResourcesInner
func CannedResponseBackendResponseAsBackendListResponseResourcesInner(v *CannedResponseBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		CannedResponseBackendResponse: v,
	}
}

// ChangelogBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns ChangelogBackendResponse wrapped in BackendListResponseResourcesInner
func ChangelogBackendResponseAsBackendListResponseResourcesInner(v *ChangelogBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		ChangelogBackendResponse: v,
	}
}

// ConfigFileHandlerBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns ConfigFileHandlerBackendResponse wrapped in BackendListResponseResourcesInner
func ConfigFileHandlerBackendResponseAsBackendListResponseResourcesInner(v *ConfigFileHandlerBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		ConfigFileHandlerBackendResponse: v,
	}
}

// CustomBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns CustomBackendResponse wrapped in BackendListResponseResourcesInner
func CustomBackendResponseAsBackendListResponseResourcesInner(v *CustomBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		CustomBackendResponse: v,
	}
}

// EncryptionSettingsBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns EncryptionSettingsBackendResponse wrapped in BackendListResponseResourcesInner
func EncryptionSettingsBackendResponseAsBackendListResponseResourcesInner(v *EncryptionSettingsBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		EncryptionSettingsBackendResponse: v,
	}
}

// LargeAttributeBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns LargeAttributeBackendResponse wrapped in BackendListResponseResourcesInner
func LargeAttributeBackendResponseAsBackendListResponseResourcesInner(v *LargeAttributeBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		LargeAttributeBackendResponse: v,
	}
}

// LdifBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns LdifBackendResponse wrapped in BackendListResponseResourcesInner
func LdifBackendResponseAsBackendListResponseResourcesInner(v *LdifBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		LdifBackendResponse: v,
	}
}

// LocalDbBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns LocalDbBackendResponse wrapped in BackendListResponseResourcesInner
func LocalDbBackendResponseAsBackendListResponseResourcesInner(v *LocalDbBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		LocalDbBackendResponse: v,
	}
}

// MemoryBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns MemoryBackendResponse wrapped in BackendListResponseResourcesInner
func MemoryBackendResponseAsBackendListResponseResourcesInner(v *MemoryBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		MemoryBackendResponse: v,
	}
}

// MetricsBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns MetricsBackendResponse wrapped in BackendListResponseResourcesInner
func MetricsBackendResponseAsBackendListResponseResourcesInner(v *MetricsBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		MetricsBackendResponse: v,
	}
}

// MirroredLdifBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns MirroredLdifBackendResponse wrapped in BackendListResponseResourcesInner
func MirroredLdifBackendResponseAsBackendListResponseResourcesInner(v *MirroredLdifBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		MirroredLdifBackendResponse: v,
	}
}

// MonitorBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns MonitorBackendResponse wrapped in BackendListResponseResourcesInner
func MonitorBackendResponseAsBackendListResponseResourcesInner(v *MonitorBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		MonitorBackendResponse: v,
	}
}

// SchemaBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns SchemaBackendResponse wrapped in BackendListResponseResourcesInner
func SchemaBackendResponseAsBackendListResponseResourcesInner(v *SchemaBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		SchemaBackendResponse: v,
	}
}

// TaskBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns TaskBackendResponse wrapped in BackendListResponseResourcesInner
func TaskBackendResponseAsBackendListResponseResourcesInner(v *TaskBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		TaskBackendResponse: v,
	}
}

// TrustStoreBackendResponseAsBackendListResponseResourcesInner is a convenience function that returns TrustStoreBackendResponse wrapped in BackendListResponseResourcesInner
func TrustStoreBackendResponseAsBackendListResponseResourcesInner(v *TrustStoreBackendResponse) BackendListResponseResourcesInner {
	return BackendListResponseResourcesInner{
		TrustStoreBackendResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BackendListResponseResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AlarmBackendResponse
	err = newStrictDecoder(data).Decode(&dst.AlarmBackendResponse)
	if err == nil {
		jsonAlarmBackendResponse, _ := json.Marshal(dst.AlarmBackendResponse)
		if string(jsonAlarmBackendResponse) == "{}" { // empty struct
			dst.AlarmBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.AlarmBackendResponse = nil
	}

	// try to unmarshal data into AlertBackendResponse
	err = newStrictDecoder(data).Decode(&dst.AlertBackendResponse)
	if err == nil {
		jsonAlertBackendResponse, _ := json.Marshal(dst.AlertBackendResponse)
		if string(jsonAlertBackendResponse) == "{}" { // empty struct
			dst.AlertBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.AlertBackendResponse = nil
	}

	// try to unmarshal data into BackupBackendResponse
	err = newStrictDecoder(data).Decode(&dst.BackupBackendResponse)
	if err == nil {
		jsonBackupBackendResponse, _ := json.Marshal(dst.BackupBackendResponse)
		if string(jsonBackupBackendResponse) == "{}" { // empty struct
			dst.BackupBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.BackupBackendResponse = nil
	}

	// try to unmarshal data into CannedResponseBackendResponse
	err = newStrictDecoder(data).Decode(&dst.CannedResponseBackendResponse)
	if err == nil {
		jsonCannedResponseBackendResponse, _ := json.Marshal(dst.CannedResponseBackendResponse)
		if string(jsonCannedResponseBackendResponse) == "{}" { // empty struct
			dst.CannedResponseBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.CannedResponseBackendResponse = nil
	}

	// try to unmarshal data into ChangelogBackendResponse
	err = newStrictDecoder(data).Decode(&dst.ChangelogBackendResponse)
	if err == nil {
		jsonChangelogBackendResponse, _ := json.Marshal(dst.ChangelogBackendResponse)
		if string(jsonChangelogBackendResponse) == "{}" { // empty struct
			dst.ChangelogBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.ChangelogBackendResponse = nil
	}

	// try to unmarshal data into ConfigFileHandlerBackendResponse
	err = newStrictDecoder(data).Decode(&dst.ConfigFileHandlerBackendResponse)
	if err == nil {
		jsonConfigFileHandlerBackendResponse, _ := json.Marshal(dst.ConfigFileHandlerBackendResponse)
		if string(jsonConfigFileHandlerBackendResponse) == "{}" { // empty struct
			dst.ConfigFileHandlerBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.ConfigFileHandlerBackendResponse = nil
	}

	// try to unmarshal data into CustomBackendResponse
	err = newStrictDecoder(data).Decode(&dst.CustomBackendResponse)
	if err == nil {
		jsonCustomBackendResponse, _ := json.Marshal(dst.CustomBackendResponse)
		if string(jsonCustomBackendResponse) == "{}" { // empty struct
			dst.CustomBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.CustomBackendResponse = nil
	}

	// try to unmarshal data into EncryptionSettingsBackendResponse
	err = newStrictDecoder(data).Decode(&dst.EncryptionSettingsBackendResponse)
	if err == nil {
		jsonEncryptionSettingsBackendResponse, _ := json.Marshal(dst.EncryptionSettingsBackendResponse)
		if string(jsonEncryptionSettingsBackendResponse) == "{}" { // empty struct
			dst.EncryptionSettingsBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.EncryptionSettingsBackendResponse = nil
	}

	// try to unmarshal data into LargeAttributeBackendResponse
	err = newStrictDecoder(data).Decode(&dst.LargeAttributeBackendResponse)
	if err == nil {
		jsonLargeAttributeBackendResponse, _ := json.Marshal(dst.LargeAttributeBackendResponse)
		if string(jsonLargeAttributeBackendResponse) == "{}" { // empty struct
			dst.LargeAttributeBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.LargeAttributeBackendResponse = nil
	}

	// try to unmarshal data into LdifBackendResponse
	err = newStrictDecoder(data).Decode(&dst.LdifBackendResponse)
	if err == nil {
		jsonLdifBackendResponse, _ := json.Marshal(dst.LdifBackendResponse)
		if string(jsonLdifBackendResponse) == "{}" { // empty struct
			dst.LdifBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.LdifBackendResponse = nil
	}

	// try to unmarshal data into LocalDbBackendResponse
	err = newStrictDecoder(data).Decode(&dst.LocalDbBackendResponse)
	if err == nil {
		jsonLocalDbBackendResponse, _ := json.Marshal(dst.LocalDbBackendResponse)
		if string(jsonLocalDbBackendResponse) == "{}" { // empty struct
			dst.LocalDbBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.LocalDbBackendResponse = nil
	}

	// try to unmarshal data into MemoryBackendResponse
	err = newStrictDecoder(data).Decode(&dst.MemoryBackendResponse)
	if err == nil {
		jsonMemoryBackendResponse, _ := json.Marshal(dst.MemoryBackendResponse)
		if string(jsonMemoryBackendResponse) == "{}" { // empty struct
			dst.MemoryBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.MemoryBackendResponse = nil
	}

	// try to unmarshal data into MetricsBackendResponse
	err = newStrictDecoder(data).Decode(&dst.MetricsBackendResponse)
	if err == nil {
		jsonMetricsBackendResponse, _ := json.Marshal(dst.MetricsBackendResponse)
		if string(jsonMetricsBackendResponse) == "{}" { // empty struct
			dst.MetricsBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.MetricsBackendResponse = nil
	}

	// try to unmarshal data into MirroredLdifBackendResponse
	err = newStrictDecoder(data).Decode(&dst.MirroredLdifBackendResponse)
	if err == nil {
		jsonMirroredLdifBackendResponse, _ := json.Marshal(dst.MirroredLdifBackendResponse)
		if string(jsonMirroredLdifBackendResponse) == "{}" { // empty struct
			dst.MirroredLdifBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.MirroredLdifBackendResponse = nil
	}

	// try to unmarshal data into MonitorBackendResponse
	err = newStrictDecoder(data).Decode(&dst.MonitorBackendResponse)
	if err == nil {
		jsonMonitorBackendResponse, _ := json.Marshal(dst.MonitorBackendResponse)
		if string(jsonMonitorBackendResponse) == "{}" { // empty struct
			dst.MonitorBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.MonitorBackendResponse = nil
	}

	// try to unmarshal data into SchemaBackendResponse
	err = newStrictDecoder(data).Decode(&dst.SchemaBackendResponse)
	if err == nil {
		jsonSchemaBackendResponse, _ := json.Marshal(dst.SchemaBackendResponse)
		if string(jsonSchemaBackendResponse) == "{}" { // empty struct
			dst.SchemaBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.SchemaBackendResponse = nil
	}

	// try to unmarshal data into TaskBackendResponse
	err = newStrictDecoder(data).Decode(&dst.TaskBackendResponse)
	if err == nil {
		jsonTaskBackendResponse, _ := json.Marshal(dst.TaskBackendResponse)
		if string(jsonTaskBackendResponse) == "{}" { // empty struct
			dst.TaskBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.TaskBackendResponse = nil
	}

	// try to unmarshal data into TrustStoreBackendResponse
	err = newStrictDecoder(data).Decode(&dst.TrustStoreBackendResponse)
	if err == nil {
		jsonTrustStoreBackendResponse, _ := json.Marshal(dst.TrustStoreBackendResponse)
		if string(jsonTrustStoreBackendResponse) == "{}" { // empty struct
			dst.TrustStoreBackendResponse = nil
		} else {
			match++
		}
	} else {
		dst.TrustStoreBackendResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AlarmBackendResponse = nil
		dst.AlertBackendResponse = nil
		dst.BackupBackendResponse = nil
		dst.CannedResponseBackendResponse = nil
		dst.ChangelogBackendResponse = nil
		dst.ConfigFileHandlerBackendResponse = nil
		dst.CustomBackendResponse = nil
		dst.EncryptionSettingsBackendResponse = nil
		dst.LargeAttributeBackendResponse = nil
		dst.LdifBackendResponse = nil
		dst.LocalDbBackendResponse = nil
		dst.MemoryBackendResponse = nil
		dst.MetricsBackendResponse = nil
		dst.MirroredLdifBackendResponse = nil
		dst.MonitorBackendResponse = nil
		dst.SchemaBackendResponse = nil
		dst.TaskBackendResponse = nil
		dst.TrustStoreBackendResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BackendListResponseResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BackendListResponseResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BackendListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	if src.AlarmBackendResponse != nil {
		return json.Marshal(&src.AlarmBackendResponse)
	}

	if src.AlertBackendResponse != nil {
		return json.Marshal(&src.AlertBackendResponse)
	}

	if src.BackupBackendResponse != nil {
		return json.Marshal(&src.BackupBackendResponse)
	}

	if src.CannedResponseBackendResponse != nil {
		return json.Marshal(&src.CannedResponseBackendResponse)
	}

	if src.ChangelogBackendResponse != nil {
		return json.Marshal(&src.ChangelogBackendResponse)
	}

	if src.ConfigFileHandlerBackendResponse != nil {
		return json.Marshal(&src.ConfigFileHandlerBackendResponse)
	}

	if src.CustomBackendResponse != nil {
		return json.Marshal(&src.CustomBackendResponse)
	}

	if src.EncryptionSettingsBackendResponse != nil {
		return json.Marshal(&src.EncryptionSettingsBackendResponse)
	}

	if src.LargeAttributeBackendResponse != nil {
		return json.Marshal(&src.LargeAttributeBackendResponse)
	}

	if src.LdifBackendResponse != nil {
		return json.Marshal(&src.LdifBackendResponse)
	}

	if src.LocalDbBackendResponse != nil {
		return json.Marshal(&src.LocalDbBackendResponse)
	}

	if src.MemoryBackendResponse != nil {
		return json.Marshal(&src.MemoryBackendResponse)
	}

	if src.MetricsBackendResponse != nil {
		return json.Marshal(&src.MetricsBackendResponse)
	}

	if src.MirroredLdifBackendResponse != nil {
		return json.Marshal(&src.MirroredLdifBackendResponse)
	}

	if src.MonitorBackendResponse != nil {
		return json.Marshal(&src.MonitorBackendResponse)
	}

	if src.SchemaBackendResponse != nil {
		return json.Marshal(&src.SchemaBackendResponse)
	}

	if src.TaskBackendResponse != nil {
		return json.Marshal(&src.TaskBackendResponse)
	}

	if src.TrustStoreBackendResponse != nil {
		return json.Marshal(&src.TrustStoreBackendResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BackendListResponseResourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AlarmBackendResponse != nil {
		return obj.AlarmBackendResponse
	}

	if obj.AlertBackendResponse != nil {
		return obj.AlertBackendResponse
	}

	if obj.BackupBackendResponse != nil {
		return obj.BackupBackendResponse
	}

	if obj.CannedResponseBackendResponse != nil {
		return obj.CannedResponseBackendResponse
	}

	if obj.ChangelogBackendResponse != nil {
		return obj.ChangelogBackendResponse
	}

	if obj.ConfigFileHandlerBackendResponse != nil {
		return obj.ConfigFileHandlerBackendResponse
	}

	if obj.CustomBackendResponse != nil {
		return obj.CustomBackendResponse
	}

	if obj.EncryptionSettingsBackendResponse != nil {
		return obj.EncryptionSettingsBackendResponse
	}

	if obj.LargeAttributeBackendResponse != nil {
		return obj.LargeAttributeBackendResponse
	}

	if obj.LdifBackendResponse != nil {
		return obj.LdifBackendResponse
	}

	if obj.LocalDbBackendResponse != nil {
		return obj.LocalDbBackendResponse
	}

	if obj.MemoryBackendResponse != nil {
		return obj.MemoryBackendResponse
	}

	if obj.MetricsBackendResponse != nil {
		return obj.MetricsBackendResponse
	}

	if obj.MirroredLdifBackendResponse != nil {
		return obj.MirroredLdifBackendResponse
	}

	if obj.MonitorBackendResponse != nil {
		return obj.MonitorBackendResponse
	}

	if obj.SchemaBackendResponse != nil {
		return obj.SchemaBackendResponse
	}

	if obj.TaskBackendResponse != nil {
		return obj.TaskBackendResponse
	}

	if obj.TrustStoreBackendResponse != nil {
		return obj.TrustStoreBackendResponse
	}

	// all schemas are nil
	return nil
}

type NullableBackendListResponseResourcesInner struct {
	value *BackendListResponseResourcesInner
	isSet bool
}

func (v NullableBackendListResponseResourcesInner) Get() *BackendListResponseResourcesInner {
	return v.value
}

func (v *NullableBackendListResponseResourcesInner) Set(val *BackendListResponseResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBackendListResponseResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBackendListResponseResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackendListResponseResourcesInner(val *BackendListResponseResourcesInner) *NullableBackendListResponseResourcesInner {
	return &NullableBackendListResponseResourcesInner{value: val, isSet: true}
}

func (v NullableBackendListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackendListResponseResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
