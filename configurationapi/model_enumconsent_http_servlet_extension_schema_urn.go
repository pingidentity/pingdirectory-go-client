/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumconsentHttpServletExtensionSchemaUrn the model 'EnumconsentHttpServletExtensionSchemaUrn'
type EnumconsentHttpServletExtensionSchemaUrn string

// List of Enumconsent-http-servlet-extensionSchemaUrn
const (
	ENUMCONSENTHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONCONSENT EnumconsentHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:consent"
)

// All allowed values of EnumconsentHttpServletExtensionSchemaUrn enum
var AllowedEnumconsentHttpServletExtensionSchemaUrnEnumValues = []EnumconsentHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:consent",
}

func (v *EnumconsentHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconsentHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumconsentHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconsentHttpServletExtensionSchemaUrn", value)
}

// NewEnumconsentHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumconsentHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconsentHttpServletExtensionSchemaUrnFromValue(v string) (*EnumconsentHttpServletExtensionSchemaUrn, error) {
	ev := EnumconsentHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconsentHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumconsentHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconsentHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconsentHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconsent-http-servlet-extensionSchemaUrn value
func (v EnumconsentHttpServletExtensionSchemaUrn) Ptr() *EnumconsentHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumconsentHttpServletExtensionSchemaUrn struct {
	value *EnumconsentHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumconsentHttpServletExtensionSchemaUrn) Get() *EnumconsentHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumconsentHttpServletExtensionSchemaUrn) Set(val *EnumconsentHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconsentHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconsentHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconsentHttpServletExtensionSchemaUrn(val *EnumconsentHttpServletExtensionSchemaUrn) *NullableEnumconsentHttpServletExtensionSchemaUrn {
	return &NullableEnumconsentHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconsentHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconsentHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
