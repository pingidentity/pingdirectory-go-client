/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the DebugTargetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DebugTargetResponse{}

// DebugTargetResponse struct for DebugTargetResponse
type DebugTargetResponse struct {
	// Name of the Log Publisher
	Id      string                     `json:"id"`
	Schemas []EnumdebugTargetSchemaUrn `json:"schemas,omitempty"`
	// Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the number character (#) to separate the class name and the method name (that is, com.unboundid.directory.server.core.DirectoryServer#startUp).
	DebugScope    string                             `json:"debugScope"`
	DebugLevel    EnumdebugTargetDebugLevelProp      `json:"debugLevel"`
	DebugCategory []EnumdebugTargetDebugCategoryProp `json:"debugCategory,omitempty"`
	// Specifies the property to indicate whether to include method arguments in debug messages.
	OmitMethodEntryArguments *bool `json:"omitMethodEntryArguments,omitempty"`
	// Specifies the property to indicate whether to include the return value in debug messages.
	OmitMethodReturnValue *bool `json:"omitMethodReturnValue,omitempty"`
	// Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.
	IncludeThrowableCause *bool `json:"includeThrowableCause,omitempty"`
	// Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and exception thrown messages.
	ThrowableStackFrames *int64 `json:"throwableStackFrames,omitempty"`
	// A description for this Debug Target
	Description                                   *string                                            `json:"description,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewDebugTargetResponse instantiates a new DebugTargetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDebugTargetResponse(id string, debugScope string, debugLevel EnumdebugTargetDebugLevelProp) *DebugTargetResponse {
	this := DebugTargetResponse{}
	this.Id = id
	this.DebugScope = debugScope
	this.DebugLevel = debugLevel
	return &this
}

// NewDebugTargetResponseWithDefaults instantiates a new DebugTargetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDebugTargetResponseWithDefaults() *DebugTargetResponse {
	this := DebugTargetResponse{}
	return &this
}

// GetId returns the Id field value
func (o *DebugTargetResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DebugTargetResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetSchemas() []EnumdebugTargetSchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumdebugTargetSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetSchemasOk() ([]EnumdebugTargetSchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumdebugTargetSchemaUrn and assigns it to the Schemas field.
func (o *DebugTargetResponse) SetSchemas(v []EnumdebugTargetSchemaUrn) {
	o.Schemas = v
}

// GetDebugScope returns the DebugScope field value
func (o *DebugTargetResponse) GetDebugScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DebugScope
}

// GetDebugScopeOk returns a tuple with the DebugScope field value
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetDebugScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugScope, true
}

// SetDebugScope sets field value
func (o *DebugTargetResponse) SetDebugScope(v string) {
	o.DebugScope = v
}

// GetDebugLevel returns the DebugLevel field value
func (o *DebugTargetResponse) GetDebugLevel() EnumdebugTargetDebugLevelProp {
	if o == nil {
		var ret EnumdebugTargetDebugLevelProp
		return ret
	}

	return o.DebugLevel
}

// GetDebugLevelOk returns a tuple with the DebugLevel field value
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetDebugLevelOk() (*EnumdebugTargetDebugLevelProp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugLevel, true
}

// SetDebugLevel sets field value
func (o *DebugTargetResponse) SetDebugLevel(v EnumdebugTargetDebugLevelProp) {
	o.DebugLevel = v
}

// GetDebugCategory returns the DebugCategory field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetDebugCategory() []EnumdebugTargetDebugCategoryProp {
	if o == nil || IsNil(o.DebugCategory) {
		var ret []EnumdebugTargetDebugCategoryProp
		return ret
	}
	return o.DebugCategory
}

// GetDebugCategoryOk returns a tuple with the DebugCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetDebugCategoryOk() ([]EnumdebugTargetDebugCategoryProp, bool) {
	if o == nil || IsNil(o.DebugCategory) {
		return nil, false
	}
	return o.DebugCategory, true
}

// HasDebugCategory returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasDebugCategory() bool {
	if o != nil && !IsNil(o.DebugCategory) {
		return true
	}

	return false
}

// SetDebugCategory gets a reference to the given []EnumdebugTargetDebugCategoryProp and assigns it to the DebugCategory field.
func (o *DebugTargetResponse) SetDebugCategory(v []EnumdebugTargetDebugCategoryProp) {
	o.DebugCategory = v
}

// GetOmitMethodEntryArguments returns the OmitMethodEntryArguments field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetOmitMethodEntryArguments() bool {
	if o == nil || IsNil(o.OmitMethodEntryArguments) {
		var ret bool
		return ret
	}
	return *o.OmitMethodEntryArguments
}

// GetOmitMethodEntryArgumentsOk returns a tuple with the OmitMethodEntryArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetOmitMethodEntryArgumentsOk() (*bool, bool) {
	if o == nil || IsNil(o.OmitMethodEntryArguments) {
		return nil, false
	}
	return o.OmitMethodEntryArguments, true
}

// HasOmitMethodEntryArguments returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasOmitMethodEntryArguments() bool {
	if o != nil && !IsNil(o.OmitMethodEntryArguments) {
		return true
	}

	return false
}

// SetOmitMethodEntryArguments gets a reference to the given bool and assigns it to the OmitMethodEntryArguments field.
func (o *DebugTargetResponse) SetOmitMethodEntryArguments(v bool) {
	o.OmitMethodEntryArguments = &v
}

// GetOmitMethodReturnValue returns the OmitMethodReturnValue field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetOmitMethodReturnValue() bool {
	if o == nil || IsNil(o.OmitMethodReturnValue) {
		var ret bool
		return ret
	}
	return *o.OmitMethodReturnValue
}

// GetOmitMethodReturnValueOk returns a tuple with the OmitMethodReturnValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetOmitMethodReturnValueOk() (*bool, bool) {
	if o == nil || IsNil(o.OmitMethodReturnValue) {
		return nil, false
	}
	return o.OmitMethodReturnValue, true
}

// HasOmitMethodReturnValue returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasOmitMethodReturnValue() bool {
	if o != nil && !IsNil(o.OmitMethodReturnValue) {
		return true
	}

	return false
}

// SetOmitMethodReturnValue gets a reference to the given bool and assigns it to the OmitMethodReturnValue field.
func (o *DebugTargetResponse) SetOmitMethodReturnValue(v bool) {
	o.OmitMethodReturnValue = &v
}

// GetIncludeThrowableCause returns the IncludeThrowableCause field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetIncludeThrowableCause() bool {
	if o == nil || IsNil(o.IncludeThrowableCause) {
		var ret bool
		return ret
	}
	return *o.IncludeThrowableCause
}

// GetIncludeThrowableCauseOk returns a tuple with the IncludeThrowableCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetIncludeThrowableCauseOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeThrowableCause) {
		return nil, false
	}
	return o.IncludeThrowableCause, true
}

// HasIncludeThrowableCause returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasIncludeThrowableCause() bool {
	if o != nil && !IsNil(o.IncludeThrowableCause) {
		return true
	}

	return false
}

// SetIncludeThrowableCause gets a reference to the given bool and assigns it to the IncludeThrowableCause field.
func (o *DebugTargetResponse) SetIncludeThrowableCause(v bool) {
	o.IncludeThrowableCause = &v
}

// GetThrowableStackFrames returns the ThrowableStackFrames field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetThrowableStackFrames() int64 {
	if o == nil || IsNil(o.ThrowableStackFrames) {
		var ret int64
		return ret
	}
	return *o.ThrowableStackFrames
}

// GetThrowableStackFramesOk returns a tuple with the ThrowableStackFrames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetThrowableStackFramesOk() (*int64, bool) {
	if o == nil || IsNil(o.ThrowableStackFrames) {
		return nil, false
	}
	return o.ThrowableStackFrames, true
}

// HasThrowableStackFrames returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasThrowableStackFrames() bool {
	if o != nil && !IsNil(o.ThrowableStackFrames) {
		return true
	}

	return false
}

// SetThrowableStackFrames gets a reference to the given int64 and assigns it to the ThrowableStackFrames field.
func (o *DebugTargetResponse) SetThrowableStackFrames(v int64) {
	o.ThrowableStackFrames = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DebugTargetResponse) SetDescription(v string) {
	o.Description = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *DebugTargetResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *DebugTargetResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DebugTargetResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *DebugTargetResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *DebugTargetResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o DebugTargetResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DebugTargetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	toSerialize["debugScope"] = o.DebugScope
	toSerialize["debugLevel"] = o.DebugLevel
	if !IsNil(o.DebugCategory) {
		toSerialize["debugCategory"] = o.DebugCategory
	}
	if !IsNil(o.OmitMethodEntryArguments) {
		toSerialize["omitMethodEntryArguments"] = o.OmitMethodEntryArguments
	}
	if !IsNil(o.OmitMethodReturnValue) {
		toSerialize["omitMethodReturnValue"] = o.OmitMethodReturnValue
	}
	if !IsNil(o.IncludeThrowableCause) {
		toSerialize["includeThrowableCause"] = o.IncludeThrowableCause
	}
	if !IsNil(o.ThrowableStackFrames) {
		toSerialize["throwableStackFrames"] = o.ThrowableStackFrames
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableDebugTargetResponse struct {
	value *DebugTargetResponse
	isSet bool
}

func (v NullableDebugTargetResponse) Get() *DebugTargetResponse {
	return v.value
}

func (v *NullableDebugTargetResponse) Set(val *DebugTargetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDebugTargetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDebugTargetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDebugTargetResponse(val *DebugTargetResponse) *NullableDebugTargetResponse {
	return &NullableDebugTargetResponse{value: val, isSet: true}
}

func (v NullableDebugTargetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDebugTargetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
