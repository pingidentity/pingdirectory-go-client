/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the Pkcs11CipherStreamProviderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pkcs11CipherStreamProviderResponse{}

// Pkcs11CipherStreamProviderResponse struct for Pkcs11CipherStreamProviderResponse
type Pkcs11CipherStreamProviderResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	// Name of the Cipher Stream Provider
	Id      string                                    `json:"id"`
	Schemas []Enumpkcs11CipherStreamProviderSchemaUrn `json:"schemas"`
	// The fully-qualified name of the Java security provider class that implements support for interacting with PKCS #11 tokens.
	Pkcs11ProviderClass *string `json:"pkcs11ProviderClass,omitempty"`
	// The path to the file to use to configure the security provider that implements support for interacting with PKCS #11 tokens.
	Pkcs11ProviderConfigurationFile *string `json:"pkcs11ProviderConfigurationFile,omitempty"`
	// The clear-text user PIN needed to interact with the PKCS #11 token.
	KeyStorePin *string `json:"keyStorePin,omitempty"`
	// The path to a file containing the user PIN needed to interact with the PKCS #11 token. The file must exist and must contain exactly one line with a clear-text representation of the PIN.
	KeyStorePinFile *string `json:"keyStorePinFile,omitempty"`
	// The name of an environment variable whose value is the user PIN needed to interact with the PKCS #11 token. The environment variable must be defined and must contain a clear-text representation of the PIN.
	KeyStorePinEnvironmentVariable *string `json:"keyStorePinEnvironmentVariable,omitempty"`
	// The key store type to use when obtaining an instance of a key store for interacting with a PKCS #11 token.
	Pkcs11KeyStoreType *string `json:"pkcs11KeyStoreType,omitempty"`
	// The alias for the certificate in the PKCS #11 token that will be used to wrap the encryption key. The target certificate must exist in the PKCS #11 token, and it must have an RSA key pair because the JVM does not currently provide adequate key wrapping support for elliptic curve key pairs.  If you have also configured the server to use a PKCS #11 token for accessing listener certificates, we strongly recommend that you use a different certificate to protect the contents of the encryption settings database than you use for negotiating TLS sessions with clients. It is imperative that the certificate used by this PKCS11 Cipher Stream Provider remain constant for the life of the provider because if the certificate were to be replaced, then the contents of the encryption settings database could become inaccessible. Unlike with listener certificates used for TLS negotiation that need to be replaced on a regular basis, this PKCS11 Cipher Stream Provider does not consider the validity period for the associated certificate, and it will continue to function even after the certificate has expired.  If you need to rotate the certificate used to protect the server's encryption settings database, you should first install the desired new certificate in the PKCS #11 token under a different alias. Then, you should create a new instance of this PKCS11 Cipher Stream Provider that is configured to use that certificate, and that also uses a different value for the encryption-metadata-file because the information in that file is tied to the certificate used to generate it. Finally, you will need to update the global configuration so that the encryption-settings-cipher-stream-provider property references the new cipher stream provider rather than this one. The update to the global configuration must be done with the server online so that it can properly re-encrypt the contents of the encryption settings database with the correct key tied to the new certificate.
	SslCertNickname string `json:"sslCertNickname"`
	// The path to a file that will hold metadata about the encryption performed by this PKCS11 Cipher Stream Provider.
	EncryptionMetadataFile string `json:"encryptionMetadataFile"`
	// A description for this Cipher Stream Provider
	Description *string `json:"description,omitempty"`
	// Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.
	Enabled bool `json:"enabled"`
}

// NewPkcs11CipherStreamProviderResponse instantiates a new Pkcs11CipherStreamProviderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkcs11CipherStreamProviderResponse(id string, schemas []Enumpkcs11CipherStreamProviderSchemaUrn, sslCertNickname string, encryptionMetadataFile string, enabled bool) *Pkcs11CipherStreamProviderResponse {
	this := Pkcs11CipherStreamProviderResponse{}
	this.Id = id
	this.Schemas = schemas
	this.SslCertNickname = sslCertNickname
	this.EncryptionMetadataFile = encryptionMetadataFile
	this.Enabled = enabled
	return &this
}

// NewPkcs11CipherStreamProviderResponseWithDefaults instantiates a new Pkcs11CipherStreamProviderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkcs11CipherStreamProviderResponseWithDefaults() *Pkcs11CipherStreamProviderResponse {
	this := Pkcs11CipherStreamProviderResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *Pkcs11CipherStreamProviderResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *Pkcs11CipherStreamProviderResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetId returns the Id field value
func (o *Pkcs11CipherStreamProviderResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Pkcs11CipherStreamProviderResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *Pkcs11CipherStreamProviderResponse) GetSchemas() []Enumpkcs11CipherStreamProviderSchemaUrn {
	if o == nil {
		var ret []Enumpkcs11CipherStreamProviderSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetSchemasOk() ([]Enumpkcs11CipherStreamProviderSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *Pkcs11CipherStreamProviderResponse) SetSchemas(v []Enumpkcs11CipherStreamProviderSchemaUrn) {
	o.Schemas = v
}

// GetPkcs11ProviderClass returns the Pkcs11ProviderClass field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetPkcs11ProviderClass() string {
	if o == nil || IsNil(o.Pkcs11ProviderClass) {
		var ret string
		return ret
	}
	return *o.Pkcs11ProviderClass
}

// GetPkcs11ProviderClassOk returns a tuple with the Pkcs11ProviderClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetPkcs11ProviderClassOk() (*string, bool) {
	if o == nil || IsNil(o.Pkcs11ProviderClass) {
		return nil, false
	}
	return o.Pkcs11ProviderClass, true
}

// HasPkcs11ProviderClass returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasPkcs11ProviderClass() bool {
	if o != nil && !IsNil(o.Pkcs11ProviderClass) {
		return true
	}

	return false
}

// SetPkcs11ProviderClass gets a reference to the given string and assigns it to the Pkcs11ProviderClass field.
func (o *Pkcs11CipherStreamProviderResponse) SetPkcs11ProviderClass(v string) {
	o.Pkcs11ProviderClass = &v
}

// GetPkcs11ProviderConfigurationFile returns the Pkcs11ProviderConfigurationFile field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetPkcs11ProviderConfigurationFile() string {
	if o == nil || IsNil(o.Pkcs11ProviderConfigurationFile) {
		var ret string
		return ret
	}
	return *o.Pkcs11ProviderConfigurationFile
}

// GetPkcs11ProviderConfigurationFileOk returns a tuple with the Pkcs11ProviderConfigurationFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetPkcs11ProviderConfigurationFileOk() (*string, bool) {
	if o == nil || IsNil(o.Pkcs11ProviderConfigurationFile) {
		return nil, false
	}
	return o.Pkcs11ProviderConfigurationFile, true
}

// HasPkcs11ProviderConfigurationFile returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasPkcs11ProviderConfigurationFile() bool {
	if o != nil && !IsNil(o.Pkcs11ProviderConfigurationFile) {
		return true
	}

	return false
}

// SetPkcs11ProviderConfigurationFile gets a reference to the given string and assigns it to the Pkcs11ProviderConfigurationFile field.
func (o *Pkcs11CipherStreamProviderResponse) SetPkcs11ProviderConfigurationFile(v string) {
	o.Pkcs11ProviderConfigurationFile = &v
}

// GetKeyStorePin returns the KeyStorePin field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetKeyStorePin() string {
	if o == nil || IsNil(o.KeyStorePin) {
		var ret string
		return ret
	}
	return *o.KeyStorePin
}

// GetKeyStorePinOk returns a tuple with the KeyStorePin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetKeyStorePinOk() (*string, bool) {
	if o == nil || IsNil(o.KeyStorePin) {
		return nil, false
	}
	return o.KeyStorePin, true
}

// HasKeyStorePin returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasKeyStorePin() bool {
	if o != nil && !IsNil(o.KeyStorePin) {
		return true
	}

	return false
}

// SetKeyStorePin gets a reference to the given string and assigns it to the KeyStorePin field.
func (o *Pkcs11CipherStreamProviderResponse) SetKeyStorePin(v string) {
	o.KeyStorePin = &v
}

// GetKeyStorePinFile returns the KeyStorePinFile field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetKeyStorePinFile() string {
	if o == nil || IsNil(o.KeyStorePinFile) {
		var ret string
		return ret
	}
	return *o.KeyStorePinFile
}

// GetKeyStorePinFileOk returns a tuple with the KeyStorePinFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetKeyStorePinFileOk() (*string, bool) {
	if o == nil || IsNil(o.KeyStorePinFile) {
		return nil, false
	}
	return o.KeyStorePinFile, true
}

// HasKeyStorePinFile returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasKeyStorePinFile() bool {
	if o != nil && !IsNil(o.KeyStorePinFile) {
		return true
	}

	return false
}

// SetKeyStorePinFile gets a reference to the given string and assigns it to the KeyStorePinFile field.
func (o *Pkcs11CipherStreamProviderResponse) SetKeyStorePinFile(v string) {
	o.KeyStorePinFile = &v
}

// GetKeyStorePinEnvironmentVariable returns the KeyStorePinEnvironmentVariable field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetKeyStorePinEnvironmentVariable() string {
	if o == nil || IsNil(o.KeyStorePinEnvironmentVariable) {
		var ret string
		return ret
	}
	return *o.KeyStorePinEnvironmentVariable
}

// GetKeyStorePinEnvironmentVariableOk returns a tuple with the KeyStorePinEnvironmentVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetKeyStorePinEnvironmentVariableOk() (*string, bool) {
	if o == nil || IsNil(o.KeyStorePinEnvironmentVariable) {
		return nil, false
	}
	return o.KeyStorePinEnvironmentVariable, true
}

// HasKeyStorePinEnvironmentVariable returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasKeyStorePinEnvironmentVariable() bool {
	if o != nil && !IsNil(o.KeyStorePinEnvironmentVariable) {
		return true
	}

	return false
}

// SetKeyStorePinEnvironmentVariable gets a reference to the given string and assigns it to the KeyStorePinEnvironmentVariable field.
func (o *Pkcs11CipherStreamProviderResponse) SetKeyStorePinEnvironmentVariable(v string) {
	o.KeyStorePinEnvironmentVariable = &v
}

// GetPkcs11KeyStoreType returns the Pkcs11KeyStoreType field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetPkcs11KeyStoreType() string {
	if o == nil || IsNil(o.Pkcs11KeyStoreType) {
		var ret string
		return ret
	}
	return *o.Pkcs11KeyStoreType
}

// GetPkcs11KeyStoreTypeOk returns a tuple with the Pkcs11KeyStoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetPkcs11KeyStoreTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Pkcs11KeyStoreType) {
		return nil, false
	}
	return o.Pkcs11KeyStoreType, true
}

// HasPkcs11KeyStoreType returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasPkcs11KeyStoreType() bool {
	if o != nil && !IsNil(o.Pkcs11KeyStoreType) {
		return true
	}

	return false
}

// SetPkcs11KeyStoreType gets a reference to the given string and assigns it to the Pkcs11KeyStoreType field.
func (o *Pkcs11CipherStreamProviderResponse) SetPkcs11KeyStoreType(v string) {
	o.Pkcs11KeyStoreType = &v
}

// GetSslCertNickname returns the SslCertNickname field value
func (o *Pkcs11CipherStreamProviderResponse) GetSslCertNickname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslCertNickname
}

// GetSslCertNicknameOk returns a tuple with the SslCertNickname field value
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetSslCertNicknameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslCertNickname, true
}

// SetSslCertNickname sets field value
func (o *Pkcs11CipherStreamProviderResponse) SetSslCertNickname(v string) {
	o.SslCertNickname = v
}

// GetEncryptionMetadataFile returns the EncryptionMetadataFile field value
func (o *Pkcs11CipherStreamProviderResponse) GetEncryptionMetadataFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionMetadataFile
}

// GetEncryptionMetadataFileOk returns a tuple with the EncryptionMetadataFile field value
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetEncryptionMetadataFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionMetadataFile, true
}

// SetEncryptionMetadataFile sets field value
func (o *Pkcs11CipherStreamProviderResponse) SetEncryptionMetadataFile(v string) {
	o.EncryptionMetadataFile = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Pkcs11CipherStreamProviderResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Pkcs11CipherStreamProviderResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Pkcs11CipherStreamProviderResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *Pkcs11CipherStreamProviderResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Pkcs11CipherStreamProviderResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Pkcs11CipherStreamProviderResponse) SetEnabled(v bool) {
	o.Enabled = v
}

func (o Pkcs11CipherStreamProviderResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pkcs11CipherStreamProviderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	toSerialize["id"] = o.Id
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.Pkcs11ProviderClass) {
		toSerialize["pkcs11ProviderClass"] = o.Pkcs11ProviderClass
	}
	if !IsNil(o.Pkcs11ProviderConfigurationFile) {
		toSerialize["pkcs11ProviderConfigurationFile"] = o.Pkcs11ProviderConfigurationFile
	}
	if !IsNil(o.KeyStorePin) {
		toSerialize["keyStorePin"] = o.KeyStorePin
	}
	if !IsNil(o.KeyStorePinFile) {
		toSerialize["keyStorePinFile"] = o.KeyStorePinFile
	}
	if !IsNil(o.KeyStorePinEnvironmentVariable) {
		toSerialize["keyStorePinEnvironmentVariable"] = o.KeyStorePinEnvironmentVariable
	}
	if !IsNil(o.Pkcs11KeyStoreType) {
		toSerialize["pkcs11KeyStoreType"] = o.Pkcs11KeyStoreType
	}
	toSerialize["sslCertNickname"] = o.SslCertNickname
	toSerialize["encryptionMetadataFile"] = o.EncryptionMetadataFile
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullablePkcs11CipherStreamProviderResponse struct {
	value *Pkcs11CipherStreamProviderResponse
	isSet bool
}

func (v NullablePkcs11CipherStreamProviderResponse) Get() *Pkcs11CipherStreamProviderResponse {
	return v.value
}

func (v *NullablePkcs11CipherStreamProviderResponse) Set(val *Pkcs11CipherStreamProviderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePkcs11CipherStreamProviderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePkcs11CipherStreamProviderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkcs11CipherStreamProviderResponse(val *Pkcs11CipherStreamProviderResponse) *NullablePkcs11CipherStreamProviderResponse {
	return &NullablePkcs11CipherStreamProviderResponse{value: val, isSet: true}
}

func (v NullablePkcs11CipherStreamProviderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkcs11CipherStreamProviderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
