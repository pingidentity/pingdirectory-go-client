/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LogFieldMappingApiService LogFieldMappingApi service
type LogFieldMappingApiService service

type ApiAddLogFieldMappingRequest struct {
	ctx                       context.Context
	ApiService                *LogFieldMappingApiService
	addLogFieldMappingRequest *AddLogFieldMappingRequest
}

// Create a new Log Field Mapping in the config
func (r ApiAddLogFieldMappingRequest) AddLogFieldMappingRequest(addLogFieldMappingRequest AddLogFieldMappingRequest) ApiAddLogFieldMappingRequest {
	r.addLogFieldMappingRequest = &addLogFieldMappingRequest
	return r
}

func (r ApiAddLogFieldMappingRequest) Execute() (*AddLogFieldMapping200Response, *http.Response, error) {
	return r.ApiService.AddLogFieldMappingExecute(r)
}

/*
AddLogFieldMapping Add a new Log Field Mapping to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddLogFieldMappingRequest
*/
func (a *LogFieldMappingApiService) AddLogFieldMapping(ctx context.Context) ApiAddLogFieldMappingRequest {
	return ApiAddLogFieldMappingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddLogFieldMapping200Response
func (a *LogFieldMappingApiService) AddLogFieldMappingExecute(r ApiAddLogFieldMappingRequest) (*AddLogFieldMapping200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogFieldMapping200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogFieldMappingApiService.AddLogFieldMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-field-mappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLogFieldMappingRequest == nil {
		return localVarReturnValue, nil, reportError("addLogFieldMappingRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addLogFieldMappingRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLogFieldMappingRequest struct {
	ctx                 context.Context
	ApiService          *LogFieldMappingApiService
	logFieldMappingName string
}

func (r ApiDeleteLogFieldMappingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLogFieldMappingExecute(r)
}

/*
DeleteLogFieldMapping Delete a Log Field Mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logFieldMappingName Name of the Log Field Mapping
	@return ApiDeleteLogFieldMappingRequest
*/
func (a *LogFieldMappingApiService) DeleteLogFieldMapping(ctx context.Context, logFieldMappingName string) ApiDeleteLogFieldMappingRequest {
	return ApiDeleteLogFieldMappingRequest{
		ApiService:          a,
		ctx:                 ctx,
		logFieldMappingName: logFieldMappingName,
	}
}

// Execute executes the request
func (a *LogFieldMappingApiService) DeleteLogFieldMappingExecute(r ApiDeleteLogFieldMappingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogFieldMappingApiService.DeleteLogFieldMapping")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-field-mappings/{log-field-mapping-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-field-mapping-name"+"}", url.PathEscape(parameterToString(r.logFieldMappingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLogFieldMappingRequest struct {
	ctx                 context.Context
	ApiService          *LogFieldMappingApiService
	logFieldMappingName string
}

func (r ApiGetLogFieldMappingRequest) Execute() (*AddLogFieldMapping200Response, *http.Response, error) {
	return r.ApiService.GetLogFieldMappingExecute(r)
}

/*
GetLogFieldMapping Returns a single Log Field Mapping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logFieldMappingName Name of the Log Field Mapping
	@return ApiGetLogFieldMappingRequest
*/
func (a *LogFieldMappingApiService) GetLogFieldMapping(ctx context.Context, logFieldMappingName string) ApiGetLogFieldMappingRequest {
	return ApiGetLogFieldMappingRequest{
		ApiService:          a,
		ctx:                 ctx,
		logFieldMappingName: logFieldMappingName,
	}
}

// Execute executes the request
//
//	@return AddLogFieldMapping200Response
func (a *LogFieldMappingApiService) GetLogFieldMappingExecute(r ApiGetLogFieldMappingRequest) (*AddLogFieldMapping200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogFieldMapping200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogFieldMappingApiService.GetLogFieldMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-field-mappings/{log-field-mapping-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-field-mapping-name"+"}", url.PathEscape(parameterToString(r.logFieldMappingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLogFieldMappingRequest struct {
	ctx                 context.Context
	ApiService          *LogFieldMappingApiService
	logFieldMappingName string
	updateRequest       *UpdateRequest
}

// Update an existing Log Field Mapping
func (r ApiUpdateLogFieldMappingRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateLogFieldMappingRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateLogFieldMappingRequest) Execute() (*AddLogFieldMapping200Response, *http.Response, error) {
	return r.ApiService.UpdateLogFieldMappingExecute(r)
}

/*
UpdateLogFieldMapping Update an existing Log Field Mapping by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logFieldMappingName Name of the Log Field Mapping
	@return ApiUpdateLogFieldMappingRequest
*/
func (a *LogFieldMappingApiService) UpdateLogFieldMapping(ctx context.Context, logFieldMappingName string) ApiUpdateLogFieldMappingRequest {
	return ApiUpdateLogFieldMappingRequest{
		ApiService:          a,
		ctx:                 ctx,
		logFieldMappingName: logFieldMappingName,
	}
}

// Execute executes the request
//
//	@return AddLogFieldMapping200Response
func (a *LogFieldMappingApiService) UpdateLogFieldMappingExecute(r ApiUpdateLogFieldMappingRequest) (*AddLogFieldMapping200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogFieldMapping200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogFieldMappingApiService.UpdateLogFieldMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-field-mappings/{log-field-mapping-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-field-mapping-name"+"}", url.PathEscape(parameterToString(r.logFieldMappingName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
