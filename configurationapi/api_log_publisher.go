/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LogPublisherApiService LogPublisherApi service
type LogPublisherApiService service

type ApiAddLogPublisherRequest struct {
	ctx                    context.Context
	ApiService             *LogPublisherApiService
	addLogPublisherRequest *AddLogPublisherRequest
}

// Create a new Log Publisher in the config
func (r ApiAddLogPublisherRequest) AddLogPublisherRequest(addLogPublisherRequest AddLogPublisherRequest) ApiAddLogPublisherRequest {
	r.addLogPublisherRequest = &addLogPublisherRequest
	return r
}

func (r ApiAddLogPublisherRequest) Execute() (*AddLogPublisher200Response, *http.Response, error) {
	return r.ApiService.AddLogPublisherExecute(r)
}

/*
AddLogPublisher Add a new Log Publisher to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddLogPublisherRequest
*/
func (a *LogPublisherApiService) AddLogPublisher(ctx context.Context) ApiAddLogPublisherRequest {
	return ApiAddLogPublisherRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddLogPublisher200Response
func (a *LogPublisherApiService) AddLogPublisherExecute(r ApiAddLogPublisherRequest) (*AddLogPublisher200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogPublisher200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogPublisherApiService.AddLogPublisher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLogPublisherRequest == nil {
		return localVarReturnValue, nil, reportError("addLogPublisherRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addLogPublisherRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLogPublisherRequest struct {
	ctx              context.Context
	ApiService       *LogPublisherApiService
	logPublisherName string
}

func (r ApiDeleteLogPublisherRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLogPublisherExecute(r)
}

/*
DeleteLogPublisher Delete a Log Publisher

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logPublisherName Name of the Log Publisher
	@return ApiDeleteLogPublisherRequest
*/
func (a *LogPublisherApiService) DeleteLogPublisher(ctx context.Context, logPublisherName string) ApiDeleteLogPublisherRequest {
	return ApiDeleteLogPublisherRequest{
		ApiService:       a,
		ctx:              ctx,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
func (a *LogPublisherApiService) DeleteLogPublisherExecute(r ApiDeleteLogPublisherRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogPublisherApiService.DeleteLogPublisher")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterValueToString(r.logPublisherName, "logPublisherName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLogPublisherRequest struct {
	ctx              context.Context
	ApiService       *LogPublisherApiService
	logPublisherName string
}

func (r ApiGetLogPublisherRequest) Execute() (*GetLogPublisher200Response, *http.Response, error) {
	return r.ApiService.GetLogPublisherExecute(r)
}

/*
GetLogPublisher Returns a single Log Publisher

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logPublisherName Name of the Log Publisher
	@return ApiGetLogPublisherRequest
*/
func (a *LogPublisherApiService) GetLogPublisher(ctx context.Context, logPublisherName string) ApiGetLogPublisherRequest {
	return ApiGetLogPublisherRequest{
		ApiService:       a,
		ctx:              ctx,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
//
//	@return GetLogPublisher200Response
func (a *LogPublisherApiService) GetLogPublisherExecute(r ApiGetLogPublisherRequest) (*GetLogPublisher200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetLogPublisher200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogPublisherApiService.GetLogPublisher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterValueToString(r.logPublisherName, "logPublisherName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLogPublisherRequest struct {
	ctx              context.Context
	ApiService       *LogPublisherApiService
	logPublisherName string
	updateRequest    *UpdateRequest
}

// Update an existing Log Publisher
func (r ApiUpdateLogPublisherRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateLogPublisherRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateLogPublisherRequest) Execute() (*GetLogPublisher200Response, *http.Response, error) {
	return r.ApiService.UpdateLogPublisherExecute(r)
}

/*
UpdateLogPublisher Update an existing Log Publisher by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logPublisherName Name of the Log Publisher
	@return ApiUpdateLogPublisherRequest
*/
func (a *LogPublisherApiService) UpdateLogPublisher(ctx context.Context, logPublisherName string) ApiUpdateLogPublisherRequest {
	return ApiUpdateLogPublisherRequest{
		ApiService:       a,
		ctx:              ctx,
		logPublisherName: logPublisherName,
	}
}

// Execute executes the request
//
//	@return GetLogPublisher200Response
func (a *LogPublisherApiService) UpdateLogPublisherExecute(r ApiUpdateLogPublisherRequest) (*GetLogPublisher200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetLogPublisher200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogPublisherApiService.UpdateLogPublisher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-publishers/{log-publisher-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-publisher-name"+"}", url.PathEscape(parameterValueToString(r.logPublisherName, "logPublisherName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
