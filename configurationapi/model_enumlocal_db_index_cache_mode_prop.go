/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlocalDbIndexCacheModeProp Specifies the cache mode that should be used when accessing the records in the database for this index. This controls how much database cache memory can be consumed by this index.
type EnumlocalDbIndexCacheModeProp string

// List of Enumlocal-db-index-cacheModeProp
const (
	ENUMLOCALDBINDEXCACHEMODEPROP_CACHE_KEYS_AND_VALUES  EnumlocalDbIndexCacheModeProp = "cache-keys-and-values"
	ENUMLOCALDBINDEXCACHEMODEPROP_CACHE_KEYS_ONLY        EnumlocalDbIndexCacheModeProp = "cache-keys-only"
	ENUMLOCALDBINDEXCACHEMODEPROP_NO_CACHING             EnumlocalDbIndexCacheModeProp = "no-caching"
	ENUMLOCALDBINDEXCACHEMODEPROP_KEEP_HOT               EnumlocalDbIndexCacheModeProp = "keep-hot"
	ENUMLOCALDBINDEXCACHEMODEPROP_DEFAULT                EnumlocalDbIndexCacheModeProp = "default"
	ENUMLOCALDBINDEXCACHEMODEPROP_MAKE_COLD              EnumlocalDbIndexCacheModeProp = "make-cold"
	ENUMLOCALDBINDEXCACHEMODEPROP_EVICT_LEAF_IMMEDIATELY EnumlocalDbIndexCacheModeProp = "evict-leaf-immediately"
	ENUMLOCALDBINDEXCACHEMODEPROP_EVICT_BIN_IMMEDIATELY  EnumlocalDbIndexCacheModeProp = "evict-bin-immediately"
)

// All allowed values of EnumlocalDbIndexCacheModeProp enum
var AllowedEnumlocalDbIndexCacheModePropEnumValues = []EnumlocalDbIndexCacheModeProp{
	"cache-keys-and-values",
	"cache-keys-only",
	"no-caching",
	"keep-hot",
	"default",
	"make-cold",
	"evict-leaf-immediately",
	"evict-bin-immediately",
}

func (v *EnumlocalDbIndexCacheModeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlocalDbIndexCacheModeProp(value)
	for _, existing := range AllowedEnumlocalDbIndexCacheModePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlocalDbIndexCacheModeProp", value)
}

// NewEnumlocalDbIndexCacheModePropFromValue returns a pointer to a valid EnumlocalDbIndexCacheModeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlocalDbIndexCacheModePropFromValue(v string) (*EnumlocalDbIndexCacheModeProp, error) {
	ev := EnumlocalDbIndexCacheModeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlocalDbIndexCacheModeProp: valid values are %v", v, AllowedEnumlocalDbIndexCacheModePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlocalDbIndexCacheModeProp) IsValid() bool {
	for _, existing := range AllowedEnumlocalDbIndexCacheModePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlocal-db-index-cacheModeProp value
func (v EnumlocalDbIndexCacheModeProp) Ptr() *EnumlocalDbIndexCacheModeProp {
	return &v
}

type NullableEnumlocalDbIndexCacheModeProp struct {
	value *EnumlocalDbIndexCacheModeProp
	isSet bool
}

func (v NullableEnumlocalDbIndexCacheModeProp) Get() *EnumlocalDbIndexCacheModeProp {
	return v.value
}

func (v *NullableEnumlocalDbIndexCacheModeProp) Set(val *EnumlocalDbIndexCacheModeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlocalDbIndexCacheModeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlocalDbIndexCacheModeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlocalDbIndexCacheModeProp(val *EnumlocalDbIndexCacheModeProp) *NullableEnumlocalDbIndexCacheModeProp {
	return &NullableEnumlocalDbIndexCacheModeProp{value: val, isSet: true}
}

func (v NullableEnumlocalDbIndexCacheModeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlocalDbIndexCacheModeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
