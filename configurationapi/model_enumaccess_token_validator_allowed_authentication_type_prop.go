/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumaccessTokenValidatorAllowedAuthenticationTypeProp Specifies the authentication types for bind operations that may be used to generate access tokens, and for which generated access tokens will be accepted.
type EnumaccessTokenValidatorAllowedAuthenticationTypeProp string

// List of Enumaccess-token-validator-allowedAuthenticationTypeProp
const (
	ENUMACCESSTOKENVALIDATORALLOWEDAUTHENTICATIONTYPEPROP_SIMPLE EnumaccessTokenValidatorAllowedAuthenticationTypeProp = "simple"
	ENUMACCESSTOKENVALIDATORALLOWEDAUTHENTICATIONTYPEPROP_SASL   EnumaccessTokenValidatorAllowedAuthenticationTypeProp = "sasl"
)

// All allowed values of EnumaccessTokenValidatorAllowedAuthenticationTypeProp enum
var AllowedEnumaccessTokenValidatorAllowedAuthenticationTypePropEnumValues = []EnumaccessTokenValidatorAllowedAuthenticationTypeProp{
	"simple",
	"sasl",
}

func (v *EnumaccessTokenValidatorAllowedAuthenticationTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumaccessTokenValidatorAllowedAuthenticationTypeProp(value)
	for _, existing := range AllowedEnumaccessTokenValidatorAllowedAuthenticationTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumaccessTokenValidatorAllowedAuthenticationTypeProp", value)
}

// NewEnumaccessTokenValidatorAllowedAuthenticationTypePropFromValue returns a pointer to a valid EnumaccessTokenValidatorAllowedAuthenticationTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumaccessTokenValidatorAllowedAuthenticationTypePropFromValue(v string) (*EnumaccessTokenValidatorAllowedAuthenticationTypeProp, error) {
	ev := EnumaccessTokenValidatorAllowedAuthenticationTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumaccessTokenValidatorAllowedAuthenticationTypeProp: valid values are %v", v, AllowedEnumaccessTokenValidatorAllowedAuthenticationTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumaccessTokenValidatorAllowedAuthenticationTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumaccessTokenValidatorAllowedAuthenticationTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaccess-token-validator-allowedAuthenticationTypeProp value
func (v EnumaccessTokenValidatorAllowedAuthenticationTypeProp) Ptr() *EnumaccessTokenValidatorAllowedAuthenticationTypeProp {
	return &v
}

type NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp struct {
	value *EnumaccessTokenValidatorAllowedAuthenticationTypeProp
	isSet bool
}

func (v NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp) Get() *EnumaccessTokenValidatorAllowedAuthenticationTypeProp {
	return v.value
}

func (v *NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp) Set(val *EnumaccessTokenValidatorAllowedAuthenticationTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp(val *EnumaccessTokenValidatorAllowedAuthenticationTypeProp) *NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp {
	return &NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp{value: val, isSet: true}
}

func (v NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumaccessTokenValidatorAllowedAuthenticationTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
