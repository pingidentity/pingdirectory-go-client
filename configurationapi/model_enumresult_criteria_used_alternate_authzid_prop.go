/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaUsedAlternateAuthzidProp Indicates whether operation results in which the associated operation used an authorization identity that is different from the authentication identity (e.g., as the result of using a proxied authorization control) should be included in this Simple Result Criteria. If no value is provided, then whether an operation used an alternate authorization identity will not be considered when determining whether it matches this Simple Result Criteria.
type EnumresultCriteriaUsedAlternateAuthzidProp string

// List of Enumresult-criteria-usedAlternateAuthzidProp
const (
	ENUMRESULTCRITERIAUSEDALTERNATEAUTHZIDPROP_REQUIRED   EnumresultCriteriaUsedAlternateAuthzidProp = "required"
	ENUMRESULTCRITERIAUSEDALTERNATEAUTHZIDPROP_PROHIBITED EnumresultCriteriaUsedAlternateAuthzidProp = "prohibited"
	ENUMRESULTCRITERIAUSEDALTERNATEAUTHZIDPROP_OPTIONAL   EnumresultCriteriaUsedAlternateAuthzidProp = "optional"
)

// All allowed values of EnumresultCriteriaUsedAlternateAuthzidProp enum
var AllowedEnumresultCriteriaUsedAlternateAuthzidPropEnumValues = []EnumresultCriteriaUsedAlternateAuthzidProp{
	"required",
	"prohibited",
	"optional",
}

func (v *EnumresultCriteriaUsedAlternateAuthzidProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaUsedAlternateAuthzidProp(value)
	for _, existing := range AllowedEnumresultCriteriaUsedAlternateAuthzidPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaUsedAlternateAuthzidProp", value)
}

// NewEnumresultCriteriaUsedAlternateAuthzidPropFromValue returns a pointer to a valid EnumresultCriteriaUsedAlternateAuthzidProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaUsedAlternateAuthzidPropFromValue(v string) (*EnumresultCriteriaUsedAlternateAuthzidProp, error) {
	ev := EnumresultCriteriaUsedAlternateAuthzidProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaUsedAlternateAuthzidProp: valid values are %v", v, AllowedEnumresultCriteriaUsedAlternateAuthzidPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaUsedAlternateAuthzidProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaUsedAlternateAuthzidPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-usedAlternateAuthzidProp value
func (v EnumresultCriteriaUsedAlternateAuthzidProp) Ptr() *EnumresultCriteriaUsedAlternateAuthzidProp {
	return &v
}

type NullableEnumresultCriteriaUsedAlternateAuthzidProp struct {
	value *EnumresultCriteriaUsedAlternateAuthzidProp
	isSet bool
}

func (v NullableEnumresultCriteriaUsedAlternateAuthzidProp) Get() *EnumresultCriteriaUsedAlternateAuthzidProp {
	return v.value
}

func (v *NullableEnumresultCriteriaUsedAlternateAuthzidProp) Set(val *EnumresultCriteriaUsedAlternateAuthzidProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaUsedAlternateAuthzidProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaUsedAlternateAuthzidProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaUsedAlternateAuthzidProp(val *EnumresultCriteriaUsedAlternateAuthzidProp) *NullableEnumresultCriteriaUsedAlternateAuthzidProp {
	return &NullableEnumresultCriteriaUsedAlternateAuthzidProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaUsedAlternateAuthzidProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaUsedAlternateAuthzidProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
