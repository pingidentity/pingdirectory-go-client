/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ScimSubattributeApiService ScimSubattributeApi service
type ScimSubattributeApiService service

type ApiAddScimSubattributeRequest struct {
	ctx                        context.Context
	ApiService                 *ScimSubattributeApiService
	scimAttributeName          string
	scimSchemaName             string
	addScimSubattributeRequest *AddScimSubattributeRequest
}

// Create a new SCIM Subattribute in the config
func (r ApiAddScimSubattributeRequest) AddScimSubattributeRequest(addScimSubattributeRequest AddScimSubattributeRequest) ApiAddScimSubattributeRequest {
	r.addScimSubattributeRequest = &addScimSubattributeRequest
	return r
}

func (r ApiAddScimSubattributeRequest) Execute() (*ScimSubattributeResponse, *http.Response, error) {
	return r.ApiService.AddScimSubattributeExecute(r)
}

/*
AddScimSubattribute Add a new SCIM Subattribute to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiAddScimSubattributeRequest
*/
func (a *ScimSubattributeApiService) AddScimSubattribute(ctx context.Context, scimAttributeName string, scimSchemaName string) ApiAddScimSubattributeRequest {
	return ApiAddScimSubattributeRequest{
		ApiService:        a,
		ctx:               ctx,
		scimAttributeName: scimAttributeName,
		scimSchemaName:    scimSchemaName,
	}
}

// Execute executes the request
//
//	@return ScimSubattributeResponse
func (a *ScimSubattributeApiService) AddScimSubattributeExecute(r ApiAddScimSubattributeRequest) (*ScimSubattributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimSubattributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimSubattributeApiService.AddScimSubattribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeName, "scimAttributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterValueToString(r.scimSchemaName, "scimSchemaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addScimSubattributeRequest == nil {
		return localVarReturnValue, nil, reportError("addScimSubattributeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addScimSubattributeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteScimSubattributeRequest struct {
	ctx                  context.Context
	ApiService           *ScimSubattributeApiService
	scimSubattributeName string
	scimAttributeName    string
	scimSchemaName       string
}

func (r ApiDeleteScimSubattributeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScimSubattributeExecute(r)
}

/*
DeleteScimSubattribute Delete a SCIM Subattribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimSubattributeName Name of the SCIM Subattribute
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiDeleteScimSubattributeRequest
*/
func (a *ScimSubattributeApiService) DeleteScimSubattribute(ctx context.Context, scimSubattributeName string, scimAttributeName string, scimSchemaName string) ApiDeleteScimSubattributeRequest {
	return ApiDeleteScimSubattributeRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimSubattributeName: scimSubattributeName,
		scimAttributeName:    scimAttributeName,
		scimSchemaName:       scimSchemaName,
	}
}

// Execute executes the request
func (a *ScimSubattributeApiService) DeleteScimSubattributeExecute(r ApiDeleteScimSubattributeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimSubattributeApiService.DeleteScimSubattribute")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-subattribute-name"+"}", url.PathEscape(parameterValueToString(r.scimSubattributeName, "scimSubattributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeName, "scimAttributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterValueToString(r.scimSchemaName, "scimSchemaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScimSubattributeRequest struct {
	ctx                  context.Context
	ApiService           *ScimSubattributeApiService
	scimSubattributeName string
	scimAttributeName    string
	scimSchemaName       string
}

func (r ApiGetScimSubattributeRequest) Execute() (*ScimSubattributeResponse, *http.Response, error) {
	return r.ApiService.GetScimSubattributeExecute(r)
}

/*
GetScimSubattribute Returns a single SCIM Subattribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimSubattributeName Name of the SCIM Subattribute
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiGetScimSubattributeRequest
*/
func (a *ScimSubattributeApiService) GetScimSubattribute(ctx context.Context, scimSubattributeName string, scimAttributeName string, scimSchemaName string) ApiGetScimSubattributeRequest {
	return ApiGetScimSubattributeRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimSubattributeName: scimSubattributeName,
		scimAttributeName:    scimAttributeName,
		scimSchemaName:       scimSchemaName,
	}
}

// Execute executes the request
//
//	@return ScimSubattributeResponse
func (a *ScimSubattributeApiService) GetScimSubattributeExecute(r ApiGetScimSubattributeRequest) (*ScimSubattributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimSubattributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimSubattributeApiService.GetScimSubattribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-subattribute-name"+"}", url.PathEscape(parameterValueToString(r.scimSubattributeName, "scimSubattributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeName, "scimAttributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterValueToString(r.scimSchemaName, "scimSchemaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateScimSubattributeRequest struct {
	ctx                  context.Context
	ApiService           *ScimSubattributeApiService
	scimSubattributeName string
	scimAttributeName    string
	scimSchemaName       string
	updateRequest        *UpdateRequest
}

// Update an existing SCIM Subattribute
func (r ApiUpdateScimSubattributeRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateScimSubattributeRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateScimSubattributeRequest) Execute() (*ScimSubattributeResponse, *http.Response, error) {
	return r.ApiService.UpdateScimSubattributeExecute(r)
}

/*
UpdateScimSubattribute Update an existing SCIM Subattribute by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimSubattributeName Name of the SCIM Subattribute
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiUpdateScimSubattributeRequest
*/
func (a *ScimSubattributeApiService) UpdateScimSubattribute(ctx context.Context, scimSubattributeName string, scimAttributeName string, scimSchemaName string) ApiUpdateScimSubattributeRequest {
	return ApiUpdateScimSubattributeRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimSubattributeName: scimSubattributeName,
		scimAttributeName:    scimAttributeName,
		scimSchemaName:       scimSchemaName,
	}
}

// Execute executes the request
//
//	@return ScimSubattributeResponse
func (a *ScimSubattributeApiService) UpdateScimSubattributeExecute(r ApiUpdateScimSubattributeRequest) (*ScimSubattributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimSubattributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimSubattributeApiService.UpdateScimSubattribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-subattribute-name"+"}", url.PathEscape(parameterValueToString(r.scimSubattributeName, "scimSubattributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterValueToString(r.scimAttributeName, "scimAttributeName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterValueToString(r.scimSchemaName, "scimSchemaName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
