/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn the model 'EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn'
type EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn string

// List of Enumstream-directory-values-extended-operation-handlerSchemaUrn
const (
	ENUMSTREAMDIRECTORYVALUESEXTENDEDOPERATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERSTREAM_DIRECTORY_VALUES EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:stream-directory-values"
)

// All allowed values of EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn enum
var AllowedEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrnEnumValues = []EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:stream-directory-values",
}

func (v *EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumstream-directory-values-extended-operation-handlerSchemaUrn value
func (v EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) Ptr() *EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn struct {
	value *EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) Get() *EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) Set(val *EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn(val *EnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) *NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn {
	return &NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumstreamDirectoryValuesExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
