/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp The behavior to exhibit if the target attribute exists when initially populating the entry with composed values (whether during an LDIF import, an add operation, or an invocation of the populate composed attribute values task).
type EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp string

// List of Enumplugin-targetAttributeExistsDuringInitialPopulationBehaviorProp
const (
	ENUMPLUGINTARGETATTRIBUTEEXISTSDURINGINITIALPOPULATIONBEHAVIORPROP_PRESERVE_EXISTING_VALUES                                   EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp = "preserve-existing-values"
	ENUMPLUGINTARGETATTRIBUTEEXISTSDURINGINITIALPOPULATIONBEHAVIORPROP_OVERWRITE_EXISTING_VALUES                                  EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp = "overwrite-existing-values"
	ENUMPLUGINTARGETATTRIBUTEEXISTSDURINGINITIALPOPULATIONBEHAVIORPROP_MERGE_EXISTING_AND_COMPOSED_VALUES                         EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp = "merge-existing-and-composed-values"
	ENUMPLUGINTARGETATTRIBUTEEXISTSDURINGINITIALPOPULATIONBEHAVIORPROP_REJECT_EXISTING_VALUES_IN_ADD_BUT_PRESERVE_IN_LDIF_IMPORT  EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp = "reject-existing-values-in-add-but-preserve-in-ldif-import"
	ENUMPLUGINTARGETATTRIBUTEEXISTSDURINGINITIALPOPULATIONBEHAVIORPROP_REJECT_EXISTING_VALUES_IN_ADD_BUT_OVERWRITE_IN_LDIF_IMPORT EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp = "reject-existing-values-in-add-but-overwrite-in-ldif-import"
	ENUMPLUGINTARGETATTRIBUTEEXISTSDURINGINITIALPOPULATIONBEHAVIORPROP_REJECT_EXISTING_VALUES_IN_ADD_BUT_MERGE_IN_LDIF_IMPORT     EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp = "reject-existing-values-in-add-but-merge-in-ldif-import"
)

// All allowed values of EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp enum
var AllowedEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorPropEnumValues = []EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp{
	"preserve-existing-values",
	"overwrite-existing-values",
	"merge-existing-and-composed-values",
	"reject-existing-values-in-add-but-preserve-in-ldif-import",
	"reject-existing-values-in-add-but-overwrite-in-ldif-import",
	"reject-existing-values-in-add-but-merge-in-ldif-import",
}

func (v *EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp(value)
	for _, existing := range AllowedEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp", value)
}

// NewEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorPropFromValue returns a pointer to a valid EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorPropFromValue(v string) (*EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp, error) {
	ev := EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp: valid values are %v", v, AllowedEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-targetAttributeExistsDuringInitialPopulationBehaviorProp value
func (v EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) Ptr() *EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp {
	return &v
}

type NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp struct {
	value *EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp
	isSet bool
}

func (v NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) Get() *EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp {
	return v.value
}

func (v *NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) Set(val *EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp(val *EnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) *NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp {
	return &NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginTargetAttributeExistsDuringInitialPopulationBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
