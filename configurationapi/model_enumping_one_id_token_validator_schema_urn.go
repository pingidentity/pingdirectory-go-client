/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpingOneIdTokenValidatorSchemaUrn the model 'EnumpingOneIdTokenValidatorSchemaUrn'
type EnumpingOneIdTokenValidatorSchemaUrn string

// List of Enumping-one-id-token-validatorSchemaUrn
const (
	ENUMPINGONEIDTOKENVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ID_TOKEN_VALIDATORPING_ONE EnumpingOneIdTokenValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:id-token-validator:ping-one"
)

// All allowed values of EnumpingOneIdTokenValidatorSchemaUrn enum
var AllowedEnumpingOneIdTokenValidatorSchemaUrnEnumValues = []EnumpingOneIdTokenValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:id-token-validator:ping-one",
}

func (v *EnumpingOneIdTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpingOneIdTokenValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumpingOneIdTokenValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpingOneIdTokenValidatorSchemaUrn", value)
}

// NewEnumpingOneIdTokenValidatorSchemaUrnFromValue returns a pointer to a valid EnumpingOneIdTokenValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpingOneIdTokenValidatorSchemaUrnFromValue(v string) (*EnumpingOneIdTokenValidatorSchemaUrn, error) {
	ev := EnumpingOneIdTokenValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpingOneIdTokenValidatorSchemaUrn: valid values are %v", v, AllowedEnumpingOneIdTokenValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpingOneIdTokenValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpingOneIdTokenValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumping-one-id-token-validatorSchemaUrn value
func (v EnumpingOneIdTokenValidatorSchemaUrn) Ptr() *EnumpingOneIdTokenValidatorSchemaUrn {
	return &v
}

type NullableEnumpingOneIdTokenValidatorSchemaUrn struct {
	value *EnumpingOneIdTokenValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumpingOneIdTokenValidatorSchemaUrn) Get() *EnumpingOneIdTokenValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumpingOneIdTokenValidatorSchemaUrn) Set(val *EnumpingOneIdTokenValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpingOneIdTokenValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpingOneIdTokenValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpingOneIdTokenValidatorSchemaUrn(val *EnumpingOneIdTokenValidatorSchemaUrn) *NullableEnumpingOneIdTokenValidatorSchemaUrn {
	return &NullableEnumpingOneIdTokenValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpingOneIdTokenValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpingOneIdTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
