/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationAssurancePolicyLocalLevelProp Specifies the assurance level used to replicate to local servers. A local server is defined as one with the same value for the location setting in the global configuration.  The local-level must be set to an assurance level at least as strict as the remote-level. In other words, if remote-level is set to \"received-any-remote-location\" or \"received-all-remote-locations\", then local-level must be either \"received-any-server\" or \"processed-all-servers\". If remote-level is \"processed-all-remote-servers\", then local-level must be \"processed-all-servers\".
type EnumreplicationAssurancePolicyLocalLevelProp string

// List of Enumreplication-assurance-policy-localLevelProp
const (
	ENUMREPLICATIONASSURANCEPOLICYLOCALLEVELPROP_NONE                  EnumreplicationAssurancePolicyLocalLevelProp = "none"
	ENUMREPLICATIONASSURANCEPOLICYLOCALLEVELPROP_RECEIVED_ANY_SERVER   EnumreplicationAssurancePolicyLocalLevelProp = "received-any-server"
	ENUMREPLICATIONASSURANCEPOLICYLOCALLEVELPROP_PROCESSED_ALL_SERVERS EnumreplicationAssurancePolicyLocalLevelProp = "processed-all-servers"
)

// All allowed values of EnumreplicationAssurancePolicyLocalLevelProp enum
var AllowedEnumreplicationAssurancePolicyLocalLevelPropEnumValues = []EnumreplicationAssurancePolicyLocalLevelProp{
	"none",
	"received-any-server",
	"processed-all-servers",
}

func (v *EnumreplicationAssurancePolicyLocalLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationAssurancePolicyLocalLevelProp(value)
	for _, existing := range AllowedEnumreplicationAssurancePolicyLocalLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationAssurancePolicyLocalLevelProp", value)
}

// NewEnumreplicationAssurancePolicyLocalLevelPropFromValue returns a pointer to a valid EnumreplicationAssurancePolicyLocalLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationAssurancePolicyLocalLevelPropFromValue(v string) (*EnumreplicationAssurancePolicyLocalLevelProp, error) {
	ev := EnumreplicationAssurancePolicyLocalLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationAssurancePolicyLocalLevelProp: valid values are %v", v, AllowedEnumreplicationAssurancePolicyLocalLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationAssurancePolicyLocalLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumreplicationAssurancePolicyLocalLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-assurance-policy-localLevelProp value
func (v EnumreplicationAssurancePolicyLocalLevelProp) Ptr() *EnumreplicationAssurancePolicyLocalLevelProp {
	return &v
}

type NullableEnumreplicationAssurancePolicyLocalLevelProp struct {
	value *EnumreplicationAssurancePolicyLocalLevelProp
	isSet bool
}

func (v NullableEnumreplicationAssurancePolicyLocalLevelProp) Get() *EnumreplicationAssurancePolicyLocalLevelProp {
	return v.value
}

func (v *NullableEnumreplicationAssurancePolicyLocalLevelProp) Set(val *EnumreplicationAssurancePolicyLocalLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationAssurancePolicyLocalLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationAssurancePolicyLocalLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationAssurancePolicyLocalLevelProp(val *EnumreplicationAssurancePolicyLocalLevelProp) *NullableEnumreplicationAssurancePolicyLocalLevelProp {
	return &NullableEnumreplicationAssurancePolicyLocalLevelProp{value: val, isSet: true}
}

func (v NullableEnumreplicationAssurancePolicyLocalLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationAssurancePolicyLocalLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
