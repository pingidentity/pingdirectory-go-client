/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LogRotationPolicyApiService LogRotationPolicyApi service
type LogRotationPolicyApiService service

type ApiAddLogRotationPolicyRequest struct {
	ctx                         context.Context
	ApiService                  *LogRotationPolicyApiService
	addLogRotationPolicyRequest *AddLogRotationPolicyRequest
}

// Create a new Log Rotation Policy in the config
func (r ApiAddLogRotationPolicyRequest) AddLogRotationPolicyRequest(addLogRotationPolicyRequest AddLogRotationPolicyRequest) ApiAddLogRotationPolicyRequest {
	r.addLogRotationPolicyRequest = &addLogRotationPolicyRequest
	return r
}

func (r ApiAddLogRotationPolicyRequest) Execute() (*AddLogRotationPolicy200Response, *http.Response, error) {
	return r.ApiService.AddLogRotationPolicyExecute(r)
}

/*
AddLogRotationPolicy Add a new Log Rotation Policy to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddLogRotationPolicyRequest
*/
func (a *LogRotationPolicyApiService) AddLogRotationPolicy(ctx context.Context) ApiAddLogRotationPolicyRequest {
	return ApiAddLogRotationPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddLogRotationPolicy200Response
func (a *LogRotationPolicyApiService) AddLogRotationPolicyExecute(r ApiAddLogRotationPolicyRequest) (*AddLogRotationPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogRotationPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRotationPolicyApiService.AddLogRotationPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-rotation-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLogRotationPolicyRequest == nil {
		return localVarReturnValue, nil, reportError("addLogRotationPolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addLogRotationPolicyRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLogRotationPolicyRequest struct {
	ctx                   context.Context
	ApiService            *LogRotationPolicyApiService
	logRotationPolicyName string
}

func (r ApiDeleteLogRotationPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLogRotationPolicyExecute(r)
}

/*
DeleteLogRotationPolicy Delete a Log Rotation Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logRotationPolicyName Name of the Log Rotation Policy
	@return ApiDeleteLogRotationPolicyRequest
*/
func (a *LogRotationPolicyApiService) DeleteLogRotationPolicy(ctx context.Context, logRotationPolicyName string) ApiDeleteLogRotationPolicyRequest {
	return ApiDeleteLogRotationPolicyRequest{
		ApiService:            a,
		ctx:                   ctx,
		logRotationPolicyName: logRotationPolicyName,
	}
}

// Execute executes the request
func (a *LogRotationPolicyApiService) DeleteLogRotationPolicyExecute(r ApiDeleteLogRotationPolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRotationPolicyApiService.DeleteLogRotationPolicy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-rotation-policies/{log-rotation-policy-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-rotation-policy-name"+"}", url.PathEscape(parameterToString(r.logRotationPolicyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLogRotationPolicyRequest struct {
	ctx                   context.Context
	ApiService            *LogRotationPolicyApiService
	logRotationPolicyName string
}

func (r ApiGetLogRotationPolicyRequest) Execute() (*AddLogRotationPolicy200Response, *http.Response, error) {
	return r.ApiService.GetLogRotationPolicyExecute(r)
}

/*
GetLogRotationPolicy Returns a single Log Rotation Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logRotationPolicyName Name of the Log Rotation Policy
	@return ApiGetLogRotationPolicyRequest
*/
func (a *LogRotationPolicyApiService) GetLogRotationPolicy(ctx context.Context, logRotationPolicyName string) ApiGetLogRotationPolicyRequest {
	return ApiGetLogRotationPolicyRequest{
		ApiService:            a,
		ctx:                   ctx,
		logRotationPolicyName: logRotationPolicyName,
	}
}

// Execute executes the request
//
//	@return AddLogRotationPolicy200Response
func (a *LogRotationPolicyApiService) GetLogRotationPolicyExecute(r ApiGetLogRotationPolicyRequest) (*AddLogRotationPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogRotationPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRotationPolicyApiService.GetLogRotationPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-rotation-policies/{log-rotation-policy-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-rotation-policy-name"+"}", url.PathEscape(parameterToString(r.logRotationPolicyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLogRotationPolicyRequest struct {
	ctx                   context.Context
	ApiService            *LogRotationPolicyApiService
	logRotationPolicyName string
	updateRequest         *UpdateRequest
}

// Update an existing Log Rotation Policy
func (r ApiUpdateLogRotationPolicyRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateLogRotationPolicyRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateLogRotationPolicyRequest) Execute() (*AddLogRotationPolicy200Response, *http.Response, error) {
	return r.ApiService.UpdateLogRotationPolicyExecute(r)
}

/*
UpdateLogRotationPolicy Update an existing Log Rotation Policy by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param logRotationPolicyName Name of the Log Rotation Policy
	@return ApiUpdateLogRotationPolicyRequest
*/
func (a *LogRotationPolicyApiService) UpdateLogRotationPolicy(ctx context.Context, logRotationPolicyName string) ApiUpdateLogRotationPolicyRequest {
	return ApiUpdateLogRotationPolicyRequest{
		ApiService:            a,
		ctx:                   ctx,
		logRotationPolicyName: logRotationPolicyName,
	}
}

// Execute executes the request
//
//	@return AddLogRotationPolicy200Response
func (a *LogRotationPolicyApiService) UpdateLogRotationPolicyExecute(r ApiUpdateLogRotationPolicyRequest) (*AddLogRotationPolicy200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddLogRotationPolicy200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogRotationPolicyApiService.UpdateLogRotationPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/log-rotation-policies/{log-rotation-policy-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"log-rotation-policy-name"+"}", url.PathEscape(parameterToString(r.logRotationPolicyName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
