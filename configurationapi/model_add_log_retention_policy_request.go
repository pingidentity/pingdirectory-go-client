/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddLogRetentionPolicyRequest - struct for AddLogRetentionPolicyRequest
type AddLogRetentionPolicyRequest struct {
	AddFileCountLogRetentionPolicyRequest     *AddFileCountLogRetentionPolicyRequest
	AddFreeDiskSpaceLogRetentionPolicyRequest *AddFreeDiskSpaceLogRetentionPolicyRequest
	AddNeverDeleteLogRetentionPolicyRequest   *AddNeverDeleteLogRetentionPolicyRequest
	AddSizeLimitLogRetentionPolicyRequest     *AddSizeLimitLogRetentionPolicyRequest
	AddTimeLimitLogRetentionPolicyRequest     *AddTimeLimitLogRetentionPolicyRequest
}

// AddFileCountLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest is a convenience function that returns AddFileCountLogRetentionPolicyRequest wrapped in AddLogRetentionPolicyRequest
func AddFileCountLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest(v *AddFileCountLogRetentionPolicyRequest) AddLogRetentionPolicyRequest {
	return AddLogRetentionPolicyRequest{
		AddFileCountLogRetentionPolicyRequest: v,
	}
}

// AddFreeDiskSpaceLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest is a convenience function that returns AddFreeDiskSpaceLogRetentionPolicyRequest wrapped in AddLogRetentionPolicyRequest
func AddFreeDiskSpaceLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest(v *AddFreeDiskSpaceLogRetentionPolicyRequest) AddLogRetentionPolicyRequest {
	return AddLogRetentionPolicyRequest{
		AddFreeDiskSpaceLogRetentionPolicyRequest: v,
	}
}

// AddNeverDeleteLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest is a convenience function that returns AddNeverDeleteLogRetentionPolicyRequest wrapped in AddLogRetentionPolicyRequest
func AddNeverDeleteLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest(v *AddNeverDeleteLogRetentionPolicyRequest) AddLogRetentionPolicyRequest {
	return AddLogRetentionPolicyRequest{
		AddNeverDeleteLogRetentionPolicyRequest: v,
	}
}

// AddSizeLimitLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest is a convenience function that returns AddSizeLimitLogRetentionPolicyRequest wrapped in AddLogRetentionPolicyRequest
func AddSizeLimitLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest(v *AddSizeLimitLogRetentionPolicyRequest) AddLogRetentionPolicyRequest {
	return AddLogRetentionPolicyRequest{
		AddSizeLimitLogRetentionPolicyRequest: v,
	}
}

// AddTimeLimitLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest is a convenience function that returns AddTimeLimitLogRetentionPolicyRequest wrapped in AddLogRetentionPolicyRequest
func AddTimeLimitLogRetentionPolicyRequestAsAddLogRetentionPolicyRequest(v *AddTimeLimitLogRetentionPolicyRequest) AddLogRetentionPolicyRequest {
	return AddLogRetentionPolicyRequest{
		AddTimeLimitLogRetentionPolicyRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddLogRetentionPolicyRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddFileCountLogRetentionPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddFileCountLogRetentionPolicyRequest)
	if err == nil {
		jsonAddFileCountLogRetentionPolicyRequest, _ := json.Marshal(dst.AddFileCountLogRetentionPolicyRequest)
		if string(jsonAddFileCountLogRetentionPolicyRequest) == "{}" { // empty struct
			dst.AddFileCountLogRetentionPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFileCountLogRetentionPolicyRequest = nil
	}

	// try to unmarshal data into AddFreeDiskSpaceLogRetentionPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddFreeDiskSpaceLogRetentionPolicyRequest)
	if err == nil {
		jsonAddFreeDiskSpaceLogRetentionPolicyRequest, _ := json.Marshal(dst.AddFreeDiskSpaceLogRetentionPolicyRequest)
		if string(jsonAddFreeDiskSpaceLogRetentionPolicyRequest) == "{}" { // empty struct
			dst.AddFreeDiskSpaceLogRetentionPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFreeDiskSpaceLogRetentionPolicyRequest = nil
	}

	// try to unmarshal data into AddNeverDeleteLogRetentionPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddNeverDeleteLogRetentionPolicyRequest)
	if err == nil {
		jsonAddNeverDeleteLogRetentionPolicyRequest, _ := json.Marshal(dst.AddNeverDeleteLogRetentionPolicyRequest)
		if string(jsonAddNeverDeleteLogRetentionPolicyRequest) == "{}" { // empty struct
			dst.AddNeverDeleteLogRetentionPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddNeverDeleteLogRetentionPolicyRequest = nil
	}

	// try to unmarshal data into AddSizeLimitLogRetentionPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddSizeLimitLogRetentionPolicyRequest)
	if err == nil {
		jsonAddSizeLimitLogRetentionPolicyRequest, _ := json.Marshal(dst.AddSizeLimitLogRetentionPolicyRequest)
		if string(jsonAddSizeLimitLogRetentionPolicyRequest) == "{}" { // empty struct
			dst.AddSizeLimitLogRetentionPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddSizeLimitLogRetentionPolicyRequest = nil
	}

	// try to unmarshal data into AddTimeLimitLogRetentionPolicyRequest
	err = newStrictDecoder(data).Decode(&dst.AddTimeLimitLogRetentionPolicyRequest)
	if err == nil {
		jsonAddTimeLimitLogRetentionPolicyRequest, _ := json.Marshal(dst.AddTimeLimitLogRetentionPolicyRequest)
		if string(jsonAddTimeLimitLogRetentionPolicyRequest) == "{}" { // empty struct
			dst.AddTimeLimitLogRetentionPolicyRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddTimeLimitLogRetentionPolicyRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddFileCountLogRetentionPolicyRequest = nil
		dst.AddFreeDiskSpaceLogRetentionPolicyRequest = nil
		dst.AddNeverDeleteLogRetentionPolicyRequest = nil
		dst.AddSizeLimitLogRetentionPolicyRequest = nil
		dst.AddTimeLimitLogRetentionPolicyRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddLogRetentionPolicyRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddLogRetentionPolicyRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddLogRetentionPolicyRequest) MarshalJSON() ([]byte, error) {
	if src.AddFileCountLogRetentionPolicyRequest != nil {
		return json.Marshal(&src.AddFileCountLogRetentionPolicyRequest)
	}

	if src.AddFreeDiskSpaceLogRetentionPolicyRequest != nil {
		return json.Marshal(&src.AddFreeDiskSpaceLogRetentionPolicyRequest)
	}

	if src.AddNeverDeleteLogRetentionPolicyRequest != nil {
		return json.Marshal(&src.AddNeverDeleteLogRetentionPolicyRequest)
	}

	if src.AddSizeLimitLogRetentionPolicyRequest != nil {
		return json.Marshal(&src.AddSizeLimitLogRetentionPolicyRequest)
	}

	if src.AddTimeLimitLogRetentionPolicyRequest != nil {
		return json.Marshal(&src.AddTimeLimitLogRetentionPolicyRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddLogRetentionPolicyRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddFileCountLogRetentionPolicyRequest != nil {
		return obj.AddFileCountLogRetentionPolicyRequest
	}

	if obj.AddFreeDiskSpaceLogRetentionPolicyRequest != nil {
		return obj.AddFreeDiskSpaceLogRetentionPolicyRequest
	}

	if obj.AddNeverDeleteLogRetentionPolicyRequest != nil {
		return obj.AddNeverDeleteLogRetentionPolicyRequest
	}

	if obj.AddSizeLimitLogRetentionPolicyRequest != nil {
		return obj.AddSizeLimitLogRetentionPolicyRequest
	}

	if obj.AddTimeLimitLogRetentionPolicyRequest != nil {
		return obj.AddTimeLimitLogRetentionPolicyRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddLogRetentionPolicyRequest struct {
	value *AddLogRetentionPolicyRequest
	isSet bool
}

func (v NullableAddLogRetentionPolicyRequest) Get() *AddLogRetentionPolicyRequest {
	return v.value
}

func (v *NullableAddLogRetentionPolicyRequest) Set(val *AddLogRetentionPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLogRetentionPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLogRetentionPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLogRetentionPolicyRequest(val *AddLogRetentionPolicyRequest) *NullableAddLogRetentionPolicyRequest {
	return &NullableAddLogRetentionPolicyRequest{value: val, isSet: true}
}

func (v NullableAddLogRetentionPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLogRetentionPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
