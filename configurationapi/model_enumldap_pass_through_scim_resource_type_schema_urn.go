/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumldapPassThroughScimResourceTypeSchemaUrn the model 'EnumldapPassThroughScimResourceTypeSchemaUrn'
type EnumldapPassThroughScimResourceTypeSchemaUrn string

// List of Enumldap-pass-through-scim-resource-typeSchemaUrn
const (
	ENUMLDAPPASSTHROUGHSCIMRESOURCETYPESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SCIM_RESOURCE_TYPELDAP_PASS_THROUGH EnumldapPassThroughScimResourceTypeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:scim-resource-type:ldap-pass-through"
)

// All allowed values of EnumldapPassThroughScimResourceTypeSchemaUrn enum
var AllowedEnumldapPassThroughScimResourceTypeSchemaUrnEnumValues = []EnumldapPassThroughScimResourceTypeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:scim-resource-type:ldap-pass-through",
}

func (v *EnumldapPassThroughScimResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldapPassThroughScimResourceTypeSchemaUrn(value)
	for _, existing := range AllowedEnumldapPassThroughScimResourceTypeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldapPassThroughScimResourceTypeSchemaUrn", value)
}

// NewEnumldapPassThroughScimResourceTypeSchemaUrnFromValue returns a pointer to a valid EnumldapPassThroughScimResourceTypeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldapPassThroughScimResourceTypeSchemaUrnFromValue(v string) (*EnumldapPassThroughScimResourceTypeSchemaUrn, error) {
	ev := EnumldapPassThroughScimResourceTypeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldapPassThroughScimResourceTypeSchemaUrn: valid values are %v", v, AllowedEnumldapPassThroughScimResourceTypeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldapPassThroughScimResourceTypeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldapPassThroughScimResourceTypeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldap-pass-through-scim-resource-typeSchemaUrn value
func (v EnumldapPassThroughScimResourceTypeSchemaUrn) Ptr() *EnumldapPassThroughScimResourceTypeSchemaUrn {
	return &v
}

type NullableEnumldapPassThroughScimResourceTypeSchemaUrn struct {
	value *EnumldapPassThroughScimResourceTypeSchemaUrn
	isSet bool
}

func (v NullableEnumldapPassThroughScimResourceTypeSchemaUrn) Get() *EnumldapPassThroughScimResourceTypeSchemaUrn {
	return v.value
}

func (v *NullableEnumldapPassThroughScimResourceTypeSchemaUrn) Set(val *EnumldapPassThroughScimResourceTypeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldapPassThroughScimResourceTypeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldapPassThroughScimResourceTypeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldapPassThroughScimResourceTypeSchemaUrn(val *EnumldapPassThroughScimResourceTypeSchemaUrn) *NullableEnumldapPassThroughScimResourceTypeSchemaUrn {
	return &NullableEnumldapPassThroughScimResourceTypeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldapPassThroughScimResourceTypeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldapPassThroughScimResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
