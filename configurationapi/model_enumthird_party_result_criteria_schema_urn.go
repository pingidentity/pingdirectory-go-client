/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyResultCriteriaSchemaUrn the model 'EnumthirdPartyResultCriteriaSchemaUrn'
type EnumthirdPartyResultCriteriaSchemaUrn string

// List of Enumthird-party-result-criteriaSchemaUrn
const (
	ENUMTHIRDPARTYRESULTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RESULT_CRITERIATHIRD_PARTY EnumthirdPartyResultCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:result-criteria:third-party"
)

// All allowed values of EnumthirdPartyResultCriteriaSchemaUrn enum
var AllowedEnumthirdPartyResultCriteriaSchemaUrnEnumValues = []EnumthirdPartyResultCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:result-criteria:third-party",
}

func (v *EnumthirdPartyResultCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyResultCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyResultCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyResultCriteriaSchemaUrn", value)
}

// NewEnumthirdPartyResultCriteriaSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyResultCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyResultCriteriaSchemaUrnFromValue(v string) (*EnumthirdPartyResultCriteriaSchemaUrn, error) {
	ev := EnumthirdPartyResultCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyResultCriteriaSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyResultCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyResultCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyResultCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-result-criteriaSchemaUrn value
func (v EnumthirdPartyResultCriteriaSchemaUrn) Ptr() *EnumthirdPartyResultCriteriaSchemaUrn {
	return &v
}

type NullableEnumthirdPartyResultCriteriaSchemaUrn struct {
	value *EnumthirdPartyResultCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyResultCriteriaSchemaUrn) Get() *EnumthirdPartyResultCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyResultCriteriaSchemaUrn) Set(val *EnumthirdPartyResultCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyResultCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyResultCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyResultCriteriaSchemaUrn(val *EnumthirdPartyResultCriteriaSchemaUrn) *NullableEnumthirdPartyResultCriteriaSchemaUrn {
	return &NullableEnumthirdPartyResultCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyResultCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyResultCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
