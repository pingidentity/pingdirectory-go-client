/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumscimAttributeTypeProp Specifies the data type for this attribute.
type EnumscimAttributeTypeProp string

// List of Enumscim-attribute-typeProp
const (
	ENUMSCIMATTRIBUTETYPEPROP_STRING    EnumscimAttributeTypeProp = "string"
	ENUMSCIMATTRIBUTETYPEPROP_BOOLEAN   EnumscimAttributeTypeProp = "boolean"
	ENUMSCIMATTRIBUTETYPEPROP_DATETIME  EnumscimAttributeTypeProp = "datetime"
	ENUMSCIMATTRIBUTETYPEPROP_DECIMAL   EnumscimAttributeTypeProp = "decimal"
	ENUMSCIMATTRIBUTETYPEPROP_INTEGER   EnumscimAttributeTypeProp = "integer"
	ENUMSCIMATTRIBUTETYPEPROP_BINARY    EnumscimAttributeTypeProp = "binary"
	ENUMSCIMATTRIBUTETYPEPROP_REFERENCE EnumscimAttributeTypeProp = "reference"
	ENUMSCIMATTRIBUTETYPEPROP_COMPLEX   EnumscimAttributeTypeProp = "complex"
)

// All allowed values of EnumscimAttributeTypeProp enum
var AllowedEnumscimAttributeTypePropEnumValues = []EnumscimAttributeTypeProp{
	"string",
	"boolean",
	"datetime",
	"decimal",
	"integer",
	"binary",
	"reference",
	"complex",
}

func (v *EnumscimAttributeTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumscimAttributeTypeProp(value)
	for _, existing := range AllowedEnumscimAttributeTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumscimAttributeTypeProp", value)
}

// NewEnumscimAttributeTypePropFromValue returns a pointer to a valid EnumscimAttributeTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscimAttributeTypePropFromValue(v string) (*EnumscimAttributeTypeProp, error) {
	ev := EnumscimAttributeTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumscimAttributeTypeProp: valid values are %v", v, AllowedEnumscimAttributeTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumscimAttributeTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumscimAttributeTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim-attribute-typeProp value
func (v EnumscimAttributeTypeProp) Ptr() *EnumscimAttributeTypeProp {
	return &v
}

type NullableEnumscimAttributeTypeProp struct {
	value *EnumscimAttributeTypeProp
	isSet bool
}

func (v NullableEnumscimAttributeTypeProp) Get() *EnumscimAttributeTypeProp {
	return v.value
}

func (v *NullableEnumscimAttributeTypeProp) Set(val *EnumscimAttributeTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscimAttributeTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscimAttributeTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscimAttributeTypeProp(val *EnumscimAttributeTypeProp) *NullableEnumscimAttributeTypeProp {
	return &NullableEnumscimAttributeTypeProp{value: val, isSet: true}
}

func (v NullableEnumscimAttributeTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscimAttributeTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
