/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnummodifiablePasswordPolicyStatePluginSchemaUrn the model 'EnummodifiablePasswordPolicyStatePluginSchemaUrn'
type EnummodifiablePasswordPolicyStatePluginSchemaUrn string

// List of Enummodifiable-password-policy-state-pluginSchemaUrn
const (
	ENUMMODIFIABLEPASSWORDPOLICYSTATEPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINMODIFIABLE_PASSWORD_POLICY_STATE EnummodifiablePasswordPolicyStatePluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:modifiable-password-policy-state"
)

// All allowed values of EnummodifiablePasswordPolicyStatePluginSchemaUrn enum
var AllowedEnummodifiablePasswordPolicyStatePluginSchemaUrnEnumValues = []EnummodifiablePasswordPolicyStatePluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:modifiable-password-policy-state",
}

func (v *EnummodifiablePasswordPolicyStatePluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummodifiablePasswordPolicyStatePluginSchemaUrn(value)
	for _, existing := range AllowedEnummodifiablePasswordPolicyStatePluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummodifiablePasswordPolicyStatePluginSchemaUrn", value)
}

// NewEnummodifiablePasswordPolicyStatePluginSchemaUrnFromValue returns a pointer to a valid EnummodifiablePasswordPolicyStatePluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummodifiablePasswordPolicyStatePluginSchemaUrnFromValue(v string) (*EnummodifiablePasswordPolicyStatePluginSchemaUrn, error) {
	ev := EnummodifiablePasswordPolicyStatePluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummodifiablePasswordPolicyStatePluginSchemaUrn: valid values are %v", v, AllowedEnummodifiablePasswordPolicyStatePluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummodifiablePasswordPolicyStatePluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummodifiablePasswordPolicyStatePluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummodifiable-password-policy-state-pluginSchemaUrn value
func (v EnummodifiablePasswordPolicyStatePluginSchemaUrn) Ptr() *EnummodifiablePasswordPolicyStatePluginSchemaUrn {
	return &v
}

type NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn struct {
	value *EnummodifiablePasswordPolicyStatePluginSchemaUrn
	isSet bool
}

func (v NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn) Get() *EnummodifiablePasswordPolicyStatePluginSchemaUrn {
	return v.value
}

func (v *NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn) Set(val *EnummodifiablePasswordPolicyStatePluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummodifiablePasswordPolicyStatePluginSchemaUrn(val *EnummodifiablePasswordPolicyStatePluginSchemaUrn) *NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn {
	return &NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummodifiablePasswordPolicyStatePluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
