/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumconfigFileHandlerBackendSchemaUrn the model 'EnumconfigFileHandlerBackendSchemaUrn'
type EnumconfigFileHandlerBackendSchemaUrn string

// List of Enumconfig-file-handler-backendSchemaUrn
const (
	ENUMCONFIGFILEHANDLERBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDCONFIG_FILE_HANDLER EnumconfigFileHandlerBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:config-file-handler"
)

// All allowed values of EnumconfigFileHandlerBackendSchemaUrn enum
var AllowedEnumconfigFileHandlerBackendSchemaUrnEnumValues = []EnumconfigFileHandlerBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:config-file-handler",
}

func (v *EnumconfigFileHandlerBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconfigFileHandlerBackendSchemaUrn(value)
	for _, existing := range AllowedEnumconfigFileHandlerBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconfigFileHandlerBackendSchemaUrn", value)
}

// NewEnumconfigFileHandlerBackendSchemaUrnFromValue returns a pointer to a valid EnumconfigFileHandlerBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconfigFileHandlerBackendSchemaUrnFromValue(v string) (*EnumconfigFileHandlerBackendSchemaUrn, error) {
	ev := EnumconfigFileHandlerBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconfigFileHandlerBackendSchemaUrn: valid values are %v", v, AllowedEnumconfigFileHandlerBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconfigFileHandlerBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconfigFileHandlerBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconfig-file-handler-backendSchemaUrn value
func (v EnumconfigFileHandlerBackendSchemaUrn) Ptr() *EnumconfigFileHandlerBackendSchemaUrn {
	return &v
}

type NullableEnumconfigFileHandlerBackendSchemaUrn struct {
	value *EnumconfigFileHandlerBackendSchemaUrn
	isSet bool
}

func (v NullableEnumconfigFileHandlerBackendSchemaUrn) Get() *EnumconfigFileHandlerBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumconfigFileHandlerBackendSchemaUrn) Set(val *EnumconfigFileHandlerBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconfigFileHandlerBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconfigFileHandlerBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconfigFileHandlerBackendSchemaUrn(val *EnumconfigFileHandlerBackendSchemaUrn) *NullableEnumconfigFileHandlerBackendSchemaUrn {
	return &NullableEnumconfigFileHandlerBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconfigFileHandlerBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconfigFileHandlerBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
