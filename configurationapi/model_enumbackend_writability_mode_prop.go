/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackendWritabilityModeProp Specifies the behavior that the backend should use when processing write operations.
type EnumbackendWritabilityModeProp string

// List of Enumbackend-writabilityModeProp
const (
	ENUMBACKENDWRITABILITYMODEPROP_ENABLED       EnumbackendWritabilityModeProp = "enabled"
	ENUMBACKENDWRITABILITYMODEPROP_DISABLED      EnumbackendWritabilityModeProp = "disabled"
	ENUMBACKENDWRITABILITYMODEPROP_INTERNAL_ONLY EnumbackendWritabilityModeProp = "internal-only"
)

// All allowed values of EnumbackendWritabilityModeProp enum
var AllowedEnumbackendWritabilityModePropEnumValues = []EnumbackendWritabilityModeProp{
	"enabled",
	"disabled",
	"internal-only",
}

func (v *EnumbackendWritabilityModeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackendWritabilityModeProp(value)
	for _, existing := range AllowedEnumbackendWritabilityModePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackendWritabilityModeProp", value)
}

// NewEnumbackendWritabilityModePropFromValue returns a pointer to a valid EnumbackendWritabilityModeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackendWritabilityModePropFromValue(v string) (*EnumbackendWritabilityModeProp, error) {
	ev := EnumbackendWritabilityModeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackendWritabilityModeProp: valid values are %v", v, AllowedEnumbackendWritabilityModePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackendWritabilityModeProp) IsValid() bool {
	for _, existing := range AllowedEnumbackendWritabilityModePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackend-writabilityModeProp value
func (v EnumbackendWritabilityModeProp) Ptr() *EnumbackendWritabilityModeProp {
	return &v
}

type NullableEnumbackendWritabilityModeProp struct {
	value *EnumbackendWritabilityModeProp
	isSet bool
}

func (v NullableEnumbackendWritabilityModeProp) Get() *EnumbackendWritabilityModeProp {
	return v.value
}

func (v *NullableEnumbackendWritabilityModeProp) Set(val *EnumbackendWritabilityModeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackendWritabilityModeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackendWritabilityModeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackendWritabilityModeProp(val *EnumbackendWritabilityModeProp) *NullableEnumbackendWritabilityModeProp {
	return &NullableEnumbackendWritabilityModeProp{value: val, isSet: true}
}

func (v NullableEnumbackendWritabilityModeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackendWritabilityModeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
