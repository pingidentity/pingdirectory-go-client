/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpConfigurationSchemaUrn the model 'EnumhttpConfigurationSchemaUrn'
type EnumhttpConfigurationSchemaUrn string

// List of Enumhttp-configurationSchemaUrn
const (
	ENUMHTTPCONFIGURATIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_CONFIGURATION EnumhttpConfigurationSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-configuration"
)

// All allowed values of EnumhttpConfigurationSchemaUrn enum
var AllowedEnumhttpConfigurationSchemaUrnEnumValues = []EnumhttpConfigurationSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-configuration",
}

func (v *EnumhttpConfigurationSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpConfigurationSchemaUrn(value)
	for _, existing := range AllowedEnumhttpConfigurationSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpConfigurationSchemaUrn", value)
}

// NewEnumhttpConfigurationSchemaUrnFromValue returns a pointer to a valid EnumhttpConfigurationSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpConfigurationSchemaUrnFromValue(v string) (*EnumhttpConfigurationSchemaUrn, error) {
	ev := EnumhttpConfigurationSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpConfigurationSchemaUrn: valid values are %v", v, AllowedEnumhttpConfigurationSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpConfigurationSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumhttpConfigurationSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-configurationSchemaUrn value
func (v EnumhttpConfigurationSchemaUrn) Ptr() *EnumhttpConfigurationSchemaUrn {
	return &v
}

type NullableEnumhttpConfigurationSchemaUrn struct {
	value *EnumhttpConfigurationSchemaUrn
	isSet bool
}

func (v NullableEnumhttpConfigurationSchemaUrn) Get() *EnumhttpConfigurationSchemaUrn {
	return v.value
}

func (v *NullableEnumhttpConfigurationSchemaUrn) Set(val *EnumhttpConfigurationSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpConfigurationSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpConfigurationSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpConfigurationSchemaUrn(val *EnumhttpConfigurationSchemaUrn) *NullableEnumhttpConfigurationSchemaUrn {
	return &NullableEnumhttpConfigurationSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumhttpConfigurationSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpConfigurationSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
