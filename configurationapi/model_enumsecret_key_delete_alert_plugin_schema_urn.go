/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsecretKeyDeleteAlertPluginSchemaUrn the model 'EnumsecretKeyDeleteAlertPluginSchemaUrn'
type EnumsecretKeyDeleteAlertPluginSchemaUrn string

// List of Enumsecret-key-delete-alert-pluginSchemaUrn
const (
	ENUMSECRETKEYDELETEALERTPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSECRET_KEY_DELETE_ALERT EnumsecretKeyDeleteAlertPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:secret-key-delete-alert"
)

// All allowed values of EnumsecretKeyDeleteAlertPluginSchemaUrn enum
var AllowedEnumsecretKeyDeleteAlertPluginSchemaUrnEnumValues = []EnumsecretKeyDeleteAlertPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:secret-key-delete-alert",
}

func (v *EnumsecretKeyDeleteAlertPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsecretKeyDeleteAlertPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsecretKeyDeleteAlertPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsecretKeyDeleteAlertPluginSchemaUrn", value)
}

// NewEnumsecretKeyDeleteAlertPluginSchemaUrnFromValue returns a pointer to a valid EnumsecretKeyDeleteAlertPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsecretKeyDeleteAlertPluginSchemaUrnFromValue(v string) (*EnumsecretKeyDeleteAlertPluginSchemaUrn, error) {
	ev := EnumsecretKeyDeleteAlertPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsecretKeyDeleteAlertPluginSchemaUrn: valid values are %v", v, AllowedEnumsecretKeyDeleteAlertPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsecretKeyDeleteAlertPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsecretKeyDeleteAlertPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsecret-key-delete-alert-pluginSchemaUrn value
func (v EnumsecretKeyDeleteAlertPluginSchemaUrn) Ptr() *EnumsecretKeyDeleteAlertPluginSchemaUrn {
	return &v
}

type NullableEnumsecretKeyDeleteAlertPluginSchemaUrn struct {
	value *EnumsecretKeyDeleteAlertPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsecretKeyDeleteAlertPluginSchemaUrn) Get() *EnumsecretKeyDeleteAlertPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsecretKeyDeleteAlertPluginSchemaUrn) Set(val *EnumsecretKeyDeleteAlertPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsecretKeyDeleteAlertPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsecretKeyDeleteAlertPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsecretKeyDeleteAlertPluginSchemaUrn(val *EnumsecretKeyDeleteAlertPluginSchemaUrn) *NullableEnumsecretKeyDeleteAlertPluginSchemaUrn {
	return &NullableEnumsecretKeyDeleteAlertPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsecretKeyDeleteAlertPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsecretKeyDeleteAlertPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
