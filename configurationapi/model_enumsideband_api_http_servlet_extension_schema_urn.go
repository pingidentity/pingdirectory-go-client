/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsidebandApiHttpServletExtensionSchemaUrn the model 'EnumsidebandApiHttpServletExtensionSchemaUrn'
type EnumsidebandApiHttpServletExtensionSchemaUrn string

// List of Enumsideband-api-http-servlet-extensionSchemaUrn
const (
	ENUMSIDEBANDAPIHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONSIDEBAND_API EnumsidebandApiHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:sideband-api"
)

// All allowed values of EnumsidebandApiHttpServletExtensionSchemaUrn enum
var AllowedEnumsidebandApiHttpServletExtensionSchemaUrnEnumValues = []EnumsidebandApiHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:sideband-api",
}

func (v *EnumsidebandApiHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsidebandApiHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumsidebandApiHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsidebandApiHttpServletExtensionSchemaUrn", value)
}

// NewEnumsidebandApiHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumsidebandApiHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsidebandApiHttpServletExtensionSchemaUrnFromValue(v string) (*EnumsidebandApiHttpServletExtensionSchemaUrn, error) {
	ev := EnumsidebandApiHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsidebandApiHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumsidebandApiHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsidebandApiHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsidebandApiHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsideband-api-http-servlet-extensionSchemaUrn value
func (v EnumsidebandApiHttpServletExtensionSchemaUrn) Ptr() *EnumsidebandApiHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumsidebandApiHttpServletExtensionSchemaUrn struct {
	value *EnumsidebandApiHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumsidebandApiHttpServletExtensionSchemaUrn) Get() *EnumsidebandApiHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumsidebandApiHttpServletExtensionSchemaUrn) Set(val *EnumsidebandApiHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsidebandApiHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsidebandApiHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsidebandApiHttpServletExtensionSchemaUrn(val *EnumsidebandApiHttpServletExtensionSchemaUrn) *NullableEnumsidebandApiHttpServletExtensionSchemaUrn {
	return &NullableEnumsidebandApiHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsidebandApiHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsidebandApiHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
