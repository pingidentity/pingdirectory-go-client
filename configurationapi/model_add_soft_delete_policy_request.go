/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddSoftDeletePolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddSoftDeletePolicyRequest{}

// AddSoftDeletePolicyRequest struct for AddSoftDeletePolicyRequest
type AddSoftDeletePolicyRequest struct {
	// Name of the new Soft Delete Policy
	PolicyName string                          `json:"policyName"`
	Schemas    []EnumsoftDeletePolicySchemaUrn `json:"schemas,omitempty"`
	// A description for this Soft Delete Policy
	Description *string `json:"description,omitempty"`
	// Connection criteria used to automatically identify a delete operation for processing as a soft delete request.
	AutoSoftDeleteConnectionCriteria *string `json:"autoSoftDeleteConnectionCriteria,omitempty"`
	// Request criteria used to automatically identify a delete operation for processing as a soft delete request.
	AutoSoftDeleteRequestCriteria *string `json:"autoSoftDeleteRequestCriteria,omitempty"`
	// Specifies the maximum length of time that soft delete entries are retained before they are eligible to purged automatically.
	SoftDeleteRetentionTime *string `json:"softDeleteRetentionTime,omitempty"`
	// Specifies the number of soft deleted entries to retain before the oldest entries are purged.
	SoftDeleteRetainNumberOfEntries *int32 `json:"softDeleteRetainNumberOfEntries,omitempty"`
}

// NewAddSoftDeletePolicyRequest instantiates a new AddSoftDeletePolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddSoftDeletePolicyRequest(policyName string) *AddSoftDeletePolicyRequest {
	this := AddSoftDeletePolicyRequest{}
	this.PolicyName = policyName
	return &this
}

// NewAddSoftDeletePolicyRequestWithDefaults instantiates a new AddSoftDeletePolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddSoftDeletePolicyRequestWithDefaults() *AddSoftDeletePolicyRequest {
	this := AddSoftDeletePolicyRequest{}
	return &this
}

// GetPolicyName returns the PolicyName field value
func (o *AddSoftDeletePolicyRequest) GetPolicyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyName, true
}

// SetPolicyName sets field value
func (o *AddSoftDeletePolicyRequest) SetPolicyName(v string) {
	o.PolicyName = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *AddSoftDeletePolicyRequest) GetSchemas() []EnumsoftDeletePolicySchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumsoftDeletePolicySchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetSchemasOk() ([]EnumsoftDeletePolicySchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *AddSoftDeletePolicyRequest) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumsoftDeletePolicySchemaUrn and assigns it to the Schemas field.
func (o *AddSoftDeletePolicyRequest) SetSchemas(v []EnumsoftDeletePolicySchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddSoftDeletePolicyRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddSoftDeletePolicyRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddSoftDeletePolicyRequest) SetDescription(v string) {
	o.Description = &v
}

// GetAutoSoftDeleteConnectionCriteria returns the AutoSoftDeleteConnectionCriteria field value if set, zero value otherwise.
func (o *AddSoftDeletePolicyRequest) GetAutoSoftDeleteConnectionCriteria() string {
	if o == nil || IsNil(o.AutoSoftDeleteConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.AutoSoftDeleteConnectionCriteria
}

// GetAutoSoftDeleteConnectionCriteriaOk returns a tuple with the AutoSoftDeleteConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetAutoSoftDeleteConnectionCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.AutoSoftDeleteConnectionCriteria) {
		return nil, false
	}
	return o.AutoSoftDeleteConnectionCriteria, true
}

// HasAutoSoftDeleteConnectionCriteria returns a boolean if a field has been set.
func (o *AddSoftDeletePolicyRequest) HasAutoSoftDeleteConnectionCriteria() bool {
	if o != nil && !IsNil(o.AutoSoftDeleteConnectionCriteria) {
		return true
	}

	return false
}

// SetAutoSoftDeleteConnectionCriteria gets a reference to the given string and assigns it to the AutoSoftDeleteConnectionCriteria field.
func (o *AddSoftDeletePolicyRequest) SetAutoSoftDeleteConnectionCriteria(v string) {
	o.AutoSoftDeleteConnectionCriteria = &v
}

// GetAutoSoftDeleteRequestCriteria returns the AutoSoftDeleteRequestCriteria field value if set, zero value otherwise.
func (o *AddSoftDeletePolicyRequest) GetAutoSoftDeleteRequestCriteria() string {
	if o == nil || IsNil(o.AutoSoftDeleteRequestCriteria) {
		var ret string
		return ret
	}
	return *o.AutoSoftDeleteRequestCriteria
}

// GetAutoSoftDeleteRequestCriteriaOk returns a tuple with the AutoSoftDeleteRequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetAutoSoftDeleteRequestCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.AutoSoftDeleteRequestCriteria) {
		return nil, false
	}
	return o.AutoSoftDeleteRequestCriteria, true
}

// HasAutoSoftDeleteRequestCriteria returns a boolean if a field has been set.
func (o *AddSoftDeletePolicyRequest) HasAutoSoftDeleteRequestCriteria() bool {
	if o != nil && !IsNil(o.AutoSoftDeleteRequestCriteria) {
		return true
	}

	return false
}

// SetAutoSoftDeleteRequestCriteria gets a reference to the given string and assigns it to the AutoSoftDeleteRequestCriteria field.
func (o *AddSoftDeletePolicyRequest) SetAutoSoftDeleteRequestCriteria(v string) {
	o.AutoSoftDeleteRequestCriteria = &v
}

// GetSoftDeleteRetentionTime returns the SoftDeleteRetentionTime field value if set, zero value otherwise.
func (o *AddSoftDeletePolicyRequest) GetSoftDeleteRetentionTime() string {
	if o == nil || IsNil(o.SoftDeleteRetentionTime) {
		var ret string
		return ret
	}
	return *o.SoftDeleteRetentionTime
}

// GetSoftDeleteRetentionTimeOk returns a tuple with the SoftDeleteRetentionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetSoftDeleteRetentionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SoftDeleteRetentionTime) {
		return nil, false
	}
	return o.SoftDeleteRetentionTime, true
}

// HasSoftDeleteRetentionTime returns a boolean if a field has been set.
func (o *AddSoftDeletePolicyRequest) HasSoftDeleteRetentionTime() bool {
	if o != nil && !IsNil(o.SoftDeleteRetentionTime) {
		return true
	}

	return false
}

// SetSoftDeleteRetentionTime gets a reference to the given string and assigns it to the SoftDeleteRetentionTime field.
func (o *AddSoftDeletePolicyRequest) SetSoftDeleteRetentionTime(v string) {
	o.SoftDeleteRetentionTime = &v
}

// GetSoftDeleteRetainNumberOfEntries returns the SoftDeleteRetainNumberOfEntries field value if set, zero value otherwise.
func (o *AddSoftDeletePolicyRequest) GetSoftDeleteRetainNumberOfEntries() int32 {
	if o == nil || IsNil(o.SoftDeleteRetainNumberOfEntries) {
		var ret int32
		return ret
	}
	return *o.SoftDeleteRetainNumberOfEntries
}

// GetSoftDeleteRetainNumberOfEntriesOk returns a tuple with the SoftDeleteRetainNumberOfEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSoftDeletePolicyRequest) GetSoftDeleteRetainNumberOfEntriesOk() (*int32, bool) {
	if o == nil || IsNil(o.SoftDeleteRetainNumberOfEntries) {
		return nil, false
	}
	return o.SoftDeleteRetainNumberOfEntries, true
}

// HasSoftDeleteRetainNumberOfEntries returns a boolean if a field has been set.
func (o *AddSoftDeletePolicyRequest) HasSoftDeleteRetainNumberOfEntries() bool {
	if o != nil && !IsNil(o.SoftDeleteRetainNumberOfEntries) {
		return true
	}

	return false
}

// SetSoftDeleteRetainNumberOfEntries gets a reference to the given int32 and assigns it to the SoftDeleteRetainNumberOfEntries field.
func (o *AddSoftDeletePolicyRequest) SetSoftDeleteRetainNumberOfEntries(v int32) {
	o.SoftDeleteRetainNumberOfEntries = &v
}

func (o AddSoftDeletePolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddSoftDeletePolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policyName"] = o.PolicyName
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AutoSoftDeleteConnectionCriteria) {
		toSerialize["autoSoftDeleteConnectionCriteria"] = o.AutoSoftDeleteConnectionCriteria
	}
	if !IsNil(o.AutoSoftDeleteRequestCriteria) {
		toSerialize["autoSoftDeleteRequestCriteria"] = o.AutoSoftDeleteRequestCriteria
	}
	if !IsNil(o.SoftDeleteRetentionTime) {
		toSerialize["softDeleteRetentionTime"] = o.SoftDeleteRetentionTime
	}
	if !IsNil(o.SoftDeleteRetainNumberOfEntries) {
		toSerialize["softDeleteRetainNumberOfEntries"] = o.SoftDeleteRetainNumberOfEntries
	}
	return toSerialize, nil
}

type NullableAddSoftDeletePolicyRequest struct {
	value *AddSoftDeletePolicyRequest
	isSet bool
}

func (v NullableAddSoftDeletePolicyRequest) Get() *AddSoftDeletePolicyRequest {
	return v.value
}

func (v *NullableAddSoftDeletePolicyRequest) Set(val *AddSoftDeletePolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSoftDeletePolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSoftDeletePolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSoftDeletePolicyRequest(val *AddSoftDeletePolicyRequest) *NullableAddSoftDeletePolicyRequest {
	return &NullableAddSoftDeletePolicyRequest{value: val, isSet: true}
}

func (v NullableAddSoftDeletePolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSoftDeletePolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
