/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// MonitoringEndpointApiService MonitoringEndpointApi service
type MonitoringEndpointApiService service

type ApiAddMonitoringEndpointRequest struct {
	ctx                                context.Context
	ApiService                         *MonitoringEndpointApiService
	addStatsdMonitoringEndpointRequest *AddStatsdMonitoringEndpointRequest
}

// Create a new Monitoring Endpoint in the config
func (r ApiAddMonitoringEndpointRequest) AddStatsdMonitoringEndpointRequest(addStatsdMonitoringEndpointRequest AddStatsdMonitoringEndpointRequest) ApiAddMonitoringEndpointRequest {
	r.addStatsdMonitoringEndpointRequest = &addStatsdMonitoringEndpointRequest
	return r
}

func (r ApiAddMonitoringEndpointRequest) Execute() (*StatsdMonitoringEndpointResponse, *http.Response, error) {
	return r.ApiService.AddMonitoringEndpointExecute(r)
}

/*
AddMonitoringEndpoint Add a new Monitoring Endpoint to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddMonitoringEndpointRequest
*/
func (a *MonitoringEndpointApiService) AddMonitoringEndpoint(ctx context.Context) ApiAddMonitoringEndpointRequest {
	return ApiAddMonitoringEndpointRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StatsdMonitoringEndpointResponse
func (a *MonitoringEndpointApiService) AddMonitoringEndpointExecute(r ApiAddMonitoringEndpointRequest) (*StatsdMonitoringEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StatsdMonitoringEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringEndpointApiService.AddMonitoringEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitoring-endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addStatsdMonitoringEndpointRequest == nil {
		return localVarReturnValue, nil, reportError("addStatsdMonitoringEndpointRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addStatsdMonitoringEndpointRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMonitoringEndpointRequest struct {
	ctx                    context.Context
	ApiService             *MonitoringEndpointApiService
	monitoringEndpointName string
}

func (r ApiDeleteMonitoringEndpointRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMonitoringEndpointExecute(r)
}

/*
DeleteMonitoringEndpoint Delete a Monitoring Endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param monitoringEndpointName Name of the Monitoring Endpoint
	@return ApiDeleteMonitoringEndpointRequest
*/
func (a *MonitoringEndpointApiService) DeleteMonitoringEndpoint(ctx context.Context, monitoringEndpointName string) ApiDeleteMonitoringEndpointRequest {
	return ApiDeleteMonitoringEndpointRequest{
		ApiService:             a,
		ctx:                    ctx,
		monitoringEndpointName: monitoringEndpointName,
	}
}

// Execute executes the request
func (a *MonitoringEndpointApiService) DeleteMonitoringEndpointExecute(r ApiDeleteMonitoringEndpointRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringEndpointApiService.DeleteMonitoringEndpoint")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitoring-endpoints/{monitoring-endpoint-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitoring-endpoint-name"+"}", url.PathEscape(parameterToString(r.monitoringEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMonitoringEndpointRequest struct {
	ctx                    context.Context
	ApiService             *MonitoringEndpointApiService
	monitoringEndpointName string
}

func (r ApiGetMonitoringEndpointRequest) Execute() (*StatsdMonitoringEndpointResponse, *http.Response, error) {
	return r.ApiService.GetMonitoringEndpointExecute(r)
}

/*
GetMonitoringEndpoint Returns a single Monitoring Endpoint

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param monitoringEndpointName Name of the Monitoring Endpoint
	@return ApiGetMonitoringEndpointRequest
*/
func (a *MonitoringEndpointApiService) GetMonitoringEndpoint(ctx context.Context, monitoringEndpointName string) ApiGetMonitoringEndpointRequest {
	return ApiGetMonitoringEndpointRequest{
		ApiService:             a,
		ctx:                    ctx,
		monitoringEndpointName: monitoringEndpointName,
	}
}

// Execute executes the request
//
//	@return StatsdMonitoringEndpointResponse
func (a *MonitoringEndpointApiService) GetMonitoringEndpointExecute(r ApiGetMonitoringEndpointRequest) (*StatsdMonitoringEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StatsdMonitoringEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringEndpointApiService.GetMonitoringEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitoring-endpoints/{monitoring-endpoint-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitoring-endpoint-name"+"}", url.PathEscape(parameterToString(r.monitoringEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMonitoringEndpointRequest struct {
	ctx                    context.Context
	ApiService             *MonitoringEndpointApiService
	monitoringEndpointName string
	updateRequest          *UpdateRequest
}

// Update an existing Monitoring Endpoint
func (r ApiUpdateMonitoringEndpointRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateMonitoringEndpointRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateMonitoringEndpointRequest) Execute() (*StatsdMonitoringEndpointResponse, *http.Response, error) {
	return r.ApiService.UpdateMonitoringEndpointExecute(r)
}

/*
UpdateMonitoringEndpoint Update an existing Monitoring Endpoint by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param monitoringEndpointName Name of the Monitoring Endpoint
	@return ApiUpdateMonitoringEndpointRequest
*/
func (a *MonitoringEndpointApiService) UpdateMonitoringEndpoint(ctx context.Context, monitoringEndpointName string) ApiUpdateMonitoringEndpointRequest {
	return ApiUpdateMonitoringEndpointRequest{
		ApiService:             a,
		ctx:                    ctx,
		monitoringEndpointName: monitoringEndpointName,
	}
}

// Execute executes the request
//
//	@return StatsdMonitoringEndpointResponse
func (a *MonitoringEndpointApiService) UpdateMonitoringEndpointExecute(r ApiUpdateMonitoringEndpointRequest) (*StatsdMonitoringEndpointResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StatsdMonitoringEndpointResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitoringEndpointApiService.UpdateMonitoringEndpoint")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitoring-endpoints/{monitoring-endpoint-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitoring-endpoint-name"+"}", url.PathEscape(parameterToString(r.monitoringEndpointName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
