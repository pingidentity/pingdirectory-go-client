/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumgenericMatchingRuleSchemaUrn the model 'EnumgenericMatchingRuleSchemaUrn'
type EnumgenericMatchingRuleSchemaUrn string

// List of Enumgeneric-matching-ruleSchemaUrn
const (
	ENUMGENERICMATCHINGRULESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0MATCHING_RULEGENERIC EnumgenericMatchingRuleSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:matching-rule:generic"
)

// All allowed values of EnumgenericMatchingRuleSchemaUrn enum
var AllowedEnumgenericMatchingRuleSchemaUrnEnumValues = []EnumgenericMatchingRuleSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:matching-rule:generic",
}

func (v *EnumgenericMatchingRuleSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgenericMatchingRuleSchemaUrn(value)
	for _, existing := range AllowedEnumgenericMatchingRuleSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgenericMatchingRuleSchemaUrn", value)
}

// NewEnumgenericMatchingRuleSchemaUrnFromValue returns a pointer to a valid EnumgenericMatchingRuleSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgenericMatchingRuleSchemaUrnFromValue(v string) (*EnumgenericMatchingRuleSchemaUrn, error) {
	ev := EnumgenericMatchingRuleSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgenericMatchingRuleSchemaUrn: valid values are %v", v, AllowedEnumgenericMatchingRuleSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgenericMatchingRuleSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgenericMatchingRuleSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgeneric-matching-ruleSchemaUrn value
func (v EnumgenericMatchingRuleSchemaUrn) Ptr() *EnumgenericMatchingRuleSchemaUrn {
	return &v
}

type NullableEnumgenericMatchingRuleSchemaUrn struct {
	value *EnumgenericMatchingRuleSchemaUrn
	isSet bool
}

func (v NullableEnumgenericMatchingRuleSchemaUrn) Get() *EnumgenericMatchingRuleSchemaUrn {
	return v.value
}

func (v *NullableEnumgenericMatchingRuleSchemaUrn) Set(val *EnumgenericMatchingRuleSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgenericMatchingRuleSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgenericMatchingRuleSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgenericMatchingRuleSchemaUrn(val *EnumgenericMatchingRuleSchemaUrn) *NullableEnumgenericMatchingRuleSchemaUrn {
	return &NullableEnumgenericMatchingRuleSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgenericMatchingRuleSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgenericMatchingRuleSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
