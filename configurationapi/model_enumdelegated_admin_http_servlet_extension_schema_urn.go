/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelegatedAdminHttpServletExtensionSchemaUrn the model 'EnumdelegatedAdminHttpServletExtensionSchemaUrn'
type EnumdelegatedAdminHttpServletExtensionSchemaUrn string

// List of Enumdelegated-admin-http-servlet-extensionSchemaUrn
const (
	ENUMDELEGATEDADMINHTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONDELEGATED_ADMIN EnumdelegatedAdminHttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:delegated-admin"
)

// All allowed values of EnumdelegatedAdminHttpServletExtensionSchemaUrn enum
var AllowedEnumdelegatedAdminHttpServletExtensionSchemaUrnEnumValues = []EnumdelegatedAdminHttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:delegated-admin",
}

func (v *EnumdelegatedAdminHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelegatedAdminHttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumdelegatedAdminHttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelegatedAdminHttpServletExtensionSchemaUrn", value)
}

// NewEnumdelegatedAdminHttpServletExtensionSchemaUrnFromValue returns a pointer to a valid EnumdelegatedAdminHttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelegatedAdminHttpServletExtensionSchemaUrnFromValue(v string) (*EnumdelegatedAdminHttpServletExtensionSchemaUrn, error) {
	ev := EnumdelegatedAdminHttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelegatedAdminHttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumdelegatedAdminHttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelegatedAdminHttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdelegatedAdminHttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelegated-admin-http-servlet-extensionSchemaUrn value
func (v EnumdelegatedAdminHttpServletExtensionSchemaUrn) Ptr() *EnumdelegatedAdminHttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn struct {
	value *EnumdelegatedAdminHttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn) Get() *EnumdelegatedAdminHttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn) Set(val *EnumdelegatedAdminHttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelegatedAdminHttpServletExtensionSchemaUrn(val *EnumdelegatedAdminHttpServletExtensionSchemaUrn) *NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn {
	return &NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelegatedAdminHttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
