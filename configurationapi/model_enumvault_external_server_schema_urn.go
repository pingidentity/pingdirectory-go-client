/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumvaultExternalServerSchemaUrn the model 'EnumvaultExternalServerSchemaUrn'
type EnumvaultExternalServerSchemaUrn string

// List of Enumvault-external-serverSchemaUrn
const (
	ENUMVAULTEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERVAULT EnumvaultExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:vault"
)

// All allowed values of EnumvaultExternalServerSchemaUrn enum
var AllowedEnumvaultExternalServerSchemaUrnEnumValues = []EnumvaultExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:vault",
}

func (v *EnumvaultExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvaultExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumvaultExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvaultExternalServerSchemaUrn", value)
}

// NewEnumvaultExternalServerSchemaUrnFromValue returns a pointer to a valid EnumvaultExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvaultExternalServerSchemaUrnFromValue(v string) (*EnumvaultExternalServerSchemaUrn, error) {
	ev := EnumvaultExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvaultExternalServerSchemaUrn: valid values are %v", v, AllowedEnumvaultExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvaultExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumvaultExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvault-external-serverSchemaUrn value
func (v EnumvaultExternalServerSchemaUrn) Ptr() *EnumvaultExternalServerSchemaUrn {
	return &v
}

type NullableEnumvaultExternalServerSchemaUrn struct {
	value *EnumvaultExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumvaultExternalServerSchemaUrn) Get() *EnumvaultExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumvaultExternalServerSchemaUrn) Set(val *EnumvaultExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvaultExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvaultExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvaultExternalServerSchemaUrn(val *EnumvaultExternalServerSchemaUrn) *NullableEnumvaultExternalServerSchemaUrn {
	return &NullableEnumvaultExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumvaultExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvaultExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
