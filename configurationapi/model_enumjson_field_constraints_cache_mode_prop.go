/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonFieldConstraintsCacheModeProp Specifies the behavior that the server should exhibit when caching data for the associated JSON index. This can be useful in environments in which the system does not have enough memory to fully cache the entire data set, as it makes it possible to prioritize which data is the most important to keep in memory.
type EnumjsonFieldConstraintsCacheModeProp string

// List of Enumjson-field-constraints-cacheModeProp
const (
	ENUMJSONFIELDCONSTRAINTSCACHEMODEPROP_CACHE_KEYS_AND_VALUES EnumjsonFieldConstraintsCacheModeProp = "cache-keys-and-values"
	ENUMJSONFIELDCONSTRAINTSCACHEMODEPROP_CACHE_KEYS_ONLY       EnumjsonFieldConstraintsCacheModeProp = "cache-keys-only"
	ENUMJSONFIELDCONSTRAINTSCACHEMODEPROP_NO_CACHING            EnumjsonFieldConstraintsCacheModeProp = "no-caching"
)

// All allowed values of EnumjsonFieldConstraintsCacheModeProp enum
var AllowedEnumjsonFieldConstraintsCacheModePropEnumValues = []EnumjsonFieldConstraintsCacheModeProp{
	"cache-keys-and-values",
	"cache-keys-only",
	"no-caching",
}

func (v *EnumjsonFieldConstraintsCacheModeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonFieldConstraintsCacheModeProp(value)
	for _, existing := range AllowedEnumjsonFieldConstraintsCacheModePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonFieldConstraintsCacheModeProp", value)
}

// NewEnumjsonFieldConstraintsCacheModePropFromValue returns a pointer to a valid EnumjsonFieldConstraintsCacheModeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonFieldConstraintsCacheModePropFromValue(v string) (*EnumjsonFieldConstraintsCacheModeProp, error) {
	ev := EnumjsonFieldConstraintsCacheModeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonFieldConstraintsCacheModeProp: valid values are %v", v, AllowedEnumjsonFieldConstraintsCacheModePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonFieldConstraintsCacheModeProp) IsValid() bool {
	for _, existing := range AllowedEnumjsonFieldConstraintsCacheModePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-field-constraints-cacheModeProp value
func (v EnumjsonFieldConstraintsCacheModeProp) Ptr() *EnumjsonFieldConstraintsCacheModeProp {
	return &v
}

type NullableEnumjsonFieldConstraintsCacheModeProp struct {
	value *EnumjsonFieldConstraintsCacheModeProp
	isSet bool
}

func (v NullableEnumjsonFieldConstraintsCacheModeProp) Get() *EnumjsonFieldConstraintsCacheModeProp {
	return v.value
}

func (v *NullableEnumjsonFieldConstraintsCacheModeProp) Set(val *EnumjsonFieldConstraintsCacheModeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonFieldConstraintsCacheModeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonFieldConstraintsCacheModeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonFieldConstraintsCacheModeProp(val *EnumjsonFieldConstraintsCacheModeProp) *NullableEnumjsonFieldConstraintsCacheModeProp {
	return &NullableEnumjsonFieldConstraintsCacheModeProp{value: val, isSet: true}
}

func (v NullableEnumjsonFieldConstraintsCacheModeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonFieldConstraintsCacheModeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
