/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumscimResourceTypeSchemaCheckingOptionProp Options to alter the way schema checking is performed during create or modify requests.
type EnumscimResourceTypeSchemaCheckingOptionProp string

// List of Enumscim-resource-type-schemaCheckingOptionProp
const (
	ENUMSCIMRESOURCETYPESCHEMACHECKINGOPTIONPROP_ATTRIBUTES     EnumscimResourceTypeSchemaCheckingOptionProp = "allow-undefined-attributes"
	ENUMSCIMRESOURCETYPESCHEMACHECKINGOPTIONPROP_SUB_ATTRIBUTES EnumscimResourceTypeSchemaCheckingOptionProp = "allow-undefined-sub-attributes"
)

// All allowed values of EnumscimResourceTypeSchemaCheckingOptionProp enum
var AllowedEnumscimResourceTypeSchemaCheckingOptionPropEnumValues = []EnumscimResourceTypeSchemaCheckingOptionProp{
	"allow-undefined-attributes",
	"allow-undefined-sub-attributes",
}

func (v *EnumscimResourceTypeSchemaCheckingOptionProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumscimResourceTypeSchemaCheckingOptionProp(value)
	for _, existing := range AllowedEnumscimResourceTypeSchemaCheckingOptionPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumscimResourceTypeSchemaCheckingOptionProp", value)
}

// NewEnumscimResourceTypeSchemaCheckingOptionPropFromValue returns a pointer to a valid EnumscimResourceTypeSchemaCheckingOptionProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscimResourceTypeSchemaCheckingOptionPropFromValue(v string) (*EnumscimResourceTypeSchemaCheckingOptionProp, error) {
	ev := EnumscimResourceTypeSchemaCheckingOptionProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumscimResourceTypeSchemaCheckingOptionProp: valid values are %v", v, AllowedEnumscimResourceTypeSchemaCheckingOptionPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumscimResourceTypeSchemaCheckingOptionProp) IsValid() bool {
	for _, existing := range AllowedEnumscimResourceTypeSchemaCheckingOptionPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim-resource-type-schemaCheckingOptionProp value
func (v EnumscimResourceTypeSchemaCheckingOptionProp) Ptr() *EnumscimResourceTypeSchemaCheckingOptionProp {
	return &v
}

type NullableEnumscimResourceTypeSchemaCheckingOptionProp struct {
	value *EnumscimResourceTypeSchemaCheckingOptionProp
	isSet bool
}

func (v NullableEnumscimResourceTypeSchemaCheckingOptionProp) Get() *EnumscimResourceTypeSchemaCheckingOptionProp {
	return v.value
}

func (v *NullableEnumscimResourceTypeSchemaCheckingOptionProp) Set(val *EnumscimResourceTypeSchemaCheckingOptionProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscimResourceTypeSchemaCheckingOptionProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscimResourceTypeSchemaCheckingOptionProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscimResourceTypeSchemaCheckingOptionProp(val *EnumscimResourceTypeSchemaCheckingOptionProp) *NullableEnumscimResourceTypeSchemaCheckingOptionProp {
	return &NullableEnumscimResourceTypeSchemaCheckingOptionProp{value: val, isSet: true}
}

func (v NullableEnumscimResourceTypeSchemaCheckingOptionProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscimResourceTypeSchemaCheckingOptionProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
