/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddDebugTargetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddDebugTargetRequest{}

// AddDebugTargetRequest struct for AddDebugTargetRequest
type AddDebugTargetRequest struct {
	// Name of the new Debug Target
	TargetName string                     `json:"targetName"`
	Schemas    []EnumdebugTargetSchemaUrn `json:"schemas,omitempty"`
	// Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the number character (#) to separate the class name and the method name (that is, com.unboundid.directory.server.core.DirectoryServer#startUp).
	DebugScope    string                             `json:"debugScope"`
	DebugLevel    EnumdebugTargetDebugLevelProp      `json:"debugLevel"`
	DebugCategory []EnumdebugTargetDebugCategoryProp `json:"debugCategory,omitempty"`
	// Specifies the property to indicate whether to include method arguments in debug messages.
	OmitMethodEntryArguments *bool `json:"omitMethodEntryArguments,omitempty"`
	// Specifies the property to indicate whether to include the return value in debug messages.
	OmitMethodReturnValue *bool `json:"omitMethodReturnValue,omitempty"`
	// Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.
	IncludeThrowableCause *bool `json:"includeThrowableCause,omitempty"`
	// Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and exception thrown messages.
	ThrowableStackFrames *int64 `json:"throwableStackFrames,omitempty"`
	// A description for this Debug Target
	Description *string `json:"description,omitempty"`
}

// NewAddDebugTargetRequest instantiates a new AddDebugTargetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDebugTargetRequest(targetName string, debugScope string, debugLevel EnumdebugTargetDebugLevelProp) *AddDebugTargetRequest {
	this := AddDebugTargetRequest{}
	this.TargetName = targetName
	this.DebugScope = debugScope
	this.DebugLevel = debugLevel
	return &this
}

// NewAddDebugTargetRequestWithDefaults instantiates a new AddDebugTargetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDebugTargetRequestWithDefaults() *AddDebugTargetRequest {
	this := AddDebugTargetRequest{}
	return &this
}

// GetTargetName returns the TargetName field value
func (o *AddDebugTargetRequest) GetTargetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetName
}

// GetTargetNameOk returns a tuple with the TargetName field value
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetTargetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetName, true
}

// SetTargetName sets field value
func (o *AddDebugTargetRequest) SetTargetName(v string) {
	o.TargetName = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetSchemas() []EnumdebugTargetSchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumdebugTargetSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetSchemasOk() ([]EnumdebugTargetSchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumdebugTargetSchemaUrn and assigns it to the Schemas field.
func (o *AddDebugTargetRequest) SetSchemas(v []EnumdebugTargetSchemaUrn) {
	o.Schemas = v
}

// GetDebugScope returns the DebugScope field value
func (o *AddDebugTargetRequest) GetDebugScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DebugScope
}

// GetDebugScopeOk returns a tuple with the DebugScope field value
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetDebugScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugScope, true
}

// SetDebugScope sets field value
func (o *AddDebugTargetRequest) SetDebugScope(v string) {
	o.DebugScope = v
}

// GetDebugLevel returns the DebugLevel field value
func (o *AddDebugTargetRequest) GetDebugLevel() EnumdebugTargetDebugLevelProp {
	if o == nil {
		var ret EnumdebugTargetDebugLevelProp
		return ret
	}

	return o.DebugLevel
}

// GetDebugLevelOk returns a tuple with the DebugLevel field value
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetDebugLevelOk() (*EnumdebugTargetDebugLevelProp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugLevel, true
}

// SetDebugLevel sets field value
func (o *AddDebugTargetRequest) SetDebugLevel(v EnumdebugTargetDebugLevelProp) {
	o.DebugLevel = v
}

// GetDebugCategory returns the DebugCategory field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetDebugCategory() []EnumdebugTargetDebugCategoryProp {
	if o == nil || IsNil(o.DebugCategory) {
		var ret []EnumdebugTargetDebugCategoryProp
		return ret
	}
	return o.DebugCategory
}

// GetDebugCategoryOk returns a tuple with the DebugCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetDebugCategoryOk() ([]EnumdebugTargetDebugCategoryProp, bool) {
	if o == nil || IsNil(o.DebugCategory) {
		return nil, false
	}
	return o.DebugCategory, true
}

// HasDebugCategory returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasDebugCategory() bool {
	if o != nil && !IsNil(o.DebugCategory) {
		return true
	}

	return false
}

// SetDebugCategory gets a reference to the given []EnumdebugTargetDebugCategoryProp and assigns it to the DebugCategory field.
func (o *AddDebugTargetRequest) SetDebugCategory(v []EnumdebugTargetDebugCategoryProp) {
	o.DebugCategory = v
}

// GetOmitMethodEntryArguments returns the OmitMethodEntryArguments field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetOmitMethodEntryArguments() bool {
	if o == nil || IsNil(o.OmitMethodEntryArguments) {
		var ret bool
		return ret
	}
	return *o.OmitMethodEntryArguments
}

// GetOmitMethodEntryArgumentsOk returns a tuple with the OmitMethodEntryArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetOmitMethodEntryArgumentsOk() (*bool, bool) {
	if o == nil || IsNil(o.OmitMethodEntryArguments) {
		return nil, false
	}
	return o.OmitMethodEntryArguments, true
}

// HasOmitMethodEntryArguments returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasOmitMethodEntryArguments() bool {
	if o != nil && !IsNil(o.OmitMethodEntryArguments) {
		return true
	}

	return false
}

// SetOmitMethodEntryArguments gets a reference to the given bool and assigns it to the OmitMethodEntryArguments field.
func (o *AddDebugTargetRequest) SetOmitMethodEntryArguments(v bool) {
	o.OmitMethodEntryArguments = &v
}

// GetOmitMethodReturnValue returns the OmitMethodReturnValue field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetOmitMethodReturnValue() bool {
	if o == nil || IsNil(o.OmitMethodReturnValue) {
		var ret bool
		return ret
	}
	return *o.OmitMethodReturnValue
}

// GetOmitMethodReturnValueOk returns a tuple with the OmitMethodReturnValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetOmitMethodReturnValueOk() (*bool, bool) {
	if o == nil || IsNil(o.OmitMethodReturnValue) {
		return nil, false
	}
	return o.OmitMethodReturnValue, true
}

// HasOmitMethodReturnValue returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasOmitMethodReturnValue() bool {
	if o != nil && !IsNil(o.OmitMethodReturnValue) {
		return true
	}

	return false
}

// SetOmitMethodReturnValue gets a reference to the given bool and assigns it to the OmitMethodReturnValue field.
func (o *AddDebugTargetRequest) SetOmitMethodReturnValue(v bool) {
	o.OmitMethodReturnValue = &v
}

// GetIncludeThrowableCause returns the IncludeThrowableCause field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetIncludeThrowableCause() bool {
	if o == nil || IsNil(o.IncludeThrowableCause) {
		var ret bool
		return ret
	}
	return *o.IncludeThrowableCause
}

// GetIncludeThrowableCauseOk returns a tuple with the IncludeThrowableCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetIncludeThrowableCauseOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeThrowableCause) {
		return nil, false
	}
	return o.IncludeThrowableCause, true
}

// HasIncludeThrowableCause returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasIncludeThrowableCause() bool {
	if o != nil && !IsNil(o.IncludeThrowableCause) {
		return true
	}

	return false
}

// SetIncludeThrowableCause gets a reference to the given bool and assigns it to the IncludeThrowableCause field.
func (o *AddDebugTargetRequest) SetIncludeThrowableCause(v bool) {
	o.IncludeThrowableCause = &v
}

// GetThrowableStackFrames returns the ThrowableStackFrames field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetThrowableStackFrames() int64 {
	if o == nil || IsNil(o.ThrowableStackFrames) {
		var ret int64
		return ret
	}
	return *o.ThrowableStackFrames
}

// GetThrowableStackFramesOk returns a tuple with the ThrowableStackFrames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetThrowableStackFramesOk() (*int64, bool) {
	if o == nil || IsNil(o.ThrowableStackFrames) {
		return nil, false
	}
	return o.ThrowableStackFrames, true
}

// HasThrowableStackFrames returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasThrowableStackFrames() bool {
	if o != nil && !IsNil(o.ThrowableStackFrames) {
		return true
	}

	return false
}

// SetThrowableStackFrames gets a reference to the given int64 and assigns it to the ThrowableStackFrames field.
func (o *AddDebugTargetRequest) SetThrowableStackFrames(v int64) {
	o.ThrowableStackFrames = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddDebugTargetRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugTargetRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddDebugTargetRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddDebugTargetRequest) SetDescription(v string) {
	o.Description = &v
}

func (o AddDebugTargetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddDebugTargetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetName"] = o.TargetName
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	toSerialize["debugScope"] = o.DebugScope
	toSerialize["debugLevel"] = o.DebugLevel
	if !IsNil(o.DebugCategory) {
		toSerialize["debugCategory"] = o.DebugCategory
	}
	if !IsNil(o.OmitMethodEntryArguments) {
		toSerialize["omitMethodEntryArguments"] = o.OmitMethodEntryArguments
	}
	if !IsNil(o.OmitMethodReturnValue) {
		toSerialize["omitMethodReturnValue"] = o.OmitMethodReturnValue
	}
	if !IsNil(o.IncludeThrowableCause) {
		toSerialize["includeThrowableCause"] = o.IncludeThrowableCause
	}
	if !IsNil(o.ThrowableStackFrames) {
		toSerialize["throwableStackFrames"] = o.ThrowableStackFrames
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableAddDebugTargetRequest struct {
	value *AddDebugTargetRequest
	isSet bool
}

func (v NullableAddDebugTargetRequest) Get() *AddDebugTargetRequest {
	return v.value
}

func (v *NullableAddDebugTargetRequest) Set(val *AddDebugTargetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDebugTargetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDebugTargetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDebugTargetRequest(val *AddDebugTargetRequest) *NullableAddDebugTargetRequest {
	return &NullableAddDebugTargetRequest{value: val, isSet: true}
}

func (v NullableAddDebugTargetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDebugTargetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
