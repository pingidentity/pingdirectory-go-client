/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpolicyExternalServerSchemaUrn the model 'EnumpolicyExternalServerSchemaUrn'
type EnumpolicyExternalServerSchemaUrn string

// List of Enumpolicy-external-serverSchemaUrn
const (
	ENUMPOLICYEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERPOLICY EnumpolicyExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:policy"
)

// All allowed values of EnumpolicyExternalServerSchemaUrn enum
var AllowedEnumpolicyExternalServerSchemaUrnEnumValues = []EnumpolicyExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:policy",
}

func (v *EnumpolicyExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpolicyExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumpolicyExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpolicyExternalServerSchemaUrn", value)
}

// NewEnumpolicyExternalServerSchemaUrnFromValue returns a pointer to a valid EnumpolicyExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpolicyExternalServerSchemaUrnFromValue(v string) (*EnumpolicyExternalServerSchemaUrn, error) {
	ev := EnumpolicyExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpolicyExternalServerSchemaUrn: valid values are %v", v, AllowedEnumpolicyExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpolicyExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpolicyExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpolicy-external-serverSchemaUrn value
func (v EnumpolicyExternalServerSchemaUrn) Ptr() *EnumpolicyExternalServerSchemaUrn {
	return &v
}

type NullableEnumpolicyExternalServerSchemaUrn struct {
	value *EnumpolicyExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumpolicyExternalServerSchemaUrn) Get() *EnumpolicyExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumpolicyExternalServerSchemaUrn) Set(val *EnumpolicyExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpolicyExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpolicyExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpolicyExternalServerSchemaUrn(val *EnumpolicyExternalServerSchemaUrn) *NullableEnumpolicyExternalServerSchemaUrn {
	return &NullableEnumpolicyExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpolicyExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpolicyExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
