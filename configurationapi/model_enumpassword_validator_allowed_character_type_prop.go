/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordValidatorAllowedCharacterTypeProp Specifies the set of character types that are allowed to be present in passwords.
type EnumpasswordValidatorAllowedCharacterTypeProp string

// List of Enumpassword-validator-allowedCharacterTypeProp
const (
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_LETTERS              EnumpasswordValidatorAllowedCharacterTypeProp = "letters"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_NUMBERS              EnumpasswordValidatorAllowedCharacterTypeProp = "numbers"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_PUNCTUATION          EnumpasswordValidatorAllowedCharacterTypeProp = "punctuation"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_SYMBOLS              EnumpasswordValidatorAllowedCharacterTypeProp = "symbols"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_SPACES               EnumpasswordValidatorAllowedCharacterTypeProp = "spaces"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_NON_SPACE_SEPARATORS EnumpasswordValidatorAllowedCharacterTypeProp = "non-space-separators"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_MARKS                EnumpasswordValidatorAllowedCharacterTypeProp = "marks"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_CONTROL              EnumpasswordValidatorAllowedCharacterTypeProp = "control"
	ENUMPASSWORDVALIDATORALLOWEDCHARACTERTYPEPROP_PRIVATE_USE          EnumpasswordValidatorAllowedCharacterTypeProp = "private-use"
)

// All allowed values of EnumpasswordValidatorAllowedCharacterTypeProp enum
var AllowedEnumpasswordValidatorAllowedCharacterTypePropEnumValues = []EnumpasswordValidatorAllowedCharacterTypeProp{
	"letters",
	"numbers",
	"punctuation",
	"symbols",
	"spaces",
	"non-space-separators",
	"marks",
	"control",
	"private-use",
}

func (v *EnumpasswordValidatorAllowedCharacterTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordValidatorAllowedCharacterTypeProp(value)
	for _, existing := range AllowedEnumpasswordValidatorAllowedCharacterTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordValidatorAllowedCharacterTypeProp", value)
}

// NewEnumpasswordValidatorAllowedCharacterTypePropFromValue returns a pointer to a valid EnumpasswordValidatorAllowedCharacterTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordValidatorAllowedCharacterTypePropFromValue(v string) (*EnumpasswordValidatorAllowedCharacterTypeProp, error) {
	ev := EnumpasswordValidatorAllowedCharacterTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordValidatorAllowedCharacterTypeProp: valid values are %v", v, AllowedEnumpasswordValidatorAllowedCharacterTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordValidatorAllowedCharacterTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumpasswordValidatorAllowedCharacterTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-validator-allowedCharacterTypeProp value
func (v EnumpasswordValidatorAllowedCharacterTypeProp) Ptr() *EnumpasswordValidatorAllowedCharacterTypeProp {
	return &v
}

type NullableEnumpasswordValidatorAllowedCharacterTypeProp struct {
	value *EnumpasswordValidatorAllowedCharacterTypeProp
	isSet bool
}

func (v NullableEnumpasswordValidatorAllowedCharacterTypeProp) Get() *EnumpasswordValidatorAllowedCharacterTypeProp {
	return v.value
}

func (v *NullableEnumpasswordValidatorAllowedCharacterTypeProp) Set(val *EnumpasswordValidatorAllowedCharacterTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordValidatorAllowedCharacterTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordValidatorAllowedCharacterTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordValidatorAllowedCharacterTypeProp(val *EnumpasswordValidatorAllowedCharacterTypeProp) *NullableEnumpasswordValidatorAllowedCharacterTypeProp {
	return &NullableEnumpasswordValidatorAllowedCharacterTypeProp{value: val, isSet: true}
}

func (v NullableEnumpasswordValidatorAllowedCharacterTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordValidatorAllowedCharacterTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
