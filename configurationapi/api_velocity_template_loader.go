/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VelocityTemplateLoaderApiService VelocityTemplateLoaderApi service
type VelocityTemplateLoaderApiService service

type ApiAddVelocityTemplateLoaderRequest struct {
	ctx                              context.Context
	ApiService                       *VelocityTemplateLoaderApiService
	httpServletExtensionName         string
	addVelocityTemplateLoaderRequest *AddVelocityTemplateLoaderRequest
}

// Create a new Velocity Template Loader in the config
func (r ApiAddVelocityTemplateLoaderRequest) AddVelocityTemplateLoaderRequest(addVelocityTemplateLoaderRequest AddVelocityTemplateLoaderRequest) ApiAddVelocityTemplateLoaderRequest {
	r.addVelocityTemplateLoaderRequest = &addVelocityTemplateLoaderRequest
	return r
}

func (r ApiAddVelocityTemplateLoaderRequest) Execute() (*VelocityTemplateLoaderResponse, *http.Response, error) {
	return r.ApiService.AddVelocityTemplateLoaderExecute(r)
}

/*
AddVelocityTemplateLoader Add a new Velocity Template Loader to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiAddVelocityTemplateLoaderRequest
*/
func (a *VelocityTemplateLoaderApiService) AddVelocityTemplateLoader(ctx context.Context, httpServletExtensionName string) ApiAddVelocityTemplateLoaderRequest {
	return ApiAddVelocityTemplateLoaderRequest{
		ApiService:               a,
		ctx:                      ctx,
		httpServletExtensionName: httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return VelocityTemplateLoaderResponse
func (a *VelocityTemplateLoaderApiService) AddVelocityTemplateLoaderExecute(r ApiAddVelocityTemplateLoaderRequest) (*VelocityTemplateLoaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VelocityTemplateLoaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityTemplateLoaderApiService.AddVelocityTemplateLoader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders"
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterValueToString(r.httpServletExtensionName, "httpServletExtensionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addVelocityTemplateLoaderRequest == nil {
		return localVarReturnValue, nil, reportError("addVelocityTemplateLoaderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVelocityTemplateLoaderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVelocityTemplateLoaderRequest struct {
	ctx                        context.Context
	ApiService                 *VelocityTemplateLoaderApiService
	velocityTemplateLoaderName string
	httpServletExtensionName   string
}

func (r ApiDeleteVelocityTemplateLoaderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVelocityTemplateLoaderExecute(r)
}

/*
DeleteVelocityTemplateLoader Delete a Velocity Template Loader

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param velocityTemplateLoaderName Name of the Velocity Template Loader
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiDeleteVelocityTemplateLoaderRequest
*/
func (a *VelocityTemplateLoaderApiService) DeleteVelocityTemplateLoader(ctx context.Context, velocityTemplateLoaderName string, httpServletExtensionName string) ApiDeleteVelocityTemplateLoaderRequest {
	return ApiDeleteVelocityTemplateLoaderRequest{
		ApiService:                 a,
		ctx:                        ctx,
		velocityTemplateLoaderName: velocityTemplateLoaderName,
		httpServletExtensionName:   httpServletExtensionName,
	}
}

// Execute executes the request
func (a *VelocityTemplateLoaderApiService) DeleteVelocityTemplateLoaderExecute(r ApiDeleteVelocityTemplateLoaderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityTemplateLoaderApiService.DeleteVelocityTemplateLoader")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"velocity-template-loader-name"+"}", url.PathEscape(parameterValueToString(r.velocityTemplateLoaderName, "velocityTemplateLoaderName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterValueToString(r.httpServletExtensionName, "httpServletExtensionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVelocityTemplateLoaderRequest struct {
	ctx                        context.Context
	ApiService                 *VelocityTemplateLoaderApiService
	velocityTemplateLoaderName string
	httpServletExtensionName   string
}

func (r ApiGetVelocityTemplateLoaderRequest) Execute() (*VelocityTemplateLoaderResponse, *http.Response, error) {
	return r.ApiService.GetVelocityTemplateLoaderExecute(r)
}

/*
GetVelocityTemplateLoader Returns a single Velocity Template Loader

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param velocityTemplateLoaderName Name of the Velocity Template Loader
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiGetVelocityTemplateLoaderRequest
*/
func (a *VelocityTemplateLoaderApiService) GetVelocityTemplateLoader(ctx context.Context, velocityTemplateLoaderName string, httpServletExtensionName string) ApiGetVelocityTemplateLoaderRequest {
	return ApiGetVelocityTemplateLoaderRequest{
		ApiService:                 a,
		ctx:                        ctx,
		velocityTemplateLoaderName: velocityTemplateLoaderName,
		httpServletExtensionName:   httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return VelocityTemplateLoaderResponse
func (a *VelocityTemplateLoaderApiService) GetVelocityTemplateLoaderExecute(r ApiGetVelocityTemplateLoaderRequest) (*VelocityTemplateLoaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VelocityTemplateLoaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityTemplateLoaderApiService.GetVelocityTemplateLoader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"velocity-template-loader-name"+"}", url.PathEscape(parameterValueToString(r.velocityTemplateLoaderName, "velocityTemplateLoaderName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterValueToString(r.httpServletExtensionName, "httpServletExtensionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVelocityTemplateLoadersRequest struct {
	ctx                      context.Context
	ApiService               *VelocityTemplateLoaderApiService
	httpServletExtensionName string
	filter                   *string
}

// SCIM filter
func (r ApiListVelocityTemplateLoadersRequest) Filter(filter string) ApiListVelocityTemplateLoadersRequest {
	r.filter = &filter
	return r
}

func (r ApiListVelocityTemplateLoadersRequest) Execute() (*VelocityTemplateLoaderListResponse, *http.Response, error) {
	return r.ApiService.ListVelocityTemplateLoadersExecute(r)
}

/*
ListVelocityTemplateLoaders Returns a list of all Velocity Template Loader objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiListVelocityTemplateLoadersRequest
*/
func (a *VelocityTemplateLoaderApiService) ListVelocityTemplateLoaders(ctx context.Context, httpServletExtensionName string) ApiListVelocityTemplateLoadersRequest {
	return ApiListVelocityTemplateLoadersRequest{
		ApiService:               a,
		ctx:                      ctx,
		httpServletExtensionName: httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return VelocityTemplateLoaderListResponse
func (a *VelocityTemplateLoaderApiService) ListVelocityTemplateLoadersExecute(r ApiListVelocityTemplateLoadersRequest) (*VelocityTemplateLoaderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VelocityTemplateLoaderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityTemplateLoaderApiService.ListVelocityTemplateLoaders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders"
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterValueToString(r.httpServletExtensionName, "httpServletExtensionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateVelocityTemplateLoaderRequest struct {
	ctx                        context.Context
	ApiService                 *VelocityTemplateLoaderApiService
	velocityTemplateLoaderName string
	httpServletExtensionName   string
	updateRequest              *UpdateRequest
}

// Update an existing Velocity Template Loader
func (r ApiUpdateVelocityTemplateLoaderRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateVelocityTemplateLoaderRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateVelocityTemplateLoaderRequest) Execute() (*VelocityTemplateLoaderResponse, *http.Response, error) {
	return r.ApiService.UpdateVelocityTemplateLoaderExecute(r)
}

/*
UpdateVelocityTemplateLoader Update an existing Velocity Template Loader by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param velocityTemplateLoaderName Name of the Velocity Template Loader
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiUpdateVelocityTemplateLoaderRequest
*/
func (a *VelocityTemplateLoaderApiService) UpdateVelocityTemplateLoader(ctx context.Context, velocityTemplateLoaderName string, httpServletExtensionName string) ApiUpdateVelocityTemplateLoaderRequest {
	return ApiUpdateVelocityTemplateLoaderRequest{
		ApiService:                 a,
		ctx:                        ctx,
		velocityTemplateLoaderName: velocityTemplateLoaderName,
		httpServletExtensionName:   httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return VelocityTemplateLoaderResponse
func (a *VelocityTemplateLoaderApiService) UpdateVelocityTemplateLoaderExecute(r ApiUpdateVelocityTemplateLoaderRequest) (*VelocityTemplateLoaderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VelocityTemplateLoaderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityTemplateLoaderApiService.UpdateVelocityTemplateLoader")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"velocity-template-loader-name"+"}", url.PathEscape(parameterValueToString(r.velocityTemplateLoaderName, "velocityTemplateLoaderName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterValueToString(r.httpServletExtensionName, "httpServletExtensionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
