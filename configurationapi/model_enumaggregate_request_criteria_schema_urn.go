/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumaggregateRequestCriteriaSchemaUrn the model 'EnumaggregateRequestCriteriaSchemaUrn'
type EnumaggregateRequestCriteriaSchemaUrn string

// List of Enumaggregate-request-criteriaSchemaUrn
const (
	ENUMAGGREGATEREQUESTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0REQUEST_CRITERIAAGGREGATE EnumaggregateRequestCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:request-criteria:aggregate"
)

// All allowed values of EnumaggregateRequestCriteriaSchemaUrn enum
var AllowedEnumaggregateRequestCriteriaSchemaUrnEnumValues = []EnumaggregateRequestCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:request-criteria:aggregate",
}

func (v *EnumaggregateRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumaggregateRequestCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumaggregateRequestCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumaggregateRequestCriteriaSchemaUrn", value)
}

// NewEnumaggregateRequestCriteriaSchemaUrnFromValue returns a pointer to a valid EnumaggregateRequestCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumaggregateRequestCriteriaSchemaUrnFromValue(v string) (*EnumaggregateRequestCriteriaSchemaUrn, error) {
	ev := EnumaggregateRequestCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumaggregateRequestCriteriaSchemaUrn: valid values are %v", v, AllowedEnumaggregateRequestCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumaggregateRequestCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumaggregateRequestCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaggregate-request-criteriaSchemaUrn value
func (v EnumaggregateRequestCriteriaSchemaUrn) Ptr() *EnumaggregateRequestCriteriaSchemaUrn {
	return &v
}

type NullableEnumaggregateRequestCriteriaSchemaUrn struct {
	value *EnumaggregateRequestCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumaggregateRequestCriteriaSchemaUrn) Get() *EnumaggregateRequestCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumaggregateRequestCriteriaSchemaUrn) Set(val *EnumaggregateRequestCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumaggregateRequestCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumaggregateRequestCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumaggregateRequestCriteriaSchemaUrn(val *EnumaggregateRequestCriteriaSchemaUrn) *NullableEnumaggregateRequestCriteriaSchemaUrn {
	return &NullableEnumaggregateRequestCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumaggregateRequestCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumaggregateRequestCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
