/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn the model 'EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn'
type EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn string

// List of Enumclean-up-inactive-pingfederate-persistent-sessions-pluginSchemaUrn
const (
	ENUMCLEANUPINACTIVEPINGFEDERATEPERSISTENTSESSIONSPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINCLEAN_UP_INACTIVE_PINGFEDERATE_PERSISTENT_SESSIONS EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:clean-up-inactive-pingfederate-persistent-sessions"
)

// All allowed values of EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn enum
var AllowedEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrnEnumValues = []EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:clean-up-inactive-pingfederate-persistent-sessions",
}

func (v *EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn(value)
	for _, existing := range AllowedEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn", value)
}

// NewEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrnFromValue returns a pointer to a valid EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrnFromValue(v string) (*EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn, error) {
	ev := EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn: valid values are %v", v, AllowedEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumclean-up-inactive-pingfederate-persistent-sessions-pluginSchemaUrn value
func (v EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) Ptr() *EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn {
	return &v
}

type NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn struct {
	value *EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn
	isSet bool
}

func (v NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) Get() *EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) Set(val *EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn(val *EnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) *NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn {
	return &NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcleanUpInactivePingfederatePersistentSessionsPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
