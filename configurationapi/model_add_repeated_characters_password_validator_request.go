/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddRepeatedCharactersPasswordValidatorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddRepeatedCharactersPasswordValidatorRequest{}

// AddRepeatedCharactersPasswordValidatorRequest struct for AddRepeatedCharactersPasswordValidatorRequest
type AddRepeatedCharactersPasswordValidatorRequest struct {
	Schemas []EnumrepeatedCharactersPasswordValidatorSchemaUrn `json:"schemas"`
	// Specifies the maximum number of times that any character can appear consecutively in a password value.
	MaxConsecutiveLength int64 `json:"maxConsecutiveLength"`
	// Indicates whether this password validator should treat password characters in a case-sensitive manner.
	CaseSensitiveValidation bool `json:"caseSensitiveValidation"`
	// Specifies a set of characters that should be considered equivalent for the purpose of this password validator. This can be used, for example, to ensure that passwords contain no more than three consecutive digits.
	CharacterSet []string `json:"characterSet,omitempty"`
	// A description for this Password Validator
	Description *string `json:"description,omitempty"`
	// Indicates whether the password validator is enabled for use.
	Enabled bool `json:"enabled"`
	// Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
	ValidatorRequirementDescription *string `json:"validatorRequirementDescription,omitempty"`
	// Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
	ValidatorFailureMessage *string `json:"validatorFailureMessage,omitempty"`
	// Name of the new Password Validator
	ValidatorName string `json:"validatorName"`
}

// NewAddRepeatedCharactersPasswordValidatorRequest instantiates a new AddRepeatedCharactersPasswordValidatorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRepeatedCharactersPasswordValidatorRequest(schemas []EnumrepeatedCharactersPasswordValidatorSchemaUrn, maxConsecutiveLength int64, caseSensitiveValidation bool, enabled bool, validatorName string) *AddRepeatedCharactersPasswordValidatorRequest {
	this := AddRepeatedCharactersPasswordValidatorRequest{}
	this.Schemas = schemas
	this.MaxConsecutiveLength = maxConsecutiveLength
	this.CaseSensitiveValidation = caseSensitiveValidation
	this.Enabled = enabled
	this.ValidatorName = validatorName
	return &this
}

// NewAddRepeatedCharactersPasswordValidatorRequestWithDefaults instantiates a new AddRepeatedCharactersPasswordValidatorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRepeatedCharactersPasswordValidatorRequestWithDefaults() *AddRepeatedCharactersPasswordValidatorRequest {
	this := AddRepeatedCharactersPasswordValidatorRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetSchemas() []EnumrepeatedCharactersPasswordValidatorSchemaUrn {
	if o == nil {
		var ret []EnumrepeatedCharactersPasswordValidatorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetSchemasOk() ([]EnumrepeatedCharactersPasswordValidatorSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetSchemas(v []EnumrepeatedCharactersPasswordValidatorSchemaUrn) {
	o.Schemas = v
}

// GetMaxConsecutiveLength returns the MaxConsecutiveLength field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetMaxConsecutiveLength() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxConsecutiveLength
}

// GetMaxConsecutiveLengthOk returns a tuple with the MaxConsecutiveLength field value
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetMaxConsecutiveLengthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxConsecutiveLength, true
}

// SetMaxConsecutiveLength sets field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetMaxConsecutiveLength(v int64) {
	o.MaxConsecutiveLength = v
}

// GetCaseSensitiveValidation returns the CaseSensitiveValidation field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetCaseSensitiveValidation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CaseSensitiveValidation
}

// GetCaseSensitiveValidationOk returns a tuple with the CaseSensitiveValidation field value
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetCaseSensitiveValidationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaseSensitiveValidation, true
}

// SetCaseSensitiveValidation sets field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetCaseSensitiveValidation(v bool) {
	o.CaseSensitiveValidation = v
}

// GetCharacterSet returns the CharacterSet field value if set, zero value otherwise.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetCharacterSet() []string {
	if o == nil || IsNil(o.CharacterSet) {
		var ret []string
		return ret
	}
	return o.CharacterSet
}

// GetCharacterSetOk returns a tuple with the CharacterSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetCharacterSetOk() ([]string, bool) {
	if o == nil || IsNil(o.CharacterSet) {
		return nil, false
	}
	return o.CharacterSet, true
}

// HasCharacterSet returns a boolean if a field has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) HasCharacterSet() bool {
	if o != nil && !IsNil(o.CharacterSet) {
		return true
	}

	return false
}

// SetCharacterSet gets a reference to the given []string and assigns it to the CharacterSet field.
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetCharacterSet(v []string) {
	o.CharacterSet = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetValidatorRequirementDescription returns the ValidatorRequirementDescription field value if set, zero value otherwise.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetValidatorRequirementDescription() string {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		var ret string
		return ret
	}
	return *o.ValidatorRequirementDescription
}

// GetValidatorRequirementDescriptionOk returns a tuple with the ValidatorRequirementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetValidatorRequirementDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		return nil, false
	}
	return o.ValidatorRequirementDescription, true
}

// HasValidatorRequirementDescription returns a boolean if a field has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) HasValidatorRequirementDescription() bool {
	if o != nil && !IsNil(o.ValidatorRequirementDescription) {
		return true
	}

	return false
}

// SetValidatorRequirementDescription gets a reference to the given string and assigns it to the ValidatorRequirementDescription field.
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetValidatorRequirementDescription(v string) {
	o.ValidatorRequirementDescription = &v
}

// GetValidatorFailureMessage returns the ValidatorFailureMessage field value if set, zero value otherwise.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetValidatorFailureMessage() string {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		var ret string
		return ret
	}
	return *o.ValidatorFailureMessage
}

// GetValidatorFailureMessageOk returns a tuple with the ValidatorFailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetValidatorFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		return nil, false
	}
	return o.ValidatorFailureMessage, true
}

// HasValidatorFailureMessage returns a boolean if a field has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) HasValidatorFailureMessage() bool {
	if o != nil && !IsNil(o.ValidatorFailureMessage) {
		return true
	}

	return false
}

// SetValidatorFailureMessage gets a reference to the given string and assigns it to the ValidatorFailureMessage field.
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetValidatorFailureMessage(v string) {
	o.ValidatorFailureMessage = &v
}

// GetValidatorName returns the ValidatorName field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetValidatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorName
}

// GetValidatorNameOk returns a tuple with the ValidatorName field value
// and a boolean to check if the value has been set.
func (o *AddRepeatedCharactersPasswordValidatorRequest) GetValidatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorName, true
}

// SetValidatorName sets field value
func (o *AddRepeatedCharactersPasswordValidatorRequest) SetValidatorName(v string) {
	o.ValidatorName = v
}

func (o AddRepeatedCharactersPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddRepeatedCharactersPasswordValidatorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["maxConsecutiveLength"] = o.MaxConsecutiveLength
	toSerialize["caseSensitiveValidation"] = o.CaseSensitiveValidation
	if !IsNil(o.CharacterSet) {
		toSerialize["characterSet"] = o.CharacterSet
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ValidatorRequirementDescription) {
		toSerialize["validatorRequirementDescription"] = o.ValidatorRequirementDescription
	}
	if !IsNil(o.ValidatorFailureMessage) {
		toSerialize["validatorFailureMessage"] = o.ValidatorFailureMessage
	}
	toSerialize["validatorName"] = o.ValidatorName
	return toSerialize, nil
}

type NullableAddRepeatedCharactersPasswordValidatorRequest struct {
	value *AddRepeatedCharactersPasswordValidatorRequest
	isSet bool
}

func (v NullableAddRepeatedCharactersPasswordValidatorRequest) Get() *AddRepeatedCharactersPasswordValidatorRequest {
	return v.value
}

func (v *NullableAddRepeatedCharactersPasswordValidatorRequest) Set(val *AddRepeatedCharactersPasswordValidatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRepeatedCharactersPasswordValidatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRepeatedCharactersPasswordValidatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRepeatedCharactersPasswordValidatorRequest(val *AddRepeatedCharactersPasswordValidatorRequest) *NullableAddRepeatedCharactersPasswordValidatorRequest {
	return &NullableAddRepeatedCharactersPasswordValidatorRequest{value: val, isSet: true}
}

func (v NullableAddRepeatedCharactersPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRepeatedCharactersPasswordValidatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
