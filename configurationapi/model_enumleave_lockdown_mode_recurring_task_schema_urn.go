/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumleaveLockdownModeRecurringTaskSchemaUrn the model 'EnumleaveLockdownModeRecurringTaskSchemaUrn'
type EnumleaveLockdownModeRecurringTaskSchemaUrn string

// List of Enumleave-lockdown-mode-recurring-taskSchemaUrn
const (
	ENUMLEAVELOCKDOWNMODERECURRINGTASKSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RECURRING_TASKLEAVE_LOCKDOWN_MODE EnumleaveLockdownModeRecurringTaskSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:recurring-task:leave-lockdown-mode"
)

// All allowed values of EnumleaveLockdownModeRecurringTaskSchemaUrn enum
var AllowedEnumleaveLockdownModeRecurringTaskSchemaUrnEnumValues = []EnumleaveLockdownModeRecurringTaskSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:recurring-task:leave-lockdown-mode",
}

func (v *EnumleaveLockdownModeRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumleaveLockdownModeRecurringTaskSchemaUrn(value)
	for _, existing := range AllowedEnumleaveLockdownModeRecurringTaskSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumleaveLockdownModeRecurringTaskSchemaUrn", value)
}

// NewEnumleaveLockdownModeRecurringTaskSchemaUrnFromValue returns a pointer to a valid EnumleaveLockdownModeRecurringTaskSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumleaveLockdownModeRecurringTaskSchemaUrnFromValue(v string) (*EnumleaveLockdownModeRecurringTaskSchemaUrn, error) {
	ev := EnumleaveLockdownModeRecurringTaskSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumleaveLockdownModeRecurringTaskSchemaUrn: valid values are %v", v, AllowedEnumleaveLockdownModeRecurringTaskSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumleaveLockdownModeRecurringTaskSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumleaveLockdownModeRecurringTaskSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumleave-lockdown-mode-recurring-taskSchemaUrn value
func (v EnumleaveLockdownModeRecurringTaskSchemaUrn) Ptr() *EnumleaveLockdownModeRecurringTaskSchemaUrn {
	return &v
}

type NullableEnumleaveLockdownModeRecurringTaskSchemaUrn struct {
	value *EnumleaveLockdownModeRecurringTaskSchemaUrn
	isSet bool
}

func (v NullableEnumleaveLockdownModeRecurringTaskSchemaUrn) Get() *EnumleaveLockdownModeRecurringTaskSchemaUrn {
	return v.value
}

func (v *NullableEnumleaveLockdownModeRecurringTaskSchemaUrn) Set(val *EnumleaveLockdownModeRecurringTaskSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumleaveLockdownModeRecurringTaskSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumleaveLockdownModeRecurringTaskSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumleaveLockdownModeRecurringTaskSchemaUrn(val *EnumleaveLockdownModeRecurringTaskSchemaUrn) *NullableEnumleaveLockdownModeRecurringTaskSchemaUrn {
	return &NullableEnumleaveLockdownModeRecurringTaskSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumleaveLockdownModeRecurringTaskSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumleaveLockdownModeRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
