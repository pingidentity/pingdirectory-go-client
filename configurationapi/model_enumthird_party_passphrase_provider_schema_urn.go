/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyPassphraseProviderSchemaUrn the model 'EnumthirdPartyPassphraseProviderSchemaUrn'
type EnumthirdPartyPassphraseProviderSchemaUrn string

// List of Enumthird-party-passphrase-providerSchemaUrn
const (
	ENUMTHIRDPARTYPASSPHRASEPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSPHRASE_PROVIDERTHIRD_PARTY EnumthirdPartyPassphraseProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:passphrase-provider:third-party"
)

// All allowed values of EnumthirdPartyPassphraseProviderSchemaUrn enum
var AllowedEnumthirdPartyPassphraseProviderSchemaUrnEnumValues = []EnumthirdPartyPassphraseProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:passphrase-provider:third-party",
}

func (v *EnumthirdPartyPassphraseProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyPassphraseProviderSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyPassphraseProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyPassphraseProviderSchemaUrn", value)
}

// NewEnumthirdPartyPassphraseProviderSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyPassphraseProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyPassphraseProviderSchemaUrnFromValue(v string) (*EnumthirdPartyPassphraseProviderSchemaUrn, error) {
	ev := EnumthirdPartyPassphraseProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyPassphraseProviderSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyPassphraseProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyPassphraseProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyPassphraseProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-passphrase-providerSchemaUrn value
func (v EnumthirdPartyPassphraseProviderSchemaUrn) Ptr() *EnumthirdPartyPassphraseProviderSchemaUrn {
	return &v
}

type NullableEnumthirdPartyPassphraseProviderSchemaUrn struct {
	value *EnumthirdPartyPassphraseProviderSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyPassphraseProviderSchemaUrn) Get() *EnumthirdPartyPassphraseProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyPassphraseProviderSchemaUrn) Set(val *EnumthirdPartyPassphraseProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyPassphraseProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyPassphraseProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyPassphraseProviderSchemaUrn(val *EnumthirdPartyPassphraseProviderSchemaUrn) *NullableEnumthirdPartyPassphraseProviderSchemaUrn {
	return &NullableEnumthirdPartyPassphraseProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyPassphraseProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyPassphraseProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
