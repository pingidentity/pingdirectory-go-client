/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ConjurAuthenticationMethodApiService ConjurAuthenticationMethodApi service
type ConjurAuthenticationMethodApiService service

type ApiAddConjurAuthenticationMethodRequest struct {
	ctx                                        context.Context
	ApiService                                 *ConjurAuthenticationMethodApiService
	addApiKeyConjurAuthenticationMethodRequest *AddApiKeyConjurAuthenticationMethodRequest
}

// Create a new Conjur Authentication Method in the config
func (r ApiAddConjurAuthenticationMethodRequest) AddApiKeyConjurAuthenticationMethodRequest(addApiKeyConjurAuthenticationMethodRequest AddApiKeyConjurAuthenticationMethodRequest) ApiAddConjurAuthenticationMethodRequest {
	r.addApiKeyConjurAuthenticationMethodRequest = &addApiKeyConjurAuthenticationMethodRequest
	return r
}

func (r ApiAddConjurAuthenticationMethodRequest) Execute() (*ApiKeyConjurAuthenticationMethodResponse, *http.Response, error) {
	return r.ApiService.AddConjurAuthenticationMethodExecute(r)
}

/*
AddConjurAuthenticationMethod Add a new Conjur Authentication Method to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddConjurAuthenticationMethodRequest
*/
func (a *ConjurAuthenticationMethodApiService) AddConjurAuthenticationMethod(ctx context.Context) ApiAddConjurAuthenticationMethodRequest {
	return ApiAddConjurAuthenticationMethodRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiKeyConjurAuthenticationMethodResponse
func (a *ConjurAuthenticationMethodApiService) AddConjurAuthenticationMethodExecute(r ApiAddConjurAuthenticationMethodRequest) (*ApiKeyConjurAuthenticationMethodResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiKeyConjurAuthenticationMethodResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConjurAuthenticationMethodApiService.AddConjurAuthenticationMethod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conjur-authentication-methods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addApiKeyConjurAuthenticationMethodRequest == nil {
		return localVarReturnValue, nil, reportError("addApiKeyConjurAuthenticationMethodRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addApiKeyConjurAuthenticationMethodRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConjurAuthenticationMethodRequest struct {
	ctx                            context.Context
	ApiService                     *ConjurAuthenticationMethodApiService
	conjurAuthenticationMethodName string
}

func (r ApiDeleteConjurAuthenticationMethodRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConjurAuthenticationMethodExecute(r)
}

/*
DeleteConjurAuthenticationMethod Delete a Conjur Authentication Method

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conjurAuthenticationMethodName Name of the Conjur Authentication Method
	@return ApiDeleteConjurAuthenticationMethodRequest
*/
func (a *ConjurAuthenticationMethodApiService) DeleteConjurAuthenticationMethod(ctx context.Context, conjurAuthenticationMethodName string) ApiDeleteConjurAuthenticationMethodRequest {
	return ApiDeleteConjurAuthenticationMethodRequest{
		ApiService:                     a,
		ctx:                            ctx,
		conjurAuthenticationMethodName: conjurAuthenticationMethodName,
	}
}

// Execute executes the request
func (a *ConjurAuthenticationMethodApiService) DeleteConjurAuthenticationMethodExecute(r ApiDeleteConjurAuthenticationMethodRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConjurAuthenticationMethodApiService.DeleteConjurAuthenticationMethod")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conjur-authentication-methods/{conjur-authentication-method-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"conjur-authentication-method-name"+"}", url.PathEscape(parameterValueToString(r.conjurAuthenticationMethodName, "conjurAuthenticationMethodName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConjurAuthenticationMethodRequest struct {
	ctx                            context.Context
	ApiService                     *ConjurAuthenticationMethodApiService
	conjurAuthenticationMethodName string
}

func (r ApiGetConjurAuthenticationMethodRequest) Execute() (*ApiKeyConjurAuthenticationMethodResponse, *http.Response, error) {
	return r.ApiService.GetConjurAuthenticationMethodExecute(r)
}

/*
GetConjurAuthenticationMethod Returns a single Conjur Authentication Method

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conjurAuthenticationMethodName Name of the Conjur Authentication Method
	@return ApiGetConjurAuthenticationMethodRequest
*/
func (a *ConjurAuthenticationMethodApiService) GetConjurAuthenticationMethod(ctx context.Context, conjurAuthenticationMethodName string) ApiGetConjurAuthenticationMethodRequest {
	return ApiGetConjurAuthenticationMethodRequest{
		ApiService:                     a,
		ctx:                            ctx,
		conjurAuthenticationMethodName: conjurAuthenticationMethodName,
	}
}

// Execute executes the request
//
//	@return ApiKeyConjurAuthenticationMethodResponse
func (a *ConjurAuthenticationMethodApiService) GetConjurAuthenticationMethodExecute(r ApiGetConjurAuthenticationMethodRequest) (*ApiKeyConjurAuthenticationMethodResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiKeyConjurAuthenticationMethodResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConjurAuthenticationMethodApiService.GetConjurAuthenticationMethod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conjur-authentication-methods/{conjur-authentication-method-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"conjur-authentication-method-name"+"}", url.PathEscape(parameterValueToString(r.conjurAuthenticationMethodName, "conjurAuthenticationMethodName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConjurAuthenticationMethodRequest struct {
	ctx                            context.Context
	ApiService                     *ConjurAuthenticationMethodApiService
	conjurAuthenticationMethodName string
	updateRequest                  *UpdateRequest
}

// Update an existing Conjur Authentication Method
func (r ApiUpdateConjurAuthenticationMethodRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateConjurAuthenticationMethodRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateConjurAuthenticationMethodRequest) Execute() (*ApiKeyConjurAuthenticationMethodResponse, *http.Response, error) {
	return r.ApiService.UpdateConjurAuthenticationMethodExecute(r)
}

/*
UpdateConjurAuthenticationMethod Update an existing Conjur Authentication Method by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param conjurAuthenticationMethodName Name of the Conjur Authentication Method
	@return ApiUpdateConjurAuthenticationMethodRequest
*/
func (a *ConjurAuthenticationMethodApiService) UpdateConjurAuthenticationMethod(ctx context.Context, conjurAuthenticationMethodName string) ApiUpdateConjurAuthenticationMethodRequest {
	return ApiUpdateConjurAuthenticationMethodRequest{
		ApiService:                     a,
		ctx:                            ctx,
		conjurAuthenticationMethodName: conjurAuthenticationMethodName,
	}
}

// Execute executes the request
//
//	@return ApiKeyConjurAuthenticationMethodResponse
func (a *ConjurAuthenticationMethodApiService) UpdateConjurAuthenticationMethodExecute(r ApiUpdateConjurAuthenticationMethodRequest) (*ApiKeyConjurAuthenticationMethodResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiKeyConjurAuthenticationMethodResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConjurAuthenticationMethodApiService.UpdateConjurAuthenticationMethod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/conjur-authentication-methods/{conjur-authentication-method-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"conjur-authentication-method-name"+"}", url.PathEscape(parameterValueToString(r.conjurAuthenticationMethodName, "conjurAuthenticationMethodName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
