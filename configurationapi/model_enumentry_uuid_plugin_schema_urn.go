/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumentryUuidPluginSchemaUrn the model 'EnumentryUuidPluginSchemaUrn'
type EnumentryUuidPluginSchemaUrn string

// List of Enumentry-uuid-pluginSchemaUrn
const (
	ENUMENTRYUUIDPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINENTRY_UUID EnumentryUuidPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:entry-uuid"
)

// All allowed values of EnumentryUuidPluginSchemaUrn enum
var AllowedEnumentryUuidPluginSchemaUrnEnumValues = []EnumentryUuidPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:entry-uuid",
}

func (v *EnumentryUuidPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumentryUuidPluginSchemaUrn(value)
	for _, existing := range AllowedEnumentryUuidPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumentryUuidPluginSchemaUrn", value)
}

// NewEnumentryUuidPluginSchemaUrnFromValue returns a pointer to a valid EnumentryUuidPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumentryUuidPluginSchemaUrnFromValue(v string) (*EnumentryUuidPluginSchemaUrn, error) {
	ev := EnumentryUuidPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumentryUuidPluginSchemaUrn: valid values are %v", v, AllowedEnumentryUuidPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumentryUuidPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumentryUuidPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumentry-uuid-pluginSchemaUrn value
func (v EnumentryUuidPluginSchemaUrn) Ptr() *EnumentryUuidPluginSchemaUrn {
	return &v
}

type NullableEnumentryUuidPluginSchemaUrn struct {
	value *EnumentryUuidPluginSchemaUrn
	isSet bool
}

func (v NullableEnumentryUuidPluginSchemaUrn) Get() *EnumentryUuidPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumentryUuidPluginSchemaUrn) Set(val *EnumentryUuidPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumentryUuidPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumentryUuidPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumentryUuidPluginSchemaUrn(val *EnumentryUuidPluginSchemaUrn) *NullableEnumentryUuidPluginSchemaUrn {
	return &NullableEnumentryUuidPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumentryUuidPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumentryUuidPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
