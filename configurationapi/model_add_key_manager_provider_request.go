/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddKeyManagerProviderRequest - struct for AddKeyManagerProviderRequest
type AddKeyManagerProviderRequest struct {
	AddFileBasedKeyManagerProviderRequest  *AddFileBasedKeyManagerProviderRequest
	AddPkcs11KeyManagerProviderRequest     *AddPkcs11KeyManagerProviderRequest
	AddThirdPartyKeyManagerProviderRequest *AddThirdPartyKeyManagerProviderRequest
}

// AddFileBasedKeyManagerProviderRequestAsAddKeyManagerProviderRequest is a convenience function that returns AddFileBasedKeyManagerProviderRequest wrapped in AddKeyManagerProviderRequest
func AddFileBasedKeyManagerProviderRequestAsAddKeyManagerProviderRequest(v *AddFileBasedKeyManagerProviderRequest) AddKeyManagerProviderRequest {
	return AddKeyManagerProviderRequest{
		AddFileBasedKeyManagerProviderRequest: v,
	}
}

// AddPkcs11KeyManagerProviderRequestAsAddKeyManagerProviderRequest is a convenience function that returns AddPkcs11KeyManagerProviderRequest wrapped in AddKeyManagerProviderRequest
func AddPkcs11KeyManagerProviderRequestAsAddKeyManagerProviderRequest(v *AddPkcs11KeyManagerProviderRequest) AddKeyManagerProviderRequest {
	return AddKeyManagerProviderRequest{
		AddPkcs11KeyManagerProviderRequest: v,
	}
}

// AddThirdPartyKeyManagerProviderRequestAsAddKeyManagerProviderRequest is a convenience function that returns AddThirdPartyKeyManagerProviderRequest wrapped in AddKeyManagerProviderRequest
func AddThirdPartyKeyManagerProviderRequestAsAddKeyManagerProviderRequest(v *AddThirdPartyKeyManagerProviderRequest) AddKeyManagerProviderRequest {
	return AddKeyManagerProviderRequest{
		AddThirdPartyKeyManagerProviderRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddKeyManagerProviderRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddFileBasedKeyManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddFileBasedKeyManagerProviderRequest)
	if err == nil {
		jsonAddFileBasedKeyManagerProviderRequest, _ := json.Marshal(dst.AddFileBasedKeyManagerProviderRequest)
		if string(jsonAddFileBasedKeyManagerProviderRequest) == "{}" { // empty struct
			dst.AddFileBasedKeyManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFileBasedKeyManagerProviderRequest = nil
	}

	// try to unmarshal data into AddPkcs11KeyManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddPkcs11KeyManagerProviderRequest)
	if err == nil {
		jsonAddPkcs11KeyManagerProviderRequest, _ := json.Marshal(dst.AddPkcs11KeyManagerProviderRequest)
		if string(jsonAddPkcs11KeyManagerProviderRequest) == "{}" { // empty struct
			dst.AddPkcs11KeyManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddPkcs11KeyManagerProviderRequest = nil
	}

	// try to unmarshal data into AddThirdPartyKeyManagerProviderRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyKeyManagerProviderRequest)
	if err == nil {
		jsonAddThirdPartyKeyManagerProviderRequest, _ := json.Marshal(dst.AddThirdPartyKeyManagerProviderRequest)
		if string(jsonAddThirdPartyKeyManagerProviderRequest) == "{}" { // empty struct
			dst.AddThirdPartyKeyManagerProviderRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyKeyManagerProviderRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddFileBasedKeyManagerProviderRequest = nil
		dst.AddPkcs11KeyManagerProviderRequest = nil
		dst.AddThirdPartyKeyManagerProviderRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddKeyManagerProviderRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddKeyManagerProviderRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddKeyManagerProviderRequest) MarshalJSON() ([]byte, error) {
	if src.AddFileBasedKeyManagerProviderRequest != nil {
		return json.Marshal(&src.AddFileBasedKeyManagerProviderRequest)
	}

	if src.AddPkcs11KeyManagerProviderRequest != nil {
		return json.Marshal(&src.AddPkcs11KeyManagerProviderRequest)
	}

	if src.AddThirdPartyKeyManagerProviderRequest != nil {
		return json.Marshal(&src.AddThirdPartyKeyManagerProviderRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddKeyManagerProviderRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddFileBasedKeyManagerProviderRequest != nil {
		return obj.AddFileBasedKeyManagerProviderRequest
	}

	if obj.AddPkcs11KeyManagerProviderRequest != nil {
		return obj.AddPkcs11KeyManagerProviderRequest
	}

	if obj.AddThirdPartyKeyManagerProviderRequest != nil {
		return obj.AddThirdPartyKeyManagerProviderRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddKeyManagerProviderRequest struct {
	value *AddKeyManagerProviderRequest
	isSet bool
}

func (v NullableAddKeyManagerProviderRequest) Get() *AddKeyManagerProviderRequest {
	return v.value
}

func (v *NullableAddKeyManagerProviderRequest) Set(val *AddKeyManagerProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddKeyManagerProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddKeyManagerProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddKeyManagerProviderRequest(val *AddKeyManagerProviderRequest) *NullableAddKeyManagerProviderRequest {
	return &NullableAddKeyManagerProviderRequest{value: val, isSet: true}
}

func (v NullableAddKeyManagerProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddKeyManagerProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
