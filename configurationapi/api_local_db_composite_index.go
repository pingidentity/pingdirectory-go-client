/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LocalDbCompositeIndexApiService LocalDbCompositeIndexApi service
type LocalDbCompositeIndexApiService service

type ApiAddLocalDbCompositeIndexRequest struct {
	ctx                             context.Context
	ApiService                      *LocalDbCompositeIndexApiService
	backendName                     string
	addLocalDbCompositeIndexRequest *AddLocalDbCompositeIndexRequest
}

// Create a new Local DB Composite Index in the config
func (r ApiAddLocalDbCompositeIndexRequest) AddLocalDbCompositeIndexRequest(addLocalDbCompositeIndexRequest AddLocalDbCompositeIndexRequest) ApiAddLocalDbCompositeIndexRequest {
	r.addLocalDbCompositeIndexRequest = &addLocalDbCompositeIndexRequest
	return r
}

func (r ApiAddLocalDbCompositeIndexRequest) Execute() (*LocalDbCompositeIndexResponse, *http.Response, error) {
	return r.ApiService.AddLocalDbCompositeIndexExecute(r)
}

/*
AddLocalDbCompositeIndex Add a new Local DB Composite Index to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backendName Name of the Backend
	@return ApiAddLocalDbCompositeIndexRequest
*/
func (a *LocalDbCompositeIndexApiService) AddLocalDbCompositeIndex(ctx context.Context, backendName string) ApiAddLocalDbCompositeIndexRequest {
	return ApiAddLocalDbCompositeIndexRequest{
		ApiService:  a,
		ctx:         ctx,
		backendName: backendName,
	}
}

// Execute executes the request
//
//	@return LocalDbCompositeIndexResponse
func (a *LocalDbCompositeIndexApiService) AddLocalDbCompositeIndexExecute(r ApiAddLocalDbCompositeIndexRequest) (*LocalDbCompositeIndexResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LocalDbCompositeIndexResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbCompositeIndexApiService.AddLocalDbCompositeIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/{backend-name}/local-db-composite-indexes"
	localVarPath = strings.Replace(localVarPath, "{"+"backend-name"+"}", url.PathEscape(parameterValueToString(r.backendName, "backendName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addLocalDbCompositeIndexRequest == nil {
		return localVarReturnValue, nil, reportError("addLocalDbCompositeIndexRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addLocalDbCompositeIndexRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteLocalDbCompositeIndexRequest struct {
	ctx                       context.Context
	ApiService                *LocalDbCompositeIndexApiService
	localDbCompositeIndexName string
	backendName               string
}

func (r ApiDeleteLocalDbCompositeIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLocalDbCompositeIndexExecute(r)
}

/*
DeleteLocalDbCompositeIndex Delete a Local DB Composite Index

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param localDbCompositeIndexName Name of the Local DB Composite Index
	@param backendName Name of the Backend
	@return ApiDeleteLocalDbCompositeIndexRequest
*/
func (a *LocalDbCompositeIndexApiService) DeleteLocalDbCompositeIndex(ctx context.Context, localDbCompositeIndexName string, backendName string) ApiDeleteLocalDbCompositeIndexRequest {
	return ApiDeleteLocalDbCompositeIndexRequest{
		ApiService:                a,
		ctx:                       ctx,
		localDbCompositeIndexName: localDbCompositeIndexName,
		backendName:               backendName,
	}
}

// Execute executes the request
func (a *LocalDbCompositeIndexApiService) DeleteLocalDbCompositeIndexExecute(r ApiDeleteLocalDbCompositeIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbCompositeIndexApiService.DeleteLocalDbCompositeIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"local-db-composite-index-name"+"}", url.PathEscape(parameterValueToString(r.localDbCompositeIndexName, "localDbCompositeIndexName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"backend-name"+"}", url.PathEscape(parameterValueToString(r.backendName, "backendName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetLocalDbCompositeIndexRequest struct {
	ctx                       context.Context
	ApiService                *LocalDbCompositeIndexApiService
	localDbCompositeIndexName string
	backendName               string
}

func (r ApiGetLocalDbCompositeIndexRequest) Execute() (*LocalDbCompositeIndexResponse, *http.Response, error) {
	return r.ApiService.GetLocalDbCompositeIndexExecute(r)
}

/*
GetLocalDbCompositeIndex Returns a single Local DB Composite Index

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param localDbCompositeIndexName Name of the Local DB Composite Index
	@param backendName Name of the Backend
	@return ApiGetLocalDbCompositeIndexRequest
*/
func (a *LocalDbCompositeIndexApiService) GetLocalDbCompositeIndex(ctx context.Context, localDbCompositeIndexName string, backendName string) ApiGetLocalDbCompositeIndexRequest {
	return ApiGetLocalDbCompositeIndexRequest{
		ApiService:                a,
		ctx:                       ctx,
		localDbCompositeIndexName: localDbCompositeIndexName,
		backendName:               backendName,
	}
}

// Execute executes the request
//
//	@return LocalDbCompositeIndexResponse
func (a *LocalDbCompositeIndexApiService) GetLocalDbCompositeIndexExecute(r ApiGetLocalDbCompositeIndexRequest) (*LocalDbCompositeIndexResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LocalDbCompositeIndexResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbCompositeIndexApiService.GetLocalDbCompositeIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"local-db-composite-index-name"+"}", url.PathEscape(parameterValueToString(r.localDbCompositeIndexName, "localDbCompositeIndexName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"backend-name"+"}", url.PathEscape(parameterValueToString(r.backendName, "backendName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLocalDbCompositeIndexRequest struct {
	ctx                       context.Context
	ApiService                *LocalDbCompositeIndexApiService
	localDbCompositeIndexName string
	backendName               string
	updateRequest             *UpdateRequest
}

// Update an existing Local DB Composite Index
func (r ApiUpdateLocalDbCompositeIndexRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateLocalDbCompositeIndexRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateLocalDbCompositeIndexRequest) Execute() (*LocalDbCompositeIndexResponse, *http.Response, error) {
	return r.ApiService.UpdateLocalDbCompositeIndexExecute(r)
}

/*
UpdateLocalDbCompositeIndex Update an existing Local DB Composite Index by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param localDbCompositeIndexName Name of the Local DB Composite Index
	@param backendName Name of the Backend
	@return ApiUpdateLocalDbCompositeIndexRequest
*/
func (a *LocalDbCompositeIndexApiService) UpdateLocalDbCompositeIndex(ctx context.Context, localDbCompositeIndexName string, backendName string) ApiUpdateLocalDbCompositeIndexRequest {
	return ApiUpdateLocalDbCompositeIndexRequest{
		ApiService:                a,
		ctx:                       ctx,
		localDbCompositeIndexName: localDbCompositeIndexName,
		backendName:               backendName,
	}
}

// Execute executes the request
//
//	@return LocalDbCompositeIndexResponse
func (a *LocalDbCompositeIndexApiService) UpdateLocalDbCompositeIndexExecute(r ApiUpdateLocalDbCompositeIndexRequest) (*LocalDbCompositeIndexResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LocalDbCompositeIndexResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalDbCompositeIndexApiService.UpdateLocalDbCompositeIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"local-db-composite-index-name"+"}", url.PathEscape(parameterValueToString(r.localDbCompositeIndexName, "localDbCompositeIndexName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"backend-name"+"}", url.PathEscape(parameterValueToString(r.backendName, "backendName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
