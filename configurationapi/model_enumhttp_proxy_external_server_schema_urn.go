/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpProxyExternalServerSchemaUrn the model 'EnumhttpProxyExternalServerSchemaUrn'
type EnumhttpProxyExternalServerSchemaUrn string

// List of Enumhttp-proxy-external-serverSchemaUrn
const (
	ENUMHTTPPROXYEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERHTTP_PROXY EnumhttpProxyExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:http-proxy"
)

// All allowed values of EnumhttpProxyExternalServerSchemaUrn enum
var AllowedEnumhttpProxyExternalServerSchemaUrnEnumValues = []EnumhttpProxyExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:http-proxy",
}

func (v *EnumhttpProxyExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpProxyExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumhttpProxyExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpProxyExternalServerSchemaUrn", value)
}

// NewEnumhttpProxyExternalServerSchemaUrnFromValue returns a pointer to a valid EnumhttpProxyExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpProxyExternalServerSchemaUrnFromValue(v string) (*EnumhttpProxyExternalServerSchemaUrn, error) {
	ev := EnumhttpProxyExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpProxyExternalServerSchemaUrn: valid values are %v", v, AllowedEnumhttpProxyExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpProxyExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumhttpProxyExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-proxy-external-serverSchemaUrn value
func (v EnumhttpProxyExternalServerSchemaUrn) Ptr() *EnumhttpProxyExternalServerSchemaUrn {
	return &v
}

type NullableEnumhttpProxyExternalServerSchemaUrn struct {
	value *EnumhttpProxyExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumhttpProxyExternalServerSchemaUrn) Get() *EnumhttpProxyExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumhttpProxyExternalServerSchemaUrn) Set(val *EnumhttpProxyExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpProxyExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpProxyExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpProxyExternalServerSchemaUrn(val *EnumhttpProxyExternalServerSchemaUrn) *NullableEnumhttpProxyExternalServerSchemaUrn {
	return &NullableEnumhttpProxyExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumhttpProxyExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpProxyExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
