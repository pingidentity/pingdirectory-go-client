/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationAssurancePolicyRemoteLevelProp Specifies the assurance level used to replicate to remote servers. A remote server is defined as one with a different value for the location setting in the global configuration.
type EnumreplicationAssurancePolicyRemoteLevelProp string

// List of Enumreplication-assurance-policy-remoteLevelProp
const (
	ENUMREPLICATIONASSURANCEPOLICYREMOTELEVELPROP_NONE                          EnumreplicationAssurancePolicyRemoteLevelProp = "none"
	ENUMREPLICATIONASSURANCEPOLICYREMOTELEVELPROP_RECEIVED_ANY_REMOTE_LOCATION  EnumreplicationAssurancePolicyRemoteLevelProp = "received-any-remote-location"
	ENUMREPLICATIONASSURANCEPOLICYREMOTELEVELPROP_RECEIVED_ALL_REMOTE_LOCATIONS EnumreplicationAssurancePolicyRemoteLevelProp = "received-all-remote-locations"
	ENUMREPLICATIONASSURANCEPOLICYREMOTELEVELPROP_PROCESSED_ALL_REMOTE_SERVERS  EnumreplicationAssurancePolicyRemoteLevelProp = "processed-all-remote-servers"
)

// All allowed values of EnumreplicationAssurancePolicyRemoteLevelProp enum
var AllowedEnumreplicationAssurancePolicyRemoteLevelPropEnumValues = []EnumreplicationAssurancePolicyRemoteLevelProp{
	"none",
	"received-any-remote-location",
	"received-all-remote-locations",
	"processed-all-remote-servers",
}

func (v *EnumreplicationAssurancePolicyRemoteLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationAssurancePolicyRemoteLevelProp(value)
	for _, existing := range AllowedEnumreplicationAssurancePolicyRemoteLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationAssurancePolicyRemoteLevelProp", value)
}

// NewEnumreplicationAssurancePolicyRemoteLevelPropFromValue returns a pointer to a valid EnumreplicationAssurancePolicyRemoteLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationAssurancePolicyRemoteLevelPropFromValue(v string) (*EnumreplicationAssurancePolicyRemoteLevelProp, error) {
	ev := EnumreplicationAssurancePolicyRemoteLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationAssurancePolicyRemoteLevelProp: valid values are %v", v, AllowedEnumreplicationAssurancePolicyRemoteLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationAssurancePolicyRemoteLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumreplicationAssurancePolicyRemoteLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-assurance-policy-remoteLevelProp value
func (v EnumreplicationAssurancePolicyRemoteLevelProp) Ptr() *EnumreplicationAssurancePolicyRemoteLevelProp {
	return &v
}

type NullableEnumreplicationAssurancePolicyRemoteLevelProp struct {
	value *EnumreplicationAssurancePolicyRemoteLevelProp
	isSet bool
}

func (v NullableEnumreplicationAssurancePolicyRemoteLevelProp) Get() *EnumreplicationAssurancePolicyRemoteLevelProp {
	return v.value
}

func (v *NullableEnumreplicationAssurancePolicyRemoteLevelProp) Set(val *EnumreplicationAssurancePolicyRemoteLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationAssurancePolicyRemoteLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationAssurancePolicyRemoteLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationAssurancePolicyRemoteLevelProp(val *EnumreplicationAssurancePolicyRemoteLevelProp) *NullableEnumreplicationAssurancePolicyRemoteLevelProp {
	return &NullableEnumreplicationAssurancePolicyRemoteLevelProp{value: val, isSet: true}
}

func (v NullableEnumreplicationAssurancePolicyRemoteLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationAssurancePolicyRemoteLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
