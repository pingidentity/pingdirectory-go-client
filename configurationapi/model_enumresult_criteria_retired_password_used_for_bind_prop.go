/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaRetiredPasswordUsedForBindProp Indicates whether the use of a retired password for authentication should be considered when determining whether a bind operation should be included in this Simple Result Criteria. This will be ignored for all operations other than bind.
type EnumresultCriteriaRetiredPasswordUsedForBindProp string

// List of Enumresult-criteria-retiredPasswordUsedForBindProp
const (
	ENUMRESULTCRITERIARETIREDPASSWORDUSEDFORBINDPROP_ANY                       EnumresultCriteriaRetiredPasswordUsedForBindProp = "any"
	ENUMRESULTCRITERIARETIREDPASSWORDUSEDFORBINDPROP_RETIRED_PASSWORD_USED     EnumresultCriteriaRetiredPasswordUsedForBindProp = "retired-password-used"
	ENUMRESULTCRITERIARETIREDPASSWORDUSEDFORBINDPROP_RETIRED_PASSWORD_NOT_USED EnumresultCriteriaRetiredPasswordUsedForBindProp = "retired-password-not-used"
)

// All allowed values of EnumresultCriteriaRetiredPasswordUsedForBindProp enum
var AllowedEnumresultCriteriaRetiredPasswordUsedForBindPropEnumValues = []EnumresultCriteriaRetiredPasswordUsedForBindProp{
	"any",
	"retired-password-used",
	"retired-password-not-used",
}

func (v *EnumresultCriteriaRetiredPasswordUsedForBindProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaRetiredPasswordUsedForBindProp(value)
	for _, existing := range AllowedEnumresultCriteriaRetiredPasswordUsedForBindPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaRetiredPasswordUsedForBindProp", value)
}

// NewEnumresultCriteriaRetiredPasswordUsedForBindPropFromValue returns a pointer to a valid EnumresultCriteriaRetiredPasswordUsedForBindProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaRetiredPasswordUsedForBindPropFromValue(v string) (*EnumresultCriteriaRetiredPasswordUsedForBindProp, error) {
	ev := EnumresultCriteriaRetiredPasswordUsedForBindProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaRetiredPasswordUsedForBindProp: valid values are %v", v, AllowedEnumresultCriteriaRetiredPasswordUsedForBindPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaRetiredPasswordUsedForBindProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaRetiredPasswordUsedForBindPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-retiredPasswordUsedForBindProp value
func (v EnumresultCriteriaRetiredPasswordUsedForBindProp) Ptr() *EnumresultCriteriaRetiredPasswordUsedForBindProp {
	return &v
}

type NullableEnumresultCriteriaRetiredPasswordUsedForBindProp struct {
	value *EnumresultCriteriaRetiredPasswordUsedForBindProp
	isSet bool
}

func (v NullableEnumresultCriteriaRetiredPasswordUsedForBindProp) Get() *EnumresultCriteriaRetiredPasswordUsedForBindProp {
	return v.value
}

func (v *NullableEnumresultCriteriaRetiredPasswordUsedForBindProp) Set(val *EnumresultCriteriaRetiredPasswordUsedForBindProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaRetiredPasswordUsedForBindProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaRetiredPasswordUsedForBindProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaRetiredPasswordUsedForBindProp(val *EnumresultCriteriaRetiredPasswordUsedForBindProp) *NullableEnumresultCriteriaRetiredPasswordUsedForBindProp {
	return &NullableEnumresultCriteriaRetiredPasswordUsedForBindProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaRetiredPasswordUsedForBindProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaRetiredPasswordUsedForBindProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
