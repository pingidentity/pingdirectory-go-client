/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn the model 'EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn'
type EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn string

// List of Enumaccount-usability-issues-data-security-auditorSchemaUrn
const (
	ENUMACCOUNTUSABILITYISSUESDATASECURITYAUDITORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0DATA_SECURITY_AUDITORACCOUNT_USABILITY_ISSUES EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:data-security-auditor:account-usability-issues"
)

// All allowed values of EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn enum
var AllowedEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrnEnumValues = []EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:data-security-auditor:account-usability-issues",
}

func (v *EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn(value)
	for _, existing := range AllowedEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn", value)
}

// NewEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrnFromValue returns a pointer to a valid EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrnFromValue(v string) (*EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn, error) {
	ev := EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn: valid values are %v", v, AllowedEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaccount-usability-issues-data-security-auditorSchemaUrn value
func (v EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) Ptr() *EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn {
	return &v
}

type NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn struct {
	value *EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn
	isSet bool
}

func (v NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) Get() *EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn {
	return v.value
}

func (v *NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) Set(val *EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn(val *EnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) *NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn {
	return &NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumaccountUsabilityIssuesDataSecurityAuditorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
