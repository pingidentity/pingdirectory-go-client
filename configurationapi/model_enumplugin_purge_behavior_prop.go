/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginPurgeBehaviorProp Specifies whether to delete expired entries or attribute values. By default entries are deleted.
type EnumpluginPurgeBehaviorProp string

// List of Enumplugin-purgeBehaviorProp
const (
	ENUMPLUGINPURGEBEHAVIORPROP_DELETE_ENTRIES               EnumpluginPurgeBehaviorProp = "delete-entries"
	ENUMPLUGINPURGEBEHAVIORPROP_SUBTREE_DELETE_ENTRIES       EnumpluginPurgeBehaviorProp = "subtree-delete-entries"
	ENUMPLUGINPURGEBEHAVIORPROP_DELETE_JSON_ATTRIBUTE_VALUES EnumpluginPurgeBehaviorProp = "delete-json-attribute-values"
)

// All allowed values of EnumpluginPurgeBehaviorProp enum
var AllowedEnumpluginPurgeBehaviorPropEnumValues = []EnumpluginPurgeBehaviorProp{
	"delete-entries",
	"subtree-delete-entries",
	"delete-json-attribute-values",
}

func (v *EnumpluginPurgeBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginPurgeBehaviorProp(value)
	for _, existing := range AllowedEnumpluginPurgeBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginPurgeBehaviorProp", value)
}

// NewEnumpluginPurgeBehaviorPropFromValue returns a pointer to a valid EnumpluginPurgeBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginPurgeBehaviorPropFromValue(v string) (*EnumpluginPurgeBehaviorProp, error) {
	ev := EnumpluginPurgeBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginPurgeBehaviorProp: valid values are %v", v, AllowedEnumpluginPurgeBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginPurgeBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginPurgeBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-purgeBehaviorProp value
func (v EnumpluginPurgeBehaviorProp) Ptr() *EnumpluginPurgeBehaviorProp {
	return &v
}

type NullableEnumpluginPurgeBehaviorProp struct {
	value *EnumpluginPurgeBehaviorProp
	isSet bool
}

func (v NullableEnumpluginPurgeBehaviorProp) Get() *EnumpluginPurgeBehaviorProp {
	return v.value
}

func (v *NullableEnumpluginPurgeBehaviorProp) Set(val *EnumpluginPurgeBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginPurgeBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginPurgeBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginPurgeBehaviorProp(val *EnumpluginPurgeBehaviorProp) *NullableEnumpluginPurgeBehaviorProp {
	return &NullableEnumpluginPurgeBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumpluginPurgeBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginPurgeBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
