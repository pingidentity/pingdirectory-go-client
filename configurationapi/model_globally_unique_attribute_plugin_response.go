/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the GloballyUniqueAttributePluginResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GloballyUniqueAttributePluginResponse{}

// GloballyUniqueAttributePluginResponse struct for GloballyUniqueAttributePluginResponse
type GloballyUniqueAttributePluginResponse struct {
	Schemas []EnumgloballyUniqueAttributePluginSchemaUrn `json:"schemas"`
	// Name of the Plugin
	Id string `json:"id"`
	// The attribute type(s) for which to enforce global uniqueness. The attribute must be indexed for equality searches in all subtree views for which uniqueness should be maintained.
	Type                      []string                                                        `json:"type"`
	MultipleAttributeBehavior *EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp `json:"multipleAttributeBehavior,omitempty"`
	// The subtree view(s) for which to enforce uniqueness.
	SubtreeView []string `json:"subtreeView"`
	// Indicates whether this Globally Unique Attribute Plugin should attempt to prevent conflicts with soft-deleted entries (i.e., entries that have been removed in a way that leaves them in the server but in a way that makes them no longer visible to or accessible by normal clients).
	PreventConflictsWithSoftDeletedEntries *bool                               `json:"preventConflictsWithSoftDeletedEntries,omitempty"`
	PreCommitValidation                    *EnumpluginPreCommitValidationProp  `json:"preCommitValidation,omitempty"`
	PostCommitValidation                   *EnumpluginPostCommitValidationProp `json:"postCommitValidation,omitempty"`
	// Specifies the search filter to apply to determine if attribute uniqueness is enforced for the matching entries.
	Filter *string `json:"filter,omitempty"`
	// A description for this Plugin
	Description *string `json:"description,omitempty"`
	// Indicates whether the plug-in is enabled for use.
	Enabled bool `json:"enabled"`
	// Indicates whether the plug-in should be invoked for internal operations.
	InvokeForInternalOperations                   *bool                                              `json:"invokeForInternalOperations,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewGloballyUniqueAttributePluginResponse instantiates a new GloballyUniqueAttributePluginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGloballyUniqueAttributePluginResponse(schemas []EnumgloballyUniqueAttributePluginSchemaUrn, id string, type_ []string, subtreeView []string, enabled bool) *GloballyUniqueAttributePluginResponse {
	this := GloballyUniqueAttributePluginResponse{}
	this.Schemas = schemas
	this.Id = id
	this.Type = type_
	this.SubtreeView = subtreeView
	this.Enabled = enabled
	return &this
}

// NewGloballyUniqueAttributePluginResponseWithDefaults instantiates a new GloballyUniqueAttributePluginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGloballyUniqueAttributePluginResponseWithDefaults() *GloballyUniqueAttributePluginResponse {
	this := GloballyUniqueAttributePluginResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *GloballyUniqueAttributePluginResponse) GetSchemas() []EnumgloballyUniqueAttributePluginSchemaUrn {
	if o == nil {
		var ret []EnumgloballyUniqueAttributePluginSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetSchemasOk() ([]EnumgloballyUniqueAttributePluginSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *GloballyUniqueAttributePluginResponse) SetSchemas(v []EnumgloballyUniqueAttributePluginSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *GloballyUniqueAttributePluginResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GloballyUniqueAttributePluginResponse) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *GloballyUniqueAttributePluginResponse) GetType() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetTypeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *GloballyUniqueAttributePluginResponse) SetType(v []string) {
	o.Type = v
}

// GetMultipleAttributeBehavior returns the MultipleAttributeBehavior field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetMultipleAttributeBehavior() EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp {
	if o == nil || IsNil(o.MultipleAttributeBehavior) {
		var ret EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp
		return ret
	}
	return *o.MultipleAttributeBehavior
}

// GetMultipleAttributeBehaviorOk returns a tuple with the MultipleAttributeBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetMultipleAttributeBehaviorOk() (*EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp, bool) {
	if o == nil || IsNil(o.MultipleAttributeBehavior) {
		return nil, false
	}
	return o.MultipleAttributeBehavior, true
}

// HasMultipleAttributeBehavior returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasMultipleAttributeBehavior() bool {
	if o != nil && !IsNil(o.MultipleAttributeBehavior) {
		return true
	}

	return false
}

// SetMultipleAttributeBehavior gets a reference to the given EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp and assigns it to the MultipleAttributeBehavior field.
func (o *GloballyUniqueAttributePluginResponse) SetMultipleAttributeBehavior(v EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp) {
	o.MultipleAttributeBehavior = &v
}

// GetSubtreeView returns the SubtreeView field value
func (o *GloballyUniqueAttributePluginResponse) GetSubtreeView() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubtreeView
}

// GetSubtreeViewOk returns a tuple with the SubtreeView field value
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetSubtreeViewOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubtreeView, true
}

// SetSubtreeView sets field value
func (o *GloballyUniqueAttributePluginResponse) SetSubtreeView(v []string) {
	o.SubtreeView = v
}

// GetPreventConflictsWithSoftDeletedEntries returns the PreventConflictsWithSoftDeletedEntries field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetPreventConflictsWithSoftDeletedEntries() bool {
	if o == nil || IsNil(o.PreventConflictsWithSoftDeletedEntries) {
		var ret bool
		return ret
	}
	return *o.PreventConflictsWithSoftDeletedEntries
}

// GetPreventConflictsWithSoftDeletedEntriesOk returns a tuple with the PreventConflictsWithSoftDeletedEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetPreventConflictsWithSoftDeletedEntriesOk() (*bool, bool) {
	if o == nil || IsNil(o.PreventConflictsWithSoftDeletedEntries) {
		return nil, false
	}
	return o.PreventConflictsWithSoftDeletedEntries, true
}

// HasPreventConflictsWithSoftDeletedEntries returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasPreventConflictsWithSoftDeletedEntries() bool {
	if o != nil && !IsNil(o.PreventConflictsWithSoftDeletedEntries) {
		return true
	}

	return false
}

// SetPreventConflictsWithSoftDeletedEntries gets a reference to the given bool and assigns it to the PreventConflictsWithSoftDeletedEntries field.
func (o *GloballyUniqueAttributePluginResponse) SetPreventConflictsWithSoftDeletedEntries(v bool) {
	o.PreventConflictsWithSoftDeletedEntries = &v
}

// GetPreCommitValidation returns the PreCommitValidation field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetPreCommitValidation() EnumpluginPreCommitValidationProp {
	if o == nil || IsNil(o.PreCommitValidation) {
		var ret EnumpluginPreCommitValidationProp
		return ret
	}
	return *o.PreCommitValidation
}

// GetPreCommitValidationOk returns a tuple with the PreCommitValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetPreCommitValidationOk() (*EnumpluginPreCommitValidationProp, bool) {
	if o == nil || IsNil(o.PreCommitValidation) {
		return nil, false
	}
	return o.PreCommitValidation, true
}

// HasPreCommitValidation returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasPreCommitValidation() bool {
	if o != nil && !IsNil(o.PreCommitValidation) {
		return true
	}

	return false
}

// SetPreCommitValidation gets a reference to the given EnumpluginPreCommitValidationProp and assigns it to the PreCommitValidation field.
func (o *GloballyUniqueAttributePluginResponse) SetPreCommitValidation(v EnumpluginPreCommitValidationProp) {
	o.PreCommitValidation = &v
}

// GetPostCommitValidation returns the PostCommitValidation field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetPostCommitValidation() EnumpluginPostCommitValidationProp {
	if o == nil || IsNil(o.PostCommitValidation) {
		var ret EnumpluginPostCommitValidationProp
		return ret
	}
	return *o.PostCommitValidation
}

// GetPostCommitValidationOk returns a tuple with the PostCommitValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetPostCommitValidationOk() (*EnumpluginPostCommitValidationProp, bool) {
	if o == nil || IsNil(o.PostCommitValidation) {
		return nil, false
	}
	return o.PostCommitValidation, true
}

// HasPostCommitValidation returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasPostCommitValidation() bool {
	if o != nil && !IsNil(o.PostCommitValidation) {
		return true
	}

	return false
}

// SetPostCommitValidation gets a reference to the given EnumpluginPostCommitValidationProp and assigns it to the PostCommitValidation field.
func (o *GloballyUniqueAttributePluginResponse) SetPostCommitValidation(v EnumpluginPostCommitValidationProp) {
	o.PostCommitValidation = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *GloballyUniqueAttributePluginResponse) SetFilter(v string) {
	o.Filter = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GloballyUniqueAttributePluginResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *GloballyUniqueAttributePluginResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *GloballyUniqueAttributePluginResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetInvokeForInternalOperations returns the InvokeForInternalOperations field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetInvokeForInternalOperations() bool {
	if o == nil || IsNil(o.InvokeForInternalOperations) {
		var ret bool
		return ret
	}
	return *o.InvokeForInternalOperations
}

// GetInvokeForInternalOperationsOk returns a tuple with the InvokeForInternalOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetInvokeForInternalOperationsOk() (*bool, bool) {
	if o == nil || IsNil(o.InvokeForInternalOperations) {
		return nil, false
	}
	return o.InvokeForInternalOperations, true
}

// HasInvokeForInternalOperations returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasInvokeForInternalOperations() bool {
	if o != nil && !IsNil(o.InvokeForInternalOperations) {
		return true
	}

	return false
}

// SetInvokeForInternalOperations gets a reference to the given bool and assigns it to the InvokeForInternalOperations field.
func (o *GloballyUniqueAttributePluginResponse) SetInvokeForInternalOperations(v bool) {
	o.InvokeForInternalOperations = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *GloballyUniqueAttributePluginResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *GloballyUniqueAttributePluginResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GloballyUniqueAttributePluginResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *GloballyUniqueAttributePluginResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *GloballyUniqueAttributePluginResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o GloballyUniqueAttributePluginResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GloballyUniqueAttributePluginResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.MultipleAttributeBehavior) {
		toSerialize["multipleAttributeBehavior"] = o.MultipleAttributeBehavior
	}
	toSerialize["subtreeView"] = o.SubtreeView
	if !IsNil(o.PreventConflictsWithSoftDeletedEntries) {
		toSerialize["preventConflictsWithSoftDeletedEntries"] = o.PreventConflictsWithSoftDeletedEntries
	}
	if !IsNil(o.PreCommitValidation) {
		toSerialize["preCommitValidation"] = o.PreCommitValidation
	}
	if !IsNil(o.PostCommitValidation) {
		toSerialize["postCommitValidation"] = o.PostCommitValidation
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.InvokeForInternalOperations) {
		toSerialize["invokeForInternalOperations"] = o.InvokeForInternalOperations
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableGloballyUniqueAttributePluginResponse struct {
	value *GloballyUniqueAttributePluginResponse
	isSet bool
}

func (v NullableGloballyUniqueAttributePluginResponse) Get() *GloballyUniqueAttributePluginResponse {
	return v.value
}

func (v *NullableGloballyUniqueAttributePluginResponse) Set(val *GloballyUniqueAttributePluginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGloballyUniqueAttributePluginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGloballyUniqueAttributePluginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGloballyUniqueAttributePluginResponse(val *GloballyUniqueAttributePluginResponse) *NullableGloballyUniqueAttributePluginResponse {
	return &NullableGloballyUniqueAttributePluginResponse{value: val, isSet: true}
}

func (v NullableGloballyUniqueAttributePluginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGloballyUniqueAttributePluginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
