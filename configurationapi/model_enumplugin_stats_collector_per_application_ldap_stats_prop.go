/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginStatsCollectorPerApplicationLDAPStatsProp Controls whether per application LDAP statistics are included in the output for selected LDAP operation statistics.
type EnumpluginStatsCollectorPerApplicationLDAPStatsProp string

// List of Enumplugin-stats-collector-perApplicationLDAPStatsProp
const (
	ENUMPLUGINSTATSCOLLECTORPERAPPLICATIONLDAPSTATSPROP_AGGREGATE_ONLY       EnumpluginStatsCollectorPerApplicationLDAPStatsProp = "aggregate-only"
	ENUMPLUGINSTATSCOLLECTORPERAPPLICATIONLDAPSTATSPROP_PER_APPLICATION_ONLY EnumpluginStatsCollectorPerApplicationLDAPStatsProp = "per-application-only"
)

// All allowed values of EnumpluginStatsCollectorPerApplicationLDAPStatsProp enum
var AllowedEnumpluginStatsCollectorPerApplicationLDAPStatsPropEnumValues = []EnumpluginStatsCollectorPerApplicationLDAPStatsProp{
	"aggregate-only",
	"per-application-only",
}

func (v *EnumpluginStatsCollectorPerApplicationLDAPStatsProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginStatsCollectorPerApplicationLDAPStatsProp(value)
	for _, existing := range AllowedEnumpluginStatsCollectorPerApplicationLDAPStatsPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginStatsCollectorPerApplicationLDAPStatsProp", value)
}

// NewEnumpluginStatsCollectorPerApplicationLDAPStatsPropFromValue returns a pointer to a valid EnumpluginStatsCollectorPerApplicationLDAPStatsProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginStatsCollectorPerApplicationLDAPStatsPropFromValue(v string) (*EnumpluginStatsCollectorPerApplicationLDAPStatsProp, error) {
	ev := EnumpluginStatsCollectorPerApplicationLDAPStatsProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginStatsCollectorPerApplicationLDAPStatsProp: valid values are %v", v, AllowedEnumpluginStatsCollectorPerApplicationLDAPStatsPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginStatsCollectorPerApplicationLDAPStatsProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginStatsCollectorPerApplicationLDAPStatsPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-stats-collector-perApplicationLDAPStatsProp value
func (v EnumpluginStatsCollectorPerApplicationLDAPStatsProp) Ptr() *EnumpluginStatsCollectorPerApplicationLDAPStatsProp {
	return &v
}

type NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp struct {
	value *EnumpluginStatsCollectorPerApplicationLDAPStatsProp
	isSet bool
}

func (v NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp) Get() *EnumpluginStatsCollectorPerApplicationLDAPStatsProp {
	return v.value
}

func (v *NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp) Set(val *EnumpluginStatsCollectorPerApplicationLDAPStatsProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp(val *EnumpluginStatsCollectorPerApplicationLDAPStatsProp) *NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp {
	return &NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp{value: val, isSet: true}
}

func (v NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginStatsCollectorPerApplicationLDAPStatsProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
