/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcannedResponseBackendSchemaUrn the model 'EnumcannedResponseBackendSchemaUrn'
type EnumcannedResponseBackendSchemaUrn string

// List of Enumcanned-response-backendSchemaUrn
const (
	ENUMCANNEDRESPONSEBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDCANNED_RESPONSE EnumcannedResponseBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:canned-response"
)

// All allowed values of EnumcannedResponseBackendSchemaUrn enum
var AllowedEnumcannedResponseBackendSchemaUrnEnumValues = []EnumcannedResponseBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:canned-response",
}

func (v *EnumcannedResponseBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcannedResponseBackendSchemaUrn(value)
	for _, existing := range AllowedEnumcannedResponseBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcannedResponseBackendSchemaUrn", value)
}

// NewEnumcannedResponseBackendSchemaUrnFromValue returns a pointer to a valid EnumcannedResponseBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcannedResponseBackendSchemaUrnFromValue(v string) (*EnumcannedResponseBackendSchemaUrn, error) {
	ev := EnumcannedResponseBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcannedResponseBackendSchemaUrn: valid values are %v", v, AllowedEnumcannedResponseBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcannedResponseBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcannedResponseBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcanned-response-backendSchemaUrn value
func (v EnumcannedResponseBackendSchemaUrn) Ptr() *EnumcannedResponseBackendSchemaUrn {
	return &v
}

type NullableEnumcannedResponseBackendSchemaUrn struct {
	value *EnumcannedResponseBackendSchemaUrn
	isSet bool
}

func (v NullableEnumcannedResponseBackendSchemaUrn) Get() *EnumcannedResponseBackendSchemaUrn {
	return v.value
}

func (v *NullableEnumcannedResponseBackendSchemaUrn) Set(val *EnumcannedResponseBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcannedResponseBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcannedResponseBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcannedResponseBackendSchemaUrn(val *EnumcannedResponseBackendSchemaUrn) *NullableEnumcannedResponseBackendSchemaUrn {
	return &NullableEnumcannedResponseBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcannedResponseBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcannedResponseBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
