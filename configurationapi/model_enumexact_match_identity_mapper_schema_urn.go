/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexactMatchIdentityMapperSchemaUrn the model 'EnumexactMatchIdentityMapperSchemaUrn'
type EnumexactMatchIdentityMapperSchemaUrn string

// List of Enumexact-match-identity-mapperSchemaUrn
const (
	ENUMEXACTMATCHIDENTITYMAPPERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0IDENTITY_MAPPEREXACT_MATCH EnumexactMatchIdentityMapperSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:identity-mapper:exact-match"
)

// All allowed values of EnumexactMatchIdentityMapperSchemaUrn enum
var AllowedEnumexactMatchIdentityMapperSchemaUrnEnumValues = []EnumexactMatchIdentityMapperSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:identity-mapper:exact-match",
}

func (v *EnumexactMatchIdentityMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexactMatchIdentityMapperSchemaUrn(value)
	for _, existing := range AllowedEnumexactMatchIdentityMapperSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexactMatchIdentityMapperSchemaUrn", value)
}

// NewEnumexactMatchIdentityMapperSchemaUrnFromValue returns a pointer to a valid EnumexactMatchIdentityMapperSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexactMatchIdentityMapperSchemaUrnFromValue(v string) (*EnumexactMatchIdentityMapperSchemaUrn, error) {
	ev := EnumexactMatchIdentityMapperSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexactMatchIdentityMapperSchemaUrn: valid values are %v", v, AllowedEnumexactMatchIdentityMapperSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexactMatchIdentityMapperSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumexactMatchIdentityMapperSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexact-match-identity-mapperSchemaUrn value
func (v EnumexactMatchIdentityMapperSchemaUrn) Ptr() *EnumexactMatchIdentityMapperSchemaUrn {
	return &v
}

type NullableEnumexactMatchIdentityMapperSchemaUrn struct {
	value *EnumexactMatchIdentityMapperSchemaUrn
	isSet bool
}

func (v NullableEnumexactMatchIdentityMapperSchemaUrn) Get() *EnumexactMatchIdentityMapperSchemaUrn {
	return v.value
}

func (v *NullableEnumexactMatchIdentityMapperSchemaUrn) Set(val *EnumexactMatchIdentityMapperSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexactMatchIdentityMapperSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexactMatchIdentityMapperSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexactMatchIdentityMapperSchemaUrn(val *EnumexactMatchIdentityMapperSchemaUrn) *NullableEnumexactMatchIdentityMapperSchemaUrn {
	return &NullableEnumexactMatchIdentityMapperSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumexactMatchIdentityMapperSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexactMatchIdentityMapperSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
