/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumbindAccessTokenValidatorSchemaUrn the model 'EnumbindAccessTokenValidatorSchemaUrn'
type EnumbindAccessTokenValidatorSchemaUrn string

// List of Enumbind-access-token-validatorSchemaUrn
const (
	ENUMBINDACCESSTOKENVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ACCESS_TOKEN_VALIDATORBIND EnumbindAccessTokenValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:access-token-validator:bind"
)

// All allowed values of EnumbindAccessTokenValidatorSchemaUrn enum
var AllowedEnumbindAccessTokenValidatorSchemaUrnEnumValues = []EnumbindAccessTokenValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:access-token-validator:bind",
}

func (v *EnumbindAccessTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbindAccessTokenValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumbindAccessTokenValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbindAccessTokenValidatorSchemaUrn", value)
}

// NewEnumbindAccessTokenValidatorSchemaUrnFromValue returns a pointer to a valid EnumbindAccessTokenValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbindAccessTokenValidatorSchemaUrnFromValue(v string) (*EnumbindAccessTokenValidatorSchemaUrn, error) {
	ev := EnumbindAccessTokenValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbindAccessTokenValidatorSchemaUrn: valid values are %v", v, AllowedEnumbindAccessTokenValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbindAccessTokenValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumbindAccessTokenValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbind-access-token-validatorSchemaUrn value
func (v EnumbindAccessTokenValidatorSchemaUrn) Ptr() *EnumbindAccessTokenValidatorSchemaUrn {
	return &v
}

type NullableEnumbindAccessTokenValidatorSchemaUrn struct {
	value *EnumbindAccessTokenValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumbindAccessTokenValidatorSchemaUrn) Get() *EnumbindAccessTokenValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumbindAccessTokenValidatorSchemaUrn) Set(val *EnumbindAccessTokenValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbindAccessTokenValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbindAccessTokenValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbindAccessTokenValidatorSchemaUrn(val *EnumbindAccessTokenValidatorSchemaUrn) *NullableEnumbindAccessTokenValidatorSchemaUrn {
	return &NullableEnumbindAccessTokenValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumbindAccessTokenValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbindAccessTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
