/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumuploadToS3LogFileRotationListenerSchemaUrn the model 'EnumuploadToS3LogFileRotationListenerSchemaUrn'
type EnumuploadToS3LogFileRotationListenerSchemaUrn string

// List of Enumupload-to-s3-log-file-rotation-listenerSchemaUrn
const (
	ENUMUPLOADTOS3LOGFILEROTATIONLISTENERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_FILE_ROTATION_LISTENERUPLOAD_TO_S3 EnumuploadToS3LogFileRotationListenerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-file-rotation-listener:upload-to-s3"
)

// All allowed values of EnumuploadToS3LogFileRotationListenerSchemaUrn enum
var AllowedEnumuploadToS3LogFileRotationListenerSchemaUrnEnumValues = []EnumuploadToS3LogFileRotationListenerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-file-rotation-listener:upload-to-s3",
}

func (v *EnumuploadToS3LogFileRotationListenerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumuploadToS3LogFileRotationListenerSchemaUrn(value)
	for _, existing := range AllowedEnumuploadToS3LogFileRotationListenerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumuploadToS3LogFileRotationListenerSchemaUrn", value)
}

// NewEnumuploadToS3LogFileRotationListenerSchemaUrnFromValue returns a pointer to a valid EnumuploadToS3LogFileRotationListenerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumuploadToS3LogFileRotationListenerSchemaUrnFromValue(v string) (*EnumuploadToS3LogFileRotationListenerSchemaUrn, error) {
	ev := EnumuploadToS3LogFileRotationListenerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumuploadToS3LogFileRotationListenerSchemaUrn: valid values are %v", v, AllowedEnumuploadToS3LogFileRotationListenerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumuploadToS3LogFileRotationListenerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumuploadToS3LogFileRotationListenerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumupload-to-s3-log-file-rotation-listenerSchemaUrn value
func (v EnumuploadToS3LogFileRotationListenerSchemaUrn) Ptr() *EnumuploadToS3LogFileRotationListenerSchemaUrn {
	return &v
}

type NullableEnumuploadToS3LogFileRotationListenerSchemaUrn struct {
	value *EnumuploadToS3LogFileRotationListenerSchemaUrn
	isSet bool
}

func (v NullableEnumuploadToS3LogFileRotationListenerSchemaUrn) Get() *EnumuploadToS3LogFileRotationListenerSchemaUrn {
	return v.value
}

func (v *NullableEnumuploadToS3LogFileRotationListenerSchemaUrn) Set(val *EnumuploadToS3LogFileRotationListenerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumuploadToS3LogFileRotationListenerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumuploadToS3LogFileRotationListenerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumuploadToS3LogFileRotationListenerSchemaUrn(val *EnumuploadToS3LogFileRotationListenerSchemaUrn) *NullableEnumuploadToS3LogFileRotationListenerSchemaUrn {
	return &NullableEnumuploadToS3LogFileRotationListenerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumuploadToS3LogFileRotationListenerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumuploadToS3LogFileRotationListenerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
