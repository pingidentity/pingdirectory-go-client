/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// Enumaes256PasswordStorageSchemeSchemaUrn the model 'Enumaes256PasswordStorageSchemeSchemaUrn'
type Enumaes256PasswordStorageSchemeSchemaUrn string

// List of Enumaes-256-password-storage-schemeSchemaUrn
const (
	ENUMAES256PASSWORDSTORAGESCHEMESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_STORAGE_SCHEMEAES_256 Enumaes256PasswordStorageSchemeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:aes-256"
)

// All allowed values of Enumaes256PasswordStorageSchemeSchemaUrn enum
var AllowedEnumaes256PasswordStorageSchemeSchemaUrnEnumValues = []Enumaes256PasswordStorageSchemeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-storage-scheme:aes-256",
}

func (v *Enumaes256PasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumaes256PasswordStorageSchemeSchemaUrn(value)
	for _, existing := range AllowedEnumaes256PasswordStorageSchemeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumaes256PasswordStorageSchemeSchemaUrn", value)
}

// NewEnumaes256PasswordStorageSchemeSchemaUrnFromValue returns a pointer to a valid Enumaes256PasswordStorageSchemeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumaes256PasswordStorageSchemeSchemaUrnFromValue(v string) (*Enumaes256PasswordStorageSchemeSchemaUrn, error) {
	ev := Enumaes256PasswordStorageSchemeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumaes256PasswordStorageSchemeSchemaUrn: valid values are %v", v, AllowedEnumaes256PasswordStorageSchemeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumaes256PasswordStorageSchemeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumaes256PasswordStorageSchemeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumaes-256-password-storage-schemeSchemaUrn value
func (v Enumaes256PasswordStorageSchemeSchemaUrn) Ptr() *Enumaes256PasswordStorageSchemeSchemaUrn {
	return &v
}

type NullableEnumaes256PasswordStorageSchemeSchemaUrn struct {
	value *Enumaes256PasswordStorageSchemeSchemaUrn
	isSet bool
}

func (v NullableEnumaes256PasswordStorageSchemeSchemaUrn) Get() *Enumaes256PasswordStorageSchemeSchemaUrn {
	return v.value
}

func (v *NullableEnumaes256PasswordStorageSchemeSchemaUrn) Set(val *Enumaes256PasswordStorageSchemeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumaes256PasswordStorageSchemeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumaes256PasswordStorageSchemeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumaes256PasswordStorageSchemeSchemaUrn(val *Enumaes256PasswordStorageSchemeSchemaUrn) *NullableEnumaes256PasswordStorageSchemeSchemaUrn {
	return &NullableEnumaes256PasswordStorageSchemeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumaes256PasswordStorageSchemeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumaes256PasswordStorageSchemeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
