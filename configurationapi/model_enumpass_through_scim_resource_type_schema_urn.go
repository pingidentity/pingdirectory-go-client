/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpassThroughScimResourceTypeSchemaUrn the model 'EnumpassThroughScimResourceTypeSchemaUrn'
type EnumpassThroughScimResourceTypeSchemaUrn string

// List of Enumpass-through-scim-resource-typeSchemaUrn
const (
	ENUMPASSTHROUGHSCIMRESOURCETYPESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SCIM_RESOURCE_TYPEPASS_THROUGH EnumpassThroughScimResourceTypeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:scim-resource-type:pass-through"
)

// All allowed values of EnumpassThroughScimResourceTypeSchemaUrn enum
var AllowedEnumpassThroughScimResourceTypeSchemaUrnEnumValues = []EnumpassThroughScimResourceTypeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:scim-resource-type:pass-through",
}

func (v *EnumpassThroughScimResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpassThroughScimResourceTypeSchemaUrn(value)
	for _, existing := range AllowedEnumpassThroughScimResourceTypeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpassThroughScimResourceTypeSchemaUrn", value)
}

// NewEnumpassThroughScimResourceTypeSchemaUrnFromValue returns a pointer to a valid EnumpassThroughScimResourceTypeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpassThroughScimResourceTypeSchemaUrnFromValue(v string) (*EnumpassThroughScimResourceTypeSchemaUrn, error) {
	ev := EnumpassThroughScimResourceTypeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpassThroughScimResourceTypeSchemaUrn: valid values are %v", v, AllowedEnumpassThroughScimResourceTypeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpassThroughScimResourceTypeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpassThroughScimResourceTypeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpass-through-scim-resource-typeSchemaUrn value
func (v EnumpassThroughScimResourceTypeSchemaUrn) Ptr() *EnumpassThroughScimResourceTypeSchemaUrn {
	return &v
}

type NullableEnumpassThroughScimResourceTypeSchemaUrn struct {
	value *EnumpassThroughScimResourceTypeSchemaUrn
	isSet bool
}

func (v NullableEnumpassThroughScimResourceTypeSchemaUrn) Get() *EnumpassThroughScimResourceTypeSchemaUrn {
	return v.value
}

func (v *NullableEnumpassThroughScimResourceTypeSchemaUrn) Set(val *EnumpassThroughScimResourceTypeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpassThroughScimResourceTypeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpassThroughScimResourceTypeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpassThroughScimResourceTypeSchemaUrn(val *EnumpassThroughScimResourceTypeSchemaUrn) *NullableEnumpassThroughScimResourceTypeSchemaUrn {
	return &NullableEnumpassThroughScimResourceTypeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpassThroughScimResourceTypeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpassThroughScimResourceTypeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
