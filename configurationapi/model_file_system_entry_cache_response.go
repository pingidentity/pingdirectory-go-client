/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the FileSystemEntryCacheResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSystemEntryCacheResponse{}

// FileSystemEntryCacheResponse struct for FileSystemEntryCacheResponse
type FileSystemEntryCacheResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas                                       []EnumfileSystemEntryCacheSchemaUrn                `json:"schemas"`
	// Name of the Entry Cache
	Id string `json:"id"`
	// The maximum size of the entry cache in bytes.
	MaxMemorySize *string `json:"maxMemorySize,omitempty"`
	// The maximum number of entries allowed in the cache.
	MaxEntries *int64                       `json:"maxEntries,omitempty"`
	CacheType  *EnumentryCacheCacheTypeProp `json:"cacheType,omitempty"`
	// Specifies the directory in which the cache database files should be stored.
	CacheDirectory *string `json:"cacheDirectory,omitempty"`
	// Specifies whether the cache should persist across restarts.
	PersistentCache *bool `json:"persistentCache,omitempty"`
	// Indicates whether the cache should use a compact form when encoding cache entries by compressing the attribute descriptions and object class sets.
	CompactEncoding *bool `json:"compactEncoding,omitempty"`
	// Specifies the maximum memory usage for the internal JE cache as a percentage of the total JVM memory.
	DbCachePercent *int64 `json:"dbCachePercent,omitempty"`
	// Specifies the maximum JVM memory usage in bytes for the internal JE cache.
	DbCacheSize *string `json:"dbCacheSize,omitempty"`
	// Specifies the environment properties for the Berkeley DB Java Edition database providing the backend for this entry cache.
	JeProperty []string `json:"jeProperty,omitempty"`
	// The set of filters that define the entries that should be included in the cache.
	IncludeFilter []string `json:"includeFilter,omitempty"`
	// The set of filters that define the entries that should be excluded from the cache.
	ExcludeFilter []string `json:"excludeFilter,omitempty"`
	// A description for this Entry Cache
	Description *string `json:"description,omitempty"`
	// Indicates whether the Entry Cache is enabled.
	Enabled bool `json:"enabled"`
	// Specifies the cache level in the cache order if more than one instance of the cache is configured.
	CacheLevel int64 `json:"cacheLevel"`
	// Indicates whether the entry cache should be updated with entries that have been returned to the client during the course of processing an unindexed search.
	CacheUnindexedSearchResults *bool `json:"cacheUnindexedSearchResults,omitempty"`
}

// NewFileSystemEntryCacheResponse instantiates a new FileSystemEntryCacheResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSystemEntryCacheResponse(schemas []EnumfileSystemEntryCacheSchemaUrn, id string, enabled bool, cacheLevel int64) *FileSystemEntryCacheResponse {
	this := FileSystemEntryCacheResponse{}
	this.Schemas = schemas
	this.Id = id
	this.Enabled = enabled
	this.CacheLevel = cacheLevel
	return &this
}

// NewFileSystemEntryCacheResponseWithDefaults instantiates a new FileSystemEntryCacheResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSystemEntryCacheResponseWithDefaults() *FileSystemEntryCacheResponse {
	this := FileSystemEntryCacheResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *FileSystemEntryCacheResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *FileSystemEntryCacheResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value
func (o *FileSystemEntryCacheResponse) GetSchemas() []EnumfileSystemEntryCacheSchemaUrn {
	if o == nil {
		var ret []EnumfileSystemEntryCacheSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetSchemasOk() ([]EnumfileSystemEntryCacheSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *FileSystemEntryCacheResponse) SetSchemas(v []EnumfileSystemEntryCacheSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *FileSystemEntryCacheResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FileSystemEntryCacheResponse) SetId(v string) {
	o.Id = v
}

// GetMaxMemorySize returns the MaxMemorySize field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetMaxMemorySize() string {
	if o == nil || IsNil(o.MaxMemorySize) {
		var ret string
		return ret
	}
	return *o.MaxMemorySize
}

// GetMaxMemorySizeOk returns a tuple with the MaxMemorySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetMaxMemorySizeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxMemorySize) {
		return nil, false
	}
	return o.MaxMemorySize, true
}

// HasMaxMemorySize returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasMaxMemorySize() bool {
	if o != nil && !IsNil(o.MaxMemorySize) {
		return true
	}

	return false
}

// SetMaxMemorySize gets a reference to the given string and assigns it to the MaxMemorySize field.
func (o *FileSystemEntryCacheResponse) SetMaxMemorySize(v string) {
	o.MaxMemorySize = &v
}

// GetMaxEntries returns the MaxEntries field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetMaxEntries() int64 {
	if o == nil || IsNil(o.MaxEntries) {
		var ret int64
		return ret
	}
	return *o.MaxEntries
}

// GetMaxEntriesOk returns a tuple with the MaxEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetMaxEntriesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxEntries) {
		return nil, false
	}
	return o.MaxEntries, true
}

// HasMaxEntries returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasMaxEntries() bool {
	if o != nil && !IsNil(o.MaxEntries) {
		return true
	}

	return false
}

// SetMaxEntries gets a reference to the given int64 and assigns it to the MaxEntries field.
func (o *FileSystemEntryCacheResponse) SetMaxEntries(v int64) {
	o.MaxEntries = &v
}

// GetCacheType returns the CacheType field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetCacheType() EnumentryCacheCacheTypeProp {
	if o == nil || IsNil(o.CacheType) {
		var ret EnumentryCacheCacheTypeProp
		return ret
	}
	return *o.CacheType
}

// GetCacheTypeOk returns a tuple with the CacheType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetCacheTypeOk() (*EnumentryCacheCacheTypeProp, bool) {
	if o == nil || IsNil(o.CacheType) {
		return nil, false
	}
	return o.CacheType, true
}

// HasCacheType returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasCacheType() bool {
	if o != nil && !IsNil(o.CacheType) {
		return true
	}

	return false
}

// SetCacheType gets a reference to the given EnumentryCacheCacheTypeProp and assigns it to the CacheType field.
func (o *FileSystemEntryCacheResponse) SetCacheType(v EnumentryCacheCacheTypeProp) {
	o.CacheType = &v
}

// GetCacheDirectory returns the CacheDirectory field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetCacheDirectory() string {
	if o == nil || IsNil(o.CacheDirectory) {
		var ret string
		return ret
	}
	return *o.CacheDirectory
}

// GetCacheDirectoryOk returns a tuple with the CacheDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetCacheDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.CacheDirectory) {
		return nil, false
	}
	return o.CacheDirectory, true
}

// HasCacheDirectory returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasCacheDirectory() bool {
	if o != nil && !IsNil(o.CacheDirectory) {
		return true
	}

	return false
}

// SetCacheDirectory gets a reference to the given string and assigns it to the CacheDirectory field.
func (o *FileSystemEntryCacheResponse) SetCacheDirectory(v string) {
	o.CacheDirectory = &v
}

// GetPersistentCache returns the PersistentCache field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetPersistentCache() bool {
	if o == nil || IsNil(o.PersistentCache) {
		var ret bool
		return ret
	}
	return *o.PersistentCache
}

// GetPersistentCacheOk returns a tuple with the PersistentCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetPersistentCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistentCache) {
		return nil, false
	}
	return o.PersistentCache, true
}

// HasPersistentCache returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasPersistentCache() bool {
	if o != nil && !IsNil(o.PersistentCache) {
		return true
	}

	return false
}

// SetPersistentCache gets a reference to the given bool and assigns it to the PersistentCache field.
func (o *FileSystemEntryCacheResponse) SetPersistentCache(v bool) {
	o.PersistentCache = &v
}

// GetCompactEncoding returns the CompactEncoding field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetCompactEncoding() bool {
	if o == nil || IsNil(o.CompactEncoding) {
		var ret bool
		return ret
	}
	return *o.CompactEncoding
}

// GetCompactEncodingOk returns a tuple with the CompactEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetCompactEncodingOk() (*bool, bool) {
	if o == nil || IsNil(o.CompactEncoding) {
		return nil, false
	}
	return o.CompactEncoding, true
}

// HasCompactEncoding returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasCompactEncoding() bool {
	if o != nil && !IsNil(o.CompactEncoding) {
		return true
	}

	return false
}

// SetCompactEncoding gets a reference to the given bool and assigns it to the CompactEncoding field.
func (o *FileSystemEntryCacheResponse) SetCompactEncoding(v bool) {
	o.CompactEncoding = &v
}

// GetDbCachePercent returns the DbCachePercent field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetDbCachePercent() int64 {
	if o == nil || IsNil(o.DbCachePercent) {
		var ret int64
		return ret
	}
	return *o.DbCachePercent
}

// GetDbCachePercentOk returns a tuple with the DbCachePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetDbCachePercentOk() (*int64, bool) {
	if o == nil || IsNil(o.DbCachePercent) {
		return nil, false
	}
	return o.DbCachePercent, true
}

// HasDbCachePercent returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasDbCachePercent() bool {
	if o != nil && !IsNil(o.DbCachePercent) {
		return true
	}

	return false
}

// SetDbCachePercent gets a reference to the given int64 and assigns it to the DbCachePercent field.
func (o *FileSystemEntryCacheResponse) SetDbCachePercent(v int64) {
	o.DbCachePercent = &v
}

// GetDbCacheSize returns the DbCacheSize field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetDbCacheSize() string {
	if o == nil || IsNil(o.DbCacheSize) {
		var ret string
		return ret
	}
	return *o.DbCacheSize
}

// GetDbCacheSizeOk returns a tuple with the DbCacheSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetDbCacheSizeOk() (*string, bool) {
	if o == nil || IsNil(o.DbCacheSize) {
		return nil, false
	}
	return o.DbCacheSize, true
}

// HasDbCacheSize returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasDbCacheSize() bool {
	if o != nil && !IsNil(o.DbCacheSize) {
		return true
	}

	return false
}

// SetDbCacheSize gets a reference to the given string and assigns it to the DbCacheSize field.
func (o *FileSystemEntryCacheResponse) SetDbCacheSize(v string) {
	o.DbCacheSize = &v
}

// GetJeProperty returns the JeProperty field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetJeProperty() []string {
	if o == nil || IsNil(o.JeProperty) {
		var ret []string
		return ret
	}
	return o.JeProperty
}

// GetJePropertyOk returns a tuple with the JeProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetJePropertyOk() ([]string, bool) {
	if o == nil || IsNil(o.JeProperty) {
		return nil, false
	}
	return o.JeProperty, true
}

// HasJeProperty returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasJeProperty() bool {
	if o != nil && !IsNil(o.JeProperty) {
		return true
	}

	return false
}

// SetJeProperty gets a reference to the given []string and assigns it to the JeProperty field.
func (o *FileSystemEntryCacheResponse) SetJeProperty(v []string) {
	o.JeProperty = v
}

// GetIncludeFilter returns the IncludeFilter field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetIncludeFilter() []string {
	if o == nil || IsNil(o.IncludeFilter) {
		var ret []string
		return ret
	}
	return o.IncludeFilter
}

// GetIncludeFilterOk returns a tuple with the IncludeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetIncludeFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeFilter) {
		return nil, false
	}
	return o.IncludeFilter, true
}

// HasIncludeFilter returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasIncludeFilter() bool {
	if o != nil && !IsNil(o.IncludeFilter) {
		return true
	}

	return false
}

// SetIncludeFilter gets a reference to the given []string and assigns it to the IncludeFilter field.
func (o *FileSystemEntryCacheResponse) SetIncludeFilter(v []string) {
	o.IncludeFilter = v
}

// GetExcludeFilter returns the ExcludeFilter field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetExcludeFilter() []string {
	if o == nil || IsNil(o.ExcludeFilter) {
		var ret []string
		return ret
	}
	return o.ExcludeFilter
}

// GetExcludeFilterOk returns a tuple with the ExcludeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetExcludeFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeFilter) {
		return nil, false
	}
	return o.ExcludeFilter, true
}

// HasExcludeFilter returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasExcludeFilter() bool {
	if o != nil && !IsNil(o.ExcludeFilter) {
		return true
	}

	return false
}

// SetExcludeFilter gets a reference to the given []string and assigns it to the ExcludeFilter field.
func (o *FileSystemEntryCacheResponse) SetExcludeFilter(v []string) {
	o.ExcludeFilter = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FileSystemEntryCacheResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *FileSystemEntryCacheResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FileSystemEntryCacheResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetCacheLevel returns the CacheLevel field value
func (o *FileSystemEntryCacheResponse) GetCacheLevel() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CacheLevel
}

// GetCacheLevelOk returns a tuple with the CacheLevel field value
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetCacheLevelOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CacheLevel, true
}

// SetCacheLevel sets field value
func (o *FileSystemEntryCacheResponse) SetCacheLevel(v int64) {
	o.CacheLevel = v
}

// GetCacheUnindexedSearchResults returns the CacheUnindexedSearchResults field value if set, zero value otherwise.
func (o *FileSystemEntryCacheResponse) GetCacheUnindexedSearchResults() bool {
	if o == nil || IsNil(o.CacheUnindexedSearchResults) {
		var ret bool
		return ret
	}
	return *o.CacheUnindexedSearchResults
}

// GetCacheUnindexedSearchResultsOk returns a tuple with the CacheUnindexedSearchResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSystemEntryCacheResponse) GetCacheUnindexedSearchResultsOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheUnindexedSearchResults) {
		return nil, false
	}
	return o.CacheUnindexedSearchResults, true
}

// HasCacheUnindexedSearchResults returns a boolean if a field has been set.
func (o *FileSystemEntryCacheResponse) HasCacheUnindexedSearchResults() bool {
	if o != nil && !IsNil(o.CacheUnindexedSearchResults) {
		return true
	}

	return false
}

// SetCacheUnindexedSearchResults gets a reference to the given bool and assigns it to the CacheUnindexedSearchResults field.
func (o *FileSystemEntryCacheResponse) SetCacheUnindexedSearchResults(v bool) {
	o.CacheUnindexedSearchResults = &v
}

func (o FileSystemEntryCacheResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSystemEntryCacheResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	toSerialize["schemas"] = o.Schemas
	toSerialize["id"] = o.Id
	if !IsNil(o.MaxMemorySize) {
		toSerialize["maxMemorySize"] = o.MaxMemorySize
	}
	if !IsNil(o.MaxEntries) {
		toSerialize["maxEntries"] = o.MaxEntries
	}
	if !IsNil(o.CacheType) {
		toSerialize["cacheType"] = o.CacheType
	}
	if !IsNil(o.CacheDirectory) {
		toSerialize["cacheDirectory"] = o.CacheDirectory
	}
	if !IsNil(o.PersistentCache) {
		toSerialize["persistentCache"] = o.PersistentCache
	}
	if !IsNil(o.CompactEncoding) {
		toSerialize["compactEncoding"] = o.CompactEncoding
	}
	if !IsNil(o.DbCachePercent) {
		toSerialize["dbCachePercent"] = o.DbCachePercent
	}
	if !IsNil(o.DbCacheSize) {
		toSerialize["dbCacheSize"] = o.DbCacheSize
	}
	if !IsNil(o.JeProperty) {
		toSerialize["jeProperty"] = o.JeProperty
	}
	if !IsNil(o.IncludeFilter) {
		toSerialize["includeFilter"] = o.IncludeFilter
	}
	if !IsNil(o.ExcludeFilter) {
		toSerialize["excludeFilter"] = o.ExcludeFilter
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["cacheLevel"] = o.CacheLevel
	if !IsNil(o.CacheUnindexedSearchResults) {
		toSerialize["cacheUnindexedSearchResults"] = o.CacheUnindexedSearchResults
	}
	return toSerialize, nil
}

type NullableFileSystemEntryCacheResponse struct {
	value *FileSystemEntryCacheResponse
	isSet bool
}

func (v NullableFileSystemEntryCacheResponse) Get() *FileSystemEntryCacheResponse {
	return v.value
}

func (v *NullableFileSystemEntryCacheResponse) Set(val *FileSystemEntryCacheResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSystemEntryCacheResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSystemEntryCacheResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSystemEntryCacheResponse(val *FileSystemEntryCacheResponse) *NullableFileSystemEntryCacheResponse {
	return &NullableFileSystemEntryCacheResponse{value: val, isSet: true}
}

func (v NullableFileSystemEntryCacheResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSystemEntryCacheResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
