/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsimpleToExternalBindPluginSchemaUrn the model 'EnumsimpleToExternalBindPluginSchemaUrn'
type EnumsimpleToExternalBindPluginSchemaUrn string

// List of Enumsimple-to-external-bind-pluginSchemaUrn
const (
	ENUMSIMPLETOEXTERNALBINDPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINSIMPLE_TO_EXTERNAL_BIND EnumsimpleToExternalBindPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:simple-to-external-bind"
)

// All allowed values of EnumsimpleToExternalBindPluginSchemaUrn enum
var AllowedEnumsimpleToExternalBindPluginSchemaUrnEnumValues = []EnumsimpleToExternalBindPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:simple-to-external-bind",
}

func (v *EnumsimpleToExternalBindPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsimpleToExternalBindPluginSchemaUrn(value)
	for _, existing := range AllowedEnumsimpleToExternalBindPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsimpleToExternalBindPluginSchemaUrn", value)
}

// NewEnumsimpleToExternalBindPluginSchemaUrnFromValue returns a pointer to a valid EnumsimpleToExternalBindPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsimpleToExternalBindPluginSchemaUrnFromValue(v string) (*EnumsimpleToExternalBindPluginSchemaUrn, error) {
	ev := EnumsimpleToExternalBindPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsimpleToExternalBindPluginSchemaUrn: valid values are %v", v, AllowedEnumsimpleToExternalBindPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsimpleToExternalBindPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsimpleToExternalBindPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsimple-to-external-bind-pluginSchemaUrn value
func (v EnumsimpleToExternalBindPluginSchemaUrn) Ptr() *EnumsimpleToExternalBindPluginSchemaUrn {
	return &v
}

type NullableEnumsimpleToExternalBindPluginSchemaUrn struct {
	value *EnumsimpleToExternalBindPluginSchemaUrn
	isSet bool
}

func (v NullableEnumsimpleToExternalBindPluginSchemaUrn) Get() *EnumsimpleToExternalBindPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumsimpleToExternalBindPluginSchemaUrn) Set(val *EnumsimpleToExternalBindPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsimpleToExternalBindPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsimpleToExternalBindPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsimpleToExternalBindPluginSchemaUrn(val *EnumsimpleToExternalBindPluginSchemaUrn) *NullableEnumsimpleToExternalBindPluginSchemaUrn {
	return &NullableEnumsimpleToExternalBindPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsimpleToExternalBindPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsimpleToExternalBindPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
