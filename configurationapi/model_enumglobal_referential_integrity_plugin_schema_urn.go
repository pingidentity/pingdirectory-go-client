/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumglobalReferentialIntegrityPluginSchemaUrn the model 'EnumglobalReferentialIntegrityPluginSchemaUrn'
type EnumglobalReferentialIntegrityPluginSchemaUrn string

// List of Enumglobal-referential-integrity-pluginSchemaUrn
const (
	ENUMGLOBALREFERENTIALINTEGRITYPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINGLOBAL_REFERENTIAL_INTEGRITY EnumglobalReferentialIntegrityPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:global-referential-integrity"
)

// All allowed values of EnumglobalReferentialIntegrityPluginSchemaUrn enum
var AllowedEnumglobalReferentialIntegrityPluginSchemaUrnEnumValues = []EnumglobalReferentialIntegrityPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:global-referential-integrity",
}

func (v *EnumglobalReferentialIntegrityPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumglobalReferentialIntegrityPluginSchemaUrn(value)
	for _, existing := range AllowedEnumglobalReferentialIntegrityPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumglobalReferentialIntegrityPluginSchemaUrn", value)
}

// NewEnumglobalReferentialIntegrityPluginSchemaUrnFromValue returns a pointer to a valid EnumglobalReferentialIntegrityPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumglobalReferentialIntegrityPluginSchemaUrnFromValue(v string) (*EnumglobalReferentialIntegrityPluginSchemaUrn, error) {
	ev := EnumglobalReferentialIntegrityPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumglobalReferentialIntegrityPluginSchemaUrn: valid values are %v", v, AllowedEnumglobalReferentialIntegrityPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumglobalReferentialIntegrityPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumglobalReferentialIntegrityPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumglobal-referential-integrity-pluginSchemaUrn value
func (v EnumglobalReferentialIntegrityPluginSchemaUrn) Ptr() *EnumglobalReferentialIntegrityPluginSchemaUrn {
	return &v
}

type NullableEnumglobalReferentialIntegrityPluginSchemaUrn struct {
	value *EnumglobalReferentialIntegrityPluginSchemaUrn
	isSet bool
}

func (v NullableEnumglobalReferentialIntegrityPluginSchemaUrn) Get() *EnumglobalReferentialIntegrityPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumglobalReferentialIntegrityPluginSchemaUrn) Set(val *EnumglobalReferentialIntegrityPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumglobalReferentialIntegrityPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumglobalReferentialIntegrityPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumglobalReferentialIntegrityPluginSchemaUrn(val *EnumglobalReferentialIntegrityPluginSchemaUrn) *NullableEnumglobalReferentialIntegrityPluginSchemaUrn {
	return &NullableEnumglobalReferentialIntegrityPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumglobalReferentialIntegrityPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumglobalReferentialIntegrityPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
