/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonLogFieldSyntaxSchemaUrn the model 'EnumjsonLogFieldSyntaxSchemaUrn'
type EnumjsonLogFieldSyntaxSchemaUrn string

// List of Enumjson-log-field-syntaxSchemaUrn
const (
	ENUMJSONLOGFIELDSYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_FIELD_SYNTAXJSON EnumjsonLogFieldSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-field-syntax:json"
)

// All allowed values of EnumjsonLogFieldSyntaxSchemaUrn enum
var AllowedEnumjsonLogFieldSyntaxSchemaUrnEnumValues = []EnumjsonLogFieldSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-field-syntax:json",
}

func (v *EnumjsonLogFieldSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonLogFieldSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumjsonLogFieldSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonLogFieldSyntaxSchemaUrn", value)
}

// NewEnumjsonLogFieldSyntaxSchemaUrnFromValue returns a pointer to a valid EnumjsonLogFieldSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonLogFieldSyntaxSchemaUrnFromValue(v string) (*EnumjsonLogFieldSyntaxSchemaUrn, error) {
	ev := EnumjsonLogFieldSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonLogFieldSyntaxSchemaUrn: valid values are %v", v, AllowedEnumjsonLogFieldSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonLogFieldSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjsonLogFieldSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-log-field-syntaxSchemaUrn value
func (v EnumjsonLogFieldSyntaxSchemaUrn) Ptr() *EnumjsonLogFieldSyntaxSchemaUrn {
	return &v
}

type NullableEnumjsonLogFieldSyntaxSchemaUrn struct {
	value *EnumjsonLogFieldSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumjsonLogFieldSyntaxSchemaUrn) Get() *EnumjsonLogFieldSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumjsonLogFieldSyntaxSchemaUrn) Set(val *EnumjsonLogFieldSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonLogFieldSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonLogFieldSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonLogFieldSyntaxSchemaUrn(val *EnumjsonLogFieldSyntaxSchemaUrn) *NullableEnumjsonLogFieldSyntaxSchemaUrn {
	return &NullableEnumjsonLogFieldSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjsonLogFieldSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonLogFieldSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
