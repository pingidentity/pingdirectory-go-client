/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumgetConfigurationExtendedOperationHandlerSchemaUrn the model 'EnumgetConfigurationExtendedOperationHandlerSchemaUrn'
type EnumgetConfigurationExtendedOperationHandlerSchemaUrn string

// List of Enumget-configuration-extended-operation-handlerSchemaUrn
const (
	ENUMGETCONFIGURATIONEXTENDEDOPERATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERGET_CONFIGURATION EnumgetConfigurationExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:get-configuration"
)

// All allowed values of EnumgetConfigurationExtendedOperationHandlerSchemaUrn enum
var AllowedEnumgetConfigurationExtendedOperationHandlerSchemaUrnEnumValues = []EnumgetConfigurationExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:get-configuration",
}

func (v *EnumgetConfigurationExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgetConfigurationExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumgetConfigurationExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgetConfigurationExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumgetConfigurationExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumgetConfigurationExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgetConfigurationExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumgetConfigurationExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumgetConfigurationExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgetConfigurationExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumgetConfigurationExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgetConfigurationExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgetConfigurationExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumget-configuration-extended-operation-handlerSchemaUrn value
func (v EnumgetConfigurationExtendedOperationHandlerSchemaUrn) Ptr() *EnumgetConfigurationExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn struct {
	value *EnumgetConfigurationExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn) Get() *EnumgetConfigurationExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn) Set(val *EnumgetConfigurationExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn(val *EnumgetConfigurationExtendedOperationHandlerSchemaUrn) *NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn {
	return &NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgetConfigurationExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
