/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// RecurringTaskApiService RecurringTaskApi service
type RecurringTaskApiService service

type ApiAddRecurringTaskRequest struct {
	ctx                     context.Context
	ApiService              *RecurringTaskApiService
	addRecurringTaskRequest *AddRecurringTaskRequest
}

// Create a new Recurring Task in the config
func (r ApiAddRecurringTaskRequest) AddRecurringTaskRequest(addRecurringTaskRequest AddRecurringTaskRequest) ApiAddRecurringTaskRequest {
	r.addRecurringTaskRequest = &addRecurringTaskRequest
	return r
}

func (r ApiAddRecurringTaskRequest) Execute() (*AddRecurringTask200Response, *http.Response, error) {
	return r.ApiService.AddRecurringTaskExecute(r)
}

/*
AddRecurringTask Add a new Recurring Task to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddRecurringTaskRequest
*/
func (a *RecurringTaskApiService) AddRecurringTask(ctx context.Context) ApiAddRecurringTaskRequest {
	return ApiAddRecurringTaskRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddRecurringTask200Response
func (a *RecurringTaskApiService) AddRecurringTaskExecute(r ApiAddRecurringTaskRequest) (*AddRecurringTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddRecurringTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskApiService.AddRecurringTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addRecurringTaskRequest == nil {
		return localVarReturnValue, nil, reportError("addRecurringTaskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addRecurringTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRecurringTaskRequest struct {
	ctx               context.Context
	ApiService        *RecurringTaskApiService
	recurringTaskName string
}

func (r ApiDeleteRecurringTaskRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRecurringTaskExecute(r)
}

/*
DeleteRecurringTask Delete a Recurring Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param recurringTaskName Name of the Recurring Task
	@return ApiDeleteRecurringTaskRequest
*/
func (a *RecurringTaskApiService) DeleteRecurringTask(ctx context.Context, recurringTaskName string) ApiDeleteRecurringTaskRequest {
	return ApiDeleteRecurringTaskRequest{
		ApiService:        a,
		ctx:               ctx,
		recurringTaskName: recurringTaskName,
	}
}

// Execute executes the request
func (a *RecurringTaskApiService) DeleteRecurringTaskExecute(r ApiDeleteRecurringTaskRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskApiService.DeleteRecurringTask")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-tasks/{recurring-task-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"recurring-task-name"+"}", url.PathEscape(parameterToString(r.recurringTaskName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRecurringTaskRequest struct {
	ctx               context.Context
	ApiService        *RecurringTaskApiService
	recurringTaskName string
}

func (r ApiGetRecurringTaskRequest) Execute() (*AddRecurringTask200Response, *http.Response, error) {
	return r.ApiService.GetRecurringTaskExecute(r)
}

/*
GetRecurringTask Returns a single Recurring Task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param recurringTaskName Name of the Recurring Task
	@return ApiGetRecurringTaskRequest
*/
func (a *RecurringTaskApiService) GetRecurringTask(ctx context.Context, recurringTaskName string) ApiGetRecurringTaskRequest {
	return ApiGetRecurringTaskRequest{
		ApiService:        a,
		ctx:               ctx,
		recurringTaskName: recurringTaskName,
	}
}

// Execute executes the request
//
//	@return AddRecurringTask200Response
func (a *RecurringTaskApiService) GetRecurringTaskExecute(r ApiGetRecurringTaskRequest) (*AddRecurringTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddRecurringTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskApiService.GetRecurringTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-tasks/{recurring-task-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"recurring-task-name"+"}", url.PathEscape(parameterToString(r.recurringTaskName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRecurringTaskRequest struct {
	ctx               context.Context
	ApiService        *RecurringTaskApiService
	recurringTaskName string
	updateRequest     *UpdateRequest
}

// Update an existing Recurring Task
func (r ApiUpdateRecurringTaskRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateRecurringTaskRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateRecurringTaskRequest) Execute() (*AddRecurringTask200Response, *http.Response, error) {
	return r.ApiService.UpdateRecurringTaskExecute(r)
}

/*
UpdateRecurringTask Update an existing Recurring Task by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param recurringTaskName Name of the Recurring Task
	@return ApiUpdateRecurringTaskRequest
*/
func (a *RecurringTaskApiService) UpdateRecurringTask(ctx context.Context, recurringTaskName string) ApiUpdateRecurringTaskRequest {
	return ApiUpdateRecurringTaskRequest{
		ApiService:        a,
		ctx:               ctx,
		recurringTaskName: recurringTaskName,
	}
}

// Execute executes the request
//
//	@return AddRecurringTask200Response
func (a *RecurringTaskApiService) UpdateRecurringTaskExecute(r ApiUpdateRecurringTaskRequest) (*AddRecurringTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddRecurringTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskApiService.UpdateRecurringTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-tasks/{recurring-task-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"recurring-task-name"+"}", url.PathEscape(parameterToString(r.recurringTaskName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
