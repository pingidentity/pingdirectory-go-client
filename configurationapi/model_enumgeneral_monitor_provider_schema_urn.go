/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumgeneralMonitorProviderSchemaUrn the model 'EnumgeneralMonitorProviderSchemaUrn'
type EnumgeneralMonitorProviderSchemaUrn string

// List of Enumgeneral-monitor-providerSchemaUrn
const (
	ENUMGENERALMONITORPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0MONITOR_PROVIDERGENERAL EnumgeneralMonitorProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:monitor-provider:general"
)

// All allowed values of EnumgeneralMonitorProviderSchemaUrn enum
var AllowedEnumgeneralMonitorProviderSchemaUrnEnumValues = []EnumgeneralMonitorProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:monitor-provider:general",
}

func (v *EnumgeneralMonitorProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgeneralMonitorProviderSchemaUrn(value)
	for _, existing := range AllowedEnumgeneralMonitorProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgeneralMonitorProviderSchemaUrn", value)
}

// NewEnumgeneralMonitorProviderSchemaUrnFromValue returns a pointer to a valid EnumgeneralMonitorProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgeneralMonitorProviderSchemaUrnFromValue(v string) (*EnumgeneralMonitorProviderSchemaUrn, error) {
	ev := EnumgeneralMonitorProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgeneralMonitorProviderSchemaUrn: valid values are %v", v, AllowedEnumgeneralMonitorProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgeneralMonitorProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgeneralMonitorProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgeneral-monitor-providerSchemaUrn value
func (v EnumgeneralMonitorProviderSchemaUrn) Ptr() *EnumgeneralMonitorProviderSchemaUrn {
	return &v
}

type NullableEnumgeneralMonitorProviderSchemaUrn struct {
	value *EnumgeneralMonitorProviderSchemaUrn
	isSet bool
}

func (v NullableEnumgeneralMonitorProviderSchemaUrn) Get() *EnumgeneralMonitorProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumgeneralMonitorProviderSchemaUrn) Set(val *EnumgeneralMonitorProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgeneralMonitorProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgeneralMonitorProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgeneralMonitorProviderSchemaUrn(val *EnumgeneralMonitorProviderSchemaUrn) *NullableEnumgeneralMonitorProviderSchemaUrn {
	return &NullableEnumgeneralMonitorProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgeneralMonitorProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgeneralMonitorProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
