/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationSynchronizationProviderSchemaUrn the model 'EnumreplicationSynchronizationProviderSchemaUrn'
type EnumreplicationSynchronizationProviderSchemaUrn string

// List of Enumreplication-synchronization-providerSchemaUrn
const (
	ENUMREPLICATIONSYNCHRONIZATIONPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SYNCHRONIZATION_PROVIDERREPLICATION EnumreplicationSynchronizationProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:synchronization-provider:replication"
)

// All allowed values of EnumreplicationSynchronizationProviderSchemaUrn enum
var AllowedEnumreplicationSynchronizationProviderSchemaUrnEnumValues = []EnumreplicationSynchronizationProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:synchronization-provider:replication",
}

func (v *EnumreplicationSynchronizationProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationSynchronizationProviderSchemaUrn(value)
	for _, existing := range AllowedEnumreplicationSynchronizationProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationSynchronizationProviderSchemaUrn", value)
}

// NewEnumreplicationSynchronizationProviderSchemaUrnFromValue returns a pointer to a valid EnumreplicationSynchronizationProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationSynchronizationProviderSchemaUrnFromValue(v string) (*EnumreplicationSynchronizationProviderSchemaUrn, error) {
	ev := EnumreplicationSynchronizationProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationSynchronizationProviderSchemaUrn: valid values are %v", v, AllowedEnumreplicationSynchronizationProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationSynchronizationProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumreplicationSynchronizationProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-synchronization-providerSchemaUrn value
func (v EnumreplicationSynchronizationProviderSchemaUrn) Ptr() *EnumreplicationSynchronizationProviderSchemaUrn {
	return &v
}

type NullableEnumreplicationSynchronizationProviderSchemaUrn struct {
	value *EnumreplicationSynchronizationProviderSchemaUrn
	isSet bool
}

func (v NullableEnumreplicationSynchronizationProviderSchemaUrn) Get() *EnumreplicationSynchronizationProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumreplicationSynchronizationProviderSchemaUrn) Set(val *EnumreplicationSynchronizationProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationSynchronizationProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationSynchronizationProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationSynchronizationProviderSchemaUrn(val *EnumreplicationSynchronizationProviderSchemaUrn) *NullableEnumreplicationSynchronizationProviderSchemaUrn {
	return &NullableEnumreplicationSynchronizationProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumreplicationSynchronizationProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationSynchronizationProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
