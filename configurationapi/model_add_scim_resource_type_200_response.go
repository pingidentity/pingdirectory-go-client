/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddScimResourceType200Response - struct for AddScimResourceType200Response
type AddScimResourceType200Response struct {
	LdapMappingScimResourceTypeResponse     *LdapMappingScimResourceTypeResponse
	LdapPassThroughScimResourceTypeResponse *LdapPassThroughScimResourceTypeResponse
}

// LdapMappingScimResourceTypeResponseAsAddScimResourceType200Response is a convenience function that returns LdapMappingScimResourceTypeResponse wrapped in AddScimResourceType200Response
func LdapMappingScimResourceTypeResponseAsAddScimResourceType200Response(v *LdapMappingScimResourceTypeResponse) AddScimResourceType200Response {
	return AddScimResourceType200Response{
		LdapMappingScimResourceTypeResponse: v,
	}
}

// LdapPassThroughScimResourceTypeResponseAsAddScimResourceType200Response is a convenience function that returns LdapPassThroughScimResourceTypeResponse wrapped in AddScimResourceType200Response
func LdapPassThroughScimResourceTypeResponseAsAddScimResourceType200Response(v *LdapPassThroughScimResourceTypeResponse) AddScimResourceType200Response {
	return AddScimResourceType200Response{
		LdapPassThroughScimResourceTypeResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddScimResourceType200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LdapMappingScimResourceTypeResponse
	err = newStrictDecoder(data).Decode(&dst.LdapMappingScimResourceTypeResponse)
	if err == nil {
		jsonLdapMappingScimResourceTypeResponse, _ := json.Marshal(dst.LdapMappingScimResourceTypeResponse)
		if string(jsonLdapMappingScimResourceTypeResponse) == "{}" { // empty struct
			dst.LdapMappingScimResourceTypeResponse = nil
		} else {
			match++
		}
	} else {
		dst.LdapMappingScimResourceTypeResponse = nil
	}

	// try to unmarshal data into LdapPassThroughScimResourceTypeResponse
	err = newStrictDecoder(data).Decode(&dst.LdapPassThroughScimResourceTypeResponse)
	if err == nil {
		jsonLdapPassThroughScimResourceTypeResponse, _ := json.Marshal(dst.LdapPassThroughScimResourceTypeResponse)
		if string(jsonLdapPassThroughScimResourceTypeResponse) == "{}" { // empty struct
			dst.LdapPassThroughScimResourceTypeResponse = nil
		} else {
			match++
		}
	} else {
		dst.LdapPassThroughScimResourceTypeResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LdapMappingScimResourceTypeResponse = nil
		dst.LdapPassThroughScimResourceTypeResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddScimResourceType200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddScimResourceType200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddScimResourceType200Response) MarshalJSON() ([]byte, error) {
	if src.LdapMappingScimResourceTypeResponse != nil {
		return json.Marshal(&src.LdapMappingScimResourceTypeResponse)
	}

	if src.LdapPassThroughScimResourceTypeResponse != nil {
		return json.Marshal(&src.LdapPassThroughScimResourceTypeResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddScimResourceType200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.LdapMappingScimResourceTypeResponse != nil {
		return obj.LdapMappingScimResourceTypeResponse
	}

	if obj.LdapPassThroughScimResourceTypeResponse != nil {
		return obj.LdapPassThroughScimResourceTypeResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddScimResourceType200Response struct {
	value *AddScimResourceType200Response
	isSet bool
}

func (v NullableAddScimResourceType200Response) Get() *AddScimResourceType200Response {
	return v.value
}

func (v *NullableAddScimResourceType200Response) Set(val *AddScimResourceType200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddScimResourceType200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddScimResourceType200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddScimResourceType200Response(val *AddScimResourceType200Response) *NullableAddScimResourceType200Response {
	return &NullableAddScimResourceType200Response{value: val, isSet: true}
}

func (v NullableAddScimResourceType200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddScimResourceType200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
