/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnummirroredLdifBackendSchemaUrn the model 'EnummirroredLdifBackendSchemaUrn'
type EnummirroredLdifBackendSchemaUrn string

// List of Enummirrored-ldif-backendSchemaUrn
const (
	ENUMMIRROREDLDIFBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDMIRRORED_LDIF EnummirroredLdifBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:mirrored-ldif"
)

// All allowed values of EnummirroredLdifBackendSchemaUrn enum
var AllowedEnummirroredLdifBackendSchemaUrnEnumValues = []EnummirroredLdifBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:mirrored-ldif",
}

func (v *EnummirroredLdifBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummirroredLdifBackendSchemaUrn(value)
	for _, existing := range AllowedEnummirroredLdifBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummirroredLdifBackendSchemaUrn", value)
}

// NewEnummirroredLdifBackendSchemaUrnFromValue returns a pointer to a valid EnummirroredLdifBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummirroredLdifBackendSchemaUrnFromValue(v string) (*EnummirroredLdifBackendSchemaUrn, error) {
	ev := EnummirroredLdifBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummirroredLdifBackendSchemaUrn: valid values are %v", v, AllowedEnummirroredLdifBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummirroredLdifBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummirroredLdifBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummirrored-ldif-backendSchemaUrn value
func (v EnummirroredLdifBackendSchemaUrn) Ptr() *EnummirroredLdifBackendSchemaUrn {
	return &v
}

type NullableEnummirroredLdifBackendSchemaUrn struct {
	value *EnummirroredLdifBackendSchemaUrn
	isSet bool
}

func (v NullableEnummirroredLdifBackendSchemaUrn) Get() *EnummirroredLdifBackendSchemaUrn {
	return v.value
}

func (v *NullableEnummirroredLdifBackendSchemaUrn) Set(val *EnummirroredLdifBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummirroredLdifBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummirroredLdifBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummirroredLdifBackendSchemaUrn(val *EnummirroredLdifBackendSchemaUrn) *NullableEnummirroredLdifBackendSchemaUrn {
	return &NullableEnummirroredLdifBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummirroredLdifBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummirroredLdifBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
