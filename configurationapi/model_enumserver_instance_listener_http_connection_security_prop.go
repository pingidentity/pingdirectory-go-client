/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumserverInstanceListenerHttpConnectionSecurityProp Specifies the mechanism to use for securing connections to the server.
type EnumserverInstanceListenerHttpConnectionSecurityProp string

// List of Enumserver-instance-listener-http-connectionSecurityProp
const (
	ENUMSERVERINSTANCELISTENERHTTPCONNECTIONSECURITYPROP_NONE EnumserverInstanceListenerHttpConnectionSecurityProp = "none"
	ENUMSERVERINSTANCELISTENERHTTPCONNECTIONSECURITYPROP_SSL  EnumserverInstanceListenerHttpConnectionSecurityProp = "ssl"
)

// All allowed values of EnumserverInstanceListenerHttpConnectionSecurityProp enum
var AllowedEnumserverInstanceListenerHttpConnectionSecurityPropEnumValues = []EnumserverInstanceListenerHttpConnectionSecurityProp{
	"none",
	"ssl",
}

func (v *EnumserverInstanceListenerHttpConnectionSecurityProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumserverInstanceListenerHttpConnectionSecurityProp(value)
	for _, existing := range AllowedEnumserverInstanceListenerHttpConnectionSecurityPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumserverInstanceListenerHttpConnectionSecurityProp", value)
}

// NewEnumserverInstanceListenerHttpConnectionSecurityPropFromValue returns a pointer to a valid EnumserverInstanceListenerHttpConnectionSecurityProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumserverInstanceListenerHttpConnectionSecurityPropFromValue(v string) (*EnumserverInstanceListenerHttpConnectionSecurityProp, error) {
	ev := EnumserverInstanceListenerHttpConnectionSecurityProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumserverInstanceListenerHttpConnectionSecurityProp: valid values are %v", v, AllowedEnumserverInstanceListenerHttpConnectionSecurityPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumserverInstanceListenerHttpConnectionSecurityProp) IsValid() bool {
	for _, existing := range AllowedEnumserverInstanceListenerHttpConnectionSecurityPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumserver-instance-listener-http-connectionSecurityProp value
func (v EnumserverInstanceListenerHttpConnectionSecurityProp) Ptr() *EnumserverInstanceListenerHttpConnectionSecurityProp {
	return &v
}

type NullableEnumserverInstanceListenerHttpConnectionSecurityProp struct {
	value *EnumserverInstanceListenerHttpConnectionSecurityProp
	isSet bool
}

func (v NullableEnumserverInstanceListenerHttpConnectionSecurityProp) Get() *EnumserverInstanceListenerHttpConnectionSecurityProp {
	return v.value
}

func (v *NullableEnumserverInstanceListenerHttpConnectionSecurityProp) Set(val *EnumserverInstanceListenerHttpConnectionSecurityProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumserverInstanceListenerHttpConnectionSecurityProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumserverInstanceListenerHttpConnectionSecurityProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumserverInstanceListenerHttpConnectionSecurityProp(val *EnumserverInstanceListenerHttpConnectionSecurityProp) *NullableEnumserverInstanceListenerHttpConnectionSecurityProp {
	return &NullableEnumserverInstanceListenerHttpConnectionSecurityProp{value: val, isSet: true}
}

func (v NullableEnumserverInstanceListenerHttpConnectionSecurityProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumserverInstanceListenerHttpConnectionSecurityProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
