/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyPluginSchemaUrn the model 'EnumthirdPartyPluginSchemaUrn'
type EnumthirdPartyPluginSchemaUrn string

// List of Enumthird-party-pluginSchemaUrn
const (
	ENUMTHIRDPARTYPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINTHIRD_PARTY EnumthirdPartyPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:third-party"
)

// All allowed values of EnumthirdPartyPluginSchemaUrn enum
var AllowedEnumthirdPartyPluginSchemaUrnEnumValues = []EnumthirdPartyPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:third-party",
}

func (v *EnumthirdPartyPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyPluginSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyPluginSchemaUrn", value)
}

// NewEnumthirdPartyPluginSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyPluginSchemaUrnFromValue(v string) (*EnumthirdPartyPluginSchemaUrn, error) {
	ev := EnumthirdPartyPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyPluginSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-pluginSchemaUrn value
func (v EnumthirdPartyPluginSchemaUrn) Ptr() *EnumthirdPartyPluginSchemaUrn {
	return &v
}

type NullableEnumthirdPartyPluginSchemaUrn struct {
	value *EnumthirdPartyPluginSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyPluginSchemaUrn) Get() *EnumthirdPartyPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyPluginSchemaUrn) Set(val *EnumthirdPartyPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyPluginSchemaUrn(val *EnumthirdPartyPluginSchemaUrn) *NullableEnumthirdPartyPluginSchemaUrn {
	return &NullableEnumthirdPartyPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
