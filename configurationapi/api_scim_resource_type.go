/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ScimResourceTypeApiService ScimResourceTypeApi service
type ScimResourceTypeApiService service

type ApiAddScimResourceTypeRequest struct {
	ctx                        context.Context
	ApiService                 *ScimResourceTypeApiService
	addScimResourceTypeRequest *AddScimResourceTypeRequest
}

// Create a new SCIM Resource Type in the config
func (r ApiAddScimResourceTypeRequest) AddScimResourceTypeRequest(addScimResourceTypeRequest AddScimResourceTypeRequest) ApiAddScimResourceTypeRequest {
	r.addScimResourceTypeRequest = &addScimResourceTypeRequest
	return r
}

func (r ApiAddScimResourceTypeRequest) Execute() (*AddScimResourceType200Response, *http.Response, error) {
	return r.ApiService.AddScimResourceTypeExecute(r)
}

/*
AddScimResourceType Add a new SCIM Resource Type to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddScimResourceTypeRequest
*/
func (a *ScimResourceTypeApiService) AddScimResourceType(ctx context.Context) ApiAddScimResourceTypeRequest {
	return ApiAddScimResourceTypeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddScimResourceType200Response
func (a *ScimResourceTypeApiService) AddScimResourceTypeExecute(r ApiAddScimResourceTypeRequest) (*AddScimResourceType200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddScimResourceType200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimResourceTypeApiService.AddScimResourceType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addScimResourceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("addScimResourceTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addScimResourceTypeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteScimResourceTypeRequest struct {
	ctx                  context.Context
	ApiService           *ScimResourceTypeApiService
	scimResourceTypeName string
}

func (r ApiDeleteScimResourceTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScimResourceTypeExecute(r)
}

/*
DeleteScimResourceType Delete a SCIM Resource Type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiDeleteScimResourceTypeRequest
*/
func (a *ScimResourceTypeApiService) DeleteScimResourceType(ctx context.Context, scimResourceTypeName string) ApiDeleteScimResourceTypeRequest {
	return ApiDeleteScimResourceTypeRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimResourceTypeName: scimResourceTypeName,
	}
}

// Execute executes the request
func (a *ScimResourceTypeApiService) DeleteScimResourceTypeExecute(r ApiDeleteScimResourceTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimResourceTypeApiService.DeleteScimResourceType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScimResourceTypeRequest struct {
	ctx                  context.Context
	ApiService           *ScimResourceTypeApiService
	scimResourceTypeName string
}

func (r ApiGetScimResourceTypeRequest) Execute() (*AddScimResourceType200Response, *http.Response, error) {
	return r.ApiService.GetScimResourceTypeExecute(r)
}

/*
GetScimResourceType Returns a single SCIM Resource Type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiGetScimResourceTypeRequest
*/
func (a *ScimResourceTypeApiService) GetScimResourceType(ctx context.Context, scimResourceTypeName string) ApiGetScimResourceTypeRequest {
	return ApiGetScimResourceTypeRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimResourceTypeName: scimResourceTypeName,
	}
}

// Execute executes the request
//
//	@return AddScimResourceType200Response
func (a *ScimResourceTypeApiService) GetScimResourceTypeExecute(r ApiGetScimResourceTypeRequest) (*AddScimResourceType200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddScimResourceType200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimResourceTypeApiService.GetScimResourceType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateScimResourceTypeRequest struct {
	ctx                  context.Context
	ApiService           *ScimResourceTypeApiService
	scimResourceTypeName string
	updateRequest        *UpdateRequest
}

// Update an existing SCIM Resource Type
func (r ApiUpdateScimResourceTypeRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateScimResourceTypeRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateScimResourceTypeRequest) Execute() (*AddScimResourceType200Response, *http.Response, error) {
	return r.ApiService.UpdateScimResourceTypeExecute(r)
}

/*
UpdateScimResourceType Update an existing SCIM Resource Type by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimResourceTypeName Name of the SCIM Resource Type
	@return ApiUpdateScimResourceTypeRequest
*/
func (a *ScimResourceTypeApiService) UpdateScimResourceType(ctx context.Context, scimResourceTypeName string) ApiUpdateScimResourceTypeRequest {
	return ApiUpdateScimResourceTypeRequest{
		ApiService:           a,
		ctx:                  ctx,
		scimResourceTypeName: scimResourceTypeName,
	}
}

// Execute executes the request
//
//	@return AddScimResourceType200Response
func (a *ScimResourceTypeApiService) UpdateScimResourceTypeExecute(r ApiUpdateScimResourceTypeRequest) (*AddScimResourceType200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddScimResourceType200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimResourceTypeApiService.UpdateScimResourceType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-resource-types/{scim-resource-type-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-resource-type-name"+"}", url.PathEscape(parameterValueToString(r.scimResourceTypeName, "scimResourceTypeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
