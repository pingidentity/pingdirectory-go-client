/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// VelocityContextProviderApiService VelocityContextProviderApi service
type VelocityContextProviderApiService service

type ApiAddVelocityContextProviderRequest struct {
	ctx                               context.Context
	ApiService                        *VelocityContextProviderApiService
	httpServletExtensionName          string
	addVelocityContextProviderRequest *AddVelocityContextProviderRequest
}

// Create a new Velocity Context Provider in the config
func (r ApiAddVelocityContextProviderRequest) AddVelocityContextProviderRequest(addVelocityContextProviderRequest AddVelocityContextProviderRequest) ApiAddVelocityContextProviderRequest {
	r.addVelocityContextProviderRequest = &addVelocityContextProviderRequest
	return r
}

func (r ApiAddVelocityContextProviderRequest) Execute() (*AddVelocityContextProvider200Response, *http.Response, error) {
	return r.ApiService.AddVelocityContextProviderExecute(r)
}

/*
AddVelocityContextProvider Add a new Velocity Context Provider to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiAddVelocityContextProviderRequest
*/
func (a *VelocityContextProviderApiService) AddVelocityContextProvider(ctx context.Context, httpServletExtensionName string) ApiAddVelocityContextProviderRequest {
	return ApiAddVelocityContextProviderRequest{
		ApiService:               a,
		ctx:                      ctx,
		httpServletExtensionName: httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return AddVelocityContextProvider200Response
func (a *VelocityContextProviderApiService) AddVelocityContextProviderExecute(r ApiAddVelocityContextProviderRequest) (*AddVelocityContextProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddVelocityContextProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityContextProviderApiService.AddVelocityContextProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers"
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterToString(r.httpServletExtensionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addVelocityContextProviderRequest == nil {
		return localVarReturnValue, nil, reportError("addVelocityContextProviderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVelocityContextProviderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVelocityContextProviderRequest struct {
	ctx                         context.Context
	ApiService                  *VelocityContextProviderApiService
	velocityContextProviderName string
	httpServletExtensionName    string
}

func (r ApiDeleteVelocityContextProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVelocityContextProviderExecute(r)
}

/*
DeleteVelocityContextProvider Delete a Velocity Context Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param velocityContextProviderName Name of the Velocity Context Provider
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiDeleteVelocityContextProviderRequest
*/
func (a *VelocityContextProviderApiService) DeleteVelocityContextProvider(ctx context.Context, velocityContextProviderName string, httpServletExtensionName string) ApiDeleteVelocityContextProviderRequest {
	return ApiDeleteVelocityContextProviderRequest{
		ApiService:                  a,
		ctx:                         ctx,
		velocityContextProviderName: velocityContextProviderName,
		httpServletExtensionName:    httpServletExtensionName,
	}
}

// Execute executes the request
func (a *VelocityContextProviderApiService) DeleteVelocityContextProviderExecute(r ApiDeleteVelocityContextProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityContextProviderApiService.DeleteVelocityContextProvider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers/{velocity-context-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"velocity-context-provider-name"+"}", url.PathEscape(parameterToString(r.velocityContextProviderName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterToString(r.httpServletExtensionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVelocityContextProviderRequest struct {
	ctx                         context.Context
	ApiService                  *VelocityContextProviderApiService
	velocityContextProviderName string
	httpServletExtensionName    string
}

func (r ApiGetVelocityContextProviderRequest) Execute() (*AddVelocityContextProvider200Response, *http.Response, error) {
	return r.ApiService.GetVelocityContextProviderExecute(r)
}

/*
GetVelocityContextProvider Returns a single Velocity Context Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param velocityContextProviderName Name of the Velocity Context Provider
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiGetVelocityContextProviderRequest
*/
func (a *VelocityContextProviderApiService) GetVelocityContextProvider(ctx context.Context, velocityContextProviderName string, httpServletExtensionName string) ApiGetVelocityContextProviderRequest {
	return ApiGetVelocityContextProviderRequest{
		ApiService:                  a,
		ctx:                         ctx,
		velocityContextProviderName: velocityContextProviderName,
		httpServletExtensionName:    httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return AddVelocityContextProvider200Response
func (a *VelocityContextProviderApiService) GetVelocityContextProviderExecute(r ApiGetVelocityContextProviderRequest) (*AddVelocityContextProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddVelocityContextProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityContextProviderApiService.GetVelocityContextProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers/{velocity-context-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"velocity-context-provider-name"+"}", url.PathEscape(parameterToString(r.velocityContextProviderName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterToString(r.httpServletExtensionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateVelocityContextProviderRequest struct {
	ctx                         context.Context
	ApiService                  *VelocityContextProviderApiService
	velocityContextProviderName string
	httpServletExtensionName    string
	updateRequest               *UpdateRequest
}

// Update an existing Velocity Context Provider
func (r ApiUpdateVelocityContextProviderRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateVelocityContextProviderRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateVelocityContextProviderRequest) Execute() (*AddVelocityContextProvider200Response, *http.Response, error) {
	return r.ApiService.UpdateVelocityContextProviderExecute(r)
}

/*
UpdateVelocityContextProvider Update an existing Velocity Context Provider by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param velocityContextProviderName Name of the Velocity Context Provider
	@param httpServletExtensionName Name of the HTTP Servlet Extension
	@return ApiUpdateVelocityContextProviderRequest
*/
func (a *VelocityContextProviderApiService) UpdateVelocityContextProvider(ctx context.Context, velocityContextProviderName string, httpServletExtensionName string) ApiUpdateVelocityContextProviderRequest {
	return ApiUpdateVelocityContextProviderRequest{
		ApiService:                  a,
		ctx:                         ctx,
		velocityContextProviderName: velocityContextProviderName,
		httpServletExtensionName:    httpServletExtensionName,
	}
}

// Execute executes the request
//
//	@return AddVelocityContextProvider200Response
func (a *VelocityContextProviderApiService) UpdateVelocityContextProviderExecute(r ApiUpdateVelocityContextProviderRequest) (*AddVelocityContextProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddVelocityContextProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VelocityContextProviderApiService.UpdateVelocityContextProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers/{velocity-context-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"velocity-context-provider-name"+"}", url.PathEscape(parameterToString(r.velocityContextProviderName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"http-servlet-extension-name"+"}", url.PathEscape(parameterToString(r.httpServletExtensionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
