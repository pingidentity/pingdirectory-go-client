/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// Enumpkcs11CipherStreamProviderSchemaUrn the model 'Enumpkcs11CipherStreamProviderSchemaUrn'
type Enumpkcs11CipherStreamProviderSchemaUrn string

// List of Enumpkcs11-cipher-stream-providerSchemaUrn
const (
	ENUMPKCS11CIPHERSTREAMPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0CIPHER_STREAM_PROVIDERPKCS11 Enumpkcs11CipherStreamProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:pkcs11"
)

// All allowed values of Enumpkcs11CipherStreamProviderSchemaUrn enum
var AllowedEnumpkcs11CipherStreamProviderSchemaUrnEnumValues = []Enumpkcs11CipherStreamProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:cipher-stream-provider:pkcs11",
}

func (v *Enumpkcs11CipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumpkcs11CipherStreamProviderSchemaUrn(value)
	for _, existing := range AllowedEnumpkcs11CipherStreamProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumpkcs11CipherStreamProviderSchemaUrn", value)
}

// NewEnumpkcs11CipherStreamProviderSchemaUrnFromValue returns a pointer to a valid Enumpkcs11CipherStreamProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpkcs11CipherStreamProviderSchemaUrnFromValue(v string) (*Enumpkcs11CipherStreamProviderSchemaUrn, error) {
	ev := Enumpkcs11CipherStreamProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumpkcs11CipherStreamProviderSchemaUrn: valid values are %v", v, AllowedEnumpkcs11CipherStreamProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumpkcs11CipherStreamProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpkcs11CipherStreamProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpkcs11-cipher-stream-providerSchemaUrn value
func (v Enumpkcs11CipherStreamProviderSchemaUrn) Ptr() *Enumpkcs11CipherStreamProviderSchemaUrn {
	return &v
}

type NullableEnumpkcs11CipherStreamProviderSchemaUrn struct {
	value *Enumpkcs11CipherStreamProviderSchemaUrn
	isSet bool
}

func (v NullableEnumpkcs11CipherStreamProviderSchemaUrn) Get() *Enumpkcs11CipherStreamProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumpkcs11CipherStreamProviderSchemaUrn) Set(val *Enumpkcs11CipherStreamProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpkcs11CipherStreamProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpkcs11CipherStreamProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpkcs11CipherStreamProviderSchemaUrn(val *Enumpkcs11CipherStreamProviderSchemaUrn) *NullableEnumpkcs11CipherStreamProviderSchemaUrn {
	return &NullableEnumpkcs11CipherStreamProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpkcs11CipherStreamProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpkcs11CipherStreamProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
