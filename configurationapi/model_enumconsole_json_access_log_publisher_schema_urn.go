/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumconsoleJsonAccessLogPublisherSchemaUrn the model 'EnumconsoleJsonAccessLogPublisherSchemaUrn'
type EnumconsoleJsonAccessLogPublisherSchemaUrn string

// List of Enumconsole-json-access-log-publisherSchemaUrn
const (
	ENUMCONSOLEJSONACCESSLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERCONSOLE_JSON_ACCESS EnumconsoleJsonAccessLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:console-json-access"
)

// All allowed values of EnumconsoleJsonAccessLogPublisherSchemaUrn enum
var AllowedEnumconsoleJsonAccessLogPublisherSchemaUrnEnumValues = []EnumconsoleJsonAccessLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:console-json-access",
}

func (v *EnumconsoleJsonAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumconsoleJsonAccessLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumconsoleJsonAccessLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumconsoleJsonAccessLogPublisherSchemaUrn", value)
}

// NewEnumconsoleJsonAccessLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumconsoleJsonAccessLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumconsoleJsonAccessLogPublisherSchemaUrnFromValue(v string) (*EnumconsoleJsonAccessLogPublisherSchemaUrn, error) {
	ev := EnumconsoleJsonAccessLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumconsoleJsonAccessLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumconsoleJsonAccessLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumconsoleJsonAccessLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumconsoleJsonAccessLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumconsole-json-access-log-publisherSchemaUrn value
func (v EnumconsoleJsonAccessLogPublisherSchemaUrn) Ptr() *EnumconsoleJsonAccessLogPublisherSchemaUrn {
	return &v
}

type NullableEnumconsoleJsonAccessLogPublisherSchemaUrn struct {
	value *EnumconsoleJsonAccessLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumconsoleJsonAccessLogPublisherSchemaUrn) Get() *EnumconsoleJsonAccessLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumconsoleJsonAccessLogPublisherSchemaUrn) Set(val *EnumconsoleJsonAccessLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumconsoleJsonAccessLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumconsoleJsonAccessLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumconsoleJsonAccessLogPublisherSchemaUrn(val *EnumconsoleJsonAccessLogPublisherSchemaUrn) *NullableEnumconsoleJsonAccessLogPublisherSchemaUrn {
	return &NullableEnumconsoleJsonAccessLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumconsoleJsonAccessLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumconsoleJsonAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
