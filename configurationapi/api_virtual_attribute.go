/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VirtualAttributeAPIService VirtualAttributeAPI service
type VirtualAttributeAPIService service

type ApiAddVirtualAttributeRequest struct {
	ctx                        context.Context
	ApiService                 *VirtualAttributeAPIService
	addVirtualAttributeRequest *AddVirtualAttributeRequest
}

// Create a new Virtual Attribute in the config
func (r ApiAddVirtualAttributeRequest) AddVirtualAttributeRequest(addVirtualAttributeRequest AddVirtualAttributeRequest) ApiAddVirtualAttributeRequest {
	r.addVirtualAttributeRequest = &addVirtualAttributeRequest
	return r
}

func (r ApiAddVirtualAttributeRequest) Execute() (*AddVirtualAttribute200Response, *http.Response, error) {
	return r.ApiService.AddVirtualAttributeExecute(r)
}

/*
AddVirtualAttribute Add a new Virtual Attribute to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddVirtualAttributeRequest
*/
func (a *VirtualAttributeAPIService) AddVirtualAttribute(ctx context.Context) ApiAddVirtualAttributeRequest {
	return ApiAddVirtualAttributeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddVirtualAttribute200Response
func (a *VirtualAttributeAPIService) AddVirtualAttributeExecute(r ApiAddVirtualAttributeRequest) (*AddVirtualAttribute200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddVirtualAttribute200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualAttributeAPIService.AddVirtualAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtual-attributes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addVirtualAttributeRequest == nil {
		return localVarReturnValue, nil, reportError("addVirtualAttributeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addVirtualAttributeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteVirtualAttributeRequest struct {
	ctx                  context.Context
	ApiService           *VirtualAttributeAPIService
	virtualAttributeName string
}

func (r ApiDeleteVirtualAttributeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVirtualAttributeExecute(r)
}

/*
DeleteVirtualAttribute Delete a Virtual Attribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param virtualAttributeName Name of the Virtual Attribute
	@return ApiDeleteVirtualAttributeRequest
*/
func (a *VirtualAttributeAPIService) DeleteVirtualAttribute(ctx context.Context, virtualAttributeName string) ApiDeleteVirtualAttributeRequest {
	return ApiDeleteVirtualAttributeRequest{
		ApiService:           a,
		ctx:                  ctx,
		virtualAttributeName: virtualAttributeName,
	}
}

// Execute executes the request
func (a *VirtualAttributeAPIService) DeleteVirtualAttributeExecute(r ApiDeleteVirtualAttributeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualAttributeAPIService.DeleteVirtualAttribute")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtual-attributes/{virtual-attribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtual-attribute-name"+"}", url.PathEscape(parameterValueToString(r.virtualAttributeName, "virtualAttributeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVirtualAttributeRequest struct {
	ctx                  context.Context
	ApiService           *VirtualAttributeAPIService
	virtualAttributeName string
}

func (r ApiGetVirtualAttributeRequest) Execute() (*GetVirtualAttribute200Response, *http.Response, error) {
	return r.ApiService.GetVirtualAttributeExecute(r)
}

/*
GetVirtualAttribute Returns a single Virtual Attribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param virtualAttributeName Name of the Virtual Attribute
	@return ApiGetVirtualAttributeRequest
*/
func (a *VirtualAttributeAPIService) GetVirtualAttribute(ctx context.Context, virtualAttributeName string) ApiGetVirtualAttributeRequest {
	return ApiGetVirtualAttributeRequest{
		ApiService:           a,
		ctx:                  ctx,
		virtualAttributeName: virtualAttributeName,
	}
}

// Execute executes the request
//
//	@return GetVirtualAttribute200Response
func (a *VirtualAttributeAPIService) GetVirtualAttributeExecute(r ApiGetVirtualAttributeRequest) (*GetVirtualAttribute200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetVirtualAttribute200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualAttributeAPIService.GetVirtualAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtual-attributes/{virtual-attribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtual-attribute-name"+"}", url.PathEscape(parameterValueToString(r.virtualAttributeName, "virtualAttributeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVirtualAttributesRequest struct {
	ctx        context.Context
	ApiService *VirtualAttributeAPIService
	filter     *string
}

// SCIM filter
func (r ApiListVirtualAttributesRequest) Filter(filter string) ApiListVirtualAttributesRequest {
	r.filter = &filter
	return r
}

func (r ApiListVirtualAttributesRequest) Execute() (*VirtualAttributeListResponse, *http.Response, error) {
	return r.ApiService.ListVirtualAttributesExecute(r)
}

/*
ListVirtualAttributes Returns a list of all Virtual Attribute objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListVirtualAttributesRequest
*/
func (a *VirtualAttributeAPIService) ListVirtualAttributes(ctx context.Context) ApiListVirtualAttributesRequest {
	return ApiListVirtualAttributesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VirtualAttributeListResponse
func (a *VirtualAttributeAPIService) ListVirtualAttributesExecute(r ApiListVirtualAttributesRequest) (*VirtualAttributeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualAttributeListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualAttributeAPIService.ListVirtualAttributes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtual-attributes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateVirtualAttributeRequest struct {
	ctx                  context.Context
	ApiService           *VirtualAttributeAPIService
	virtualAttributeName string
	updateRequest        *UpdateRequest
}

// Update an existing Virtual Attribute
func (r ApiUpdateVirtualAttributeRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateVirtualAttributeRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateVirtualAttributeRequest) Execute() (*GetVirtualAttribute200Response, *http.Response, error) {
	return r.ApiService.UpdateVirtualAttributeExecute(r)
}

/*
UpdateVirtualAttribute Update an existing Virtual Attribute by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param virtualAttributeName Name of the Virtual Attribute
	@return ApiUpdateVirtualAttributeRequest
*/
func (a *VirtualAttributeAPIService) UpdateVirtualAttribute(ctx context.Context, virtualAttributeName string) ApiUpdateVirtualAttributeRequest {
	return ApiUpdateVirtualAttributeRequest{
		ApiService:           a,
		ctx:                  ctx,
		virtualAttributeName: virtualAttributeName,
	}
}

// Execute executes the request
//
//	@return GetVirtualAttribute200Response
func (a *VirtualAttributeAPIService) UpdateVirtualAttributeExecute(r ApiUpdateVirtualAttributeRequest) (*GetVirtualAttribute200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetVirtualAttribute200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualAttributeAPIService.UpdateVirtualAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtual-attributes/{virtual-attribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"virtual-attribute-name"+"}", url.PathEscape(parameterValueToString(r.virtualAttributeName, "virtualAttributeName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
