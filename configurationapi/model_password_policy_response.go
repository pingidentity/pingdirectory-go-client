/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the PasswordPolicyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicyResponse{}

// PasswordPolicyResponse struct for PasswordPolicyResponse
type PasswordPolicyResponse struct {
	// Name of the Password Policy
	Id      string                        `json:"id"`
	Schemas []EnumpasswordPolicySchemaUrn `json:"schemas,omitempty"`
	// A description for this Password Policy
	Description *string `json:"description,omitempty"`
	// Indicates whether users with the associated password policy are required to authenticate in a secure manner.
	RequireSecureAuthentication *bool `json:"requireSecureAuthentication,omitempty"`
	// Indicates whether users with the associated password policy are required to change their password in a secure manner that does not expose the credentials.
	RequireSecurePasswordChanges *bool `json:"requireSecurePasswordChanges,omitempty"`
	// Specifies the names of the account status notification handlers that are used with the associated password storage scheme.
	AccountStatusNotificationHandler []string                                        `json:"accountStatusNotificationHandler,omitempty"`
	StateUpdateFailurePolicy         *EnumpasswordPolicyStateUpdateFailurePolicyProp `json:"stateUpdateFailurePolicy,omitempty"`
	// Indicates whether to enable debugging for the password policy state.
	EnableDebug *bool `json:"enableDebug,omitempty"`
	// Specifies the attribute type used to hold user passwords.
	PasswordAttribute string `json:"passwordAttribute"`
	// Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password policy.
	DefaultPasswordStorageScheme []string `json:"defaultPasswordStorageScheme"`
	// Specifies the names of the password storage schemes that are considered deprecated for this password policy.
	DeprecatedPasswordStorageScheme []string `json:"deprecatedPasswordStorageScheme,omitempty"`
	// Indicates whether user entries can have multiple distinct values for the password attribute.
	AllowMultiplePasswordValues *bool `json:"allowMultiplePasswordValues,omitempty"`
	// Indicates whether users can change their passwords by providing a pre-encoded value.
	AllowPreEncodedPasswords *bool `json:"allowPreEncodedPasswords,omitempty"`
	// Specifies the names of the password validators that are used with the associated password storage scheme.
	PasswordValidator []string `json:"passwordValidator,omitempty"`
	// Specifies the names of the password validators that should be invoked for bind operations.
	BindPasswordValidator []string `json:"bindPasswordValidator,omitempty"`
	// Indicates how frequently password validation should be performed during bind operations for each user to whom this password policy is assigned.
	MinimumBindPasswordValidationFrequency *string                                                    `json:"minimumBindPasswordValidationFrequency,omitempty"`
	BindPasswordValidationFailureAction    *EnumpasswordPolicyBindPasswordValidationFailureActionProp `json:"bindPasswordValidationFailureAction,omitempty"`
	// Specifies the name of the password generator that is used with the associated password policy.
	PasswordGenerator *string `json:"passwordGenerator,omitempty"`
	// Specifies the maximum number of former passwords to maintain in the password history.
	PasswordHistoryCount *int64 `json:"passwordHistoryCount,omitempty"`
	// Specifies the maximum length of time that passwords remain in the password history.
	PasswordHistoryDuration *string `json:"passwordHistoryDuration,omitempty"`
	// Specifies the minimum length of time after a password change before the user is allowed to change the password again.
	MinPasswordAge *string `json:"minPasswordAge,omitempty"`
	// Specifies the maximum length of time that a user can continue using the same password before it must be changed (that is, the password expiration interval).
	MaxPasswordAge *string `json:"maxPasswordAge,omitempty"`
	// Specifies the maximum length of time before a user's password actually expires that the server begins to include warning notifications in bind responses for that user.
	PasswordExpirationWarningInterval *string `json:"passwordExpirationWarningInterval,omitempty"`
	// Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration warning notification.
	ExpirePasswordsWithoutWarning    *bool                                                   `json:"expirePasswordsWithoutWarning,omitempty"`
	ReturnPasswordExpirationControls *EnumpasswordPolicyReturnPasswordExpirationControlsProp `json:"returnPasswordExpirationControls,omitempty"`
	// Indicates whether a user whose password is expired is still allowed to change that password using the password modify extended operation.
	AllowExpiredPasswordChanges *bool `json:"allowExpiredPasswordChanges,omitempty"`
	// Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a new password.
	GraceLoginCount *int64 `json:"graceLoginCount,omitempty"`
	// Specifies the time by which all users with the associated password policy must change their passwords.
	RequireChangeByTime *string `json:"requireChangeByTime,omitempty"`
	// Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.
	LockoutFailureCount *int64 `json:"lockoutFailureCount,omitempty"`
	// Specifies the length of time that an account is locked after too many authentication failures.
	LockoutDuration *string `json:"lockoutDuration,omitempty"`
	// Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of account lockout.
	LockoutFailureExpirationInterval *string `json:"lockoutFailureExpirationInterval,omitempty"`
	// Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is \"true\", then multiple failed attempts using the same password will be considered only a single failure. If this option is \"false\", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.
	IgnoreDuplicatePasswordFailures *bool `json:"ignoreDuplicatePasswordFailures,omitempty"`
	// The action that the server should take for authentication attempts that target a user with more than the configured number of outstanding authentication failures.
	FailureLockoutAction *string `json:"failureLockoutAction,omitempty"`
	// Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate to the server) before that user is locked out.
	IdleLockoutInterval *string `json:"idleLockoutInterval,omitempty"`
	// Indicates whether users can change their own passwords.
	AllowUserPasswordChanges *bool `json:"allowUserPasswordChanges,omitempty"`
	// Indicates whether user password changes must use the password modify extended operation and must include the user's current password before the change is allowed.
	PasswordChangeRequiresCurrentPassword *bool                                              `json:"passwordChangeRequiresCurrentPassword,omitempty"`
	PasswordRetirementBehavior            []EnumpasswordPolicyPasswordRetirementBehaviorProp `json:"passwordRetirementBehavior,omitempty"`
	// Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate to the server.
	MaxRetiredPasswordAge                 *string                                                       `json:"maxRetiredPasswordAge,omitempty"`
	AllowedPasswordResetTokenUseCondition []EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp `json:"allowedPasswordResetTokenUseCondition,omitempty"`
	// Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after their account has been created.
	ForceChangeOnAdd *bool `json:"forceChangeOnAdd,omitempty"`
	// Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password is changed by any other user, that is considered an administrative password reset.
	ForceChangeOnReset *bool `json:"forceChangeOnReset,omitempty"`
	// Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator before they become locked.
	MaxPasswordResetAge *string `json:"maxPasswordResetAge,omitempty"`
	// Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required for user password changes.
	SkipValidationForAdministrators *bool `json:"skipValidationForAdministrators,omitempty"`
	// The maximum number of successful authentication attempts to include in the recent login history for each account.
	MaximumRecentLoginHistorySuccessfulAuthenticationCount *int64 `json:"maximumRecentLoginHistorySuccessfulAuthenticationCount,omitempty"`
	// The maximum age of successful authentication attempts to include in the recent login history for each account.
	MaximumRecentLoginHistorySuccessfulAuthenticationDuration *string `json:"maximumRecentLoginHistorySuccessfulAuthenticationDuration,omitempty"`
	// The maximum number of failed authentication attempts to include in the recent login history for each account.
	MaximumRecentLoginHistoryFailedAuthenticationCount *int64 `json:"maximumRecentLoginHistoryFailedAuthenticationCount,omitempty"`
	// The maximum age of failed authentication attempts to include in the recent login history for each account.
	MaximumRecentLoginHistoryFailedAuthenticationDuration *string                                                         `json:"maximumRecentLoginHistoryFailedAuthenticationDuration,omitempty"`
	RecentLoginHistorySimilarAttemptBehavior              *EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp `json:"recentLoginHistorySimilarAttemptBehavior,omitempty"`
	// Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user last authenticated.
	LastLoginIPAddressAttribute *string `json:"lastLoginIPAddressAttribute,omitempty"`
	// Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated password policy.
	LastLoginTimeAttribute *string `json:"lastLoginTimeAttribute,omitempty"`
	// Specifies the format string that is used to generate the last login time value for users with the associated password policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.
	LastLoginTimeFormat *string `json:"lastLoginTimeFormat,omitempty"`
	// Specifies the format string(s) that might have been used with the last login time at any point in the past for users associated with the password policy.
	PreviousLastLoginTimeFormat                   []string                                           `json:"previousLastLoginTimeFormat,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewPasswordPolicyResponse instantiates a new PasswordPolicyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicyResponse(id string, passwordAttribute string, defaultPasswordStorageScheme []string) *PasswordPolicyResponse {
	this := PasswordPolicyResponse{}
	this.Id = id
	this.PasswordAttribute = passwordAttribute
	this.DefaultPasswordStorageScheme = defaultPasswordStorageScheme
	return &this
}

// NewPasswordPolicyResponseWithDefaults instantiates a new PasswordPolicyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyResponseWithDefaults() *PasswordPolicyResponse {
	this := PasswordPolicyResponse{}
	return &this
}

// GetId returns the Id field value
func (o *PasswordPolicyResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PasswordPolicyResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetSchemas() []EnumpasswordPolicySchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumpasswordPolicySchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetSchemasOk() ([]EnumpasswordPolicySchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumpasswordPolicySchemaUrn and assigns it to the Schemas field.
func (o *PasswordPolicyResponse) SetSchemas(v []EnumpasswordPolicySchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PasswordPolicyResponse) SetDescription(v string) {
	o.Description = &v
}

// GetRequireSecureAuthentication returns the RequireSecureAuthentication field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetRequireSecureAuthentication() bool {
	if o == nil || IsNil(o.RequireSecureAuthentication) {
		var ret bool
		return ret
	}
	return *o.RequireSecureAuthentication
}

// GetRequireSecureAuthenticationOk returns a tuple with the RequireSecureAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetRequireSecureAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireSecureAuthentication) {
		return nil, false
	}
	return o.RequireSecureAuthentication, true
}

// HasRequireSecureAuthentication returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasRequireSecureAuthentication() bool {
	if o != nil && !IsNil(o.RequireSecureAuthentication) {
		return true
	}

	return false
}

// SetRequireSecureAuthentication gets a reference to the given bool and assigns it to the RequireSecureAuthentication field.
func (o *PasswordPolicyResponse) SetRequireSecureAuthentication(v bool) {
	o.RequireSecureAuthentication = &v
}

// GetRequireSecurePasswordChanges returns the RequireSecurePasswordChanges field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetRequireSecurePasswordChanges() bool {
	if o == nil || IsNil(o.RequireSecurePasswordChanges) {
		var ret bool
		return ret
	}
	return *o.RequireSecurePasswordChanges
}

// GetRequireSecurePasswordChangesOk returns a tuple with the RequireSecurePasswordChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetRequireSecurePasswordChangesOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireSecurePasswordChanges) {
		return nil, false
	}
	return o.RequireSecurePasswordChanges, true
}

// HasRequireSecurePasswordChanges returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasRequireSecurePasswordChanges() bool {
	if o != nil && !IsNil(o.RequireSecurePasswordChanges) {
		return true
	}

	return false
}

// SetRequireSecurePasswordChanges gets a reference to the given bool and assigns it to the RequireSecurePasswordChanges field.
func (o *PasswordPolicyResponse) SetRequireSecurePasswordChanges(v bool) {
	o.RequireSecurePasswordChanges = &v
}

// GetAccountStatusNotificationHandler returns the AccountStatusNotificationHandler field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetAccountStatusNotificationHandler() []string {
	if o == nil || IsNil(o.AccountStatusNotificationHandler) {
		var ret []string
		return ret
	}
	return o.AccountStatusNotificationHandler
}

// GetAccountStatusNotificationHandlerOk returns a tuple with the AccountStatusNotificationHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetAccountStatusNotificationHandlerOk() ([]string, bool) {
	if o == nil || IsNil(o.AccountStatusNotificationHandler) {
		return nil, false
	}
	return o.AccountStatusNotificationHandler, true
}

// HasAccountStatusNotificationHandler returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasAccountStatusNotificationHandler() bool {
	if o != nil && !IsNil(o.AccountStatusNotificationHandler) {
		return true
	}

	return false
}

// SetAccountStatusNotificationHandler gets a reference to the given []string and assigns it to the AccountStatusNotificationHandler field.
func (o *PasswordPolicyResponse) SetAccountStatusNotificationHandler(v []string) {
	o.AccountStatusNotificationHandler = v
}

// GetStateUpdateFailurePolicy returns the StateUpdateFailurePolicy field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetStateUpdateFailurePolicy() EnumpasswordPolicyStateUpdateFailurePolicyProp {
	if o == nil || IsNil(o.StateUpdateFailurePolicy) {
		var ret EnumpasswordPolicyStateUpdateFailurePolicyProp
		return ret
	}
	return *o.StateUpdateFailurePolicy
}

// GetStateUpdateFailurePolicyOk returns a tuple with the StateUpdateFailurePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetStateUpdateFailurePolicyOk() (*EnumpasswordPolicyStateUpdateFailurePolicyProp, bool) {
	if o == nil || IsNil(o.StateUpdateFailurePolicy) {
		return nil, false
	}
	return o.StateUpdateFailurePolicy, true
}

// HasStateUpdateFailurePolicy returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasStateUpdateFailurePolicy() bool {
	if o != nil && !IsNil(o.StateUpdateFailurePolicy) {
		return true
	}

	return false
}

// SetStateUpdateFailurePolicy gets a reference to the given EnumpasswordPolicyStateUpdateFailurePolicyProp and assigns it to the StateUpdateFailurePolicy field.
func (o *PasswordPolicyResponse) SetStateUpdateFailurePolicy(v EnumpasswordPolicyStateUpdateFailurePolicyProp) {
	o.StateUpdateFailurePolicy = &v
}

// GetEnableDebug returns the EnableDebug field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetEnableDebug() bool {
	if o == nil || IsNil(o.EnableDebug) {
		var ret bool
		return ret
	}
	return *o.EnableDebug
}

// GetEnableDebugOk returns a tuple with the EnableDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetEnableDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDebug) {
		return nil, false
	}
	return o.EnableDebug, true
}

// HasEnableDebug returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasEnableDebug() bool {
	if o != nil && !IsNil(o.EnableDebug) {
		return true
	}

	return false
}

// SetEnableDebug gets a reference to the given bool and assigns it to the EnableDebug field.
func (o *PasswordPolicyResponse) SetEnableDebug(v bool) {
	o.EnableDebug = &v
}

// GetPasswordAttribute returns the PasswordAttribute field value
func (o *PasswordPolicyResponse) GetPasswordAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordAttribute
}

// GetPasswordAttributeOk returns a tuple with the PasswordAttribute field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordAttribute, true
}

// SetPasswordAttribute sets field value
func (o *PasswordPolicyResponse) SetPasswordAttribute(v string) {
	o.PasswordAttribute = v
}

// GetDefaultPasswordStorageScheme returns the DefaultPasswordStorageScheme field value
func (o *PasswordPolicyResponse) GetDefaultPasswordStorageScheme() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DefaultPasswordStorageScheme
}

// GetDefaultPasswordStorageSchemeOk returns a tuple with the DefaultPasswordStorageScheme field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetDefaultPasswordStorageSchemeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultPasswordStorageScheme, true
}

// SetDefaultPasswordStorageScheme sets field value
func (o *PasswordPolicyResponse) SetDefaultPasswordStorageScheme(v []string) {
	o.DefaultPasswordStorageScheme = v
}

// GetDeprecatedPasswordStorageScheme returns the DeprecatedPasswordStorageScheme field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetDeprecatedPasswordStorageScheme() []string {
	if o == nil || IsNil(o.DeprecatedPasswordStorageScheme) {
		var ret []string
		return ret
	}
	return o.DeprecatedPasswordStorageScheme
}

// GetDeprecatedPasswordStorageSchemeOk returns a tuple with the DeprecatedPasswordStorageScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetDeprecatedPasswordStorageSchemeOk() ([]string, bool) {
	if o == nil || IsNil(o.DeprecatedPasswordStorageScheme) {
		return nil, false
	}
	return o.DeprecatedPasswordStorageScheme, true
}

// HasDeprecatedPasswordStorageScheme returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasDeprecatedPasswordStorageScheme() bool {
	if o != nil && !IsNil(o.DeprecatedPasswordStorageScheme) {
		return true
	}

	return false
}

// SetDeprecatedPasswordStorageScheme gets a reference to the given []string and assigns it to the DeprecatedPasswordStorageScheme field.
func (o *PasswordPolicyResponse) SetDeprecatedPasswordStorageScheme(v []string) {
	o.DeprecatedPasswordStorageScheme = v
}

// GetAllowMultiplePasswordValues returns the AllowMultiplePasswordValues field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetAllowMultiplePasswordValues() bool {
	if o == nil || IsNil(o.AllowMultiplePasswordValues) {
		var ret bool
		return ret
	}
	return *o.AllowMultiplePasswordValues
}

// GetAllowMultiplePasswordValuesOk returns a tuple with the AllowMultiplePasswordValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetAllowMultiplePasswordValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultiplePasswordValues) {
		return nil, false
	}
	return o.AllowMultiplePasswordValues, true
}

// HasAllowMultiplePasswordValues returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasAllowMultiplePasswordValues() bool {
	if o != nil && !IsNil(o.AllowMultiplePasswordValues) {
		return true
	}

	return false
}

// SetAllowMultiplePasswordValues gets a reference to the given bool and assigns it to the AllowMultiplePasswordValues field.
func (o *PasswordPolicyResponse) SetAllowMultiplePasswordValues(v bool) {
	o.AllowMultiplePasswordValues = &v
}

// GetAllowPreEncodedPasswords returns the AllowPreEncodedPasswords field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetAllowPreEncodedPasswords() bool {
	if o == nil || IsNil(o.AllowPreEncodedPasswords) {
		var ret bool
		return ret
	}
	return *o.AllowPreEncodedPasswords
}

// GetAllowPreEncodedPasswordsOk returns a tuple with the AllowPreEncodedPasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetAllowPreEncodedPasswordsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowPreEncodedPasswords) {
		return nil, false
	}
	return o.AllowPreEncodedPasswords, true
}

// HasAllowPreEncodedPasswords returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasAllowPreEncodedPasswords() bool {
	if o != nil && !IsNil(o.AllowPreEncodedPasswords) {
		return true
	}

	return false
}

// SetAllowPreEncodedPasswords gets a reference to the given bool and assigns it to the AllowPreEncodedPasswords field.
func (o *PasswordPolicyResponse) SetAllowPreEncodedPasswords(v bool) {
	o.AllowPreEncodedPasswords = &v
}

// GetPasswordValidator returns the PasswordValidator field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordValidator() []string {
	if o == nil || IsNil(o.PasswordValidator) {
		var ret []string
		return ret
	}
	return o.PasswordValidator
}

// GetPasswordValidatorOk returns a tuple with the PasswordValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordValidatorOk() ([]string, bool) {
	if o == nil || IsNil(o.PasswordValidator) {
		return nil, false
	}
	return o.PasswordValidator, true
}

// HasPasswordValidator returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordValidator() bool {
	if o != nil && !IsNil(o.PasswordValidator) {
		return true
	}

	return false
}

// SetPasswordValidator gets a reference to the given []string and assigns it to the PasswordValidator field.
func (o *PasswordPolicyResponse) SetPasswordValidator(v []string) {
	o.PasswordValidator = v
}

// GetBindPasswordValidator returns the BindPasswordValidator field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetBindPasswordValidator() []string {
	if o == nil || IsNil(o.BindPasswordValidator) {
		var ret []string
		return ret
	}
	return o.BindPasswordValidator
}

// GetBindPasswordValidatorOk returns a tuple with the BindPasswordValidator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetBindPasswordValidatorOk() ([]string, bool) {
	if o == nil || IsNil(o.BindPasswordValidator) {
		return nil, false
	}
	return o.BindPasswordValidator, true
}

// HasBindPasswordValidator returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasBindPasswordValidator() bool {
	if o != nil && !IsNil(o.BindPasswordValidator) {
		return true
	}

	return false
}

// SetBindPasswordValidator gets a reference to the given []string and assigns it to the BindPasswordValidator field.
func (o *PasswordPolicyResponse) SetBindPasswordValidator(v []string) {
	o.BindPasswordValidator = v
}

// GetMinimumBindPasswordValidationFrequency returns the MinimumBindPasswordValidationFrequency field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMinimumBindPasswordValidationFrequency() string {
	if o == nil || IsNil(o.MinimumBindPasswordValidationFrequency) {
		var ret string
		return ret
	}
	return *o.MinimumBindPasswordValidationFrequency
}

// GetMinimumBindPasswordValidationFrequencyOk returns a tuple with the MinimumBindPasswordValidationFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMinimumBindPasswordValidationFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumBindPasswordValidationFrequency) {
		return nil, false
	}
	return o.MinimumBindPasswordValidationFrequency, true
}

// HasMinimumBindPasswordValidationFrequency returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMinimumBindPasswordValidationFrequency() bool {
	if o != nil && !IsNil(o.MinimumBindPasswordValidationFrequency) {
		return true
	}

	return false
}

// SetMinimumBindPasswordValidationFrequency gets a reference to the given string and assigns it to the MinimumBindPasswordValidationFrequency field.
func (o *PasswordPolicyResponse) SetMinimumBindPasswordValidationFrequency(v string) {
	o.MinimumBindPasswordValidationFrequency = &v
}

// GetBindPasswordValidationFailureAction returns the BindPasswordValidationFailureAction field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetBindPasswordValidationFailureAction() EnumpasswordPolicyBindPasswordValidationFailureActionProp {
	if o == nil || IsNil(o.BindPasswordValidationFailureAction) {
		var ret EnumpasswordPolicyBindPasswordValidationFailureActionProp
		return ret
	}
	return *o.BindPasswordValidationFailureAction
}

// GetBindPasswordValidationFailureActionOk returns a tuple with the BindPasswordValidationFailureAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetBindPasswordValidationFailureActionOk() (*EnumpasswordPolicyBindPasswordValidationFailureActionProp, bool) {
	if o == nil || IsNil(o.BindPasswordValidationFailureAction) {
		return nil, false
	}
	return o.BindPasswordValidationFailureAction, true
}

// HasBindPasswordValidationFailureAction returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasBindPasswordValidationFailureAction() bool {
	if o != nil && !IsNil(o.BindPasswordValidationFailureAction) {
		return true
	}

	return false
}

// SetBindPasswordValidationFailureAction gets a reference to the given EnumpasswordPolicyBindPasswordValidationFailureActionProp and assigns it to the BindPasswordValidationFailureAction field.
func (o *PasswordPolicyResponse) SetBindPasswordValidationFailureAction(v EnumpasswordPolicyBindPasswordValidationFailureActionProp) {
	o.BindPasswordValidationFailureAction = &v
}

// GetPasswordGenerator returns the PasswordGenerator field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordGenerator() string {
	if o == nil || IsNil(o.PasswordGenerator) {
		var ret string
		return ret
	}
	return *o.PasswordGenerator
}

// GetPasswordGeneratorOk returns a tuple with the PasswordGenerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordGeneratorOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordGenerator) {
		return nil, false
	}
	return o.PasswordGenerator, true
}

// HasPasswordGenerator returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordGenerator() bool {
	if o != nil && !IsNil(o.PasswordGenerator) {
		return true
	}

	return false
}

// SetPasswordGenerator gets a reference to the given string and assigns it to the PasswordGenerator field.
func (o *PasswordPolicyResponse) SetPasswordGenerator(v string) {
	o.PasswordGenerator = &v
}

// GetPasswordHistoryCount returns the PasswordHistoryCount field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordHistoryCount() int64 {
	if o == nil || IsNil(o.PasswordHistoryCount) {
		var ret int64
		return ret
	}
	return *o.PasswordHistoryCount
}

// GetPasswordHistoryCountOk returns a tuple with the PasswordHistoryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordHistoryCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PasswordHistoryCount) {
		return nil, false
	}
	return o.PasswordHistoryCount, true
}

// HasPasswordHistoryCount returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordHistoryCount() bool {
	if o != nil && !IsNil(o.PasswordHistoryCount) {
		return true
	}

	return false
}

// SetPasswordHistoryCount gets a reference to the given int64 and assigns it to the PasswordHistoryCount field.
func (o *PasswordPolicyResponse) SetPasswordHistoryCount(v int64) {
	o.PasswordHistoryCount = &v
}

// GetPasswordHistoryDuration returns the PasswordHistoryDuration field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordHistoryDuration() string {
	if o == nil || IsNil(o.PasswordHistoryDuration) {
		var ret string
		return ret
	}
	return *o.PasswordHistoryDuration
}

// GetPasswordHistoryDurationOk returns a tuple with the PasswordHistoryDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordHistoryDurationOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordHistoryDuration) {
		return nil, false
	}
	return o.PasswordHistoryDuration, true
}

// HasPasswordHistoryDuration returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordHistoryDuration() bool {
	if o != nil && !IsNil(o.PasswordHistoryDuration) {
		return true
	}

	return false
}

// SetPasswordHistoryDuration gets a reference to the given string and assigns it to the PasswordHistoryDuration field.
func (o *PasswordPolicyResponse) SetPasswordHistoryDuration(v string) {
	o.PasswordHistoryDuration = &v
}

// GetMinPasswordAge returns the MinPasswordAge field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMinPasswordAge() string {
	if o == nil || IsNil(o.MinPasswordAge) {
		var ret string
		return ret
	}
	return *o.MinPasswordAge
}

// GetMinPasswordAgeOk returns a tuple with the MinPasswordAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMinPasswordAgeOk() (*string, bool) {
	if o == nil || IsNil(o.MinPasswordAge) {
		return nil, false
	}
	return o.MinPasswordAge, true
}

// HasMinPasswordAge returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMinPasswordAge() bool {
	if o != nil && !IsNil(o.MinPasswordAge) {
		return true
	}

	return false
}

// SetMinPasswordAge gets a reference to the given string and assigns it to the MinPasswordAge field.
func (o *PasswordPolicyResponse) SetMinPasswordAge(v string) {
	o.MinPasswordAge = &v
}

// GetMaxPasswordAge returns the MaxPasswordAge field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaxPasswordAge() string {
	if o == nil || IsNil(o.MaxPasswordAge) {
		var ret string
		return ret
	}
	return *o.MaxPasswordAge
}

// GetMaxPasswordAgeOk returns a tuple with the MaxPasswordAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaxPasswordAgeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxPasswordAge) {
		return nil, false
	}
	return o.MaxPasswordAge, true
}

// HasMaxPasswordAge returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaxPasswordAge() bool {
	if o != nil && !IsNil(o.MaxPasswordAge) {
		return true
	}

	return false
}

// SetMaxPasswordAge gets a reference to the given string and assigns it to the MaxPasswordAge field.
func (o *PasswordPolicyResponse) SetMaxPasswordAge(v string) {
	o.MaxPasswordAge = &v
}

// GetPasswordExpirationWarningInterval returns the PasswordExpirationWarningInterval field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordExpirationWarningInterval() string {
	if o == nil || IsNil(o.PasswordExpirationWarningInterval) {
		var ret string
		return ret
	}
	return *o.PasswordExpirationWarningInterval
}

// GetPasswordExpirationWarningIntervalOk returns a tuple with the PasswordExpirationWarningInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordExpirationWarningIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordExpirationWarningInterval) {
		return nil, false
	}
	return o.PasswordExpirationWarningInterval, true
}

// HasPasswordExpirationWarningInterval returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordExpirationWarningInterval() bool {
	if o != nil && !IsNil(o.PasswordExpirationWarningInterval) {
		return true
	}

	return false
}

// SetPasswordExpirationWarningInterval gets a reference to the given string and assigns it to the PasswordExpirationWarningInterval field.
func (o *PasswordPolicyResponse) SetPasswordExpirationWarningInterval(v string) {
	o.PasswordExpirationWarningInterval = &v
}

// GetExpirePasswordsWithoutWarning returns the ExpirePasswordsWithoutWarning field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetExpirePasswordsWithoutWarning() bool {
	if o == nil || IsNil(o.ExpirePasswordsWithoutWarning) {
		var ret bool
		return ret
	}
	return *o.ExpirePasswordsWithoutWarning
}

// GetExpirePasswordsWithoutWarningOk returns a tuple with the ExpirePasswordsWithoutWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetExpirePasswordsWithoutWarningOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpirePasswordsWithoutWarning) {
		return nil, false
	}
	return o.ExpirePasswordsWithoutWarning, true
}

// HasExpirePasswordsWithoutWarning returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasExpirePasswordsWithoutWarning() bool {
	if o != nil && !IsNil(o.ExpirePasswordsWithoutWarning) {
		return true
	}

	return false
}

// SetExpirePasswordsWithoutWarning gets a reference to the given bool and assigns it to the ExpirePasswordsWithoutWarning field.
func (o *PasswordPolicyResponse) SetExpirePasswordsWithoutWarning(v bool) {
	o.ExpirePasswordsWithoutWarning = &v
}

// GetReturnPasswordExpirationControls returns the ReturnPasswordExpirationControls field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetReturnPasswordExpirationControls() EnumpasswordPolicyReturnPasswordExpirationControlsProp {
	if o == nil || IsNil(o.ReturnPasswordExpirationControls) {
		var ret EnumpasswordPolicyReturnPasswordExpirationControlsProp
		return ret
	}
	return *o.ReturnPasswordExpirationControls
}

// GetReturnPasswordExpirationControlsOk returns a tuple with the ReturnPasswordExpirationControls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetReturnPasswordExpirationControlsOk() (*EnumpasswordPolicyReturnPasswordExpirationControlsProp, bool) {
	if o == nil || IsNil(o.ReturnPasswordExpirationControls) {
		return nil, false
	}
	return o.ReturnPasswordExpirationControls, true
}

// HasReturnPasswordExpirationControls returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasReturnPasswordExpirationControls() bool {
	if o != nil && !IsNil(o.ReturnPasswordExpirationControls) {
		return true
	}

	return false
}

// SetReturnPasswordExpirationControls gets a reference to the given EnumpasswordPolicyReturnPasswordExpirationControlsProp and assigns it to the ReturnPasswordExpirationControls field.
func (o *PasswordPolicyResponse) SetReturnPasswordExpirationControls(v EnumpasswordPolicyReturnPasswordExpirationControlsProp) {
	o.ReturnPasswordExpirationControls = &v
}

// GetAllowExpiredPasswordChanges returns the AllowExpiredPasswordChanges field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetAllowExpiredPasswordChanges() bool {
	if o == nil || IsNil(o.AllowExpiredPasswordChanges) {
		var ret bool
		return ret
	}
	return *o.AllowExpiredPasswordChanges
}

// GetAllowExpiredPasswordChangesOk returns a tuple with the AllowExpiredPasswordChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetAllowExpiredPasswordChangesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowExpiredPasswordChanges) {
		return nil, false
	}
	return o.AllowExpiredPasswordChanges, true
}

// HasAllowExpiredPasswordChanges returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasAllowExpiredPasswordChanges() bool {
	if o != nil && !IsNil(o.AllowExpiredPasswordChanges) {
		return true
	}

	return false
}

// SetAllowExpiredPasswordChanges gets a reference to the given bool and assigns it to the AllowExpiredPasswordChanges field.
func (o *PasswordPolicyResponse) SetAllowExpiredPasswordChanges(v bool) {
	o.AllowExpiredPasswordChanges = &v
}

// GetGraceLoginCount returns the GraceLoginCount field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetGraceLoginCount() int64 {
	if o == nil || IsNil(o.GraceLoginCount) {
		var ret int64
		return ret
	}
	return *o.GraceLoginCount
}

// GetGraceLoginCountOk returns a tuple with the GraceLoginCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetGraceLoginCountOk() (*int64, bool) {
	if o == nil || IsNil(o.GraceLoginCount) {
		return nil, false
	}
	return o.GraceLoginCount, true
}

// HasGraceLoginCount returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasGraceLoginCount() bool {
	if o != nil && !IsNil(o.GraceLoginCount) {
		return true
	}

	return false
}

// SetGraceLoginCount gets a reference to the given int64 and assigns it to the GraceLoginCount field.
func (o *PasswordPolicyResponse) SetGraceLoginCount(v int64) {
	o.GraceLoginCount = &v
}

// GetRequireChangeByTime returns the RequireChangeByTime field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetRequireChangeByTime() string {
	if o == nil || IsNil(o.RequireChangeByTime) {
		var ret string
		return ret
	}
	return *o.RequireChangeByTime
}

// GetRequireChangeByTimeOk returns a tuple with the RequireChangeByTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetRequireChangeByTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RequireChangeByTime) {
		return nil, false
	}
	return o.RequireChangeByTime, true
}

// HasRequireChangeByTime returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasRequireChangeByTime() bool {
	if o != nil && !IsNil(o.RequireChangeByTime) {
		return true
	}

	return false
}

// SetRequireChangeByTime gets a reference to the given string and assigns it to the RequireChangeByTime field.
func (o *PasswordPolicyResponse) SetRequireChangeByTime(v string) {
	o.RequireChangeByTime = &v
}

// GetLockoutFailureCount returns the LockoutFailureCount field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetLockoutFailureCount() int64 {
	if o == nil || IsNil(o.LockoutFailureCount) {
		var ret int64
		return ret
	}
	return *o.LockoutFailureCount
}

// GetLockoutFailureCountOk returns a tuple with the LockoutFailureCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetLockoutFailureCountOk() (*int64, bool) {
	if o == nil || IsNil(o.LockoutFailureCount) {
		return nil, false
	}
	return o.LockoutFailureCount, true
}

// HasLockoutFailureCount returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasLockoutFailureCount() bool {
	if o != nil && !IsNil(o.LockoutFailureCount) {
		return true
	}

	return false
}

// SetLockoutFailureCount gets a reference to the given int64 and assigns it to the LockoutFailureCount field.
func (o *PasswordPolicyResponse) SetLockoutFailureCount(v int64) {
	o.LockoutFailureCount = &v
}

// GetLockoutDuration returns the LockoutDuration field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetLockoutDuration() string {
	if o == nil || IsNil(o.LockoutDuration) {
		var ret string
		return ret
	}
	return *o.LockoutDuration
}

// GetLockoutDurationOk returns a tuple with the LockoutDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetLockoutDurationOk() (*string, bool) {
	if o == nil || IsNil(o.LockoutDuration) {
		return nil, false
	}
	return o.LockoutDuration, true
}

// HasLockoutDuration returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasLockoutDuration() bool {
	if o != nil && !IsNil(o.LockoutDuration) {
		return true
	}

	return false
}

// SetLockoutDuration gets a reference to the given string and assigns it to the LockoutDuration field.
func (o *PasswordPolicyResponse) SetLockoutDuration(v string) {
	o.LockoutDuration = &v
}

// GetLockoutFailureExpirationInterval returns the LockoutFailureExpirationInterval field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetLockoutFailureExpirationInterval() string {
	if o == nil || IsNil(o.LockoutFailureExpirationInterval) {
		var ret string
		return ret
	}
	return *o.LockoutFailureExpirationInterval
}

// GetLockoutFailureExpirationIntervalOk returns a tuple with the LockoutFailureExpirationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetLockoutFailureExpirationIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.LockoutFailureExpirationInterval) {
		return nil, false
	}
	return o.LockoutFailureExpirationInterval, true
}

// HasLockoutFailureExpirationInterval returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasLockoutFailureExpirationInterval() bool {
	if o != nil && !IsNil(o.LockoutFailureExpirationInterval) {
		return true
	}

	return false
}

// SetLockoutFailureExpirationInterval gets a reference to the given string and assigns it to the LockoutFailureExpirationInterval field.
func (o *PasswordPolicyResponse) SetLockoutFailureExpirationInterval(v string) {
	o.LockoutFailureExpirationInterval = &v
}

// GetIgnoreDuplicatePasswordFailures returns the IgnoreDuplicatePasswordFailures field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetIgnoreDuplicatePasswordFailures() bool {
	if o == nil || IsNil(o.IgnoreDuplicatePasswordFailures) {
		var ret bool
		return ret
	}
	return *o.IgnoreDuplicatePasswordFailures
}

// GetIgnoreDuplicatePasswordFailuresOk returns a tuple with the IgnoreDuplicatePasswordFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetIgnoreDuplicatePasswordFailuresOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreDuplicatePasswordFailures) {
		return nil, false
	}
	return o.IgnoreDuplicatePasswordFailures, true
}

// HasIgnoreDuplicatePasswordFailures returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasIgnoreDuplicatePasswordFailures() bool {
	if o != nil && !IsNil(o.IgnoreDuplicatePasswordFailures) {
		return true
	}

	return false
}

// SetIgnoreDuplicatePasswordFailures gets a reference to the given bool and assigns it to the IgnoreDuplicatePasswordFailures field.
func (o *PasswordPolicyResponse) SetIgnoreDuplicatePasswordFailures(v bool) {
	o.IgnoreDuplicatePasswordFailures = &v
}

// GetFailureLockoutAction returns the FailureLockoutAction field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetFailureLockoutAction() string {
	if o == nil || IsNil(o.FailureLockoutAction) {
		var ret string
		return ret
	}
	return *o.FailureLockoutAction
}

// GetFailureLockoutActionOk returns a tuple with the FailureLockoutAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetFailureLockoutActionOk() (*string, bool) {
	if o == nil || IsNil(o.FailureLockoutAction) {
		return nil, false
	}
	return o.FailureLockoutAction, true
}

// HasFailureLockoutAction returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasFailureLockoutAction() bool {
	if o != nil && !IsNil(o.FailureLockoutAction) {
		return true
	}

	return false
}

// SetFailureLockoutAction gets a reference to the given string and assigns it to the FailureLockoutAction field.
func (o *PasswordPolicyResponse) SetFailureLockoutAction(v string) {
	o.FailureLockoutAction = &v
}

// GetIdleLockoutInterval returns the IdleLockoutInterval field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetIdleLockoutInterval() string {
	if o == nil || IsNil(o.IdleLockoutInterval) {
		var ret string
		return ret
	}
	return *o.IdleLockoutInterval
}

// GetIdleLockoutIntervalOk returns a tuple with the IdleLockoutInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetIdleLockoutIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.IdleLockoutInterval) {
		return nil, false
	}
	return o.IdleLockoutInterval, true
}

// HasIdleLockoutInterval returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasIdleLockoutInterval() bool {
	if o != nil && !IsNil(o.IdleLockoutInterval) {
		return true
	}

	return false
}

// SetIdleLockoutInterval gets a reference to the given string and assigns it to the IdleLockoutInterval field.
func (o *PasswordPolicyResponse) SetIdleLockoutInterval(v string) {
	o.IdleLockoutInterval = &v
}

// GetAllowUserPasswordChanges returns the AllowUserPasswordChanges field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetAllowUserPasswordChanges() bool {
	if o == nil || IsNil(o.AllowUserPasswordChanges) {
		var ret bool
		return ret
	}
	return *o.AllowUserPasswordChanges
}

// GetAllowUserPasswordChangesOk returns a tuple with the AllowUserPasswordChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetAllowUserPasswordChangesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUserPasswordChanges) {
		return nil, false
	}
	return o.AllowUserPasswordChanges, true
}

// HasAllowUserPasswordChanges returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasAllowUserPasswordChanges() bool {
	if o != nil && !IsNil(o.AllowUserPasswordChanges) {
		return true
	}

	return false
}

// SetAllowUserPasswordChanges gets a reference to the given bool and assigns it to the AllowUserPasswordChanges field.
func (o *PasswordPolicyResponse) SetAllowUserPasswordChanges(v bool) {
	o.AllowUserPasswordChanges = &v
}

// GetPasswordChangeRequiresCurrentPassword returns the PasswordChangeRequiresCurrentPassword field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordChangeRequiresCurrentPassword() bool {
	if o == nil || IsNil(o.PasswordChangeRequiresCurrentPassword) {
		var ret bool
		return ret
	}
	return *o.PasswordChangeRequiresCurrentPassword
}

// GetPasswordChangeRequiresCurrentPasswordOk returns a tuple with the PasswordChangeRequiresCurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordChangeRequiresCurrentPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordChangeRequiresCurrentPassword) {
		return nil, false
	}
	return o.PasswordChangeRequiresCurrentPassword, true
}

// HasPasswordChangeRequiresCurrentPassword returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordChangeRequiresCurrentPassword() bool {
	if o != nil && !IsNil(o.PasswordChangeRequiresCurrentPassword) {
		return true
	}

	return false
}

// SetPasswordChangeRequiresCurrentPassword gets a reference to the given bool and assigns it to the PasswordChangeRequiresCurrentPassword field.
func (o *PasswordPolicyResponse) SetPasswordChangeRequiresCurrentPassword(v bool) {
	o.PasswordChangeRequiresCurrentPassword = &v
}

// GetPasswordRetirementBehavior returns the PasswordRetirementBehavior field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPasswordRetirementBehavior() []EnumpasswordPolicyPasswordRetirementBehaviorProp {
	if o == nil || IsNil(o.PasswordRetirementBehavior) {
		var ret []EnumpasswordPolicyPasswordRetirementBehaviorProp
		return ret
	}
	return o.PasswordRetirementBehavior
}

// GetPasswordRetirementBehaviorOk returns a tuple with the PasswordRetirementBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPasswordRetirementBehaviorOk() ([]EnumpasswordPolicyPasswordRetirementBehaviorProp, bool) {
	if o == nil || IsNil(o.PasswordRetirementBehavior) {
		return nil, false
	}
	return o.PasswordRetirementBehavior, true
}

// HasPasswordRetirementBehavior returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPasswordRetirementBehavior() bool {
	if o != nil && !IsNil(o.PasswordRetirementBehavior) {
		return true
	}

	return false
}

// SetPasswordRetirementBehavior gets a reference to the given []EnumpasswordPolicyPasswordRetirementBehaviorProp and assigns it to the PasswordRetirementBehavior field.
func (o *PasswordPolicyResponse) SetPasswordRetirementBehavior(v []EnumpasswordPolicyPasswordRetirementBehaviorProp) {
	o.PasswordRetirementBehavior = v
}

// GetMaxRetiredPasswordAge returns the MaxRetiredPasswordAge field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaxRetiredPasswordAge() string {
	if o == nil || IsNil(o.MaxRetiredPasswordAge) {
		var ret string
		return ret
	}
	return *o.MaxRetiredPasswordAge
}

// GetMaxRetiredPasswordAgeOk returns a tuple with the MaxRetiredPasswordAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaxRetiredPasswordAgeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxRetiredPasswordAge) {
		return nil, false
	}
	return o.MaxRetiredPasswordAge, true
}

// HasMaxRetiredPasswordAge returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaxRetiredPasswordAge() bool {
	if o != nil && !IsNil(o.MaxRetiredPasswordAge) {
		return true
	}

	return false
}

// SetMaxRetiredPasswordAge gets a reference to the given string and assigns it to the MaxRetiredPasswordAge field.
func (o *PasswordPolicyResponse) SetMaxRetiredPasswordAge(v string) {
	o.MaxRetiredPasswordAge = &v
}

// GetAllowedPasswordResetTokenUseCondition returns the AllowedPasswordResetTokenUseCondition field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetAllowedPasswordResetTokenUseCondition() []EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp {
	if o == nil || IsNil(o.AllowedPasswordResetTokenUseCondition) {
		var ret []EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp
		return ret
	}
	return o.AllowedPasswordResetTokenUseCondition
}

// GetAllowedPasswordResetTokenUseConditionOk returns a tuple with the AllowedPasswordResetTokenUseCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetAllowedPasswordResetTokenUseConditionOk() ([]EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp, bool) {
	if o == nil || IsNil(o.AllowedPasswordResetTokenUseCondition) {
		return nil, false
	}
	return o.AllowedPasswordResetTokenUseCondition, true
}

// HasAllowedPasswordResetTokenUseCondition returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasAllowedPasswordResetTokenUseCondition() bool {
	if o != nil && !IsNil(o.AllowedPasswordResetTokenUseCondition) {
		return true
	}

	return false
}

// SetAllowedPasswordResetTokenUseCondition gets a reference to the given []EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp and assigns it to the AllowedPasswordResetTokenUseCondition field.
func (o *PasswordPolicyResponse) SetAllowedPasswordResetTokenUseCondition(v []EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp) {
	o.AllowedPasswordResetTokenUseCondition = v
}

// GetForceChangeOnAdd returns the ForceChangeOnAdd field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetForceChangeOnAdd() bool {
	if o == nil || IsNil(o.ForceChangeOnAdd) {
		var ret bool
		return ret
	}
	return *o.ForceChangeOnAdd
}

// GetForceChangeOnAddOk returns a tuple with the ForceChangeOnAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetForceChangeOnAddOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceChangeOnAdd) {
		return nil, false
	}
	return o.ForceChangeOnAdd, true
}

// HasForceChangeOnAdd returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasForceChangeOnAdd() bool {
	if o != nil && !IsNil(o.ForceChangeOnAdd) {
		return true
	}

	return false
}

// SetForceChangeOnAdd gets a reference to the given bool and assigns it to the ForceChangeOnAdd field.
func (o *PasswordPolicyResponse) SetForceChangeOnAdd(v bool) {
	o.ForceChangeOnAdd = &v
}

// GetForceChangeOnReset returns the ForceChangeOnReset field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetForceChangeOnReset() bool {
	if o == nil || IsNil(o.ForceChangeOnReset) {
		var ret bool
		return ret
	}
	return *o.ForceChangeOnReset
}

// GetForceChangeOnResetOk returns a tuple with the ForceChangeOnReset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetForceChangeOnResetOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceChangeOnReset) {
		return nil, false
	}
	return o.ForceChangeOnReset, true
}

// HasForceChangeOnReset returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasForceChangeOnReset() bool {
	if o != nil && !IsNil(o.ForceChangeOnReset) {
		return true
	}

	return false
}

// SetForceChangeOnReset gets a reference to the given bool and assigns it to the ForceChangeOnReset field.
func (o *PasswordPolicyResponse) SetForceChangeOnReset(v bool) {
	o.ForceChangeOnReset = &v
}

// GetMaxPasswordResetAge returns the MaxPasswordResetAge field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaxPasswordResetAge() string {
	if o == nil || IsNil(o.MaxPasswordResetAge) {
		var ret string
		return ret
	}
	return *o.MaxPasswordResetAge
}

// GetMaxPasswordResetAgeOk returns a tuple with the MaxPasswordResetAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaxPasswordResetAgeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxPasswordResetAge) {
		return nil, false
	}
	return o.MaxPasswordResetAge, true
}

// HasMaxPasswordResetAge returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaxPasswordResetAge() bool {
	if o != nil && !IsNil(o.MaxPasswordResetAge) {
		return true
	}

	return false
}

// SetMaxPasswordResetAge gets a reference to the given string and assigns it to the MaxPasswordResetAge field.
func (o *PasswordPolicyResponse) SetMaxPasswordResetAge(v string) {
	o.MaxPasswordResetAge = &v
}

// GetSkipValidationForAdministrators returns the SkipValidationForAdministrators field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetSkipValidationForAdministrators() bool {
	if o == nil || IsNil(o.SkipValidationForAdministrators) {
		var ret bool
		return ret
	}
	return *o.SkipValidationForAdministrators
}

// GetSkipValidationForAdministratorsOk returns a tuple with the SkipValidationForAdministrators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetSkipValidationForAdministratorsOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipValidationForAdministrators) {
		return nil, false
	}
	return o.SkipValidationForAdministrators, true
}

// HasSkipValidationForAdministrators returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasSkipValidationForAdministrators() bool {
	if o != nil && !IsNil(o.SkipValidationForAdministrators) {
		return true
	}

	return false
}

// SetSkipValidationForAdministrators gets a reference to the given bool and assigns it to the SkipValidationForAdministrators field.
func (o *PasswordPolicyResponse) SetSkipValidationForAdministrators(v bool) {
	o.SkipValidationForAdministrators = &v
}

// GetMaximumRecentLoginHistorySuccessfulAuthenticationCount returns the MaximumRecentLoginHistorySuccessfulAuthenticationCount field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistorySuccessfulAuthenticationCount() int64 {
	if o == nil || IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationCount) {
		var ret int64
		return ret
	}
	return *o.MaximumRecentLoginHistorySuccessfulAuthenticationCount
}

// GetMaximumRecentLoginHistorySuccessfulAuthenticationCountOk returns a tuple with the MaximumRecentLoginHistorySuccessfulAuthenticationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistorySuccessfulAuthenticationCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationCount) {
		return nil, false
	}
	return o.MaximumRecentLoginHistorySuccessfulAuthenticationCount, true
}

// HasMaximumRecentLoginHistorySuccessfulAuthenticationCount returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaximumRecentLoginHistorySuccessfulAuthenticationCount() bool {
	if o != nil && !IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationCount) {
		return true
	}

	return false
}

// SetMaximumRecentLoginHistorySuccessfulAuthenticationCount gets a reference to the given int64 and assigns it to the MaximumRecentLoginHistorySuccessfulAuthenticationCount field.
func (o *PasswordPolicyResponse) SetMaximumRecentLoginHistorySuccessfulAuthenticationCount(v int64) {
	o.MaximumRecentLoginHistorySuccessfulAuthenticationCount = &v
}

// GetMaximumRecentLoginHistorySuccessfulAuthenticationDuration returns the MaximumRecentLoginHistorySuccessfulAuthenticationDuration field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistorySuccessfulAuthenticationDuration() string {
	if o == nil || IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration) {
		var ret string
		return ret
	}
	return *o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration
}

// GetMaximumRecentLoginHistorySuccessfulAuthenticationDurationOk returns a tuple with the MaximumRecentLoginHistorySuccessfulAuthenticationDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistorySuccessfulAuthenticationDurationOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration) {
		return nil, false
	}
	return o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration, true
}

// HasMaximumRecentLoginHistorySuccessfulAuthenticationDuration returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaximumRecentLoginHistorySuccessfulAuthenticationDuration() bool {
	if o != nil && !IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration) {
		return true
	}

	return false
}

// SetMaximumRecentLoginHistorySuccessfulAuthenticationDuration gets a reference to the given string and assigns it to the MaximumRecentLoginHistorySuccessfulAuthenticationDuration field.
func (o *PasswordPolicyResponse) SetMaximumRecentLoginHistorySuccessfulAuthenticationDuration(v string) {
	o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration = &v
}

// GetMaximumRecentLoginHistoryFailedAuthenticationCount returns the MaximumRecentLoginHistoryFailedAuthenticationCount field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistoryFailedAuthenticationCount() int64 {
	if o == nil || IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationCount) {
		var ret int64
		return ret
	}
	return *o.MaximumRecentLoginHistoryFailedAuthenticationCount
}

// GetMaximumRecentLoginHistoryFailedAuthenticationCountOk returns a tuple with the MaximumRecentLoginHistoryFailedAuthenticationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistoryFailedAuthenticationCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationCount) {
		return nil, false
	}
	return o.MaximumRecentLoginHistoryFailedAuthenticationCount, true
}

// HasMaximumRecentLoginHistoryFailedAuthenticationCount returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaximumRecentLoginHistoryFailedAuthenticationCount() bool {
	if o != nil && !IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationCount) {
		return true
	}

	return false
}

// SetMaximumRecentLoginHistoryFailedAuthenticationCount gets a reference to the given int64 and assigns it to the MaximumRecentLoginHistoryFailedAuthenticationCount field.
func (o *PasswordPolicyResponse) SetMaximumRecentLoginHistoryFailedAuthenticationCount(v int64) {
	o.MaximumRecentLoginHistoryFailedAuthenticationCount = &v
}

// GetMaximumRecentLoginHistoryFailedAuthenticationDuration returns the MaximumRecentLoginHistoryFailedAuthenticationDuration field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistoryFailedAuthenticationDuration() string {
	if o == nil || IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationDuration) {
		var ret string
		return ret
	}
	return *o.MaximumRecentLoginHistoryFailedAuthenticationDuration
}

// GetMaximumRecentLoginHistoryFailedAuthenticationDurationOk returns a tuple with the MaximumRecentLoginHistoryFailedAuthenticationDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMaximumRecentLoginHistoryFailedAuthenticationDurationOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationDuration) {
		return nil, false
	}
	return o.MaximumRecentLoginHistoryFailedAuthenticationDuration, true
}

// HasMaximumRecentLoginHistoryFailedAuthenticationDuration returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMaximumRecentLoginHistoryFailedAuthenticationDuration() bool {
	if o != nil && !IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationDuration) {
		return true
	}

	return false
}

// SetMaximumRecentLoginHistoryFailedAuthenticationDuration gets a reference to the given string and assigns it to the MaximumRecentLoginHistoryFailedAuthenticationDuration field.
func (o *PasswordPolicyResponse) SetMaximumRecentLoginHistoryFailedAuthenticationDuration(v string) {
	o.MaximumRecentLoginHistoryFailedAuthenticationDuration = &v
}

// GetRecentLoginHistorySimilarAttemptBehavior returns the RecentLoginHistorySimilarAttemptBehavior field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetRecentLoginHistorySimilarAttemptBehavior() EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp {
	if o == nil || IsNil(o.RecentLoginHistorySimilarAttemptBehavior) {
		var ret EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp
		return ret
	}
	return *o.RecentLoginHistorySimilarAttemptBehavior
}

// GetRecentLoginHistorySimilarAttemptBehaviorOk returns a tuple with the RecentLoginHistorySimilarAttemptBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetRecentLoginHistorySimilarAttemptBehaviorOk() (*EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp, bool) {
	if o == nil || IsNil(o.RecentLoginHistorySimilarAttemptBehavior) {
		return nil, false
	}
	return o.RecentLoginHistorySimilarAttemptBehavior, true
}

// HasRecentLoginHistorySimilarAttemptBehavior returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasRecentLoginHistorySimilarAttemptBehavior() bool {
	if o != nil && !IsNil(o.RecentLoginHistorySimilarAttemptBehavior) {
		return true
	}

	return false
}

// SetRecentLoginHistorySimilarAttemptBehavior gets a reference to the given EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp and assigns it to the RecentLoginHistorySimilarAttemptBehavior field.
func (o *PasswordPolicyResponse) SetRecentLoginHistorySimilarAttemptBehavior(v EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp) {
	o.RecentLoginHistorySimilarAttemptBehavior = &v
}

// GetLastLoginIPAddressAttribute returns the LastLoginIPAddressAttribute field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetLastLoginIPAddressAttribute() string {
	if o == nil || IsNil(o.LastLoginIPAddressAttribute) {
		var ret string
		return ret
	}
	return *o.LastLoginIPAddressAttribute
}

// GetLastLoginIPAddressAttributeOk returns a tuple with the LastLoginIPAddressAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetLastLoginIPAddressAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginIPAddressAttribute) {
		return nil, false
	}
	return o.LastLoginIPAddressAttribute, true
}

// HasLastLoginIPAddressAttribute returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasLastLoginIPAddressAttribute() bool {
	if o != nil && !IsNil(o.LastLoginIPAddressAttribute) {
		return true
	}

	return false
}

// SetLastLoginIPAddressAttribute gets a reference to the given string and assigns it to the LastLoginIPAddressAttribute field.
func (o *PasswordPolicyResponse) SetLastLoginIPAddressAttribute(v string) {
	o.LastLoginIPAddressAttribute = &v
}

// GetLastLoginTimeAttribute returns the LastLoginTimeAttribute field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetLastLoginTimeAttribute() string {
	if o == nil || IsNil(o.LastLoginTimeAttribute) {
		var ret string
		return ret
	}
	return *o.LastLoginTimeAttribute
}

// GetLastLoginTimeAttributeOk returns a tuple with the LastLoginTimeAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetLastLoginTimeAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginTimeAttribute) {
		return nil, false
	}
	return o.LastLoginTimeAttribute, true
}

// HasLastLoginTimeAttribute returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasLastLoginTimeAttribute() bool {
	if o != nil && !IsNil(o.LastLoginTimeAttribute) {
		return true
	}

	return false
}

// SetLastLoginTimeAttribute gets a reference to the given string and assigns it to the LastLoginTimeAttribute field.
func (o *PasswordPolicyResponse) SetLastLoginTimeAttribute(v string) {
	o.LastLoginTimeAttribute = &v
}

// GetLastLoginTimeFormat returns the LastLoginTimeFormat field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetLastLoginTimeFormat() string {
	if o == nil || IsNil(o.LastLoginTimeFormat) {
		var ret string
		return ret
	}
	return *o.LastLoginTimeFormat
}

// GetLastLoginTimeFormatOk returns a tuple with the LastLoginTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetLastLoginTimeFormatOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginTimeFormat) {
		return nil, false
	}
	return o.LastLoginTimeFormat, true
}

// HasLastLoginTimeFormat returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasLastLoginTimeFormat() bool {
	if o != nil && !IsNil(o.LastLoginTimeFormat) {
		return true
	}

	return false
}

// SetLastLoginTimeFormat gets a reference to the given string and assigns it to the LastLoginTimeFormat field.
func (o *PasswordPolicyResponse) SetLastLoginTimeFormat(v string) {
	o.LastLoginTimeFormat = &v
}

// GetPreviousLastLoginTimeFormat returns the PreviousLastLoginTimeFormat field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetPreviousLastLoginTimeFormat() []string {
	if o == nil || IsNil(o.PreviousLastLoginTimeFormat) {
		var ret []string
		return ret
	}
	return o.PreviousLastLoginTimeFormat
}

// GetPreviousLastLoginTimeFormatOk returns a tuple with the PreviousLastLoginTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetPreviousLastLoginTimeFormatOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousLastLoginTimeFormat) {
		return nil, false
	}
	return o.PreviousLastLoginTimeFormat, true
}

// HasPreviousLastLoginTimeFormat returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasPreviousLastLoginTimeFormat() bool {
	if o != nil && !IsNil(o.PreviousLastLoginTimeFormat) {
		return true
	}

	return false
}

// SetPreviousLastLoginTimeFormat gets a reference to the given []string and assigns it to the PreviousLastLoginTimeFormat field.
func (o *PasswordPolicyResponse) SetPreviousLastLoginTimeFormat(v []string) {
	o.PreviousLastLoginTimeFormat = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *PasswordPolicyResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *PasswordPolicyResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *PasswordPolicyResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *PasswordPolicyResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o PasswordPolicyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RequireSecureAuthentication) {
		toSerialize["requireSecureAuthentication"] = o.RequireSecureAuthentication
	}
	if !IsNil(o.RequireSecurePasswordChanges) {
		toSerialize["requireSecurePasswordChanges"] = o.RequireSecurePasswordChanges
	}
	if !IsNil(o.AccountStatusNotificationHandler) {
		toSerialize["accountStatusNotificationHandler"] = o.AccountStatusNotificationHandler
	}
	if !IsNil(o.StateUpdateFailurePolicy) {
		toSerialize["stateUpdateFailurePolicy"] = o.StateUpdateFailurePolicy
	}
	if !IsNil(o.EnableDebug) {
		toSerialize["enableDebug"] = o.EnableDebug
	}
	toSerialize["passwordAttribute"] = o.PasswordAttribute
	toSerialize["defaultPasswordStorageScheme"] = o.DefaultPasswordStorageScheme
	if !IsNil(o.DeprecatedPasswordStorageScheme) {
		toSerialize["deprecatedPasswordStorageScheme"] = o.DeprecatedPasswordStorageScheme
	}
	if !IsNil(o.AllowMultiplePasswordValues) {
		toSerialize["allowMultiplePasswordValues"] = o.AllowMultiplePasswordValues
	}
	if !IsNil(o.AllowPreEncodedPasswords) {
		toSerialize["allowPreEncodedPasswords"] = o.AllowPreEncodedPasswords
	}
	if !IsNil(o.PasswordValidator) {
		toSerialize["passwordValidator"] = o.PasswordValidator
	}
	if !IsNil(o.BindPasswordValidator) {
		toSerialize["bindPasswordValidator"] = o.BindPasswordValidator
	}
	if !IsNil(o.MinimumBindPasswordValidationFrequency) {
		toSerialize["minimumBindPasswordValidationFrequency"] = o.MinimumBindPasswordValidationFrequency
	}
	if !IsNil(o.BindPasswordValidationFailureAction) {
		toSerialize["bindPasswordValidationFailureAction"] = o.BindPasswordValidationFailureAction
	}
	if !IsNil(o.PasswordGenerator) {
		toSerialize["passwordGenerator"] = o.PasswordGenerator
	}
	if !IsNil(o.PasswordHistoryCount) {
		toSerialize["passwordHistoryCount"] = o.PasswordHistoryCount
	}
	if !IsNil(o.PasswordHistoryDuration) {
		toSerialize["passwordHistoryDuration"] = o.PasswordHistoryDuration
	}
	if !IsNil(o.MinPasswordAge) {
		toSerialize["minPasswordAge"] = o.MinPasswordAge
	}
	if !IsNil(o.MaxPasswordAge) {
		toSerialize["maxPasswordAge"] = o.MaxPasswordAge
	}
	if !IsNil(o.PasswordExpirationWarningInterval) {
		toSerialize["passwordExpirationWarningInterval"] = o.PasswordExpirationWarningInterval
	}
	if !IsNil(o.ExpirePasswordsWithoutWarning) {
		toSerialize["expirePasswordsWithoutWarning"] = o.ExpirePasswordsWithoutWarning
	}
	if !IsNil(o.ReturnPasswordExpirationControls) {
		toSerialize["returnPasswordExpirationControls"] = o.ReturnPasswordExpirationControls
	}
	if !IsNil(o.AllowExpiredPasswordChanges) {
		toSerialize["allowExpiredPasswordChanges"] = o.AllowExpiredPasswordChanges
	}
	if !IsNil(o.GraceLoginCount) {
		toSerialize["graceLoginCount"] = o.GraceLoginCount
	}
	if !IsNil(o.RequireChangeByTime) {
		toSerialize["requireChangeByTime"] = o.RequireChangeByTime
	}
	if !IsNil(o.LockoutFailureCount) {
		toSerialize["lockoutFailureCount"] = o.LockoutFailureCount
	}
	if !IsNil(o.LockoutDuration) {
		toSerialize["lockoutDuration"] = o.LockoutDuration
	}
	if !IsNil(o.LockoutFailureExpirationInterval) {
		toSerialize["lockoutFailureExpirationInterval"] = o.LockoutFailureExpirationInterval
	}
	if !IsNil(o.IgnoreDuplicatePasswordFailures) {
		toSerialize["ignoreDuplicatePasswordFailures"] = o.IgnoreDuplicatePasswordFailures
	}
	if !IsNil(o.FailureLockoutAction) {
		toSerialize["failureLockoutAction"] = o.FailureLockoutAction
	}
	if !IsNil(o.IdleLockoutInterval) {
		toSerialize["idleLockoutInterval"] = o.IdleLockoutInterval
	}
	if !IsNil(o.AllowUserPasswordChanges) {
		toSerialize["allowUserPasswordChanges"] = o.AllowUserPasswordChanges
	}
	if !IsNil(o.PasswordChangeRequiresCurrentPassword) {
		toSerialize["passwordChangeRequiresCurrentPassword"] = o.PasswordChangeRequiresCurrentPassword
	}
	if !IsNil(o.PasswordRetirementBehavior) {
		toSerialize["passwordRetirementBehavior"] = o.PasswordRetirementBehavior
	}
	if !IsNil(o.MaxRetiredPasswordAge) {
		toSerialize["maxRetiredPasswordAge"] = o.MaxRetiredPasswordAge
	}
	if !IsNil(o.AllowedPasswordResetTokenUseCondition) {
		toSerialize["allowedPasswordResetTokenUseCondition"] = o.AllowedPasswordResetTokenUseCondition
	}
	if !IsNil(o.ForceChangeOnAdd) {
		toSerialize["forceChangeOnAdd"] = o.ForceChangeOnAdd
	}
	if !IsNil(o.ForceChangeOnReset) {
		toSerialize["forceChangeOnReset"] = o.ForceChangeOnReset
	}
	if !IsNil(o.MaxPasswordResetAge) {
		toSerialize["maxPasswordResetAge"] = o.MaxPasswordResetAge
	}
	if !IsNil(o.SkipValidationForAdministrators) {
		toSerialize["skipValidationForAdministrators"] = o.SkipValidationForAdministrators
	}
	if !IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationCount) {
		toSerialize["maximumRecentLoginHistorySuccessfulAuthenticationCount"] = o.MaximumRecentLoginHistorySuccessfulAuthenticationCount
	}
	if !IsNil(o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration) {
		toSerialize["maximumRecentLoginHistorySuccessfulAuthenticationDuration"] = o.MaximumRecentLoginHistorySuccessfulAuthenticationDuration
	}
	if !IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationCount) {
		toSerialize["maximumRecentLoginHistoryFailedAuthenticationCount"] = o.MaximumRecentLoginHistoryFailedAuthenticationCount
	}
	if !IsNil(o.MaximumRecentLoginHistoryFailedAuthenticationDuration) {
		toSerialize["maximumRecentLoginHistoryFailedAuthenticationDuration"] = o.MaximumRecentLoginHistoryFailedAuthenticationDuration
	}
	if !IsNil(o.RecentLoginHistorySimilarAttemptBehavior) {
		toSerialize["recentLoginHistorySimilarAttemptBehavior"] = o.RecentLoginHistorySimilarAttemptBehavior
	}
	if !IsNil(o.LastLoginIPAddressAttribute) {
		toSerialize["lastLoginIPAddressAttribute"] = o.LastLoginIPAddressAttribute
	}
	if !IsNil(o.LastLoginTimeAttribute) {
		toSerialize["lastLoginTimeAttribute"] = o.LastLoginTimeAttribute
	}
	if !IsNil(o.LastLoginTimeFormat) {
		toSerialize["lastLoginTimeFormat"] = o.LastLoginTimeFormat
	}
	if !IsNil(o.PreviousLastLoginTimeFormat) {
		toSerialize["previousLastLoginTimeFormat"] = o.PreviousLastLoginTimeFormat
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullablePasswordPolicyResponse struct {
	value *PasswordPolicyResponse
	isSet bool
}

func (v NullablePasswordPolicyResponse) Get() *PasswordPolicyResponse {
	return v.value
}

func (v *NullablePasswordPolicyResponse) Set(val *PasswordPolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicyResponse(val *PasswordPolicyResponse) *NullablePasswordPolicyResponse {
	return &NullablePasswordPolicyResponse{value: val, isSet: true}
}

func (v NullablePasswordPolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
