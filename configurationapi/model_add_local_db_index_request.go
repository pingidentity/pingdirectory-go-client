/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// AddLocalDbIndexRequest struct for AddLocalDbIndexRequest
type AddLocalDbIndexRequest struct {
	// Name of the new Local DB Index
	IndexName string                      `json:"indexName"`
	Schemas   []EnumlocalDbIndexSchemaUrn `json:"schemas,omitempty"`
	// Specifies the name of the attribute for which the index is to be maintained.
	Attribute string `json:"attribute"`
	// Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.
	IndexEntryLimit *int32 `json:"indexEntryLimit,omitempty"`
	// Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance between search and update performance.
	SubstringIndexEntryLimit *int32 `json:"substringIndexEntryLimit,omitempty"`
	// Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit.
	MaintainMatchCountForKeysExceedingEntryLimit *bool                           `json:"maintainMatchCountForKeysExceedingEntryLimit,omitempty"`
	IndexType                                    []EnumlocalDbIndexIndexTypeProp `json:"indexType"`
	// The length of substrings in a substring index.
	SubstringLength *int32 `json:"substringLength,omitempty"`
	// If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at startup.
	PrimeIndex *bool `json:"primeIndex,omitempty"`
	// If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.
	PrimeInternalNodesOnly *bool `json:"primeInternalNodesOnly,omitempty"`
	// A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter.
	EqualityIndexFilter []string `json:"equalityIndexFilter,omitempty"`
	// Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters.
	MaintainEqualityIndexWithoutFilter *bool                          `json:"maintainEqualityIndexWithoutFilter,omitempty"`
	CacheMode                          *EnumlocalDbIndexCacheModeProp `json:"cacheMode,omitempty"`
}

// NewAddLocalDbIndexRequest instantiates a new AddLocalDbIndexRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLocalDbIndexRequest(indexName string, attribute string, indexType []EnumlocalDbIndexIndexTypeProp) *AddLocalDbIndexRequest {
	this := AddLocalDbIndexRequest{}
	this.IndexName = indexName
	this.Attribute = attribute
	this.IndexType = indexType
	return &this
}

// NewAddLocalDbIndexRequestWithDefaults instantiates a new AddLocalDbIndexRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLocalDbIndexRequestWithDefaults() *AddLocalDbIndexRequest {
	this := AddLocalDbIndexRequest{}
	return &this
}

// GetIndexName returns the IndexName field value
func (o *AddLocalDbIndexRequest) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *AddLocalDbIndexRequest) SetIndexName(v string) {
	o.IndexName = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetSchemas() []EnumlocalDbIndexSchemaUrn {
	if o == nil || isNil(o.Schemas) {
		var ret []EnumlocalDbIndexSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetSchemasOk() ([]EnumlocalDbIndexSchemaUrn, bool) {
	if o == nil || isNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasSchemas() bool {
	if o != nil && !isNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumlocalDbIndexSchemaUrn and assigns it to the Schemas field.
func (o *AddLocalDbIndexRequest) SetSchemas(v []EnumlocalDbIndexSchemaUrn) {
	o.Schemas = v
}

// GetAttribute returns the Attribute field value
func (o *AddLocalDbIndexRequest) GetAttribute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *AddLocalDbIndexRequest) SetAttribute(v string) {
	o.Attribute = v
}

// GetIndexEntryLimit returns the IndexEntryLimit field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetIndexEntryLimit() int32 {
	if o == nil || isNil(o.IndexEntryLimit) {
		var ret int32
		return ret
	}
	return *o.IndexEntryLimit
}

// GetIndexEntryLimitOk returns a tuple with the IndexEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetIndexEntryLimitOk() (*int32, bool) {
	if o == nil || isNil(o.IndexEntryLimit) {
		return nil, false
	}
	return o.IndexEntryLimit, true
}

// HasIndexEntryLimit returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasIndexEntryLimit() bool {
	if o != nil && !isNil(o.IndexEntryLimit) {
		return true
	}

	return false
}

// SetIndexEntryLimit gets a reference to the given int32 and assigns it to the IndexEntryLimit field.
func (o *AddLocalDbIndexRequest) SetIndexEntryLimit(v int32) {
	o.IndexEntryLimit = &v
}

// GetSubstringIndexEntryLimit returns the SubstringIndexEntryLimit field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetSubstringIndexEntryLimit() int32 {
	if o == nil || isNil(o.SubstringIndexEntryLimit) {
		var ret int32
		return ret
	}
	return *o.SubstringIndexEntryLimit
}

// GetSubstringIndexEntryLimitOk returns a tuple with the SubstringIndexEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetSubstringIndexEntryLimitOk() (*int32, bool) {
	if o == nil || isNil(o.SubstringIndexEntryLimit) {
		return nil, false
	}
	return o.SubstringIndexEntryLimit, true
}

// HasSubstringIndexEntryLimit returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasSubstringIndexEntryLimit() bool {
	if o != nil && !isNil(o.SubstringIndexEntryLimit) {
		return true
	}

	return false
}

// SetSubstringIndexEntryLimit gets a reference to the given int32 and assigns it to the SubstringIndexEntryLimit field.
func (o *AddLocalDbIndexRequest) SetSubstringIndexEntryLimit(v int32) {
	o.SubstringIndexEntryLimit = &v
}

// GetMaintainMatchCountForKeysExceedingEntryLimit returns the MaintainMatchCountForKeysExceedingEntryLimit field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetMaintainMatchCountForKeysExceedingEntryLimit() bool {
	if o == nil || isNil(o.MaintainMatchCountForKeysExceedingEntryLimit) {
		var ret bool
		return ret
	}
	return *o.MaintainMatchCountForKeysExceedingEntryLimit
}

// GetMaintainMatchCountForKeysExceedingEntryLimitOk returns a tuple with the MaintainMatchCountForKeysExceedingEntryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetMaintainMatchCountForKeysExceedingEntryLimitOk() (*bool, bool) {
	if o == nil || isNil(o.MaintainMatchCountForKeysExceedingEntryLimit) {
		return nil, false
	}
	return o.MaintainMatchCountForKeysExceedingEntryLimit, true
}

// HasMaintainMatchCountForKeysExceedingEntryLimit returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasMaintainMatchCountForKeysExceedingEntryLimit() bool {
	if o != nil && !isNil(o.MaintainMatchCountForKeysExceedingEntryLimit) {
		return true
	}

	return false
}

// SetMaintainMatchCountForKeysExceedingEntryLimit gets a reference to the given bool and assigns it to the MaintainMatchCountForKeysExceedingEntryLimit field.
func (o *AddLocalDbIndexRequest) SetMaintainMatchCountForKeysExceedingEntryLimit(v bool) {
	o.MaintainMatchCountForKeysExceedingEntryLimit = &v
}

// GetIndexType returns the IndexType field value
func (o *AddLocalDbIndexRequest) GetIndexType() []EnumlocalDbIndexIndexTypeProp {
	if o == nil {
		var ret []EnumlocalDbIndexIndexTypeProp
		return ret
	}

	return o.IndexType
}

// GetIndexTypeOk returns a tuple with the IndexType field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetIndexTypeOk() ([]EnumlocalDbIndexIndexTypeProp, bool) {
	if o == nil {
		return nil, false
	}
	return o.IndexType, true
}

// SetIndexType sets field value
func (o *AddLocalDbIndexRequest) SetIndexType(v []EnumlocalDbIndexIndexTypeProp) {
	o.IndexType = v
}

// GetSubstringLength returns the SubstringLength field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetSubstringLength() int32 {
	if o == nil || isNil(o.SubstringLength) {
		var ret int32
		return ret
	}
	return *o.SubstringLength
}

// GetSubstringLengthOk returns a tuple with the SubstringLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetSubstringLengthOk() (*int32, bool) {
	if o == nil || isNil(o.SubstringLength) {
		return nil, false
	}
	return o.SubstringLength, true
}

// HasSubstringLength returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasSubstringLength() bool {
	if o != nil && !isNil(o.SubstringLength) {
		return true
	}

	return false
}

// SetSubstringLength gets a reference to the given int32 and assigns it to the SubstringLength field.
func (o *AddLocalDbIndexRequest) SetSubstringLength(v int32) {
	o.SubstringLength = &v
}

// GetPrimeIndex returns the PrimeIndex field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetPrimeIndex() bool {
	if o == nil || isNil(o.PrimeIndex) {
		var ret bool
		return ret
	}
	return *o.PrimeIndex
}

// GetPrimeIndexOk returns a tuple with the PrimeIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetPrimeIndexOk() (*bool, bool) {
	if o == nil || isNil(o.PrimeIndex) {
		return nil, false
	}
	return o.PrimeIndex, true
}

// HasPrimeIndex returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasPrimeIndex() bool {
	if o != nil && !isNil(o.PrimeIndex) {
		return true
	}

	return false
}

// SetPrimeIndex gets a reference to the given bool and assigns it to the PrimeIndex field.
func (o *AddLocalDbIndexRequest) SetPrimeIndex(v bool) {
	o.PrimeIndex = &v
}

// GetPrimeInternalNodesOnly returns the PrimeInternalNodesOnly field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetPrimeInternalNodesOnly() bool {
	if o == nil || isNil(o.PrimeInternalNodesOnly) {
		var ret bool
		return ret
	}
	return *o.PrimeInternalNodesOnly
}

// GetPrimeInternalNodesOnlyOk returns a tuple with the PrimeInternalNodesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetPrimeInternalNodesOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.PrimeInternalNodesOnly) {
		return nil, false
	}
	return o.PrimeInternalNodesOnly, true
}

// HasPrimeInternalNodesOnly returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasPrimeInternalNodesOnly() bool {
	if o != nil && !isNil(o.PrimeInternalNodesOnly) {
		return true
	}

	return false
}

// SetPrimeInternalNodesOnly gets a reference to the given bool and assigns it to the PrimeInternalNodesOnly field.
func (o *AddLocalDbIndexRequest) SetPrimeInternalNodesOnly(v bool) {
	o.PrimeInternalNodesOnly = &v
}

// GetEqualityIndexFilter returns the EqualityIndexFilter field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetEqualityIndexFilter() []string {
	if o == nil || isNil(o.EqualityIndexFilter) {
		var ret []string
		return ret
	}
	return o.EqualityIndexFilter
}

// GetEqualityIndexFilterOk returns a tuple with the EqualityIndexFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetEqualityIndexFilterOk() ([]string, bool) {
	if o == nil || isNil(o.EqualityIndexFilter) {
		return nil, false
	}
	return o.EqualityIndexFilter, true
}

// HasEqualityIndexFilter returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasEqualityIndexFilter() bool {
	if o != nil && !isNil(o.EqualityIndexFilter) {
		return true
	}

	return false
}

// SetEqualityIndexFilter gets a reference to the given []string and assigns it to the EqualityIndexFilter field.
func (o *AddLocalDbIndexRequest) SetEqualityIndexFilter(v []string) {
	o.EqualityIndexFilter = v
}

// GetMaintainEqualityIndexWithoutFilter returns the MaintainEqualityIndexWithoutFilter field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetMaintainEqualityIndexWithoutFilter() bool {
	if o == nil || isNil(o.MaintainEqualityIndexWithoutFilter) {
		var ret bool
		return ret
	}
	return *o.MaintainEqualityIndexWithoutFilter
}

// GetMaintainEqualityIndexWithoutFilterOk returns a tuple with the MaintainEqualityIndexWithoutFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetMaintainEqualityIndexWithoutFilterOk() (*bool, bool) {
	if o == nil || isNil(o.MaintainEqualityIndexWithoutFilter) {
		return nil, false
	}
	return o.MaintainEqualityIndexWithoutFilter, true
}

// HasMaintainEqualityIndexWithoutFilter returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasMaintainEqualityIndexWithoutFilter() bool {
	if o != nil && !isNil(o.MaintainEqualityIndexWithoutFilter) {
		return true
	}

	return false
}

// SetMaintainEqualityIndexWithoutFilter gets a reference to the given bool and assigns it to the MaintainEqualityIndexWithoutFilter field.
func (o *AddLocalDbIndexRequest) SetMaintainEqualityIndexWithoutFilter(v bool) {
	o.MaintainEqualityIndexWithoutFilter = &v
}

// GetCacheMode returns the CacheMode field value if set, zero value otherwise.
func (o *AddLocalDbIndexRequest) GetCacheMode() EnumlocalDbIndexCacheModeProp {
	if o == nil || isNil(o.CacheMode) {
		var ret EnumlocalDbIndexCacheModeProp
		return ret
	}
	return *o.CacheMode
}

// GetCacheModeOk returns a tuple with the CacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbIndexRequest) GetCacheModeOk() (*EnumlocalDbIndexCacheModeProp, bool) {
	if o == nil || isNil(o.CacheMode) {
		return nil, false
	}
	return o.CacheMode, true
}

// HasCacheMode returns a boolean if a field has been set.
func (o *AddLocalDbIndexRequest) HasCacheMode() bool {
	if o != nil && !isNil(o.CacheMode) {
		return true
	}

	return false
}

// SetCacheMode gets a reference to the given EnumlocalDbIndexCacheModeProp and assigns it to the CacheMode field.
func (o *AddLocalDbIndexRequest) SetCacheMode(v EnumlocalDbIndexCacheModeProp) {
	o.CacheMode = &v
}

func (o AddLocalDbIndexRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["indexName"] = o.IndexName
	}
	if !isNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["attribute"] = o.Attribute
	}
	if !isNil(o.IndexEntryLimit) {
		toSerialize["indexEntryLimit"] = o.IndexEntryLimit
	}
	if !isNil(o.SubstringIndexEntryLimit) {
		toSerialize["substringIndexEntryLimit"] = o.SubstringIndexEntryLimit
	}
	if !isNil(o.MaintainMatchCountForKeysExceedingEntryLimit) {
		toSerialize["maintainMatchCountForKeysExceedingEntryLimit"] = o.MaintainMatchCountForKeysExceedingEntryLimit
	}
	if true {
		toSerialize["indexType"] = o.IndexType
	}
	if !isNil(o.SubstringLength) {
		toSerialize["substringLength"] = o.SubstringLength
	}
	if !isNil(o.PrimeIndex) {
		toSerialize["primeIndex"] = o.PrimeIndex
	}
	if !isNil(o.PrimeInternalNodesOnly) {
		toSerialize["primeInternalNodesOnly"] = o.PrimeInternalNodesOnly
	}
	if !isNil(o.EqualityIndexFilter) {
		toSerialize["equalityIndexFilter"] = o.EqualityIndexFilter
	}
	if !isNil(o.MaintainEqualityIndexWithoutFilter) {
		toSerialize["maintainEqualityIndexWithoutFilter"] = o.MaintainEqualityIndexWithoutFilter
	}
	if !isNil(o.CacheMode) {
		toSerialize["cacheMode"] = o.CacheMode
	}
	return json.Marshal(toSerialize)
}

type NullableAddLocalDbIndexRequest struct {
	value *AddLocalDbIndexRequest
	isSet bool
}

func (v NullableAddLocalDbIndexRequest) Get() *AddLocalDbIndexRequest {
	return v.value
}

func (v *NullableAddLocalDbIndexRequest) Set(val *AddLocalDbIndexRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLocalDbIndexRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLocalDbIndexRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLocalDbIndexRequest(val *AddLocalDbIndexRequest) *NullableAddLocalDbIndexRequest {
	return &NullableAddLocalDbIndexRequest{value: val, isSet: true}
}

func (v NullableAddLocalDbIndexRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLocalDbIndexRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
