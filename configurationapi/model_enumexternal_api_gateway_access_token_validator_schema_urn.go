/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalApiGatewayAccessTokenValidatorSchemaUrn the model 'EnumexternalApiGatewayAccessTokenValidatorSchemaUrn'
type EnumexternalApiGatewayAccessTokenValidatorSchemaUrn string

// List of Enumexternal-api-gateway-access-token-validatorSchemaUrn
const (
	ENUMEXTERNALAPIGATEWAYACCESSTOKENVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ACCESS_TOKEN_VALIDATOREXTERNAL_API_GATEWAY EnumexternalApiGatewayAccessTokenValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:access-token-validator:external-api-gateway"
)

// All allowed values of EnumexternalApiGatewayAccessTokenValidatorSchemaUrn enum
var AllowedEnumexternalApiGatewayAccessTokenValidatorSchemaUrnEnumValues = []EnumexternalApiGatewayAccessTokenValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:access-token-validator:external-api-gateway",
}

func (v *EnumexternalApiGatewayAccessTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalApiGatewayAccessTokenValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumexternalApiGatewayAccessTokenValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalApiGatewayAccessTokenValidatorSchemaUrn", value)
}

// NewEnumexternalApiGatewayAccessTokenValidatorSchemaUrnFromValue returns a pointer to a valid EnumexternalApiGatewayAccessTokenValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalApiGatewayAccessTokenValidatorSchemaUrnFromValue(v string) (*EnumexternalApiGatewayAccessTokenValidatorSchemaUrn, error) {
	ev := EnumexternalApiGatewayAccessTokenValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalApiGatewayAccessTokenValidatorSchemaUrn: valid values are %v", v, AllowedEnumexternalApiGatewayAccessTokenValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalApiGatewayAccessTokenValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumexternalApiGatewayAccessTokenValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-api-gateway-access-token-validatorSchemaUrn value
func (v EnumexternalApiGatewayAccessTokenValidatorSchemaUrn) Ptr() *EnumexternalApiGatewayAccessTokenValidatorSchemaUrn {
	return &v
}

type NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn struct {
	value *EnumexternalApiGatewayAccessTokenValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn) Get() *EnumexternalApiGatewayAccessTokenValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn) Set(val *EnumexternalApiGatewayAccessTokenValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn(val *EnumexternalApiGatewayAccessTokenValidatorSchemaUrn) *NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn {
	return &NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalApiGatewayAccessTokenValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
