/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpreUpdateConfigPluginSchemaUrn the model 'EnumpreUpdateConfigPluginSchemaUrn'
type EnumpreUpdateConfigPluginSchemaUrn string

// List of Enumpre-update-config-pluginSchemaUrn
const (
	ENUMPREUPDATECONFIGPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINPRE_UPDATE_CONFIG EnumpreUpdateConfigPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:pre-update-config"
)

// All allowed values of EnumpreUpdateConfigPluginSchemaUrn enum
var AllowedEnumpreUpdateConfigPluginSchemaUrnEnumValues = []EnumpreUpdateConfigPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:pre-update-config",
}

func (v *EnumpreUpdateConfigPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpreUpdateConfigPluginSchemaUrn(value)
	for _, existing := range AllowedEnumpreUpdateConfigPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpreUpdateConfigPluginSchemaUrn", value)
}

// NewEnumpreUpdateConfigPluginSchemaUrnFromValue returns a pointer to a valid EnumpreUpdateConfigPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpreUpdateConfigPluginSchemaUrnFromValue(v string) (*EnumpreUpdateConfigPluginSchemaUrn, error) {
	ev := EnumpreUpdateConfigPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpreUpdateConfigPluginSchemaUrn: valid values are %v", v, AllowedEnumpreUpdateConfigPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpreUpdateConfigPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpreUpdateConfigPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpre-update-config-pluginSchemaUrn value
func (v EnumpreUpdateConfigPluginSchemaUrn) Ptr() *EnumpreUpdateConfigPluginSchemaUrn {
	return &v
}

type NullableEnumpreUpdateConfigPluginSchemaUrn struct {
	value *EnumpreUpdateConfigPluginSchemaUrn
	isSet bool
}

func (v NullableEnumpreUpdateConfigPluginSchemaUrn) Get() *EnumpreUpdateConfigPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumpreUpdateConfigPluginSchemaUrn) Set(val *EnumpreUpdateConfigPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpreUpdateConfigPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpreUpdateConfigPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpreUpdateConfigPluginSchemaUrn(val *EnumpreUpdateConfigPluginSchemaUrn) *NullableEnumpreUpdateConfigPluginSchemaUrn {
	return &NullableEnumpreUpdateConfigPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpreUpdateConfigPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpreUpdateConfigPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
