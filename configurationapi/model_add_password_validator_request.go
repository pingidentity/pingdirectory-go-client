/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddPasswordValidatorRequest - struct for AddPasswordValidatorRequest
type AddPasswordValidatorRequest struct {
	AddAttributeValuePasswordValidatorRequest       *AddAttributeValuePasswordValidatorRequest
	AddCharacterSetPasswordValidatorRequest         *AddCharacterSetPasswordValidatorRequest
	AddDictionaryPasswordValidatorRequest           *AddDictionaryPasswordValidatorRequest
	AddDisallowedCharactersPasswordValidatorRequest *AddDisallowedCharactersPasswordValidatorRequest
	AddGroovyScriptedPasswordValidatorRequest       *AddGroovyScriptedPasswordValidatorRequest
	AddHaystackPasswordValidatorRequest             *AddHaystackPasswordValidatorRequest
	AddLengthBasedPasswordValidatorRequest          *AddLengthBasedPasswordValidatorRequest
	AddPwnedPasswordsPasswordValidatorRequest       *AddPwnedPasswordsPasswordValidatorRequest
	AddRegularExpressionPasswordValidatorRequest    *AddRegularExpressionPasswordValidatorRequest
	AddRepeatedCharactersPasswordValidatorRequest   *AddRepeatedCharactersPasswordValidatorRequest
	AddSimilarityBasedPasswordValidatorRequest      *AddSimilarityBasedPasswordValidatorRequest
	AddThirdPartyPasswordValidatorRequest           *AddThirdPartyPasswordValidatorRequest
	AddUniqueCharactersPasswordValidatorRequest     *AddUniqueCharactersPasswordValidatorRequest
	AddUtf8PasswordValidatorRequest                 *AddUtf8PasswordValidatorRequest
}

// AddAttributeValuePasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddAttributeValuePasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddAttributeValuePasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddAttributeValuePasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddAttributeValuePasswordValidatorRequest: v,
	}
}

// AddCharacterSetPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddCharacterSetPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddCharacterSetPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddCharacterSetPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddCharacterSetPasswordValidatorRequest: v,
	}
}

// AddDictionaryPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddDictionaryPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddDictionaryPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddDictionaryPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddDictionaryPasswordValidatorRequest: v,
	}
}

// AddDisallowedCharactersPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddDisallowedCharactersPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddDisallowedCharactersPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddDisallowedCharactersPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddDisallowedCharactersPasswordValidatorRequest: v,
	}
}

// AddGroovyScriptedPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddGroovyScriptedPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddGroovyScriptedPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddGroovyScriptedPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddGroovyScriptedPasswordValidatorRequest: v,
	}
}

// AddHaystackPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddHaystackPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddHaystackPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddHaystackPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddHaystackPasswordValidatorRequest: v,
	}
}

// AddLengthBasedPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddLengthBasedPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddLengthBasedPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddLengthBasedPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddLengthBasedPasswordValidatorRequest: v,
	}
}

// AddPwnedPasswordsPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddPwnedPasswordsPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddPwnedPasswordsPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddPwnedPasswordsPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddPwnedPasswordsPasswordValidatorRequest: v,
	}
}

// AddRegularExpressionPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddRegularExpressionPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddRegularExpressionPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddRegularExpressionPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddRegularExpressionPasswordValidatorRequest: v,
	}
}

// AddRepeatedCharactersPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddRepeatedCharactersPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddRepeatedCharactersPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddRepeatedCharactersPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddRepeatedCharactersPasswordValidatorRequest: v,
	}
}

// AddSimilarityBasedPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddSimilarityBasedPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddSimilarityBasedPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddSimilarityBasedPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddSimilarityBasedPasswordValidatorRequest: v,
	}
}

// AddThirdPartyPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddThirdPartyPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddThirdPartyPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddThirdPartyPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddThirdPartyPasswordValidatorRequest: v,
	}
}

// AddUniqueCharactersPasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddUniqueCharactersPasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddUniqueCharactersPasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddUniqueCharactersPasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddUniqueCharactersPasswordValidatorRequest: v,
	}
}

// AddUtf8PasswordValidatorRequestAsAddPasswordValidatorRequest is a convenience function that returns AddUtf8PasswordValidatorRequest wrapped in AddPasswordValidatorRequest
func AddUtf8PasswordValidatorRequestAsAddPasswordValidatorRequest(v *AddUtf8PasswordValidatorRequest) AddPasswordValidatorRequest {
	return AddPasswordValidatorRequest{
		AddUtf8PasswordValidatorRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddPasswordValidatorRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAttributeValuePasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddAttributeValuePasswordValidatorRequest)
	if err == nil {
		jsonAddAttributeValuePasswordValidatorRequest, _ := json.Marshal(dst.AddAttributeValuePasswordValidatorRequest)
		if string(jsonAddAttributeValuePasswordValidatorRequest) == "{}" { // empty struct
			dst.AddAttributeValuePasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAttributeValuePasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddCharacterSetPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddCharacterSetPasswordValidatorRequest)
	if err == nil {
		jsonAddCharacterSetPasswordValidatorRequest, _ := json.Marshal(dst.AddCharacterSetPasswordValidatorRequest)
		if string(jsonAddCharacterSetPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddCharacterSetPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddCharacterSetPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddDictionaryPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddDictionaryPasswordValidatorRequest)
	if err == nil {
		jsonAddDictionaryPasswordValidatorRequest, _ := json.Marshal(dst.AddDictionaryPasswordValidatorRequest)
		if string(jsonAddDictionaryPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddDictionaryPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddDictionaryPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddDisallowedCharactersPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddDisallowedCharactersPasswordValidatorRequest)
	if err == nil {
		jsonAddDisallowedCharactersPasswordValidatorRequest, _ := json.Marshal(dst.AddDisallowedCharactersPasswordValidatorRequest)
		if string(jsonAddDisallowedCharactersPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddDisallowedCharactersPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddDisallowedCharactersPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddGroovyScriptedPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddGroovyScriptedPasswordValidatorRequest)
	if err == nil {
		jsonAddGroovyScriptedPasswordValidatorRequest, _ := json.Marshal(dst.AddGroovyScriptedPasswordValidatorRequest)
		if string(jsonAddGroovyScriptedPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddGroovyScriptedPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddGroovyScriptedPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddHaystackPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddHaystackPasswordValidatorRequest)
	if err == nil {
		jsonAddHaystackPasswordValidatorRequest, _ := json.Marshal(dst.AddHaystackPasswordValidatorRequest)
		if string(jsonAddHaystackPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddHaystackPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddHaystackPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddLengthBasedPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddLengthBasedPasswordValidatorRequest)
	if err == nil {
		jsonAddLengthBasedPasswordValidatorRequest, _ := json.Marshal(dst.AddLengthBasedPasswordValidatorRequest)
		if string(jsonAddLengthBasedPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddLengthBasedPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddLengthBasedPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddPwnedPasswordsPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddPwnedPasswordsPasswordValidatorRequest)
	if err == nil {
		jsonAddPwnedPasswordsPasswordValidatorRequest, _ := json.Marshal(dst.AddPwnedPasswordsPasswordValidatorRequest)
		if string(jsonAddPwnedPasswordsPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddPwnedPasswordsPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddPwnedPasswordsPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddRegularExpressionPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddRegularExpressionPasswordValidatorRequest)
	if err == nil {
		jsonAddRegularExpressionPasswordValidatorRequest, _ := json.Marshal(dst.AddRegularExpressionPasswordValidatorRequest)
		if string(jsonAddRegularExpressionPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddRegularExpressionPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddRegularExpressionPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddRepeatedCharactersPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddRepeatedCharactersPasswordValidatorRequest)
	if err == nil {
		jsonAddRepeatedCharactersPasswordValidatorRequest, _ := json.Marshal(dst.AddRepeatedCharactersPasswordValidatorRequest)
		if string(jsonAddRepeatedCharactersPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddRepeatedCharactersPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddRepeatedCharactersPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddSimilarityBasedPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddSimilarityBasedPasswordValidatorRequest)
	if err == nil {
		jsonAddSimilarityBasedPasswordValidatorRequest, _ := json.Marshal(dst.AddSimilarityBasedPasswordValidatorRequest)
		if string(jsonAddSimilarityBasedPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddSimilarityBasedPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddSimilarityBasedPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddThirdPartyPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyPasswordValidatorRequest)
	if err == nil {
		jsonAddThirdPartyPasswordValidatorRequest, _ := json.Marshal(dst.AddThirdPartyPasswordValidatorRequest)
		if string(jsonAddThirdPartyPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddThirdPartyPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddUniqueCharactersPasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddUniqueCharactersPasswordValidatorRequest)
	if err == nil {
		jsonAddUniqueCharactersPasswordValidatorRequest, _ := json.Marshal(dst.AddUniqueCharactersPasswordValidatorRequest)
		if string(jsonAddUniqueCharactersPasswordValidatorRequest) == "{}" { // empty struct
			dst.AddUniqueCharactersPasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddUniqueCharactersPasswordValidatorRequest = nil
	}

	// try to unmarshal data into AddUtf8PasswordValidatorRequest
	err = newStrictDecoder(data).Decode(&dst.AddUtf8PasswordValidatorRequest)
	if err == nil {
		jsonAddUtf8PasswordValidatorRequest, _ := json.Marshal(dst.AddUtf8PasswordValidatorRequest)
		if string(jsonAddUtf8PasswordValidatorRequest) == "{}" { // empty struct
			dst.AddUtf8PasswordValidatorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddUtf8PasswordValidatorRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAttributeValuePasswordValidatorRequest = nil
		dst.AddCharacterSetPasswordValidatorRequest = nil
		dst.AddDictionaryPasswordValidatorRequest = nil
		dst.AddDisallowedCharactersPasswordValidatorRequest = nil
		dst.AddGroovyScriptedPasswordValidatorRequest = nil
		dst.AddHaystackPasswordValidatorRequest = nil
		dst.AddLengthBasedPasswordValidatorRequest = nil
		dst.AddPwnedPasswordsPasswordValidatorRequest = nil
		dst.AddRegularExpressionPasswordValidatorRequest = nil
		dst.AddRepeatedCharactersPasswordValidatorRequest = nil
		dst.AddSimilarityBasedPasswordValidatorRequest = nil
		dst.AddThirdPartyPasswordValidatorRequest = nil
		dst.AddUniqueCharactersPasswordValidatorRequest = nil
		dst.AddUtf8PasswordValidatorRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddPasswordValidatorRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddPasswordValidatorRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	if src.AddAttributeValuePasswordValidatorRequest != nil {
		return json.Marshal(&src.AddAttributeValuePasswordValidatorRequest)
	}

	if src.AddCharacterSetPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddCharacterSetPasswordValidatorRequest)
	}

	if src.AddDictionaryPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddDictionaryPasswordValidatorRequest)
	}

	if src.AddDisallowedCharactersPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddDisallowedCharactersPasswordValidatorRequest)
	}

	if src.AddGroovyScriptedPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddGroovyScriptedPasswordValidatorRequest)
	}

	if src.AddHaystackPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddHaystackPasswordValidatorRequest)
	}

	if src.AddLengthBasedPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddLengthBasedPasswordValidatorRequest)
	}

	if src.AddPwnedPasswordsPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddPwnedPasswordsPasswordValidatorRequest)
	}

	if src.AddRegularExpressionPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddRegularExpressionPasswordValidatorRequest)
	}

	if src.AddRepeatedCharactersPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddRepeatedCharactersPasswordValidatorRequest)
	}

	if src.AddSimilarityBasedPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddSimilarityBasedPasswordValidatorRequest)
	}

	if src.AddThirdPartyPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddThirdPartyPasswordValidatorRequest)
	}

	if src.AddUniqueCharactersPasswordValidatorRequest != nil {
		return json.Marshal(&src.AddUniqueCharactersPasswordValidatorRequest)
	}

	if src.AddUtf8PasswordValidatorRequest != nil {
		return json.Marshal(&src.AddUtf8PasswordValidatorRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddPasswordValidatorRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddAttributeValuePasswordValidatorRequest != nil {
		return obj.AddAttributeValuePasswordValidatorRequest
	}

	if obj.AddCharacterSetPasswordValidatorRequest != nil {
		return obj.AddCharacterSetPasswordValidatorRequest
	}

	if obj.AddDictionaryPasswordValidatorRequest != nil {
		return obj.AddDictionaryPasswordValidatorRequest
	}

	if obj.AddDisallowedCharactersPasswordValidatorRequest != nil {
		return obj.AddDisallowedCharactersPasswordValidatorRequest
	}

	if obj.AddGroovyScriptedPasswordValidatorRequest != nil {
		return obj.AddGroovyScriptedPasswordValidatorRequest
	}

	if obj.AddHaystackPasswordValidatorRequest != nil {
		return obj.AddHaystackPasswordValidatorRequest
	}

	if obj.AddLengthBasedPasswordValidatorRequest != nil {
		return obj.AddLengthBasedPasswordValidatorRequest
	}

	if obj.AddPwnedPasswordsPasswordValidatorRequest != nil {
		return obj.AddPwnedPasswordsPasswordValidatorRequest
	}

	if obj.AddRegularExpressionPasswordValidatorRequest != nil {
		return obj.AddRegularExpressionPasswordValidatorRequest
	}

	if obj.AddRepeatedCharactersPasswordValidatorRequest != nil {
		return obj.AddRepeatedCharactersPasswordValidatorRequest
	}

	if obj.AddSimilarityBasedPasswordValidatorRequest != nil {
		return obj.AddSimilarityBasedPasswordValidatorRequest
	}

	if obj.AddThirdPartyPasswordValidatorRequest != nil {
		return obj.AddThirdPartyPasswordValidatorRequest
	}

	if obj.AddUniqueCharactersPasswordValidatorRequest != nil {
		return obj.AddUniqueCharactersPasswordValidatorRequest
	}

	if obj.AddUtf8PasswordValidatorRequest != nil {
		return obj.AddUtf8PasswordValidatorRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddPasswordValidatorRequest struct {
	value *AddPasswordValidatorRequest
	isSet bool
}

func (v NullableAddPasswordValidatorRequest) Get() *AddPasswordValidatorRequest {
	return v.value
}

func (v *NullableAddPasswordValidatorRequest) Set(val *AddPasswordValidatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPasswordValidatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPasswordValidatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPasswordValidatorRequest(val *AddPasswordValidatorRequest) *NullableAddPasswordValidatorRequest {
	return &NullableAddPasswordValidatorRequest{value: val, isSet: true}
}

func (v NullableAddPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPasswordValidatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
