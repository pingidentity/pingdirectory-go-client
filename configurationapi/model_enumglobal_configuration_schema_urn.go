/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumglobalConfigurationSchemaUrn the model 'EnumglobalConfigurationSchemaUrn'
type EnumglobalConfigurationSchemaUrn string

// List of Enumglobal-configurationSchemaUrn
const (
	ENUMGLOBALCONFIGURATIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0GLOBAL EnumglobalConfigurationSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:global"
)

// All allowed values of EnumglobalConfigurationSchemaUrn enum
var AllowedEnumglobalConfigurationSchemaUrnEnumValues = []EnumglobalConfigurationSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:global",
}

func (v *EnumglobalConfigurationSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumglobalConfigurationSchemaUrn(value)
	for _, existing := range AllowedEnumglobalConfigurationSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumglobalConfigurationSchemaUrn", value)
}

// NewEnumglobalConfigurationSchemaUrnFromValue returns a pointer to a valid EnumglobalConfigurationSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumglobalConfigurationSchemaUrnFromValue(v string) (*EnumglobalConfigurationSchemaUrn, error) {
	ev := EnumglobalConfigurationSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumglobalConfigurationSchemaUrn: valid values are %v", v, AllowedEnumglobalConfigurationSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumglobalConfigurationSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumglobalConfigurationSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumglobal-configurationSchemaUrn value
func (v EnumglobalConfigurationSchemaUrn) Ptr() *EnumglobalConfigurationSchemaUrn {
	return &v
}

type NullableEnumglobalConfigurationSchemaUrn struct {
	value *EnumglobalConfigurationSchemaUrn
	isSet bool
}

func (v NullableEnumglobalConfigurationSchemaUrn) Get() *EnumglobalConfigurationSchemaUrn {
	return v.value
}

func (v *NullableEnumglobalConfigurationSchemaUrn) Set(val *EnumglobalConfigurationSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumglobalConfigurationSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumglobalConfigurationSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumglobalConfigurationSchemaUrn(val *EnumglobalConfigurationSchemaUrn) *NullableEnumglobalConfigurationSchemaUrn {
	return &NullableEnumglobalConfigurationSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumglobalConfigurationSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumglobalConfigurationSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
