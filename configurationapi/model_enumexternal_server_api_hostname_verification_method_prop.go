/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalServerApiHostnameVerificationMethodProp The mechanism for checking if the hostname of the API External Server matches the name(s) stored inside the server's X.509 certificate. This is only applicable if SSL is being used for connection security.
type EnumexternalServerApiHostnameVerificationMethodProp string

// List of Enumexternal-server-api-hostnameVerificationMethodProp
const (
	ENUMEXTERNALSERVERAPIHOSTNAMEVERIFICATIONMETHODPROP_ALLOW_ALL EnumexternalServerApiHostnameVerificationMethodProp = "allow-all"
	ENUMEXTERNALSERVERAPIHOSTNAMEVERIFICATIONMETHODPROP_STRICT    EnumexternalServerApiHostnameVerificationMethodProp = "strict"
)

// All allowed values of EnumexternalServerApiHostnameVerificationMethodProp enum
var AllowedEnumexternalServerApiHostnameVerificationMethodPropEnumValues = []EnumexternalServerApiHostnameVerificationMethodProp{
	"allow-all",
	"strict",
}

func (v *EnumexternalServerApiHostnameVerificationMethodProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalServerApiHostnameVerificationMethodProp(value)
	for _, existing := range AllowedEnumexternalServerApiHostnameVerificationMethodPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalServerApiHostnameVerificationMethodProp", value)
}

// NewEnumexternalServerApiHostnameVerificationMethodPropFromValue returns a pointer to a valid EnumexternalServerApiHostnameVerificationMethodProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalServerApiHostnameVerificationMethodPropFromValue(v string) (*EnumexternalServerApiHostnameVerificationMethodProp, error) {
	ev := EnumexternalServerApiHostnameVerificationMethodProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalServerApiHostnameVerificationMethodProp: valid values are %v", v, AllowedEnumexternalServerApiHostnameVerificationMethodPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalServerApiHostnameVerificationMethodProp) IsValid() bool {
	for _, existing := range AllowedEnumexternalServerApiHostnameVerificationMethodPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-server-api-hostnameVerificationMethodProp value
func (v EnumexternalServerApiHostnameVerificationMethodProp) Ptr() *EnumexternalServerApiHostnameVerificationMethodProp {
	return &v
}

type NullableEnumexternalServerApiHostnameVerificationMethodProp struct {
	value *EnumexternalServerApiHostnameVerificationMethodProp
	isSet bool
}

func (v NullableEnumexternalServerApiHostnameVerificationMethodProp) Get() *EnumexternalServerApiHostnameVerificationMethodProp {
	return v.value
}

func (v *NullableEnumexternalServerApiHostnameVerificationMethodProp) Set(val *EnumexternalServerApiHostnameVerificationMethodProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalServerApiHostnameVerificationMethodProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalServerApiHostnameVerificationMethodProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalServerApiHostnameVerificationMethodProp(val *EnumexternalServerApiHostnameVerificationMethodProp) *NullableEnumexternalServerApiHostnameVerificationMethodProp {
	return &NullableEnumexternalServerApiHostnameVerificationMethodProp{value: val, isSet: true}
}

func (v NullableEnumexternalServerApiHostnameVerificationMethodProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalServerApiHostnameVerificationMethodProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
