/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlengthBasedPasswordValidatorSchemaUrn the model 'EnumlengthBasedPasswordValidatorSchemaUrn'
type EnumlengthBasedPasswordValidatorSchemaUrn string

// List of Enumlength-based-password-validatorSchemaUrn
const (
	ENUMLENGTHBASEDPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORLENGTH_BASED EnumlengthBasedPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:length-based"
)

// All allowed values of EnumlengthBasedPasswordValidatorSchemaUrn enum
var AllowedEnumlengthBasedPasswordValidatorSchemaUrnEnumValues = []EnumlengthBasedPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:length-based",
}

func (v *EnumlengthBasedPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlengthBasedPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumlengthBasedPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlengthBasedPasswordValidatorSchemaUrn", value)
}

// NewEnumlengthBasedPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumlengthBasedPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlengthBasedPasswordValidatorSchemaUrnFromValue(v string) (*EnumlengthBasedPasswordValidatorSchemaUrn, error) {
	ev := EnumlengthBasedPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlengthBasedPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumlengthBasedPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlengthBasedPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumlengthBasedPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlength-based-password-validatorSchemaUrn value
func (v EnumlengthBasedPasswordValidatorSchemaUrn) Ptr() *EnumlengthBasedPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumlengthBasedPasswordValidatorSchemaUrn struct {
	value *EnumlengthBasedPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumlengthBasedPasswordValidatorSchemaUrn) Get() *EnumlengthBasedPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumlengthBasedPasswordValidatorSchemaUrn) Set(val *EnumlengthBasedPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlengthBasedPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlengthBasedPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlengthBasedPasswordValidatorSchemaUrn(val *EnumlengthBasedPasswordValidatorSchemaUrn) *NullableEnumlengthBasedPasswordValidatorSchemaUrn {
	return &NullableEnumlengthBasedPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumlengthBasedPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlengthBasedPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
