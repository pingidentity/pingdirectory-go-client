/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginAgentPrivacyProtocolProp The privacy protocol to use for SNMPv3 if privacy is to be used.
type EnumpluginAgentPrivacyProtocolProp string

// List of Enumplugin-agentPrivacyProtocolProp
const (
	ENUMPLUGINAGENTPRIVACYPROTOCOLPROP_DES     EnumpluginAgentPrivacyProtocolProp = "des"
	ENUMPLUGINAGENTPRIVACYPROTOCOLPROP_DES_EDE EnumpluginAgentPrivacyProtocolProp = "des-ede"
	ENUMPLUGINAGENTPRIVACYPROTOCOLPROP_AES128  EnumpluginAgentPrivacyProtocolProp = "aes128"
	ENUMPLUGINAGENTPRIVACYPROTOCOLPROP_AES192  EnumpluginAgentPrivacyProtocolProp = "aes192"
	ENUMPLUGINAGENTPRIVACYPROTOCOLPROP_AES256  EnumpluginAgentPrivacyProtocolProp = "aes256"
)

// All allowed values of EnumpluginAgentPrivacyProtocolProp enum
var AllowedEnumpluginAgentPrivacyProtocolPropEnumValues = []EnumpluginAgentPrivacyProtocolProp{
	"des",
	"des-ede",
	"aes128",
	"aes192",
	"aes256",
}

func (v *EnumpluginAgentPrivacyProtocolProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginAgentPrivacyProtocolProp(value)
	for _, existing := range AllowedEnumpluginAgentPrivacyProtocolPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginAgentPrivacyProtocolProp", value)
}

// NewEnumpluginAgentPrivacyProtocolPropFromValue returns a pointer to a valid EnumpluginAgentPrivacyProtocolProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginAgentPrivacyProtocolPropFromValue(v string) (*EnumpluginAgentPrivacyProtocolProp, error) {
	ev := EnumpluginAgentPrivacyProtocolProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginAgentPrivacyProtocolProp: valid values are %v", v, AllowedEnumpluginAgentPrivacyProtocolPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginAgentPrivacyProtocolProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginAgentPrivacyProtocolPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-agentPrivacyProtocolProp value
func (v EnumpluginAgentPrivacyProtocolProp) Ptr() *EnumpluginAgentPrivacyProtocolProp {
	return &v
}

type NullableEnumpluginAgentPrivacyProtocolProp struct {
	value *EnumpluginAgentPrivacyProtocolProp
	isSet bool
}

func (v NullableEnumpluginAgentPrivacyProtocolProp) Get() *EnumpluginAgentPrivacyProtocolProp {
	return v.value
}

func (v *NullableEnumpluginAgentPrivacyProtocolProp) Set(val *EnumpluginAgentPrivacyProtocolProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginAgentPrivacyProtocolProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginAgentPrivacyProtocolProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginAgentPrivacyProtocolProp(val *EnumpluginAgentPrivacyProtocolProp) *NullableEnumpluginAgentPrivacyProtocolProp {
	return &NullableEnumpluginAgentPrivacyProtocolProp{value: val, isSet: true}
}

func (v NullableEnumpluginAgentPrivacyProtocolProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginAgentPrivacyProtocolProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
