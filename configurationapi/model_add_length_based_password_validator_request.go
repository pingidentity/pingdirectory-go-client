/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddLengthBasedPasswordValidatorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddLengthBasedPasswordValidatorRequest{}

// AddLengthBasedPasswordValidatorRequest struct for AddLengthBasedPasswordValidatorRequest
type AddLengthBasedPasswordValidatorRequest struct {
	Schemas []EnumlengthBasedPasswordValidatorSchemaUrn `json:"schemas"`
	// Specifies the maximum number of characters that can be included in a proposed password.
	MaxPasswordLength *int64 `json:"maxPasswordLength,omitempty"`
	// Specifies the minimum number of characters that must be included in a proposed password.
	MinPasswordLength *int64 `json:"minPasswordLength,omitempty"`
	// A description for this Password Validator
	Description *string `json:"description,omitempty"`
	// Indicates whether the password validator is enabled for use.
	Enabled bool `json:"enabled"`
	// Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
	ValidatorRequirementDescription *string `json:"validatorRequirementDescription,omitempty"`
	// Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
	ValidatorFailureMessage *string `json:"validatorFailureMessage,omitempty"`
	// Name of the new Password Validator
	ValidatorName string `json:"validatorName"`
}

// NewAddLengthBasedPasswordValidatorRequest instantiates a new AddLengthBasedPasswordValidatorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLengthBasedPasswordValidatorRequest(schemas []EnumlengthBasedPasswordValidatorSchemaUrn, enabled bool, validatorName string) *AddLengthBasedPasswordValidatorRequest {
	this := AddLengthBasedPasswordValidatorRequest{}
	this.Schemas = schemas
	this.Enabled = enabled
	this.ValidatorName = validatorName
	return &this
}

// NewAddLengthBasedPasswordValidatorRequestWithDefaults instantiates a new AddLengthBasedPasswordValidatorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLengthBasedPasswordValidatorRequestWithDefaults() *AddLengthBasedPasswordValidatorRequest {
	this := AddLengthBasedPasswordValidatorRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddLengthBasedPasswordValidatorRequest) GetSchemas() []EnumlengthBasedPasswordValidatorSchemaUrn {
	if o == nil {
		var ret []EnumlengthBasedPasswordValidatorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetSchemasOk() ([]EnumlengthBasedPasswordValidatorSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddLengthBasedPasswordValidatorRequest) SetSchemas(v []EnumlengthBasedPasswordValidatorSchemaUrn) {
	o.Schemas = v
}

// GetMaxPasswordLength returns the MaxPasswordLength field value if set, zero value otherwise.
func (o *AddLengthBasedPasswordValidatorRequest) GetMaxPasswordLength() int64 {
	if o == nil || IsNil(o.MaxPasswordLength) {
		var ret int64
		return ret
	}
	return *o.MaxPasswordLength
}

// GetMaxPasswordLengthOk returns a tuple with the MaxPasswordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetMaxPasswordLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxPasswordLength) {
		return nil, false
	}
	return o.MaxPasswordLength, true
}

// HasMaxPasswordLength returns a boolean if a field has been set.
func (o *AddLengthBasedPasswordValidatorRequest) HasMaxPasswordLength() bool {
	if o != nil && !IsNil(o.MaxPasswordLength) {
		return true
	}

	return false
}

// SetMaxPasswordLength gets a reference to the given int64 and assigns it to the MaxPasswordLength field.
func (o *AddLengthBasedPasswordValidatorRequest) SetMaxPasswordLength(v int64) {
	o.MaxPasswordLength = &v
}

// GetMinPasswordLength returns the MinPasswordLength field value if set, zero value otherwise.
func (o *AddLengthBasedPasswordValidatorRequest) GetMinPasswordLength() int64 {
	if o == nil || IsNil(o.MinPasswordLength) {
		var ret int64
		return ret
	}
	return *o.MinPasswordLength
}

// GetMinPasswordLengthOk returns a tuple with the MinPasswordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetMinPasswordLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MinPasswordLength) {
		return nil, false
	}
	return o.MinPasswordLength, true
}

// HasMinPasswordLength returns a boolean if a field has been set.
func (o *AddLengthBasedPasswordValidatorRequest) HasMinPasswordLength() bool {
	if o != nil && !IsNil(o.MinPasswordLength) {
		return true
	}

	return false
}

// SetMinPasswordLength gets a reference to the given int64 and assigns it to the MinPasswordLength field.
func (o *AddLengthBasedPasswordValidatorRequest) SetMinPasswordLength(v int64) {
	o.MinPasswordLength = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddLengthBasedPasswordValidatorRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddLengthBasedPasswordValidatorRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddLengthBasedPasswordValidatorRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddLengthBasedPasswordValidatorRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddLengthBasedPasswordValidatorRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetValidatorRequirementDescription returns the ValidatorRequirementDescription field value if set, zero value otherwise.
func (o *AddLengthBasedPasswordValidatorRequest) GetValidatorRequirementDescription() string {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		var ret string
		return ret
	}
	return *o.ValidatorRequirementDescription
}

// GetValidatorRequirementDescriptionOk returns a tuple with the ValidatorRequirementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetValidatorRequirementDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		return nil, false
	}
	return o.ValidatorRequirementDescription, true
}

// HasValidatorRequirementDescription returns a boolean if a field has been set.
func (o *AddLengthBasedPasswordValidatorRequest) HasValidatorRequirementDescription() bool {
	if o != nil && !IsNil(o.ValidatorRequirementDescription) {
		return true
	}

	return false
}

// SetValidatorRequirementDescription gets a reference to the given string and assigns it to the ValidatorRequirementDescription field.
func (o *AddLengthBasedPasswordValidatorRequest) SetValidatorRequirementDescription(v string) {
	o.ValidatorRequirementDescription = &v
}

// GetValidatorFailureMessage returns the ValidatorFailureMessage field value if set, zero value otherwise.
func (o *AddLengthBasedPasswordValidatorRequest) GetValidatorFailureMessage() string {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		var ret string
		return ret
	}
	return *o.ValidatorFailureMessage
}

// GetValidatorFailureMessageOk returns a tuple with the ValidatorFailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetValidatorFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		return nil, false
	}
	return o.ValidatorFailureMessage, true
}

// HasValidatorFailureMessage returns a boolean if a field has been set.
func (o *AddLengthBasedPasswordValidatorRequest) HasValidatorFailureMessage() bool {
	if o != nil && !IsNil(o.ValidatorFailureMessage) {
		return true
	}

	return false
}

// SetValidatorFailureMessage gets a reference to the given string and assigns it to the ValidatorFailureMessage field.
func (o *AddLengthBasedPasswordValidatorRequest) SetValidatorFailureMessage(v string) {
	o.ValidatorFailureMessage = &v
}

// GetValidatorName returns the ValidatorName field value
func (o *AddLengthBasedPasswordValidatorRequest) GetValidatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorName
}

// GetValidatorNameOk returns a tuple with the ValidatorName field value
// and a boolean to check if the value has been set.
func (o *AddLengthBasedPasswordValidatorRequest) GetValidatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorName, true
}

// SetValidatorName sets field value
func (o *AddLengthBasedPasswordValidatorRequest) SetValidatorName(v string) {
	o.ValidatorName = v
}

func (o AddLengthBasedPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddLengthBasedPasswordValidatorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.MaxPasswordLength) {
		toSerialize["maxPasswordLength"] = o.MaxPasswordLength
	}
	if !IsNil(o.MinPasswordLength) {
		toSerialize["minPasswordLength"] = o.MinPasswordLength
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ValidatorRequirementDescription) {
		toSerialize["validatorRequirementDescription"] = o.ValidatorRequirementDescription
	}
	if !IsNil(o.ValidatorFailureMessage) {
		toSerialize["validatorFailureMessage"] = o.ValidatorFailureMessage
	}
	toSerialize["validatorName"] = o.ValidatorName
	return toSerialize, nil
}

type NullableAddLengthBasedPasswordValidatorRequest struct {
	value *AddLengthBasedPasswordValidatorRequest
	isSet bool
}

func (v NullableAddLengthBasedPasswordValidatorRequest) Get() *AddLengthBasedPasswordValidatorRequest {
	return v.value
}

func (v *NullableAddLengthBasedPasswordValidatorRequest) Set(val *AddLengthBasedPasswordValidatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLengthBasedPasswordValidatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLengthBasedPasswordValidatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLengthBasedPasswordValidatorRequest(val *AddLengthBasedPasswordValidatorRequest) *NullableAddLengthBasedPasswordValidatorRequest {
	return &NullableAddLengthBasedPasswordValidatorRequest{value: val, isSet: true}
}

func (v NullableAddLengthBasedPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLengthBasedPasswordValidatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
