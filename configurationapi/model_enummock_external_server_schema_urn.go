/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnummockExternalServerSchemaUrn the model 'EnummockExternalServerSchemaUrn'
type EnummockExternalServerSchemaUrn string

// List of Enummock-external-serverSchemaUrn
const (
	ENUMMOCKEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERMOCK EnummockExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:mock"
)

// All allowed values of EnummockExternalServerSchemaUrn enum
var AllowedEnummockExternalServerSchemaUrnEnumValues = []EnummockExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:mock",
}

func (v *EnummockExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummockExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnummockExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummockExternalServerSchemaUrn", value)
}

// NewEnummockExternalServerSchemaUrnFromValue returns a pointer to a valid EnummockExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummockExternalServerSchemaUrnFromValue(v string) (*EnummockExternalServerSchemaUrn, error) {
	ev := EnummockExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummockExternalServerSchemaUrn: valid values are %v", v, AllowedEnummockExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummockExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummockExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummock-external-serverSchemaUrn value
func (v EnummockExternalServerSchemaUrn) Ptr() *EnummockExternalServerSchemaUrn {
	return &v
}

type NullableEnummockExternalServerSchemaUrn struct {
	value *EnummockExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnummockExternalServerSchemaUrn) Get() *EnummockExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnummockExternalServerSchemaUrn) Set(val *EnummockExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummockExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummockExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummockExternalServerSchemaUrn(val *EnummockExternalServerSchemaUrn) *NullableEnummockExternalServerSchemaUrn {
	return &NullableEnummockExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummockExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummockExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
