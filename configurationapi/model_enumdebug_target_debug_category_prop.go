/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdebugTargetDebugCategoryProp Specifies the debug message categories to be logged.
type EnumdebugTargetDebugCategoryProp string

// List of Enumdebug-target-debugCategoryProp
const (
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_CAUGHT          EnumdebugTargetDebugCategoryProp = "caught"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_CONSTRUCTOR     EnumdebugTargetDebugCategoryProp = "constructor"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_DATA            EnumdebugTargetDebugCategoryProp = "data"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_DATABASE_ACCESS EnumdebugTargetDebugCategoryProp = "database-access"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_ENTER           EnumdebugTargetDebugCategoryProp = "enter"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_EXIT            EnumdebugTargetDebugCategoryProp = "exit"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_MESSAGE         EnumdebugTargetDebugCategoryProp = "message"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_PROTOCOL        EnumdebugTargetDebugCategoryProp = "protocol"
	ENUMDEBUGTARGETDEBUGCATEGORYPROP_THROWN          EnumdebugTargetDebugCategoryProp = "thrown"
)

// All allowed values of EnumdebugTargetDebugCategoryProp enum
var AllowedEnumdebugTargetDebugCategoryPropEnumValues = []EnumdebugTargetDebugCategoryProp{
	"caught",
	"constructor",
	"data",
	"database-access",
	"enter",
	"exit",
	"message",
	"protocol",
	"thrown",
}

func (v *EnumdebugTargetDebugCategoryProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdebugTargetDebugCategoryProp(value)
	for _, existing := range AllowedEnumdebugTargetDebugCategoryPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdebugTargetDebugCategoryProp", value)
}

// NewEnumdebugTargetDebugCategoryPropFromValue returns a pointer to a valid EnumdebugTargetDebugCategoryProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdebugTargetDebugCategoryPropFromValue(v string) (*EnumdebugTargetDebugCategoryProp, error) {
	ev := EnumdebugTargetDebugCategoryProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdebugTargetDebugCategoryProp: valid values are %v", v, AllowedEnumdebugTargetDebugCategoryPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdebugTargetDebugCategoryProp) IsValid() bool {
	for _, existing := range AllowedEnumdebugTargetDebugCategoryPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdebug-target-debugCategoryProp value
func (v EnumdebugTargetDebugCategoryProp) Ptr() *EnumdebugTargetDebugCategoryProp {
	return &v
}

type NullableEnumdebugTargetDebugCategoryProp struct {
	value *EnumdebugTargetDebugCategoryProp
	isSet bool
}

func (v NullableEnumdebugTargetDebugCategoryProp) Get() *EnumdebugTargetDebugCategoryProp {
	return v.value
}

func (v *NullableEnumdebugTargetDebugCategoryProp) Set(val *EnumdebugTargetDebugCategoryProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdebugTargetDebugCategoryProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdebugTargetDebugCategoryProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdebugTargetDebugCategoryProp(val *EnumdebugTargetDebugCategoryProp) *NullableEnumdebugTargetDebugCategoryProp {
	return &NullableEnumdebugTargetDebugCategoryProp{value: val, isSet: true}
}

func (v NullableEnumdebugTargetDebugCategoryProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdebugTargetDebugCategoryProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
