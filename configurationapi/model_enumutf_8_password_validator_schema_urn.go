/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// Enumutf8PasswordValidatorSchemaUrn the model 'Enumutf8PasswordValidatorSchemaUrn'
type Enumutf8PasswordValidatorSchemaUrn string

// List of Enumutf-8-password-validatorSchemaUrn
const (
	ENUMUTF8PASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORUTF_8 Enumutf8PasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:utf-8"
)

// All allowed values of Enumutf8PasswordValidatorSchemaUrn enum
var AllowedEnumutf8PasswordValidatorSchemaUrnEnumValues = []Enumutf8PasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:utf-8",
}

func (v *Enumutf8PasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumutf8PasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumutf8PasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumutf8PasswordValidatorSchemaUrn", value)
}

// NewEnumutf8PasswordValidatorSchemaUrnFromValue returns a pointer to a valid Enumutf8PasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumutf8PasswordValidatorSchemaUrnFromValue(v string) (*Enumutf8PasswordValidatorSchemaUrn, error) {
	ev := Enumutf8PasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumutf8PasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumutf8PasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumutf8PasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumutf8PasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumutf-8-password-validatorSchemaUrn value
func (v Enumutf8PasswordValidatorSchemaUrn) Ptr() *Enumutf8PasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumutf8PasswordValidatorSchemaUrn struct {
	value *Enumutf8PasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumutf8PasswordValidatorSchemaUrn) Get() *Enumutf8PasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumutf8PasswordValidatorSchemaUrn) Set(val *Enumutf8PasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumutf8PasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumutf8PasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumutf8PasswordValidatorSchemaUrn(val *Enumutf8PasswordValidatorSchemaUrn) *NullableEnumutf8PasswordValidatorSchemaUrn {
	return &NullableEnumutf8PasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumutf8PasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumutf8PasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
