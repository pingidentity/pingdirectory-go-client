/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginGaugeInfoProp Specifies the level of detail to include for Gauges.
type EnumpluginGaugeInfoProp string

// List of Enumplugin-gaugeInfoProp
const (
	ENUMPLUGINGAUGEINFOPROP_NONE     EnumpluginGaugeInfoProp = "none"
	ENUMPLUGINGAUGEINFOPROP_BASIC    EnumpluginGaugeInfoProp = "basic"
	ENUMPLUGINGAUGEINFOPROP_EXTENDED EnumpluginGaugeInfoProp = "extended"
)

// All allowed values of EnumpluginGaugeInfoProp enum
var AllowedEnumpluginGaugeInfoPropEnumValues = []EnumpluginGaugeInfoProp{
	"none",
	"basic",
	"extended",
}

func (v *EnumpluginGaugeInfoProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginGaugeInfoProp(value)
	for _, existing := range AllowedEnumpluginGaugeInfoPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginGaugeInfoProp", value)
}

// NewEnumpluginGaugeInfoPropFromValue returns a pointer to a valid EnumpluginGaugeInfoProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginGaugeInfoPropFromValue(v string) (*EnumpluginGaugeInfoProp, error) {
	ev := EnumpluginGaugeInfoProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginGaugeInfoProp: valid values are %v", v, AllowedEnumpluginGaugeInfoPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginGaugeInfoProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginGaugeInfoPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-gaugeInfoProp value
func (v EnumpluginGaugeInfoProp) Ptr() *EnumpluginGaugeInfoProp {
	return &v
}

type NullableEnumpluginGaugeInfoProp struct {
	value *EnumpluginGaugeInfoProp
	isSet bool
}

func (v NullableEnumpluginGaugeInfoProp) Get() *EnumpluginGaugeInfoProp {
	return v.value
}

func (v *NullableEnumpluginGaugeInfoProp) Set(val *EnumpluginGaugeInfoProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginGaugeInfoProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginGaugeInfoProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginGaugeInfoProp(val *EnumpluginGaugeInfoProp) *NullableEnumpluginGaugeInfoProp {
	return &NullableEnumpluginGaugeInfoProp{value: val, isSet: true}
}

func (v NullableEnumpluginGaugeInfoProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginGaugeInfoProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
