/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DelegatedAdminResourceRightsAPIService DelegatedAdminResourceRightsAPI service
type DelegatedAdminResourceRightsAPIService service

type ApiAddDelegatedAdminResourceRightsRequest struct {
	ctx                                    context.Context
	ApiService                             *DelegatedAdminResourceRightsAPIService
	delegatedAdminRightsName               string
	addDelegatedAdminResourceRightsRequest *AddDelegatedAdminResourceRightsRequest
}

// Create a new Delegated Admin Resource Rights in the config
func (r ApiAddDelegatedAdminResourceRightsRequest) AddDelegatedAdminResourceRightsRequest(addDelegatedAdminResourceRightsRequest AddDelegatedAdminResourceRightsRequest) ApiAddDelegatedAdminResourceRightsRequest {
	r.addDelegatedAdminResourceRightsRequest = &addDelegatedAdminResourceRightsRequest
	return r
}

func (r ApiAddDelegatedAdminResourceRightsRequest) Execute() (*DelegatedAdminResourceRightsResponse, *http.Response, error) {
	return r.ApiService.AddDelegatedAdminResourceRightsExecute(r)
}

/*
AddDelegatedAdminResourceRights Add a new Delegated Admin Resource Rights to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminRightsName Name of the Delegated Admin Rights
	@return ApiAddDelegatedAdminResourceRightsRequest
*/
func (a *DelegatedAdminResourceRightsAPIService) AddDelegatedAdminResourceRights(ctx context.Context, delegatedAdminRightsName string) ApiAddDelegatedAdminResourceRightsRequest {
	return ApiAddDelegatedAdminResourceRightsRequest{
		ApiService:               a,
		ctx:                      ctx,
		delegatedAdminRightsName: delegatedAdminRightsName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminResourceRightsResponse
func (a *DelegatedAdminResourceRightsAPIService) AddDelegatedAdminResourceRightsExecute(r ApiAddDelegatedAdminResourceRightsRequest) (*DelegatedAdminResourceRightsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminResourceRightsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminResourceRightsAPIService.AddDelegatedAdminResourceRights")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminRightsName, "delegatedAdminRightsName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addDelegatedAdminResourceRightsRequest == nil {
		return localVarReturnValue, nil, reportError("addDelegatedAdminResourceRightsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addDelegatedAdminResourceRightsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDelegatedAdminResourceRightsRequest struct {
	ctx                              context.Context
	ApiService                       *DelegatedAdminResourceRightsAPIService
	delegatedAdminResourceRightsName string
	delegatedAdminRightsName         string
}

func (r ApiDeleteDelegatedAdminResourceRightsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDelegatedAdminResourceRightsExecute(r)
}

/*
DeleteDelegatedAdminResourceRights Delete a Delegated Admin Resource Rights

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights
	@param delegatedAdminRightsName Name of the Delegated Admin Rights
	@return ApiDeleteDelegatedAdminResourceRightsRequest
*/
func (a *DelegatedAdminResourceRightsAPIService) DeleteDelegatedAdminResourceRights(ctx context.Context, delegatedAdminResourceRightsName string, delegatedAdminRightsName string) ApiDeleteDelegatedAdminResourceRightsRequest {
	return ApiDeleteDelegatedAdminResourceRightsRequest{
		ApiService:                       a,
		ctx:                              ctx,
		delegatedAdminResourceRightsName: delegatedAdminResourceRightsName,
		delegatedAdminRightsName:         delegatedAdminRightsName,
	}
}

// Execute executes the request
func (a *DelegatedAdminResourceRightsAPIService) DeleteDelegatedAdminResourceRightsExecute(r ApiDeleteDelegatedAdminResourceRightsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminResourceRightsAPIService.DeleteDelegatedAdminResourceRights")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-resource-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminResourceRightsName, "delegatedAdminResourceRightsName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminRightsName, "delegatedAdminRightsName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDelegatedAdminResourceRightsRequest struct {
	ctx                              context.Context
	ApiService                       *DelegatedAdminResourceRightsAPIService
	delegatedAdminResourceRightsName string
	delegatedAdminRightsName         string
}

func (r ApiGetDelegatedAdminResourceRightsRequest) Execute() (*DelegatedAdminResourceRightsResponse, *http.Response, error) {
	return r.ApiService.GetDelegatedAdminResourceRightsExecute(r)
}

/*
GetDelegatedAdminResourceRights Returns a single Delegated Admin Resource Rights

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights
	@param delegatedAdminRightsName Name of the Delegated Admin Rights
	@return ApiGetDelegatedAdminResourceRightsRequest
*/
func (a *DelegatedAdminResourceRightsAPIService) GetDelegatedAdminResourceRights(ctx context.Context, delegatedAdminResourceRightsName string, delegatedAdminRightsName string) ApiGetDelegatedAdminResourceRightsRequest {
	return ApiGetDelegatedAdminResourceRightsRequest{
		ApiService:                       a,
		ctx:                              ctx,
		delegatedAdminResourceRightsName: delegatedAdminResourceRightsName,
		delegatedAdminRightsName:         delegatedAdminRightsName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminResourceRightsResponse
func (a *DelegatedAdminResourceRightsAPIService) GetDelegatedAdminResourceRightsExecute(r ApiGetDelegatedAdminResourceRightsRequest) (*DelegatedAdminResourceRightsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminResourceRightsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminResourceRightsAPIService.GetDelegatedAdminResourceRights")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-resource-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminResourceRightsName, "delegatedAdminResourceRightsName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminRightsName, "delegatedAdminRightsName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDelegatedAdminResourceRightsRequest struct {
	ctx                      context.Context
	ApiService               *DelegatedAdminResourceRightsAPIService
	delegatedAdminRightsName string
	filter                   *string
}

// SCIM filter
func (r ApiListDelegatedAdminResourceRightsRequest) Filter(filter string) ApiListDelegatedAdminResourceRightsRequest {
	r.filter = &filter
	return r
}

func (r ApiListDelegatedAdminResourceRightsRequest) Execute() (*DelegatedAdminResourceRightsListResponse, *http.Response, error) {
	return r.ApiService.ListDelegatedAdminResourceRightsExecute(r)
}

/*
ListDelegatedAdminResourceRights Returns a list of all Delegated Admin Resource Rights objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminRightsName Name of the Delegated Admin Rights
	@return ApiListDelegatedAdminResourceRightsRequest
*/
func (a *DelegatedAdminResourceRightsAPIService) ListDelegatedAdminResourceRights(ctx context.Context, delegatedAdminRightsName string) ApiListDelegatedAdminResourceRightsRequest {
	return ApiListDelegatedAdminResourceRightsRequest{
		ApiService:               a,
		ctx:                      ctx,
		delegatedAdminRightsName: delegatedAdminRightsName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminResourceRightsListResponse
func (a *DelegatedAdminResourceRightsAPIService) ListDelegatedAdminResourceRightsExecute(r ApiListDelegatedAdminResourceRightsRequest) (*DelegatedAdminResourceRightsListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminResourceRightsListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminResourceRightsAPIService.ListDelegatedAdminResourceRights")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminRightsName, "delegatedAdminRightsName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDelegatedAdminResourceRightsRequest struct {
	ctx                              context.Context
	ApiService                       *DelegatedAdminResourceRightsAPIService
	delegatedAdminResourceRightsName string
	delegatedAdminRightsName         string
	updateRequest                    *UpdateRequest
}

// Update an existing Delegated Admin Resource Rights
func (r ApiUpdateDelegatedAdminResourceRightsRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateDelegatedAdminResourceRightsRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateDelegatedAdminResourceRightsRequest) Execute() (*DelegatedAdminResourceRightsResponse, *http.Response, error) {
	return r.ApiService.UpdateDelegatedAdminResourceRightsExecute(r)
}

/*
UpdateDelegatedAdminResourceRights Update an existing Delegated Admin Resource Rights by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights
	@param delegatedAdminRightsName Name of the Delegated Admin Rights
	@return ApiUpdateDelegatedAdminResourceRightsRequest
*/
func (a *DelegatedAdminResourceRightsAPIService) UpdateDelegatedAdminResourceRights(ctx context.Context, delegatedAdminResourceRightsName string, delegatedAdminRightsName string) ApiUpdateDelegatedAdminResourceRightsRequest {
	return ApiUpdateDelegatedAdminResourceRightsRequest{
		ApiService:                       a,
		ctx:                              ctx,
		delegatedAdminResourceRightsName: delegatedAdminResourceRightsName,
		delegatedAdminRightsName:         delegatedAdminRightsName,
	}
}

// Execute executes the request
//
//	@return DelegatedAdminResourceRightsResponse
func (a *DelegatedAdminResourceRightsAPIService) UpdateDelegatedAdminResourceRightsExecute(r ApiUpdateDelegatedAdminResourceRightsRequest) (*DelegatedAdminResourceRightsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DelegatedAdminResourceRightsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DelegatedAdminResourceRightsAPIService.UpdateDelegatedAdminResourceRights")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-resource-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminResourceRightsName, "delegatedAdminResourceRightsName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"delegated-admin-rights-name"+"}", url.PathEscape(parameterValueToString(r.delegatedAdminRightsName, "delegatedAdminRightsName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
