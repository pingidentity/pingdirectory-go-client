/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsimilarityBasedPasswordValidatorSchemaUrn the model 'EnumsimilarityBasedPasswordValidatorSchemaUrn'
type EnumsimilarityBasedPasswordValidatorSchemaUrn string

// List of Enumsimilarity-based-password-validatorSchemaUrn
const (
	ENUMSIMILARITYBASEDPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORSIMILARITY_BASED EnumsimilarityBasedPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:similarity-based"
)

// All allowed values of EnumsimilarityBasedPasswordValidatorSchemaUrn enum
var AllowedEnumsimilarityBasedPasswordValidatorSchemaUrnEnumValues = []EnumsimilarityBasedPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:similarity-based",
}

func (v *EnumsimilarityBasedPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsimilarityBasedPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumsimilarityBasedPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsimilarityBasedPasswordValidatorSchemaUrn", value)
}

// NewEnumsimilarityBasedPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumsimilarityBasedPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsimilarityBasedPasswordValidatorSchemaUrnFromValue(v string) (*EnumsimilarityBasedPasswordValidatorSchemaUrn, error) {
	ev := EnumsimilarityBasedPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsimilarityBasedPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumsimilarityBasedPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsimilarityBasedPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsimilarityBasedPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsimilarity-based-password-validatorSchemaUrn value
func (v EnumsimilarityBasedPasswordValidatorSchemaUrn) Ptr() *EnumsimilarityBasedPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumsimilarityBasedPasswordValidatorSchemaUrn struct {
	value *EnumsimilarityBasedPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumsimilarityBasedPasswordValidatorSchemaUrn) Get() *EnumsimilarityBasedPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumsimilarityBasedPasswordValidatorSchemaUrn) Set(val *EnumsimilarityBasedPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsimilarityBasedPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsimilarityBasedPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsimilarityBasedPasswordValidatorSchemaUrn(val *EnumsimilarityBasedPasswordValidatorSchemaUrn) *NullableEnumsimilarityBasedPasswordValidatorSchemaUrn {
	return &NullableEnumsimilarityBasedPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsimilarityBasedPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsimilarityBasedPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
