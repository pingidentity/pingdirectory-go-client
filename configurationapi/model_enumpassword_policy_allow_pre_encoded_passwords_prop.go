/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
	"strconv"
)

// EnumpasswordPolicyAllowPreEncodedPasswordsProp Indicates whether users can change their passwords by providing a pre-encoded value.
type EnumpasswordPolicyAllowPreEncodedPasswordsProp string

// List of Enumpassword-policy-allowPreEncodedPasswordsProp
const (
	ENUMPASSWORDPOLICYALLOWPREENCODEDPASSWORDSPROP_FALSE                    EnumpasswordPolicyAllowPreEncodedPasswordsProp = "false"
	ENUMPASSWORDPOLICYALLOWPREENCODEDPASSWORDSPROP_ADD_ONLY                 EnumpasswordPolicyAllowPreEncodedPasswordsProp = "add-only"
	ENUMPASSWORDPOLICYALLOWPREENCODEDPASSWORDSPROP_ADMIN_RESET_ONLY         EnumpasswordPolicyAllowPreEncodedPasswordsProp = "admin-reset-only"
	ENUMPASSWORDPOLICYALLOWPREENCODEDPASSWORDSPROP_ADD_AND_ADMIN_RESET_ONLY EnumpasswordPolicyAllowPreEncodedPasswordsProp = "add-and-admin-reset-only"
	ENUMPASSWORDPOLICYALLOWPREENCODEDPASSWORDSPROP_TRUE                     EnumpasswordPolicyAllowPreEncodedPasswordsProp = "true"
)

// All allowed values of EnumpasswordPolicyAllowPreEncodedPasswordsProp enum
var AllowedEnumpasswordPolicyAllowPreEncodedPasswordsPropEnumValues = []EnumpasswordPolicyAllowPreEncodedPasswordsProp{
	"false",
	"add-only",
	"admin-reset-only",
	"add-and-admin-reset-only",
	"true",
}

func (v *EnumpasswordPolicyAllowPreEncodedPasswordsProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		var boolValue bool
		err = json.Unmarshal(src, &boolValue)
		if err != nil {
			return err
		}
		value = strconv.FormatBool(boolValue)
	}
	enumTypeValue := EnumpasswordPolicyAllowPreEncodedPasswordsProp(value)
	for _, existing := range AllowedEnumpasswordPolicyAllowPreEncodedPasswordsPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicyAllowPreEncodedPasswordsProp", value)
}

// NewEnumpasswordPolicyAllowPreEncodedPasswordsPropFromValue returns a pointer to a valid EnumpasswordPolicyAllowPreEncodedPasswordsProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicyAllowPreEncodedPasswordsPropFromValue(v string) (*EnumpasswordPolicyAllowPreEncodedPasswordsProp, error) {
	ev := EnumpasswordPolicyAllowPreEncodedPasswordsProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicyAllowPreEncodedPasswordsProp: valid values are %v", v, AllowedEnumpasswordPolicyAllowPreEncodedPasswordsPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicyAllowPreEncodedPasswordsProp) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicyAllowPreEncodedPasswordsPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policy-allowPreEncodedPasswordsProp value
func (v EnumpasswordPolicyAllowPreEncodedPasswordsProp) Ptr() *EnumpasswordPolicyAllowPreEncodedPasswordsProp {
	return &v
}

type NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp struct {
	value *EnumpasswordPolicyAllowPreEncodedPasswordsProp
	isSet bool
}

func (v NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp) Get() *EnumpasswordPolicyAllowPreEncodedPasswordsProp {
	return v.value
}

func (v *NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp) Set(val *EnumpasswordPolicyAllowPreEncodedPasswordsProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicyAllowPreEncodedPasswordsProp(val *EnumpasswordPolicyAllowPreEncodedPasswordsProp) *NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp {
	return &NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicyAllowPreEncodedPasswordsProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
