/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdisallowedCharactersPasswordValidatorSchemaUrn the model 'EnumdisallowedCharactersPasswordValidatorSchemaUrn'
type EnumdisallowedCharactersPasswordValidatorSchemaUrn string

// List of Enumdisallowed-characters-password-validatorSchemaUrn
const (
	ENUMDISALLOWEDCHARACTERSPASSWORDVALIDATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_VALIDATORDISALLOWED_CHARACTERS EnumdisallowedCharactersPasswordValidatorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-validator:disallowed-characters"
)

// All allowed values of EnumdisallowedCharactersPasswordValidatorSchemaUrn enum
var AllowedEnumdisallowedCharactersPasswordValidatorSchemaUrnEnumValues = []EnumdisallowedCharactersPasswordValidatorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-validator:disallowed-characters",
}

func (v *EnumdisallowedCharactersPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdisallowedCharactersPasswordValidatorSchemaUrn(value)
	for _, existing := range AllowedEnumdisallowedCharactersPasswordValidatorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdisallowedCharactersPasswordValidatorSchemaUrn", value)
}

// NewEnumdisallowedCharactersPasswordValidatorSchemaUrnFromValue returns a pointer to a valid EnumdisallowedCharactersPasswordValidatorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdisallowedCharactersPasswordValidatorSchemaUrnFromValue(v string) (*EnumdisallowedCharactersPasswordValidatorSchemaUrn, error) {
	ev := EnumdisallowedCharactersPasswordValidatorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdisallowedCharactersPasswordValidatorSchemaUrn: valid values are %v", v, AllowedEnumdisallowedCharactersPasswordValidatorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdisallowedCharactersPasswordValidatorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdisallowedCharactersPasswordValidatorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdisallowed-characters-password-validatorSchemaUrn value
func (v EnumdisallowedCharactersPasswordValidatorSchemaUrn) Ptr() *EnumdisallowedCharactersPasswordValidatorSchemaUrn {
	return &v
}

type NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn struct {
	value *EnumdisallowedCharactersPasswordValidatorSchemaUrn
	isSet bool
}

func (v NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn) Get() *EnumdisallowedCharactersPasswordValidatorSchemaUrn {
	return v.value
}

func (v *NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn) Set(val *EnumdisallowedCharactersPasswordValidatorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdisallowedCharactersPasswordValidatorSchemaUrn(val *EnumdisallowedCharactersPasswordValidatorSchemaUrn) *NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn {
	return &NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdisallowedCharactersPasswordValidatorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
