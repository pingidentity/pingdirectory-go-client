/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the LdapConnectionHandlerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdapConnectionHandlerResponse{}

// LdapConnectionHandlerResponse struct for LdapConnectionHandlerResponse
type LdapConnectionHandlerResponse struct {
	// Name of the Connection Handler
	Id      string                               `json:"id"`
	Schemas []EnumldapConnectionHandlerSchemaUrn `json:"schemas"`
	// Specifies the address or set of addresses on which this LDAP Connection Handler should listen for connections from LDAP clients.
	ListenAddress []string `json:"listenAddress,omitempty"`
	// Specifies the port number on which the LDAP Connection Handler will listen for connections from clients.
	ListenPort int32 `json:"listenPort"`
	// Indicates whether the LDAP Connection Handler should use SSL.
	UseSSL *bool `json:"useSSL,omitempty"`
	// Indicates whether clients are allowed to use StartTLS.
	AllowStartTLS *bool `json:"allowStartTLS,omitempty"`
	// Specifies the nickname (also called the alias) of the certificate that the LDAP Connection Handler should use when performing SSL communication.
	SslCertNickname *string `json:"sslCertNickname,omitempty"`
	// Specifies the name of the key manager that should be used with this LDAP Connection Handler .
	KeyManagerProvider *string `json:"keyManagerProvider,omitempty"`
	// Specifies the name of the trust manager that should be used with the LDAP Connection Handler .
	TrustManagerProvider *string `json:"trustManagerProvider,omitempty"`
	// Indicates whether connections from LDAPv2 clients are allowed.
	AllowLDAPV2 *bool `json:"allowLDAPV2,omitempty"`
	// Indicates whether the LDAP Connection Handler should use TCP keep-alive.
	UseTCPKeepAlive *bool `json:"useTCPKeepAlive,omitempty"`
	// Indicates whether the LDAP Connection Handler should send a notice of disconnection extended response message to the client if a new connection is rejected for some reason.
	SendRejectionNotice *bool `json:"sendRejectionNotice,omitempty"`
	// Specifies the length of time that the server should delay the response to non-successful bind operations. A value of zero milliseconds indicates that non-successful bind operations should not be delayed.
	FailedBindResponseDelay *string `json:"failedBindResponseDelay,omitempty"`
	// Specifies the size of the largest LDAP request message that will be allowed by this LDAP Connection handler.
	MaxRequestSize *string `json:"maxRequestSize,omitempty"`
	// Specifies the maximum number of threads that are used to process cancel and abandon requests from clients.
	MaxCancelHandlers *int32 `json:"maxCancelHandlers,omitempty"`
	// Specifies the number of threads that are used to accept new client connections, and to perform any initial preparation on those connections that may be needed before the connection can be used to read requests and send responses.
	NumAcceptHandlers *int32 `json:"numAcceptHandlers,omitempty"`
	// Specifies the number of request handlers that are used to read requests from clients.
	NumRequestHandlers  *int32                                        `json:"numRequestHandlers,omitempty"`
	SslClientAuthPolicy *EnumconnectionHandlerSslClientAuthPolicyProp `json:"sslClientAuthPolicy,omitempty"`
	// Specifies the maximum number of pending connection attempts that are allowed to queue up in the accept backlog before the server starts rejecting new connection attempts.
	AcceptBacklog *int32 `json:"acceptBacklog,omitempty"`
	// Specifies the names of the SSL protocols that are allowed for use in SSL or StartTLS communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.
	SslProtocol []string `json:"sslProtocol,omitempty"`
	// Specifies the names of the SSL cipher suites that are allowed for use in SSL or StartTLS communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.
	SslCipherSuite []string `json:"sslCipherSuite,omitempty"`
	// Specifies the maximum length of time that attempts to write data to LDAP clients should be allowed to block.
	MaxBlockedWriteTimeLimit *string `json:"maxBlockedWriteTimeLimit,omitempty"`
	// Indicates whether to attempt to automatically authenticate a client connection that has established a secure communication channel (using either SSL or StartTLS) and presented its own client certificate. Generally, clients should use the SASL EXTERNAL mechanism to authenticate using a client certificate, but some clients may not support that capability and/or may expect automatic authentication.
	AutoAuthenticateUsingClientCertificate *bool `json:"autoAuthenticateUsingClientCertificate,omitempty"`
	// Indicates whether all connections associated with this LDAP Connection Handler should be closed and no new connections accepted when the server has determined that it is \"unavailable.\" This allows clients (or a network load balancer) to route requests to another server.
	CloseConnectionsWhenUnavailable *bool `json:"closeConnectionsWhenUnavailable,omitempty"`
	// Indicates whether all connections associated with this LDAP Connection Handler should be closed before an explicit garbage collection is performed to allow clients to route requests to another server.
	CloseConnectionsOnExplicitGC *bool `json:"closeConnectionsOnExplicitGC,omitempty"`
	// A description for this Connection Handler
	Description *string `json:"description,omitempty"`
	// Indicates whether the Connection Handler is enabled.
	Enabled bool `json:"enabled"`
	// Specifies a set of address masks that determines the addresses of the clients that are allowed to establish connections to this connection handler.
	AllowedClient []string `json:"allowedClient,omitempty"`
	// Specifies a set of address masks that determines the addresses of the clients that are not allowed to establish connections to this connection handler.
	DeniedClient                                  []string                                           `json:"deniedClient,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewLdapConnectionHandlerResponse instantiates a new LdapConnectionHandlerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapConnectionHandlerResponse(id string, schemas []EnumldapConnectionHandlerSchemaUrn, listenPort int32, enabled bool) *LdapConnectionHandlerResponse {
	this := LdapConnectionHandlerResponse{}
	this.Id = id
	this.Schemas = schemas
	this.ListenPort = listenPort
	this.Enabled = enabled
	return &this
}

// NewLdapConnectionHandlerResponseWithDefaults instantiates a new LdapConnectionHandlerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapConnectionHandlerResponseWithDefaults() *LdapConnectionHandlerResponse {
	this := LdapConnectionHandlerResponse{}
	return &this
}

// GetId returns the Id field value
func (o *LdapConnectionHandlerResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LdapConnectionHandlerResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *LdapConnectionHandlerResponse) GetSchemas() []EnumldapConnectionHandlerSchemaUrn {
	if o == nil {
		var ret []EnumldapConnectionHandlerSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetSchemasOk() ([]EnumldapConnectionHandlerSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *LdapConnectionHandlerResponse) SetSchemas(v []EnumldapConnectionHandlerSchemaUrn) {
	o.Schemas = v
}

// GetListenAddress returns the ListenAddress field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetListenAddress() []string {
	if o == nil || IsNil(o.ListenAddress) {
		var ret []string
		return ret
	}
	return o.ListenAddress
}

// GetListenAddressOk returns a tuple with the ListenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetListenAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.ListenAddress) {
		return nil, false
	}
	return o.ListenAddress, true
}

// HasListenAddress returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasListenAddress() bool {
	if o != nil && !IsNil(o.ListenAddress) {
		return true
	}

	return false
}

// SetListenAddress gets a reference to the given []string and assigns it to the ListenAddress field.
func (o *LdapConnectionHandlerResponse) SetListenAddress(v []string) {
	o.ListenAddress = v
}

// GetListenPort returns the ListenPort field value
func (o *LdapConnectionHandlerResponse) GetListenPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ListenPort
}

// GetListenPortOk returns a tuple with the ListenPort field value
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetListenPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListenPort, true
}

// SetListenPort sets field value
func (o *LdapConnectionHandlerResponse) SetListenPort(v int32) {
	o.ListenPort = v
}

// GetUseSSL returns the UseSSL field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetUseSSL() bool {
	if o == nil || IsNil(o.UseSSL) {
		var ret bool
		return ret
	}
	return *o.UseSSL
}

// GetUseSSLOk returns a tuple with the UseSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetUseSSLOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSSL) {
		return nil, false
	}
	return o.UseSSL, true
}

// HasUseSSL returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasUseSSL() bool {
	if o != nil && !IsNil(o.UseSSL) {
		return true
	}

	return false
}

// SetUseSSL gets a reference to the given bool and assigns it to the UseSSL field.
func (o *LdapConnectionHandlerResponse) SetUseSSL(v bool) {
	o.UseSSL = &v
}

// GetAllowStartTLS returns the AllowStartTLS field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetAllowStartTLS() bool {
	if o == nil || IsNil(o.AllowStartTLS) {
		var ret bool
		return ret
	}
	return *o.AllowStartTLS
}

// GetAllowStartTLSOk returns a tuple with the AllowStartTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetAllowStartTLSOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowStartTLS) {
		return nil, false
	}
	return o.AllowStartTLS, true
}

// HasAllowStartTLS returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasAllowStartTLS() bool {
	if o != nil && !IsNil(o.AllowStartTLS) {
		return true
	}

	return false
}

// SetAllowStartTLS gets a reference to the given bool and assigns it to the AllowStartTLS field.
func (o *LdapConnectionHandlerResponse) SetAllowStartTLS(v bool) {
	o.AllowStartTLS = &v
}

// GetSslCertNickname returns the SslCertNickname field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetSslCertNickname() string {
	if o == nil || IsNil(o.SslCertNickname) {
		var ret string
		return ret
	}
	return *o.SslCertNickname
}

// GetSslCertNicknameOk returns a tuple with the SslCertNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetSslCertNicknameOk() (*string, bool) {
	if o == nil || IsNil(o.SslCertNickname) {
		return nil, false
	}
	return o.SslCertNickname, true
}

// HasSslCertNickname returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasSslCertNickname() bool {
	if o != nil && !IsNil(o.SslCertNickname) {
		return true
	}

	return false
}

// SetSslCertNickname gets a reference to the given string and assigns it to the SslCertNickname field.
func (o *LdapConnectionHandlerResponse) SetSslCertNickname(v string) {
	o.SslCertNickname = &v
}

// GetKeyManagerProvider returns the KeyManagerProvider field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetKeyManagerProvider() string {
	if o == nil || IsNil(o.KeyManagerProvider) {
		var ret string
		return ret
	}
	return *o.KeyManagerProvider
}

// GetKeyManagerProviderOk returns a tuple with the KeyManagerProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetKeyManagerProviderOk() (*string, bool) {
	if o == nil || IsNil(o.KeyManagerProvider) {
		return nil, false
	}
	return o.KeyManagerProvider, true
}

// HasKeyManagerProvider returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasKeyManagerProvider() bool {
	if o != nil && !IsNil(o.KeyManagerProvider) {
		return true
	}

	return false
}

// SetKeyManagerProvider gets a reference to the given string and assigns it to the KeyManagerProvider field.
func (o *LdapConnectionHandlerResponse) SetKeyManagerProvider(v string) {
	o.KeyManagerProvider = &v
}

// GetTrustManagerProvider returns the TrustManagerProvider field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetTrustManagerProvider() string {
	if o == nil || IsNil(o.TrustManagerProvider) {
		var ret string
		return ret
	}
	return *o.TrustManagerProvider
}

// GetTrustManagerProviderOk returns a tuple with the TrustManagerProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetTrustManagerProviderOk() (*string, bool) {
	if o == nil || IsNil(o.TrustManagerProvider) {
		return nil, false
	}
	return o.TrustManagerProvider, true
}

// HasTrustManagerProvider returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasTrustManagerProvider() bool {
	if o != nil && !IsNil(o.TrustManagerProvider) {
		return true
	}

	return false
}

// SetTrustManagerProvider gets a reference to the given string and assigns it to the TrustManagerProvider field.
func (o *LdapConnectionHandlerResponse) SetTrustManagerProvider(v string) {
	o.TrustManagerProvider = &v
}

// GetAllowLDAPV2 returns the AllowLDAPV2 field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetAllowLDAPV2() bool {
	if o == nil || IsNil(o.AllowLDAPV2) {
		var ret bool
		return ret
	}
	return *o.AllowLDAPV2
}

// GetAllowLDAPV2Ok returns a tuple with the AllowLDAPV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetAllowLDAPV2Ok() (*bool, bool) {
	if o == nil || IsNil(o.AllowLDAPV2) {
		return nil, false
	}
	return o.AllowLDAPV2, true
}

// HasAllowLDAPV2 returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasAllowLDAPV2() bool {
	if o != nil && !IsNil(o.AllowLDAPV2) {
		return true
	}

	return false
}

// SetAllowLDAPV2 gets a reference to the given bool and assigns it to the AllowLDAPV2 field.
func (o *LdapConnectionHandlerResponse) SetAllowLDAPV2(v bool) {
	o.AllowLDAPV2 = &v
}

// GetUseTCPKeepAlive returns the UseTCPKeepAlive field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetUseTCPKeepAlive() bool {
	if o == nil || IsNil(o.UseTCPKeepAlive) {
		var ret bool
		return ret
	}
	return *o.UseTCPKeepAlive
}

// GetUseTCPKeepAliveOk returns a tuple with the UseTCPKeepAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetUseTCPKeepAliveOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTCPKeepAlive) {
		return nil, false
	}
	return o.UseTCPKeepAlive, true
}

// HasUseTCPKeepAlive returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasUseTCPKeepAlive() bool {
	if o != nil && !IsNil(o.UseTCPKeepAlive) {
		return true
	}

	return false
}

// SetUseTCPKeepAlive gets a reference to the given bool and assigns it to the UseTCPKeepAlive field.
func (o *LdapConnectionHandlerResponse) SetUseTCPKeepAlive(v bool) {
	o.UseTCPKeepAlive = &v
}

// GetSendRejectionNotice returns the SendRejectionNotice field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetSendRejectionNotice() bool {
	if o == nil || IsNil(o.SendRejectionNotice) {
		var ret bool
		return ret
	}
	return *o.SendRejectionNotice
}

// GetSendRejectionNoticeOk returns a tuple with the SendRejectionNotice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetSendRejectionNoticeOk() (*bool, bool) {
	if o == nil || IsNil(o.SendRejectionNotice) {
		return nil, false
	}
	return o.SendRejectionNotice, true
}

// HasSendRejectionNotice returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasSendRejectionNotice() bool {
	if o != nil && !IsNil(o.SendRejectionNotice) {
		return true
	}

	return false
}

// SetSendRejectionNotice gets a reference to the given bool and assigns it to the SendRejectionNotice field.
func (o *LdapConnectionHandlerResponse) SetSendRejectionNotice(v bool) {
	o.SendRejectionNotice = &v
}

// GetFailedBindResponseDelay returns the FailedBindResponseDelay field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetFailedBindResponseDelay() string {
	if o == nil || IsNil(o.FailedBindResponseDelay) {
		var ret string
		return ret
	}
	return *o.FailedBindResponseDelay
}

// GetFailedBindResponseDelayOk returns a tuple with the FailedBindResponseDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetFailedBindResponseDelayOk() (*string, bool) {
	if o == nil || IsNil(o.FailedBindResponseDelay) {
		return nil, false
	}
	return o.FailedBindResponseDelay, true
}

// HasFailedBindResponseDelay returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasFailedBindResponseDelay() bool {
	if o != nil && !IsNil(o.FailedBindResponseDelay) {
		return true
	}

	return false
}

// SetFailedBindResponseDelay gets a reference to the given string and assigns it to the FailedBindResponseDelay field.
func (o *LdapConnectionHandlerResponse) SetFailedBindResponseDelay(v string) {
	o.FailedBindResponseDelay = &v
}

// GetMaxRequestSize returns the MaxRequestSize field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetMaxRequestSize() string {
	if o == nil || IsNil(o.MaxRequestSize) {
		var ret string
		return ret
	}
	return *o.MaxRequestSize
}

// GetMaxRequestSizeOk returns a tuple with the MaxRequestSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetMaxRequestSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxRequestSize) {
		return nil, false
	}
	return o.MaxRequestSize, true
}

// HasMaxRequestSize returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasMaxRequestSize() bool {
	if o != nil && !IsNil(o.MaxRequestSize) {
		return true
	}

	return false
}

// SetMaxRequestSize gets a reference to the given string and assigns it to the MaxRequestSize field.
func (o *LdapConnectionHandlerResponse) SetMaxRequestSize(v string) {
	o.MaxRequestSize = &v
}

// GetMaxCancelHandlers returns the MaxCancelHandlers field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetMaxCancelHandlers() int32 {
	if o == nil || IsNil(o.MaxCancelHandlers) {
		var ret int32
		return ret
	}
	return *o.MaxCancelHandlers
}

// GetMaxCancelHandlersOk returns a tuple with the MaxCancelHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetMaxCancelHandlersOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCancelHandlers) {
		return nil, false
	}
	return o.MaxCancelHandlers, true
}

// HasMaxCancelHandlers returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasMaxCancelHandlers() bool {
	if o != nil && !IsNil(o.MaxCancelHandlers) {
		return true
	}

	return false
}

// SetMaxCancelHandlers gets a reference to the given int32 and assigns it to the MaxCancelHandlers field.
func (o *LdapConnectionHandlerResponse) SetMaxCancelHandlers(v int32) {
	o.MaxCancelHandlers = &v
}

// GetNumAcceptHandlers returns the NumAcceptHandlers field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetNumAcceptHandlers() int32 {
	if o == nil || IsNil(o.NumAcceptHandlers) {
		var ret int32
		return ret
	}
	return *o.NumAcceptHandlers
}

// GetNumAcceptHandlersOk returns a tuple with the NumAcceptHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetNumAcceptHandlersOk() (*int32, bool) {
	if o == nil || IsNil(o.NumAcceptHandlers) {
		return nil, false
	}
	return o.NumAcceptHandlers, true
}

// HasNumAcceptHandlers returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasNumAcceptHandlers() bool {
	if o != nil && !IsNil(o.NumAcceptHandlers) {
		return true
	}

	return false
}

// SetNumAcceptHandlers gets a reference to the given int32 and assigns it to the NumAcceptHandlers field.
func (o *LdapConnectionHandlerResponse) SetNumAcceptHandlers(v int32) {
	o.NumAcceptHandlers = &v
}

// GetNumRequestHandlers returns the NumRequestHandlers field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetNumRequestHandlers() int32 {
	if o == nil || IsNil(o.NumRequestHandlers) {
		var ret int32
		return ret
	}
	return *o.NumRequestHandlers
}

// GetNumRequestHandlersOk returns a tuple with the NumRequestHandlers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetNumRequestHandlersOk() (*int32, bool) {
	if o == nil || IsNil(o.NumRequestHandlers) {
		return nil, false
	}
	return o.NumRequestHandlers, true
}

// HasNumRequestHandlers returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasNumRequestHandlers() bool {
	if o != nil && !IsNil(o.NumRequestHandlers) {
		return true
	}

	return false
}

// SetNumRequestHandlers gets a reference to the given int32 and assigns it to the NumRequestHandlers field.
func (o *LdapConnectionHandlerResponse) SetNumRequestHandlers(v int32) {
	o.NumRequestHandlers = &v
}

// GetSslClientAuthPolicy returns the SslClientAuthPolicy field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetSslClientAuthPolicy() EnumconnectionHandlerSslClientAuthPolicyProp {
	if o == nil || IsNil(o.SslClientAuthPolicy) {
		var ret EnumconnectionHandlerSslClientAuthPolicyProp
		return ret
	}
	return *o.SslClientAuthPolicy
}

// GetSslClientAuthPolicyOk returns a tuple with the SslClientAuthPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetSslClientAuthPolicyOk() (*EnumconnectionHandlerSslClientAuthPolicyProp, bool) {
	if o == nil || IsNil(o.SslClientAuthPolicy) {
		return nil, false
	}
	return o.SslClientAuthPolicy, true
}

// HasSslClientAuthPolicy returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasSslClientAuthPolicy() bool {
	if o != nil && !IsNil(o.SslClientAuthPolicy) {
		return true
	}

	return false
}

// SetSslClientAuthPolicy gets a reference to the given EnumconnectionHandlerSslClientAuthPolicyProp and assigns it to the SslClientAuthPolicy field.
func (o *LdapConnectionHandlerResponse) SetSslClientAuthPolicy(v EnumconnectionHandlerSslClientAuthPolicyProp) {
	o.SslClientAuthPolicy = &v
}

// GetAcceptBacklog returns the AcceptBacklog field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetAcceptBacklog() int32 {
	if o == nil || IsNil(o.AcceptBacklog) {
		var ret int32
		return ret
	}
	return *o.AcceptBacklog
}

// GetAcceptBacklogOk returns a tuple with the AcceptBacklog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetAcceptBacklogOk() (*int32, bool) {
	if o == nil || IsNil(o.AcceptBacklog) {
		return nil, false
	}
	return o.AcceptBacklog, true
}

// HasAcceptBacklog returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasAcceptBacklog() bool {
	if o != nil && !IsNil(o.AcceptBacklog) {
		return true
	}

	return false
}

// SetAcceptBacklog gets a reference to the given int32 and assigns it to the AcceptBacklog field.
func (o *LdapConnectionHandlerResponse) SetAcceptBacklog(v int32) {
	o.AcceptBacklog = &v
}

// GetSslProtocol returns the SslProtocol field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetSslProtocol() []string {
	if o == nil || IsNil(o.SslProtocol) {
		var ret []string
		return ret
	}
	return o.SslProtocol
}

// GetSslProtocolOk returns a tuple with the SslProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetSslProtocolOk() ([]string, bool) {
	if o == nil || IsNil(o.SslProtocol) {
		return nil, false
	}
	return o.SslProtocol, true
}

// HasSslProtocol returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasSslProtocol() bool {
	if o != nil && !IsNil(o.SslProtocol) {
		return true
	}

	return false
}

// SetSslProtocol gets a reference to the given []string and assigns it to the SslProtocol field.
func (o *LdapConnectionHandlerResponse) SetSslProtocol(v []string) {
	o.SslProtocol = v
}

// GetSslCipherSuite returns the SslCipherSuite field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetSslCipherSuite() []string {
	if o == nil || IsNil(o.SslCipherSuite) {
		var ret []string
		return ret
	}
	return o.SslCipherSuite
}

// GetSslCipherSuiteOk returns a tuple with the SslCipherSuite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetSslCipherSuiteOk() ([]string, bool) {
	if o == nil || IsNil(o.SslCipherSuite) {
		return nil, false
	}
	return o.SslCipherSuite, true
}

// HasSslCipherSuite returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasSslCipherSuite() bool {
	if o != nil && !IsNil(o.SslCipherSuite) {
		return true
	}

	return false
}

// SetSslCipherSuite gets a reference to the given []string and assigns it to the SslCipherSuite field.
func (o *LdapConnectionHandlerResponse) SetSslCipherSuite(v []string) {
	o.SslCipherSuite = v
}

// GetMaxBlockedWriteTimeLimit returns the MaxBlockedWriteTimeLimit field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetMaxBlockedWriteTimeLimit() string {
	if o == nil || IsNil(o.MaxBlockedWriteTimeLimit) {
		var ret string
		return ret
	}
	return *o.MaxBlockedWriteTimeLimit
}

// GetMaxBlockedWriteTimeLimitOk returns a tuple with the MaxBlockedWriteTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetMaxBlockedWriteTimeLimitOk() (*string, bool) {
	if o == nil || IsNil(o.MaxBlockedWriteTimeLimit) {
		return nil, false
	}
	return o.MaxBlockedWriteTimeLimit, true
}

// HasMaxBlockedWriteTimeLimit returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasMaxBlockedWriteTimeLimit() bool {
	if o != nil && !IsNil(o.MaxBlockedWriteTimeLimit) {
		return true
	}

	return false
}

// SetMaxBlockedWriteTimeLimit gets a reference to the given string and assigns it to the MaxBlockedWriteTimeLimit field.
func (o *LdapConnectionHandlerResponse) SetMaxBlockedWriteTimeLimit(v string) {
	o.MaxBlockedWriteTimeLimit = &v
}

// GetAutoAuthenticateUsingClientCertificate returns the AutoAuthenticateUsingClientCertificate field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetAutoAuthenticateUsingClientCertificate() bool {
	if o == nil || IsNil(o.AutoAuthenticateUsingClientCertificate) {
		var ret bool
		return ret
	}
	return *o.AutoAuthenticateUsingClientCertificate
}

// GetAutoAuthenticateUsingClientCertificateOk returns a tuple with the AutoAuthenticateUsingClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetAutoAuthenticateUsingClientCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoAuthenticateUsingClientCertificate) {
		return nil, false
	}
	return o.AutoAuthenticateUsingClientCertificate, true
}

// HasAutoAuthenticateUsingClientCertificate returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasAutoAuthenticateUsingClientCertificate() bool {
	if o != nil && !IsNil(o.AutoAuthenticateUsingClientCertificate) {
		return true
	}

	return false
}

// SetAutoAuthenticateUsingClientCertificate gets a reference to the given bool and assigns it to the AutoAuthenticateUsingClientCertificate field.
func (o *LdapConnectionHandlerResponse) SetAutoAuthenticateUsingClientCertificate(v bool) {
	o.AutoAuthenticateUsingClientCertificate = &v
}

// GetCloseConnectionsWhenUnavailable returns the CloseConnectionsWhenUnavailable field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetCloseConnectionsWhenUnavailable() bool {
	if o == nil || IsNil(o.CloseConnectionsWhenUnavailable) {
		var ret bool
		return ret
	}
	return *o.CloseConnectionsWhenUnavailable
}

// GetCloseConnectionsWhenUnavailableOk returns a tuple with the CloseConnectionsWhenUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetCloseConnectionsWhenUnavailableOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseConnectionsWhenUnavailable) {
		return nil, false
	}
	return o.CloseConnectionsWhenUnavailable, true
}

// HasCloseConnectionsWhenUnavailable returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasCloseConnectionsWhenUnavailable() bool {
	if o != nil && !IsNil(o.CloseConnectionsWhenUnavailable) {
		return true
	}

	return false
}

// SetCloseConnectionsWhenUnavailable gets a reference to the given bool and assigns it to the CloseConnectionsWhenUnavailable field.
func (o *LdapConnectionHandlerResponse) SetCloseConnectionsWhenUnavailable(v bool) {
	o.CloseConnectionsWhenUnavailable = &v
}

// GetCloseConnectionsOnExplicitGC returns the CloseConnectionsOnExplicitGC field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetCloseConnectionsOnExplicitGC() bool {
	if o == nil || IsNil(o.CloseConnectionsOnExplicitGC) {
		var ret bool
		return ret
	}
	return *o.CloseConnectionsOnExplicitGC
}

// GetCloseConnectionsOnExplicitGCOk returns a tuple with the CloseConnectionsOnExplicitGC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetCloseConnectionsOnExplicitGCOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseConnectionsOnExplicitGC) {
		return nil, false
	}
	return o.CloseConnectionsOnExplicitGC, true
}

// HasCloseConnectionsOnExplicitGC returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasCloseConnectionsOnExplicitGC() bool {
	if o != nil && !IsNil(o.CloseConnectionsOnExplicitGC) {
		return true
	}

	return false
}

// SetCloseConnectionsOnExplicitGC gets a reference to the given bool and assigns it to the CloseConnectionsOnExplicitGC field.
func (o *LdapConnectionHandlerResponse) SetCloseConnectionsOnExplicitGC(v bool) {
	o.CloseConnectionsOnExplicitGC = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LdapConnectionHandlerResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *LdapConnectionHandlerResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *LdapConnectionHandlerResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetAllowedClient returns the AllowedClient field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetAllowedClient() []string {
	if o == nil || IsNil(o.AllowedClient) {
		var ret []string
		return ret
	}
	return o.AllowedClient
}

// GetAllowedClientOk returns a tuple with the AllowedClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetAllowedClientOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedClient) {
		return nil, false
	}
	return o.AllowedClient, true
}

// HasAllowedClient returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasAllowedClient() bool {
	if o != nil && !IsNil(o.AllowedClient) {
		return true
	}

	return false
}

// SetAllowedClient gets a reference to the given []string and assigns it to the AllowedClient field.
func (o *LdapConnectionHandlerResponse) SetAllowedClient(v []string) {
	o.AllowedClient = v
}

// GetDeniedClient returns the DeniedClient field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetDeniedClient() []string {
	if o == nil || IsNil(o.DeniedClient) {
		var ret []string
		return ret
	}
	return o.DeniedClient
}

// GetDeniedClientOk returns a tuple with the DeniedClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetDeniedClientOk() ([]string, bool) {
	if o == nil || IsNil(o.DeniedClient) {
		return nil, false
	}
	return o.DeniedClient, true
}

// HasDeniedClient returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasDeniedClient() bool {
	if o != nil && !IsNil(o.DeniedClient) {
		return true
	}

	return false
}

// SetDeniedClient gets a reference to the given []string and assigns it to the DeniedClient field.
func (o *LdapConnectionHandlerResponse) SetDeniedClient(v []string) {
	o.DeniedClient = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *LdapConnectionHandlerResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *LdapConnectionHandlerResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionHandlerResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *LdapConnectionHandlerResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *LdapConnectionHandlerResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o LdapConnectionHandlerResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdapConnectionHandlerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.ListenAddress) {
		toSerialize["listenAddress"] = o.ListenAddress
	}
	toSerialize["listenPort"] = o.ListenPort
	if !IsNil(o.UseSSL) {
		toSerialize["useSSL"] = o.UseSSL
	}
	if !IsNil(o.AllowStartTLS) {
		toSerialize["allowStartTLS"] = o.AllowStartTLS
	}
	if !IsNil(o.SslCertNickname) {
		toSerialize["sslCertNickname"] = o.SslCertNickname
	}
	if !IsNil(o.KeyManagerProvider) {
		toSerialize["keyManagerProvider"] = o.KeyManagerProvider
	}
	if !IsNil(o.TrustManagerProvider) {
		toSerialize["trustManagerProvider"] = o.TrustManagerProvider
	}
	if !IsNil(o.AllowLDAPV2) {
		toSerialize["allowLDAPV2"] = o.AllowLDAPV2
	}
	if !IsNil(o.UseTCPKeepAlive) {
		toSerialize["useTCPKeepAlive"] = o.UseTCPKeepAlive
	}
	if !IsNil(o.SendRejectionNotice) {
		toSerialize["sendRejectionNotice"] = o.SendRejectionNotice
	}
	if !IsNil(o.FailedBindResponseDelay) {
		toSerialize["failedBindResponseDelay"] = o.FailedBindResponseDelay
	}
	if !IsNil(o.MaxRequestSize) {
		toSerialize["maxRequestSize"] = o.MaxRequestSize
	}
	if !IsNil(o.MaxCancelHandlers) {
		toSerialize["maxCancelHandlers"] = o.MaxCancelHandlers
	}
	if !IsNil(o.NumAcceptHandlers) {
		toSerialize["numAcceptHandlers"] = o.NumAcceptHandlers
	}
	if !IsNil(o.NumRequestHandlers) {
		toSerialize["numRequestHandlers"] = o.NumRequestHandlers
	}
	if !IsNil(o.SslClientAuthPolicy) {
		toSerialize["sslClientAuthPolicy"] = o.SslClientAuthPolicy
	}
	if !IsNil(o.AcceptBacklog) {
		toSerialize["acceptBacklog"] = o.AcceptBacklog
	}
	if !IsNil(o.SslProtocol) {
		toSerialize["sslProtocol"] = o.SslProtocol
	}
	if !IsNil(o.SslCipherSuite) {
		toSerialize["sslCipherSuite"] = o.SslCipherSuite
	}
	if !IsNil(o.MaxBlockedWriteTimeLimit) {
		toSerialize["maxBlockedWriteTimeLimit"] = o.MaxBlockedWriteTimeLimit
	}
	if !IsNil(o.AutoAuthenticateUsingClientCertificate) {
		toSerialize["autoAuthenticateUsingClientCertificate"] = o.AutoAuthenticateUsingClientCertificate
	}
	if !IsNil(o.CloseConnectionsWhenUnavailable) {
		toSerialize["closeConnectionsWhenUnavailable"] = o.CloseConnectionsWhenUnavailable
	}
	if !IsNil(o.CloseConnectionsOnExplicitGC) {
		toSerialize["closeConnectionsOnExplicitGC"] = o.CloseConnectionsOnExplicitGC
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.AllowedClient) {
		toSerialize["allowedClient"] = o.AllowedClient
	}
	if !IsNil(o.DeniedClient) {
		toSerialize["deniedClient"] = o.DeniedClient
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableLdapConnectionHandlerResponse struct {
	value *LdapConnectionHandlerResponse
	isSet bool
}

func (v NullableLdapConnectionHandlerResponse) Get() *LdapConnectionHandlerResponse {
	return v.value
}

func (v *NullableLdapConnectionHandlerResponse) Set(val *LdapConnectionHandlerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapConnectionHandlerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapConnectionHandlerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapConnectionHandlerResponse(val *LdapConnectionHandlerResponse) *NullableLdapConnectionHandlerResponse {
	return &NullableLdapConnectionHandlerResponse{value: val, isSet: true}
}

func (v NullableLdapConnectionHandlerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapConnectionHandlerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
