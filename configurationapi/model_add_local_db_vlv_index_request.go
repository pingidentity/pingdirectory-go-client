/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddLocalDbVlvIndexRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddLocalDbVlvIndexRequest{}

// AddLocalDbVlvIndexRequest struct for AddLocalDbVlvIndexRequest
type AddLocalDbVlvIndexRequest struct {
	// Name of the new Local DB VLV Index
	IndexName string                         `json:"indexName"`
	Schemas   []EnumlocalDbVlvIndexSchemaUrn `json:"schemas,omitempty"`
	// Specifies the base DN used in the search query that is being indexed.
	BaseDN string                       `json:"baseDN"`
	Scope  EnumlocalDbVlvIndexScopeProp `json:"scope"`
	// Specifies the LDAP filter used in the query that is being indexed.
	Filter string `json:"filter"`
	// Specifies the names of the attributes that are used to sort the entries for the query being indexed.
	SortOrder string `json:"sortOrder"`
	// Specifies a unique name for this VLV index.
	Name string `json:"name"`
	// Specifies the number of entry IDs to store in a single sorted set before it must be split.
	MaxBlockSize *int32                            `json:"maxBlockSize,omitempty"`
	CacheMode    *EnumlocalDbVlvIndexCacheModeProp `json:"cacheMode,omitempty"`
}

// NewAddLocalDbVlvIndexRequest instantiates a new AddLocalDbVlvIndexRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddLocalDbVlvIndexRequest(indexName string, baseDN string, scope EnumlocalDbVlvIndexScopeProp, filter string, sortOrder string, name string) *AddLocalDbVlvIndexRequest {
	this := AddLocalDbVlvIndexRequest{}
	this.IndexName = indexName
	this.BaseDN = baseDN
	this.Scope = scope
	this.Filter = filter
	this.SortOrder = sortOrder
	this.Name = name
	return &this
}

// NewAddLocalDbVlvIndexRequestWithDefaults instantiates a new AddLocalDbVlvIndexRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddLocalDbVlvIndexRequestWithDefaults() *AddLocalDbVlvIndexRequest {
	this := AddLocalDbVlvIndexRequest{}
	return &this
}

// GetIndexName returns the IndexName field value
func (o *AddLocalDbVlvIndexRequest) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *AddLocalDbVlvIndexRequest) SetIndexName(v string) {
	o.IndexName = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *AddLocalDbVlvIndexRequest) GetSchemas() []EnumlocalDbVlvIndexSchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumlocalDbVlvIndexSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetSchemasOk() ([]EnumlocalDbVlvIndexSchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *AddLocalDbVlvIndexRequest) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumlocalDbVlvIndexSchemaUrn and assigns it to the Schemas field.
func (o *AddLocalDbVlvIndexRequest) SetSchemas(v []EnumlocalDbVlvIndexSchemaUrn) {
	o.Schemas = v
}

// GetBaseDN returns the BaseDN field value
func (o *AddLocalDbVlvIndexRequest) GetBaseDN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseDN
}

// GetBaseDNOk returns a tuple with the BaseDN field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetBaseDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseDN, true
}

// SetBaseDN sets field value
func (o *AddLocalDbVlvIndexRequest) SetBaseDN(v string) {
	o.BaseDN = v
}

// GetScope returns the Scope field value
func (o *AddLocalDbVlvIndexRequest) GetScope() EnumlocalDbVlvIndexScopeProp {
	if o == nil {
		var ret EnumlocalDbVlvIndexScopeProp
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetScopeOk() (*EnumlocalDbVlvIndexScopeProp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *AddLocalDbVlvIndexRequest) SetScope(v EnumlocalDbVlvIndexScopeProp) {
	o.Scope = v
}

// GetFilter returns the Filter field value
func (o *AddLocalDbVlvIndexRequest) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *AddLocalDbVlvIndexRequest) SetFilter(v string) {
	o.Filter = v
}

// GetSortOrder returns the SortOrder field value
func (o *AddLocalDbVlvIndexRequest) GetSortOrder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetSortOrderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *AddLocalDbVlvIndexRequest) SetSortOrder(v string) {
	o.SortOrder = v
}

// GetName returns the Name field value
func (o *AddLocalDbVlvIndexRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddLocalDbVlvIndexRequest) SetName(v string) {
	o.Name = v
}

// GetMaxBlockSize returns the MaxBlockSize field value if set, zero value otherwise.
func (o *AddLocalDbVlvIndexRequest) GetMaxBlockSize() int32 {
	if o == nil || IsNil(o.MaxBlockSize) {
		var ret int32
		return ret
	}
	return *o.MaxBlockSize
}

// GetMaxBlockSizeOk returns a tuple with the MaxBlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetMaxBlockSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxBlockSize) {
		return nil, false
	}
	return o.MaxBlockSize, true
}

// HasMaxBlockSize returns a boolean if a field has been set.
func (o *AddLocalDbVlvIndexRequest) HasMaxBlockSize() bool {
	if o != nil && !IsNil(o.MaxBlockSize) {
		return true
	}

	return false
}

// SetMaxBlockSize gets a reference to the given int32 and assigns it to the MaxBlockSize field.
func (o *AddLocalDbVlvIndexRequest) SetMaxBlockSize(v int32) {
	o.MaxBlockSize = &v
}

// GetCacheMode returns the CacheMode field value if set, zero value otherwise.
func (o *AddLocalDbVlvIndexRequest) GetCacheMode() EnumlocalDbVlvIndexCacheModeProp {
	if o == nil || IsNil(o.CacheMode) {
		var ret EnumlocalDbVlvIndexCacheModeProp
		return ret
	}
	return *o.CacheMode
}

// GetCacheModeOk returns a tuple with the CacheMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddLocalDbVlvIndexRequest) GetCacheModeOk() (*EnumlocalDbVlvIndexCacheModeProp, bool) {
	if o == nil || IsNil(o.CacheMode) {
		return nil, false
	}
	return o.CacheMode, true
}

// HasCacheMode returns a boolean if a field has been set.
func (o *AddLocalDbVlvIndexRequest) HasCacheMode() bool {
	if o != nil && !IsNil(o.CacheMode) {
		return true
	}

	return false
}

// SetCacheMode gets a reference to the given EnumlocalDbVlvIndexCacheModeProp and assigns it to the CacheMode field.
func (o *AddLocalDbVlvIndexRequest) SetCacheMode(v EnumlocalDbVlvIndexCacheModeProp) {
	o.CacheMode = &v
}

func (o AddLocalDbVlvIndexRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddLocalDbVlvIndexRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["indexName"] = o.IndexName
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	toSerialize["baseDN"] = o.BaseDN
	toSerialize["scope"] = o.Scope
	toSerialize["filter"] = o.Filter
	toSerialize["sortOrder"] = o.SortOrder
	toSerialize["name"] = o.Name
	if !IsNil(o.MaxBlockSize) {
		toSerialize["maxBlockSize"] = o.MaxBlockSize
	}
	if !IsNil(o.CacheMode) {
		toSerialize["cacheMode"] = o.CacheMode
	}
	return toSerialize, nil
}

type NullableAddLocalDbVlvIndexRequest struct {
	value *AddLocalDbVlvIndexRequest
	isSet bool
}

func (v NullableAddLocalDbVlvIndexRequest) Get() *AddLocalDbVlvIndexRequest {
	return v.value
}

func (v *NullableAddLocalDbVlvIndexRequest) Set(val *AddLocalDbVlvIndexRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddLocalDbVlvIndexRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddLocalDbVlvIndexRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddLocalDbVlvIndexRequest(val *AddLocalDbVlvIndexRequest) *NullableAddLocalDbVlvIndexRequest {
	return &NullableAddLocalDbVlvIndexRequest{value: val, isSet: true}
}

func (v NullableAddLocalDbVlvIndexRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddLocalDbVlvIndexRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
