/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp The set of pass-through authentication failure types that should not result in an immediate failure, but should instead allow the aggregate handler to proceed with the next configured subordinate handler.
type EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp string

// List of Enumpass-through-authentication-handler-continueOnFailureTypeProp
const (
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_NO_SUCH_USER                        EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "no-such-user"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_WRONG_PASSWORD                      EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "wrong-password"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_MUST_CHANGE_PASSWORD                EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "must-change-password"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_ACCOUNT_NOT_USABLE                  EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "account-not-usable"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_NON_SPECIFIC_AUTHENTICATION_FAILURE EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "non-specific-authentication-failure"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_EXTERNAL_SERVICE_ERROR              EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "external-service-error"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_EXTERNAL_SERVICE_UNAVAILABLE        EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "external-service-unavailable"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_TIMEOUT                             EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "timeout"
	ENUMPASSTHROUGHAUTHENTICATIONHANDLERCONTINUEONFAILURETYPEPROP_OTHER_FAILURE                       EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp = "other-failure"
)

// All allowed values of EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp enum
var AllowedEnumpassThroughAuthenticationHandlerContinueOnFailureTypePropEnumValues = []EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp{
	"no-such-user",
	"wrong-password",
	"must-change-password",
	"account-not-usable",
	"non-specific-authentication-failure",
	"external-service-error",
	"external-service-unavailable",
	"timeout",
	"other-failure",
}

func (v *EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp(value)
	for _, existing := range AllowedEnumpassThroughAuthenticationHandlerContinueOnFailureTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp", value)
}

// NewEnumpassThroughAuthenticationHandlerContinueOnFailureTypePropFromValue returns a pointer to a valid EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpassThroughAuthenticationHandlerContinueOnFailureTypePropFromValue(v string) (*EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp, error) {
	ev := EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp: valid values are %v", v, AllowedEnumpassThroughAuthenticationHandlerContinueOnFailureTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumpassThroughAuthenticationHandlerContinueOnFailureTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpass-through-authentication-handler-continueOnFailureTypeProp value
func (v EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) Ptr() *EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp {
	return &v
}

type NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp struct {
	value *EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp
	isSet bool
}

func (v NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) Get() *EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp {
	return v.value
}

func (v *NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) Set(val *EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp(val *EnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) *NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp {
	return &NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp{value: val, isSet: true}
}

func (v NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpassThroughAuthenticationHandlerContinueOnFailureTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
