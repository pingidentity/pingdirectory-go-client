/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// GetPasswordStorageScheme200Response - struct for GetPasswordStorageScheme200Response
type GetPasswordStorageScheme200Response struct {
	Aes256PasswordStorageSchemeResponse               *Aes256PasswordStorageSchemeResponse
	AesPasswordStorageSchemeResponse                  *AesPasswordStorageSchemeResponse
	AmazonSecretsManagerPasswordStorageSchemeResponse *AmazonSecretsManagerPasswordStorageSchemeResponse
	Argon2PasswordStorageSchemeResponse               *Argon2PasswordStorageSchemeResponse
	AzureKeyVaultPasswordStorageSchemeResponse        *AzureKeyVaultPasswordStorageSchemeResponse
	Base64PasswordStorageSchemeResponse               *Base64PasswordStorageSchemeResponse
	BcryptPasswordStorageSchemeResponse               *BcryptPasswordStorageSchemeResponse
	BlowfishPasswordStorageSchemeResponse             *BlowfishPasswordStorageSchemeResponse
	ClearPasswordStorageSchemeResponse                *ClearPasswordStorageSchemeResponse
	ConjurPasswordStorageSchemeResponse               *ConjurPasswordStorageSchemeResponse
	CryptPasswordStorageSchemeResponse                *CryptPasswordStorageSchemeResponse
	Md5PasswordStorageSchemeResponse                  *Md5PasswordStorageSchemeResponse
	Pbkdf2PasswordStorageSchemeResponse               *Pbkdf2PasswordStorageSchemeResponse
	Rc4PasswordStorageSchemeResponse                  *Rc4PasswordStorageSchemeResponse
	SaltedMd5PasswordStorageSchemeResponse            *SaltedMd5PasswordStorageSchemeResponse
	SaltedSha1PasswordStorageSchemeResponse           *SaltedSha1PasswordStorageSchemeResponse
	SaltedSha256PasswordStorageSchemeResponse         *SaltedSha256PasswordStorageSchemeResponse
	SaltedSha384PasswordStorageSchemeResponse         *SaltedSha384PasswordStorageSchemeResponse
	SaltedSha512PasswordStorageSchemeResponse         *SaltedSha512PasswordStorageSchemeResponse
	ScryptPasswordStorageSchemeResponse               *ScryptPasswordStorageSchemeResponse
	Sha1PasswordStorageSchemeResponse                 *Sha1PasswordStorageSchemeResponse
	ThirdPartyEnhancedPasswordStorageSchemeResponse   *ThirdPartyEnhancedPasswordStorageSchemeResponse
	ThirdPartyPasswordStorageSchemeResponse           *ThirdPartyPasswordStorageSchemeResponse
	TripleDesPasswordStorageSchemeResponse            *TripleDesPasswordStorageSchemeResponse
	VaultPasswordStorageSchemeResponse                *VaultPasswordStorageSchemeResponse
}

// Aes256PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Aes256PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Aes256PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Aes256PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Aes256PasswordStorageSchemeResponse: v,
	}
}

// AesPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns AesPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func AesPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *AesPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		AesPasswordStorageSchemeResponse: v,
	}
}

// AmazonSecretsManagerPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns AmazonSecretsManagerPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func AmazonSecretsManagerPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *AmazonSecretsManagerPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		AmazonSecretsManagerPasswordStorageSchemeResponse: v,
	}
}

// Argon2PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Argon2PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Argon2PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Argon2PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Argon2PasswordStorageSchemeResponse: v,
	}
}

// AzureKeyVaultPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns AzureKeyVaultPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func AzureKeyVaultPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *AzureKeyVaultPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		AzureKeyVaultPasswordStorageSchemeResponse: v,
	}
}

// Base64PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Base64PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Base64PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Base64PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Base64PasswordStorageSchemeResponse: v,
	}
}

// BcryptPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns BcryptPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func BcryptPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *BcryptPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		BcryptPasswordStorageSchemeResponse: v,
	}
}

// BlowfishPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns BlowfishPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func BlowfishPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *BlowfishPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		BlowfishPasswordStorageSchemeResponse: v,
	}
}

// ClearPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns ClearPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func ClearPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *ClearPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		ClearPasswordStorageSchemeResponse: v,
	}
}

// ConjurPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns ConjurPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func ConjurPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *ConjurPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		ConjurPasswordStorageSchemeResponse: v,
	}
}

// CryptPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns CryptPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func CryptPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *CryptPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		CryptPasswordStorageSchemeResponse: v,
	}
}

// Md5PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Md5PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Md5PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Md5PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Md5PasswordStorageSchemeResponse: v,
	}
}

// Pbkdf2PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Pbkdf2PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Pbkdf2PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Pbkdf2PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Pbkdf2PasswordStorageSchemeResponse: v,
	}
}

// Rc4PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Rc4PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Rc4PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Rc4PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Rc4PasswordStorageSchemeResponse: v,
	}
}

// SaltedMd5PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns SaltedMd5PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func SaltedMd5PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *SaltedMd5PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		SaltedMd5PasswordStorageSchemeResponse: v,
	}
}

// SaltedSha1PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns SaltedSha1PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func SaltedSha1PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *SaltedSha1PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		SaltedSha1PasswordStorageSchemeResponse: v,
	}
}

// SaltedSha256PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns SaltedSha256PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func SaltedSha256PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *SaltedSha256PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		SaltedSha256PasswordStorageSchemeResponse: v,
	}
}

// SaltedSha384PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns SaltedSha384PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func SaltedSha384PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *SaltedSha384PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		SaltedSha384PasswordStorageSchemeResponse: v,
	}
}

// SaltedSha512PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns SaltedSha512PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func SaltedSha512PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *SaltedSha512PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		SaltedSha512PasswordStorageSchemeResponse: v,
	}
}

// ScryptPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns ScryptPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func ScryptPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *ScryptPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		ScryptPasswordStorageSchemeResponse: v,
	}
}

// Sha1PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns Sha1PasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func Sha1PasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *Sha1PasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		Sha1PasswordStorageSchemeResponse: v,
	}
}

// ThirdPartyEnhancedPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns ThirdPartyEnhancedPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func ThirdPartyEnhancedPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *ThirdPartyEnhancedPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		ThirdPartyEnhancedPasswordStorageSchemeResponse: v,
	}
}

// ThirdPartyPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns ThirdPartyPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func ThirdPartyPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *ThirdPartyPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		ThirdPartyPasswordStorageSchemeResponse: v,
	}
}

// TripleDesPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns TripleDesPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func TripleDesPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *TripleDesPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		TripleDesPasswordStorageSchemeResponse: v,
	}
}

// VaultPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response is a convenience function that returns VaultPasswordStorageSchemeResponse wrapped in GetPasswordStorageScheme200Response
func VaultPasswordStorageSchemeResponseAsGetPasswordStorageScheme200Response(v *VaultPasswordStorageSchemeResponse) GetPasswordStorageScheme200Response {
	return GetPasswordStorageScheme200Response{
		VaultPasswordStorageSchemeResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetPasswordStorageScheme200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Aes256PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Aes256PasswordStorageSchemeResponse)
	if err == nil {
		jsonAes256PasswordStorageSchemeResponse, _ := json.Marshal(dst.Aes256PasswordStorageSchemeResponse)
		if string(jsonAes256PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Aes256PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Aes256PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into AesPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.AesPasswordStorageSchemeResponse)
	if err == nil {
		jsonAesPasswordStorageSchemeResponse, _ := json.Marshal(dst.AesPasswordStorageSchemeResponse)
		if string(jsonAesPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.AesPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.AesPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into AmazonSecretsManagerPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.AmazonSecretsManagerPasswordStorageSchemeResponse)
	if err == nil {
		jsonAmazonSecretsManagerPasswordStorageSchemeResponse, _ := json.Marshal(dst.AmazonSecretsManagerPasswordStorageSchemeResponse)
		if string(jsonAmazonSecretsManagerPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.AmazonSecretsManagerPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.AmazonSecretsManagerPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into Argon2PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Argon2PasswordStorageSchemeResponse)
	if err == nil {
		jsonArgon2PasswordStorageSchemeResponse, _ := json.Marshal(dst.Argon2PasswordStorageSchemeResponse)
		if string(jsonArgon2PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Argon2PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Argon2PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into AzureKeyVaultPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.AzureKeyVaultPasswordStorageSchemeResponse)
	if err == nil {
		jsonAzureKeyVaultPasswordStorageSchemeResponse, _ := json.Marshal(dst.AzureKeyVaultPasswordStorageSchemeResponse)
		if string(jsonAzureKeyVaultPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.AzureKeyVaultPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.AzureKeyVaultPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into Base64PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Base64PasswordStorageSchemeResponse)
	if err == nil {
		jsonBase64PasswordStorageSchemeResponse, _ := json.Marshal(dst.Base64PasswordStorageSchemeResponse)
		if string(jsonBase64PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Base64PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Base64PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into BcryptPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.BcryptPasswordStorageSchemeResponse)
	if err == nil {
		jsonBcryptPasswordStorageSchemeResponse, _ := json.Marshal(dst.BcryptPasswordStorageSchemeResponse)
		if string(jsonBcryptPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.BcryptPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.BcryptPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into BlowfishPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.BlowfishPasswordStorageSchemeResponse)
	if err == nil {
		jsonBlowfishPasswordStorageSchemeResponse, _ := json.Marshal(dst.BlowfishPasswordStorageSchemeResponse)
		if string(jsonBlowfishPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.BlowfishPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.BlowfishPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into ClearPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.ClearPasswordStorageSchemeResponse)
	if err == nil {
		jsonClearPasswordStorageSchemeResponse, _ := json.Marshal(dst.ClearPasswordStorageSchemeResponse)
		if string(jsonClearPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.ClearPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.ClearPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into ConjurPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.ConjurPasswordStorageSchemeResponse)
	if err == nil {
		jsonConjurPasswordStorageSchemeResponse, _ := json.Marshal(dst.ConjurPasswordStorageSchemeResponse)
		if string(jsonConjurPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.ConjurPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.ConjurPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into CryptPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.CryptPasswordStorageSchemeResponse)
	if err == nil {
		jsonCryptPasswordStorageSchemeResponse, _ := json.Marshal(dst.CryptPasswordStorageSchemeResponse)
		if string(jsonCryptPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.CryptPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.CryptPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into Md5PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Md5PasswordStorageSchemeResponse)
	if err == nil {
		jsonMd5PasswordStorageSchemeResponse, _ := json.Marshal(dst.Md5PasswordStorageSchemeResponse)
		if string(jsonMd5PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Md5PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Md5PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into Pbkdf2PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Pbkdf2PasswordStorageSchemeResponse)
	if err == nil {
		jsonPbkdf2PasswordStorageSchemeResponse, _ := json.Marshal(dst.Pbkdf2PasswordStorageSchemeResponse)
		if string(jsonPbkdf2PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Pbkdf2PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Pbkdf2PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into Rc4PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Rc4PasswordStorageSchemeResponse)
	if err == nil {
		jsonRc4PasswordStorageSchemeResponse, _ := json.Marshal(dst.Rc4PasswordStorageSchemeResponse)
		if string(jsonRc4PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Rc4PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Rc4PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into SaltedMd5PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.SaltedMd5PasswordStorageSchemeResponse)
	if err == nil {
		jsonSaltedMd5PasswordStorageSchemeResponse, _ := json.Marshal(dst.SaltedMd5PasswordStorageSchemeResponse)
		if string(jsonSaltedMd5PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.SaltedMd5PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.SaltedMd5PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into SaltedSha1PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.SaltedSha1PasswordStorageSchemeResponse)
	if err == nil {
		jsonSaltedSha1PasswordStorageSchemeResponse, _ := json.Marshal(dst.SaltedSha1PasswordStorageSchemeResponse)
		if string(jsonSaltedSha1PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.SaltedSha1PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.SaltedSha1PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into SaltedSha256PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.SaltedSha256PasswordStorageSchemeResponse)
	if err == nil {
		jsonSaltedSha256PasswordStorageSchemeResponse, _ := json.Marshal(dst.SaltedSha256PasswordStorageSchemeResponse)
		if string(jsonSaltedSha256PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.SaltedSha256PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.SaltedSha256PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into SaltedSha384PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.SaltedSha384PasswordStorageSchemeResponse)
	if err == nil {
		jsonSaltedSha384PasswordStorageSchemeResponse, _ := json.Marshal(dst.SaltedSha384PasswordStorageSchemeResponse)
		if string(jsonSaltedSha384PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.SaltedSha384PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.SaltedSha384PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into SaltedSha512PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.SaltedSha512PasswordStorageSchemeResponse)
	if err == nil {
		jsonSaltedSha512PasswordStorageSchemeResponse, _ := json.Marshal(dst.SaltedSha512PasswordStorageSchemeResponse)
		if string(jsonSaltedSha512PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.SaltedSha512PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.SaltedSha512PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into ScryptPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.ScryptPasswordStorageSchemeResponse)
	if err == nil {
		jsonScryptPasswordStorageSchemeResponse, _ := json.Marshal(dst.ScryptPasswordStorageSchemeResponse)
		if string(jsonScryptPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.ScryptPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.ScryptPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into Sha1PasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.Sha1PasswordStorageSchemeResponse)
	if err == nil {
		jsonSha1PasswordStorageSchemeResponse, _ := json.Marshal(dst.Sha1PasswordStorageSchemeResponse)
		if string(jsonSha1PasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.Sha1PasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.Sha1PasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into ThirdPartyEnhancedPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyEnhancedPasswordStorageSchemeResponse)
	if err == nil {
		jsonThirdPartyEnhancedPasswordStorageSchemeResponse, _ := json.Marshal(dst.ThirdPartyEnhancedPasswordStorageSchemeResponse)
		if string(jsonThirdPartyEnhancedPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.ThirdPartyEnhancedPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyEnhancedPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into ThirdPartyPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyPasswordStorageSchemeResponse)
	if err == nil {
		jsonThirdPartyPasswordStorageSchemeResponse, _ := json.Marshal(dst.ThirdPartyPasswordStorageSchemeResponse)
		if string(jsonThirdPartyPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.ThirdPartyPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into TripleDesPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.TripleDesPasswordStorageSchemeResponse)
	if err == nil {
		jsonTripleDesPasswordStorageSchemeResponse, _ := json.Marshal(dst.TripleDesPasswordStorageSchemeResponse)
		if string(jsonTripleDesPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.TripleDesPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.TripleDesPasswordStorageSchemeResponse = nil
	}

	// try to unmarshal data into VaultPasswordStorageSchemeResponse
	err = newStrictDecoder(data).Decode(&dst.VaultPasswordStorageSchemeResponse)
	if err == nil {
		jsonVaultPasswordStorageSchemeResponse, _ := json.Marshal(dst.VaultPasswordStorageSchemeResponse)
		if string(jsonVaultPasswordStorageSchemeResponse) == "{}" { // empty struct
			dst.VaultPasswordStorageSchemeResponse = nil
		} else {
			match++
		}
	} else {
		dst.VaultPasswordStorageSchemeResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Aes256PasswordStorageSchemeResponse = nil
		dst.AesPasswordStorageSchemeResponse = nil
		dst.AmazonSecretsManagerPasswordStorageSchemeResponse = nil
		dst.Argon2PasswordStorageSchemeResponse = nil
		dst.AzureKeyVaultPasswordStorageSchemeResponse = nil
		dst.Base64PasswordStorageSchemeResponse = nil
		dst.BcryptPasswordStorageSchemeResponse = nil
		dst.BlowfishPasswordStorageSchemeResponse = nil
		dst.ClearPasswordStorageSchemeResponse = nil
		dst.ConjurPasswordStorageSchemeResponse = nil
		dst.CryptPasswordStorageSchemeResponse = nil
		dst.Md5PasswordStorageSchemeResponse = nil
		dst.Pbkdf2PasswordStorageSchemeResponse = nil
		dst.Rc4PasswordStorageSchemeResponse = nil
		dst.SaltedMd5PasswordStorageSchemeResponse = nil
		dst.SaltedSha1PasswordStorageSchemeResponse = nil
		dst.SaltedSha256PasswordStorageSchemeResponse = nil
		dst.SaltedSha384PasswordStorageSchemeResponse = nil
		dst.SaltedSha512PasswordStorageSchemeResponse = nil
		dst.ScryptPasswordStorageSchemeResponse = nil
		dst.Sha1PasswordStorageSchemeResponse = nil
		dst.ThirdPartyEnhancedPasswordStorageSchemeResponse = nil
		dst.ThirdPartyPasswordStorageSchemeResponse = nil
		dst.TripleDesPasswordStorageSchemeResponse = nil
		dst.VaultPasswordStorageSchemeResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetPasswordStorageScheme200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetPasswordStorageScheme200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetPasswordStorageScheme200Response) MarshalJSON() ([]byte, error) {
	if src.Aes256PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Aes256PasswordStorageSchemeResponse)
	}

	if src.AesPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.AesPasswordStorageSchemeResponse)
	}

	if src.AmazonSecretsManagerPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.AmazonSecretsManagerPasswordStorageSchemeResponse)
	}

	if src.Argon2PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Argon2PasswordStorageSchemeResponse)
	}

	if src.AzureKeyVaultPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.AzureKeyVaultPasswordStorageSchemeResponse)
	}

	if src.Base64PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Base64PasswordStorageSchemeResponse)
	}

	if src.BcryptPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.BcryptPasswordStorageSchemeResponse)
	}

	if src.BlowfishPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.BlowfishPasswordStorageSchemeResponse)
	}

	if src.ClearPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.ClearPasswordStorageSchemeResponse)
	}

	if src.ConjurPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.ConjurPasswordStorageSchemeResponse)
	}

	if src.CryptPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.CryptPasswordStorageSchemeResponse)
	}

	if src.Md5PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Md5PasswordStorageSchemeResponse)
	}

	if src.Pbkdf2PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Pbkdf2PasswordStorageSchemeResponse)
	}

	if src.Rc4PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Rc4PasswordStorageSchemeResponse)
	}

	if src.SaltedMd5PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.SaltedMd5PasswordStorageSchemeResponse)
	}

	if src.SaltedSha1PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.SaltedSha1PasswordStorageSchemeResponse)
	}

	if src.SaltedSha256PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.SaltedSha256PasswordStorageSchemeResponse)
	}

	if src.SaltedSha384PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.SaltedSha384PasswordStorageSchemeResponse)
	}

	if src.SaltedSha512PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.SaltedSha512PasswordStorageSchemeResponse)
	}

	if src.ScryptPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.ScryptPasswordStorageSchemeResponse)
	}

	if src.Sha1PasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.Sha1PasswordStorageSchemeResponse)
	}

	if src.ThirdPartyEnhancedPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.ThirdPartyEnhancedPasswordStorageSchemeResponse)
	}

	if src.ThirdPartyPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.ThirdPartyPasswordStorageSchemeResponse)
	}

	if src.TripleDesPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.TripleDesPasswordStorageSchemeResponse)
	}

	if src.VaultPasswordStorageSchemeResponse != nil {
		return json.Marshal(&src.VaultPasswordStorageSchemeResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetPasswordStorageScheme200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Aes256PasswordStorageSchemeResponse != nil {
		return obj.Aes256PasswordStorageSchemeResponse
	}

	if obj.AesPasswordStorageSchemeResponse != nil {
		return obj.AesPasswordStorageSchemeResponse
	}

	if obj.AmazonSecretsManagerPasswordStorageSchemeResponse != nil {
		return obj.AmazonSecretsManagerPasswordStorageSchemeResponse
	}

	if obj.Argon2PasswordStorageSchemeResponse != nil {
		return obj.Argon2PasswordStorageSchemeResponse
	}

	if obj.AzureKeyVaultPasswordStorageSchemeResponse != nil {
		return obj.AzureKeyVaultPasswordStorageSchemeResponse
	}

	if obj.Base64PasswordStorageSchemeResponse != nil {
		return obj.Base64PasswordStorageSchemeResponse
	}

	if obj.BcryptPasswordStorageSchemeResponse != nil {
		return obj.BcryptPasswordStorageSchemeResponse
	}

	if obj.BlowfishPasswordStorageSchemeResponse != nil {
		return obj.BlowfishPasswordStorageSchemeResponse
	}

	if obj.ClearPasswordStorageSchemeResponse != nil {
		return obj.ClearPasswordStorageSchemeResponse
	}

	if obj.ConjurPasswordStorageSchemeResponse != nil {
		return obj.ConjurPasswordStorageSchemeResponse
	}

	if obj.CryptPasswordStorageSchemeResponse != nil {
		return obj.CryptPasswordStorageSchemeResponse
	}

	if obj.Md5PasswordStorageSchemeResponse != nil {
		return obj.Md5PasswordStorageSchemeResponse
	}

	if obj.Pbkdf2PasswordStorageSchemeResponse != nil {
		return obj.Pbkdf2PasswordStorageSchemeResponse
	}

	if obj.Rc4PasswordStorageSchemeResponse != nil {
		return obj.Rc4PasswordStorageSchemeResponse
	}

	if obj.SaltedMd5PasswordStorageSchemeResponse != nil {
		return obj.SaltedMd5PasswordStorageSchemeResponse
	}

	if obj.SaltedSha1PasswordStorageSchemeResponse != nil {
		return obj.SaltedSha1PasswordStorageSchemeResponse
	}

	if obj.SaltedSha256PasswordStorageSchemeResponse != nil {
		return obj.SaltedSha256PasswordStorageSchemeResponse
	}

	if obj.SaltedSha384PasswordStorageSchemeResponse != nil {
		return obj.SaltedSha384PasswordStorageSchemeResponse
	}

	if obj.SaltedSha512PasswordStorageSchemeResponse != nil {
		return obj.SaltedSha512PasswordStorageSchemeResponse
	}

	if obj.ScryptPasswordStorageSchemeResponse != nil {
		return obj.ScryptPasswordStorageSchemeResponse
	}

	if obj.Sha1PasswordStorageSchemeResponse != nil {
		return obj.Sha1PasswordStorageSchemeResponse
	}

	if obj.ThirdPartyEnhancedPasswordStorageSchemeResponse != nil {
		return obj.ThirdPartyEnhancedPasswordStorageSchemeResponse
	}

	if obj.ThirdPartyPasswordStorageSchemeResponse != nil {
		return obj.ThirdPartyPasswordStorageSchemeResponse
	}

	if obj.TripleDesPasswordStorageSchemeResponse != nil {
		return obj.TripleDesPasswordStorageSchemeResponse
	}

	if obj.VaultPasswordStorageSchemeResponse != nil {
		return obj.VaultPasswordStorageSchemeResponse
	}

	// all schemas are nil
	return nil
}

type NullableGetPasswordStorageScheme200Response struct {
	value *GetPasswordStorageScheme200Response
	isSet bool
}

func (v NullableGetPasswordStorageScheme200Response) Get() *GetPasswordStorageScheme200Response {
	return v.value
}

func (v *NullableGetPasswordStorageScheme200Response) Set(val *GetPasswordStorageScheme200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPasswordStorageScheme200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPasswordStorageScheme200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPasswordStorageScheme200Response(val *GetPasswordStorageScheme200Response) *NullableGetPasswordStorageScheme200Response {
	return &NullableGetPasswordStorageScheme200Response{value: val, isSet: true}
}

func (v NullableGetPasswordStorageScheme200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPasswordStorageScheme200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
