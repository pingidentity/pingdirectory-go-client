/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalServerSunDsAuthenticationMethodProp The mechanism to use to authenticate to the target server.
type EnumexternalServerSunDsAuthenticationMethodProp string

// List of Enumexternal-server-sun-ds-authenticationMethodProp
const (
	ENUMEXTERNALSERVERSUNDSAUTHENTICATIONMETHODPROP_NONE         EnumexternalServerSunDsAuthenticationMethodProp = "none"
	ENUMEXTERNALSERVERSUNDSAUTHENTICATIONMETHODPROP_SIMPLE       EnumexternalServerSunDsAuthenticationMethodProp = "simple"
	ENUMEXTERNALSERVERSUNDSAUTHENTICATIONMETHODPROP_EXTERNAL     EnumexternalServerSunDsAuthenticationMethodProp = "external"
	ENUMEXTERNALSERVERSUNDSAUTHENTICATIONMETHODPROP_INTER_SERVER EnumexternalServerSunDsAuthenticationMethodProp = "inter-server"
)

// All allowed values of EnumexternalServerSunDsAuthenticationMethodProp enum
var AllowedEnumexternalServerSunDsAuthenticationMethodPropEnumValues = []EnumexternalServerSunDsAuthenticationMethodProp{
	"none",
	"simple",
	"external",
	"inter-server",
}

func (v *EnumexternalServerSunDsAuthenticationMethodProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalServerSunDsAuthenticationMethodProp(value)
	for _, existing := range AllowedEnumexternalServerSunDsAuthenticationMethodPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalServerSunDsAuthenticationMethodProp", value)
}

// NewEnumexternalServerSunDsAuthenticationMethodPropFromValue returns a pointer to a valid EnumexternalServerSunDsAuthenticationMethodProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalServerSunDsAuthenticationMethodPropFromValue(v string) (*EnumexternalServerSunDsAuthenticationMethodProp, error) {
	ev := EnumexternalServerSunDsAuthenticationMethodProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalServerSunDsAuthenticationMethodProp: valid values are %v", v, AllowedEnumexternalServerSunDsAuthenticationMethodPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalServerSunDsAuthenticationMethodProp) IsValid() bool {
	for _, existing := range AllowedEnumexternalServerSunDsAuthenticationMethodPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-server-sun-ds-authenticationMethodProp value
func (v EnumexternalServerSunDsAuthenticationMethodProp) Ptr() *EnumexternalServerSunDsAuthenticationMethodProp {
	return &v
}

type NullableEnumexternalServerSunDsAuthenticationMethodProp struct {
	value *EnumexternalServerSunDsAuthenticationMethodProp
	isSet bool
}

func (v NullableEnumexternalServerSunDsAuthenticationMethodProp) Get() *EnumexternalServerSunDsAuthenticationMethodProp {
	return v.value
}

func (v *NullableEnumexternalServerSunDsAuthenticationMethodProp) Set(val *EnumexternalServerSunDsAuthenticationMethodProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalServerSunDsAuthenticationMethodProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalServerSunDsAuthenticationMethodProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalServerSunDsAuthenticationMethodProp(val *EnumexternalServerSunDsAuthenticationMethodProp) *NullableEnumexternalServerSunDsAuthenticationMethodProp {
	return &NullableEnumexternalServerSunDsAuthenticationMethodProp{value: val, isSet: true}
}

func (v NullableEnumexternalServerSunDsAuthenticationMethodProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalServerSunDsAuthenticationMethodProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
