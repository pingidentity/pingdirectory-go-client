/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddUtf8PasswordValidatorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUtf8PasswordValidatorRequest{}

// AddUtf8PasswordValidatorRequest struct for AddUtf8PasswordValidatorRequest
type AddUtf8PasswordValidatorRequest struct {
	Schemas []Enumutf8PasswordValidatorSchemaUrn `json:"schemas"`
	// Indicates whether passwords will be allowed to include characters from outside the ASCII character set.
	AllowNonAsciiCharacters *bool `json:"allowNonAsciiCharacters,omitempty"`
	// Indicates whether passwords will be allowed to include characters that are not recognized by the JVM's Unicode support.
	AllowUnknownCharacters *bool                                           `json:"allowUnknownCharacters,omitempty"`
	AllowedCharacterType   []EnumpasswordValidatorAllowedCharacterTypeProp `json:"allowedCharacterType,omitempty"`
	// A description for this Password Validator
	Description *string `json:"description,omitempty"`
	// Indicates whether the password validator is enabled for use.
	Enabled bool `json:"enabled"`
	// Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
	ValidatorRequirementDescription *string `json:"validatorRequirementDescription,omitempty"`
	// Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
	ValidatorFailureMessage *string `json:"validatorFailureMessage,omitempty"`
	// Name of the new Password Validator
	ValidatorName string `json:"validatorName"`
}

// NewAddUtf8PasswordValidatorRequest instantiates a new AddUtf8PasswordValidatorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUtf8PasswordValidatorRequest(schemas []Enumutf8PasswordValidatorSchemaUrn, enabled bool, validatorName string) *AddUtf8PasswordValidatorRequest {
	this := AddUtf8PasswordValidatorRequest{}
	this.Schemas = schemas
	this.Enabled = enabled
	this.ValidatorName = validatorName
	return &this
}

// NewAddUtf8PasswordValidatorRequestWithDefaults instantiates a new AddUtf8PasswordValidatorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUtf8PasswordValidatorRequestWithDefaults() *AddUtf8PasswordValidatorRequest {
	this := AddUtf8PasswordValidatorRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddUtf8PasswordValidatorRequest) GetSchemas() []Enumutf8PasswordValidatorSchemaUrn {
	if o == nil {
		var ret []Enumutf8PasswordValidatorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetSchemasOk() ([]Enumutf8PasswordValidatorSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddUtf8PasswordValidatorRequest) SetSchemas(v []Enumutf8PasswordValidatorSchemaUrn) {
	o.Schemas = v
}

// GetAllowNonAsciiCharacters returns the AllowNonAsciiCharacters field value if set, zero value otherwise.
func (o *AddUtf8PasswordValidatorRequest) GetAllowNonAsciiCharacters() bool {
	if o == nil || IsNil(o.AllowNonAsciiCharacters) {
		var ret bool
		return ret
	}
	return *o.AllowNonAsciiCharacters
}

// GetAllowNonAsciiCharactersOk returns a tuple with the AllowNonAsciiCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetAllowNonAsciiCharactersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowNonAsciiCharacters) {
		return nil, false
	}
	return o.AllowNonAsciiCharacters, true
}

// HasAllowNonAsciiCharacters returns a boolean if a field has been set.
func (o *AddUtf8PasswordValidatorRequest) HasAllowNonAsciiCharacters() bool {
	if o != nil && !IsNil(o.AllowNonAsciiCharacters) {
		return true
	}

	return false
}

// SetAllowNonAsciiCharacters gets a reference to the given bool and assigns it to the AllowNonAsciiCharacters field.
func (o *AddUtf8PasswordValidatorRequest) SetAllowNonAsciiCharacters(v bool) {
	o.AllowNonAsciiCharacters = &v
}

// GetAllowUnknownCharacters returns the AllowUnknownCharacters field value if set, zero value otherwise.
func (o *AddUtf8PasswordValidatorRequest) GetAllowUnknownCharacters() bool {
	if o == nil || IsNil(o.AllowUnknownCharacters) {
		var ret bool
		return ret
	}
	return *o.AllowUnknownCharacters
}

// GetAllowUnknownCharactersOk returns a tuple with the AllowUnknownCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetAllowUnknownCharactersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUnknownCharacters) {
		return nil, false
	}
	return o.AllowUnknownCharacters, true
}

// HasAllowUnknownCharacters returns a boolean if a field has been set.
func (o *AddUtf8PasswordValidatorRequest) HasAllowUnknownCharacters() bool {
	if o != nil && !IsNil(o.AllowUnknownCharacters) {
		return true
	}

	return false
}

// SetAllowUnknownCharacters gets a reference to the given bool and assigns it to the AllowUnknownCharacters field.
func (o *AddUtf8PasswordValidatorRequest) SetAllowUnknownCharacters(v bool) {
	o.AllowUnknownCharacters = &v
}

// GetAllowedCharacterType returns the AllowedCharacterType field value if set, zero value otherwise.
func (o *AddUtf8PasswordValidatorRequest) GetAllowedCharacterType() []EnumpasswordValidatorAllowedCharacterTypeProp {
	if o == nil || IsNil(o.AllowedCharacterType) {
		var ret []EnumpasswordValidatorAllowedCharacterTypeProp
		return ret
	}
	return o.AllowedCharacterType
}

// GetAllowedCharacterTypeOk returns a tuple with the AllowedCharacterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetAllowedCharacterTypeOk() ([]EnumpasswordValidatorAllowedCharacterTypeProp, bool) {
	if o == nil || IsNil(o.AllowedCharacterType) {
		return nil, false
	}
	return o.AllowedCharacterType, true
}

// HasAllowedCharacterType returns a boolean if a field has been set.
func (o *AddUtf8PasswordValidatorRequest) HasAllowedCharacterType() bool {
	if o != nil && !IsNil(o.AllowedCharacterType) {
		return true
	}

	return false
}

// SetAllowedCharacterType gets a reference to the given []EnumpasswordValidatorAllowedCharacterTypeProp and assigns it to the AllowedCharacterType field.
func (o *AddUtf8PasswordValidatorRequest) SetAllowedCharacterType(v []EnumpasswordValidatorAllowedCharacterTypeProp) {
	o.AllowedCharacterType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddUtf8PasswordValidatorRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddUtf8PasswordValidatorRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddUtf8PasswordValidatorRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddUtf8PasswordValidatorRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddUtf8PasswordValidatorRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetValidatorRequirementDescription returns the ValidatorRequirementDescription field value if set, zero value otherwise.
func (o *AddUtf8PasswordValidatorRequest) GetValidatorRequirementDescription() string {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		var ret string
		return ret
	}
	return *o.ValidatorRequirementDescription
}

// GetValidatorRequirementDescriptionOk returns a tuple with the ValidatorRequirementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetValidatorRequirementDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		return nil, false
	}
	return o.ValidatorRequirementDescription, true
}

// HasValidatorRequirementDescription returns a boolean if a field has been set.
func (o *AddUtf8PasswordValidatorRequest) HasValidatorRequirementDescription() bool {
	if o != nil && !IsNil(o.ValidatorRequirementDescription) {
		return true
	}

	return false
}

// SetValidatorRequirementDescription gets a reference to the given string and assigns it to the ValidatorRequirementDescription field.
func (o *AddUtf8PasswordValidatorRequest) SetValidatorRequirementDescription(v string) {
	o.ValidatorRequirementDescription = &v
}

// GetValidatorFailureMessage returns the ValidatorFailureMessage field value if set, zero value otherwise.
func (o *AddUtf8PasswordValidatorRequest) GetValidatorFailureMessage() string {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		var ret string
		return ret
	}
	return *o.ValidatorFailureMessage
}

// GetValidatorFailureMessageOk returns a tuple with the ValidatorFailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetValidatorFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		return nil, false
	}
	return o.ValidatorFailureMessage, true
}

// HasValidatorFailureMessage returns a boolean if a field has been set.
func (o *AddUtf8PasswordValidatorRequest) HasValidatorFailureMessage() bool {
	if o != nil && !IsNil(o.ValidatorFailureMessage) {
		return true
	}

	return false
}

// SetValidatorFailureMessage gets a reference to the given string and assigns it to the ValidatorFailureMessage field.
func (o *AddUtf8PasswordValidatorRequest) SetValidatorFailureMessage(v string) {
	o.ValidatorFailureMessage = &v
}

// GetValidatorName returns the ValidatorName field value
func (o *AddUtf8PasswordValidatorRequest) GetValidatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorName
}

// GetValidatorNameOk returns a tuple with the ValidatorName field value
// and a boolean to check if the value has been set.
func (o *AddUtf8PasswordValidatorRequest) GetValidatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorName, true
}

// SetValidatorName sets field value
func (o *AddUtf8PasswordValidatorRequest) SetValidatorName(v string) {
	o.ValidatorName = v
}

func (o AddUtf8PasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUtf8PasswordValidatorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.AllowNonAsciiCharacters) {
		toSerialize["allowNonAsciiCharacters"] = o.AllowNonAsciiCharacters
	}
	if !IsNil(o.AllowUnknownCharacters) {
		toSerialize["allowUnknownCharacters"] = o.AllowUnknownCharacters
	}
	if !IsNil(o.AllowedCharacterType) {
		toSerialize["allowedCharacterType"] = o.AllowedCharacterType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ValidatorRequirementDescription) {
		toSerialize["validatorRequirementDescription"] = o.ValidatorRequirementDescription
	}
	if !IsNil(o.ValidatorFailureMessage) {
		toSerialize["validatorFailureMessage"] = o.ValidatorFailureMessage
	}
	toSerialize["validatorName"] = o.ValidatorName
	return toSerialize, nil
}

type NullableAddUtf8PasswordValidatorRequest struct {
	value *AddUtf8PasswordValidatorRequest
	isSet bool
}

func (v NullableAddUtf8PasswordValidatorRequest) Get() *AddUtf8PasswordValidatorRequest {
	return v.value
}

func (v *NullableAddUtf8PasswordValidatorRequest) Set(val *AddUtf8PasswordValidatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUtf8PasswordValidatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUtf8PasswordValidatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUtf8PasswordValidatorRequest(val *AddUtf8PasswordValidatorRequest) *NullableAddUtf8PasswordValidatorRequest {
	return &NullableAddUtf8PasswordValidatorRequest{value: val, isSet: true}
}

func (v NullableAddUtf8PasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUtf8PasswordValidatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
