/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumrootDnUserSchemaUrn the model 'EnumrootDnUserSchemaUrn'
type EnumrootDnUserSchemaUrn string

// List of Enumroot-dn-userSchemaUrn
const (
	ENUMROOTDNUSERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ROOT_DN_USER EnumrootDnUserSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:root-dn-user"
)

// All allowed values of EnumrootDnUserSchemaUrn enum
var AllowedEnumrootDnUserSchemaUrnEnumValues = []EnumrootDnUserSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:root-dn-user",
}

func (v *EnumrootDnUserSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumrootDnUserSchemaUrn(value)
	for _, existing := range AllowedEnumrootDnUserSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumrootDnUserSchemaUrn", value)
}

// NewEnumrootDnUserSchemaUrnFromValue returns a pointer to a valid EnumrootDnUserSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumrootDnUserSchemaUrnFromValue(v string) (*EnumrootDnUserSchemaUrn, error) {
	ev := EnumrootDnUserSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumrootDnUserSchemaUrn: valid values are %v", v, AllowedEnumrootDnUserSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumrootDnUserSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumrootDnUserSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumroot-dn-userSchemaUrn value
func (v EnumrootDnUserSchemaUrn) Ptr() *EnumrootDnUserSchemaUrn {
	return &v
}

type NullableEnumrootDnUserSchemaUrn struct {
	value *EnumrootDnUserSchemaUrn
	isSet bool
}

func (v NullableEnumrootDnUserSchemaUrn) Get() *EnumrootDnUserSchemaUrn {
	return v.value
}

func (v *NullableEnumrootDnUserSchemaUrn) Set(val *EnumrootDnUserSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumrootDnUserSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumrootDnUserSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumrootDnUserSchemaUrn(val *EnumrootDnUserSchemaUrn) *NullableEnumrootDnUserSchemaUrn {
	return &NullableEnumrootDnUserSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumrootDnUserSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumrootDnUserSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
