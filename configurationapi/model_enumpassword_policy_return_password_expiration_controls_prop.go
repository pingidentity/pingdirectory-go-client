/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordPolicyReturnPasswordExpirationControlsProp Indicates whether the server should return the password expiring and password expired response controls (as described in draft-vchu-ldap-pwd-policy).
type EnumpasswordPolicyReturnPasswordExpirationControlsProp string

// List of Enumpassword-policy-returnPasswordExpirationControlsProp
const (
	ENUMPASSWORDPOLICYRETURNPASSWORDEXPIRATIONCONTROLSPROP_UNLESS_PASSWORD_POLICY_CONTROL_IS_USED EnumpasswordPolicyReturnPasswordExpirationControlsProp = "unless-password-policy-control-is-used"
	ENUMPASSWORDPOLICYRETURNPASSWORDEXPIRATIONCONTROLSPROP_ALWAYS                                 EnumpasswordPolicyReturnPasswordExpirationControlsProp = "always"
	ENUMPASSWORDPOLICYRETURNPASSWORDEXPIRATIONCONTROLSPROP_NEVER                                  EnumpasswordPolicyReturnPasswordExpirationControlsProp = "never"
)

// All allowed values of EnumpasswordPolicyReturnPasswordExpirationControlsProp enum
var AllowedEnumpasswordPolicyReturnPasswordExpirationControlsPropEnumValues = []EnumpasswordPolicyReturnPasswordExpirationControlsProp{
	"unless-password-policy-control-is-used",
	"always",
	"never",
}

func (v *EnumpasswordPolicyReturnPasswordExpirationControlsProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordPolicyReturnPasswordExpirationControlsProp(value)
	for _, existing := range AllowedEnumpasswordPolicyReturnPasswordExpirationControlsPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicyReturnPasswordExpirationControlsProp", value)
}

// NewEnumpasswordPolicyReturnPasswordExpirationControlsPropFromValue returns a pointer to a valid EnumpasswordPolicyReturnPasswordExpirationControlsProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicyReturnPasswordExpirationControlsPropFromValue(v string) (*EnumpasswordPolicyReturnPasswordExpirationControlsProp, error) {
	ev := EnumpasswordPolicyReturnPasswordExpirationControlsProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicyReturnPasswordExpirationControlsProp: valid values are %v", v, AllowedEnumpasswordPolicyReturnPasswordExpirationControlsPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicyReturnPasswordExpirationControlsProp) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicyReturnPasswordExpirationControlsPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policy-returnPasswordExpirationControlsProp value
func (v EnumpasswordPolicyReturnPasswordExpirationControlsProp) Ptr() *EnumpasswordPolicyReturnPasswordExpirationControlsProp {
	return &v
}

type NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp struct {
	value *EnumpasswordPolicyReturnPasswordExpirationControlsProp
	isSet bool
}

func (v NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp) Get() *EnumpasswordPolicyReturnPasswordExpirationControlsProp {
	return v.value
}

func (v *NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp) Set(val *EnumpasswordPolicyReturnPasswordExpirationControlsProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicyReturnPasswordExpirationControlsProp(val *EnumpasswordPolicyReturnPasswordExpirationControlsProp) *NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp {
	return &NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicyReturnPasswordExpirationControlsProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
