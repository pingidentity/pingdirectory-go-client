/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddDataSecurityAuditorRequest - struct for AddDataSecurityAuditorRequest
type AddDataSecurityAuditorRequest struct {
	AddAccessControlDataSecurityAuditorRequest                   *AddAccessControlDataSecurityAuditorRequest
	AddAccountUsabilityIssuesDataSecurityAuditorRequest          *AddAccountUsabilityIssuesDataSecurityAuditorRequest
	AddAccountValidityWindowDataSecurityAuditorRequest           *AddAccountValidityWindowDataSecurityAuditorRequest
	AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest *AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest
	AddDisabledAccountDataSecurityAuditorRequest                 *AddDisabledAccountDataSecurityAuditorRequest
	AddExpiredPasswordDataSecurityAuditorRequest                 *AddExpiredPasswordDataSecurityAuditorRequest
	AddFilterDataSecurityAuditorRequest                          *AddFilterDataSecurityAuditorRequest
	AddIdleAccountDataSecurityAuditorRequest                     *AddIdleAccountDataSecurityAuditorRequest
	AddLockedAccountDataSecurityAuditorRequest                   *AddLockedAccountDataSecurityAuditorRequest
	AddMultiplePasswordDataSecurityAuditorRequest                *AddMultiplePasswordDataSecurityAuditorRequest
	AddNonexistentPasswordPolicyDataSecurityAuditorRequest       *AddNonexistentPasswordPolicyDataSecurityAuditorRequest
	AddPrivilegeDataSecurityAuditorRequest                       *AddPrivilegeDataSecurityAuditorRequest
	AddThirdPartyDataSecurityAuditorRequest                      *AddThirdPartyDataSecurityAuditorRequest
	AddWeaklyEncodedPasswordDataSecurityAuditorRequest           *AddWeaklyEncodedPasswordDataSecurityAuditorRequest
}

// AddAccessControlDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddAccessControlDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddAccessControlDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddAccessControlDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddAccessControlDataSecurityAuditorRequest: v,
	}
}

// AddAccountUsabilityIssuesDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddAccountUsabilityIssuesDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddAccountUsabilityIssuesDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddAccountUsabilityIssuesDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddAccountUsabilityIssuesDataSecurityAuditorRequest: v,
	}
}

// AddAccountValidityWindowDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddAccountValidityWindowDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddAccountValidityWindowDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddAccountValidityWindowDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddAccountValidityWindowDataSecurityAuditorRequest: v,
	}
}

// AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest: v,
	}
}

// AddDisabledAccountDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddDisabledAccountDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddDisabledAccountDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddDisabledAccountDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddDisabledAccountDataSecurityAuditorRequest: v,
	}
}

// AddExpiredPasswordDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddExpiredPasswordDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddExpiredPasswordDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddExpiredPasswordDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddExpiredPasswordDataSecurityAuditorRequest: v,
	}
}

// AddFilterDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddFilterDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddFilterDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddFilterDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddFilterDataSecurityAuditorRequest: v,
	}
}

// AddIdleAccountDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddIdleAccountDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddIdleAccountDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddIdleAccountDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddIdleAccountDataSecurityAuditorRequest: v,
	}
}

// AddLockedAccountDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddLockedAccountDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddLockedAccountDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddLockedAccountDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddLockedAccountDataSecurityAuditorRequest: v,
	}
}

// AddMultiplePasswordDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddMultiplePasswordDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddMultiplePasswordDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddMultiplePasswordDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddMultiplePasswordDataSecurityAuditorRequest: v,
	}
}

// AddNonexistentPasswordPolicyDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddNonexistentPasswordPolicyDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddNonexistentPasswordPolicyDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddNonexistentPasswordPolicyDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddNonexistentPasswordPolicyDataSecurityAuditorRequest: v,
	}
}

// AddPrivilegeDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddPrivilegeDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddPrivilegeDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddPrivilegeDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddPrivilegeDataSecurityAuditorRequest: v,
	}
}

// AddThirdPartyDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddThirdPartyDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddThirdPartyDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddThirdPartyDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddThirdPartyDataSecurityAuditorRequest: v,
	}
}

// AddWeaklyEncodedPasswordDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest is a convenience function that returns AddWeaklyEncodedPasswordDataSecurityAuditorRequest wrapped in AddDataSecurityAuditorRequest
func AddWeaklyEncodedPasswordDataSecurityAuditorRequestAsAddDataSecurityAuditorRequest(v *AddWeaklyEncodedPasswordDataSecurityAuditorRequest) AddDataSecurityAuditorRequest {
	return AddDataSecurityAuditorRequest{
		AddWeaklyEncodedPasswordDataSecurityAuditorRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddDataSecurityAuditorRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAccessControlDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddAccessControlDataSecurityAuditorRequest)
	if err == nil {
		jsonAddAccessControlDataSecurityAuditorRequest, _ := json.Marshal(dst.AddAccessControlDataSecurityAuditorRequest)
		if string(jsonAddAccessControlDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddAccessControlDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAccessControlDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddAccountUsabilityIssuesDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddAccountUsabilityIssuesDataSecurityAuditorRequest)
	if err == nil {
		jsonAddAccountUsabilityIssuesDataSecurityAuditorRequest, _ := json.Marshal(dst.AddAccountUsabilityIssuesDataSecurityAuditorRequest)
		if string(jsonAddAccountUsabilityIssuesDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddAccountUsabilityIssuesDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAccountUsabilityIssuesDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddAccountValidityWindowDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddAccountValidityWindowDataSecurityAuditorRequest)
	if err == nil {
		jsonAddAccountValidityWindowDataSecurityAuditorRequest, _ := json.Marshal(dst.AddAccountValidityWindowDataSecurityAuditorRequest)
		if string(jsonAddAccountValidityWindowDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddAccountValidityWindowDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddAccountValidityWindowDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest)
	if err == nil {
		jsonAddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest, _ := json.Marshal(dst.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest)
		if string(jsonAddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddDisabledAccountDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddDisabledAccountDataSecurityAuditorRequest)
	if err == nil {
		jsonAddDisabledAccountDataSecurityAuditorRequest, _ := json.Marshal(dst.AddDisabledAccountDataSecurityAuditorRequest)
		if string(jsonAddDisabledAccountDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddDisabledAccountDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddDisabledAccountDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddExpiredPasswordDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddExpiredPasswordDataSecurityAuditorRequest)
	if err == nil {
		jsonAddExpiredPasswordDataSecurityAuditorRequest, _ := json.Marshal(dst.AddExpiredPasswordDataSecurityAuditorRequest)
		if string(jsonAddExpiredPasswordDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddExpiredPasswordDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddExpiredPasswordDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddFilterDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddFilterDataSecurityAuditorRequest)
	if err == nil {
		jsonAddFilterDataSecurityAuditorRequest, _ := json.Marshal(dst.AddFilterDataSecurityAuditorRequest)
		if string(jsonAddFilterDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddFilterDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddFilterDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddIdleAccountDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddIdleAccountDataSecurityAuditorRequest)
	if err == nil {
		jsonAddIdleAccountDataSecurityAuditorRequest, _ := json.Marshal(dst.AddIdleAccountDataSecurityAuditorRequest)
		if string(jsonAddIdleAccountDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddIdleAccountDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddIdleAccountDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddLockedAccountDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddLockedAccountDataSecurityAuditorRequest)
	if err == nil {
		jsonAddLockedAccountDataSecurityAuditorRequest, _ := json.Marshal(dst.AddLockedAccountDataSecurityAuditorRequest)
		if string(jsonAddLockedAccountDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddLockedAccountDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddLockedAccountDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddMultiplePasswordDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddMultiplePasswordDataSecurityAuditorRequest)
	if err == nil {
		jsonAddMultiplePasswordDataSecurityAuditorRequest, _ := json.Marshal(dst.AddMultiplePasswordDataSecurityAuditorRequest)
		if string(jsonAddMultiplePasswordDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddMultiplePasswordDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddMultiplePasswordDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddNonexistentPasswordPolicyDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddNonexistentPasswordPolicyDataSecurityAuditorRequest)
	if err == nil {
		jsonAddNonexistentPasswordPolicyDataSecurityAuditorRequest, _ := json.Marshal(dst.AddNonexistentPasswordPolicyDataSecurityAuditorRequest)
		if string(jsonAddNonexistentPasswordPolicyDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddNonexistentPasswordPolicyDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddNonexistentPasswordPolicyDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddPrivilegeDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddPrivilegeDataSecurityAuditorRequest)
	if err == nil {
		jsonAddPrivilegeDataSecurityAuditorRequest, _ := json.Marshal(dst.AddPrivilegeDataSecurityAuditorRequest)
		if string(jsonAddPrivilegeDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddPrivilegeDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddPrivilegeDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddThirdPartyDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddThirdPartyDataSecurityAuditorRequest)
	if err == nil {
		jsonAddThirdPartyDataSecurityAuditorRequest, _ := json.Marshal(dst.AddThirdPartyDataSecurityAuditorRequest)
		if string(jsonAddThirdPartyDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddThirdPartyDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddThirdPartyDataSecurityAuditorRequest = nil
	}

	// try to unmarshal data into AddWeaklyEncodedPasswordDataSecurityAuditorRequest
	err = newStrictDecoder(data).Decode(&dst.AddWeaklyEncodedPasswordDataSecurityAuditorRequest)
	if err == nil {
		jsonAddWeaklyEncodedPasswordDataSecurityAuditorRequest, _ := json.Marshal(dst.AddWeaklyEncodedPasswordDataSecurityAuditorRequest)
		if string(jsonAddWeaklyEncodedPasswordDataSecurityAuditorRequest) == "{}" { // empty struct
			dst.AddWeaklyEncodedPasswordDataSecurityAuditorRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddWeaklyEncodedPasswordDataSecurityAuditorRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAccessControlDataSecurityAuditorRequest = nil
		dst.AddAccountUsabilityIssuesDataSecurityAuditorRequest = nil
		dst.AddAccountValidityWindowDataSecurityAuditorRequest = nil
		dst.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest = nil
		dst.AddDisabledAccountDataSecurityAuditorRequest = nil
		dst.AddExpiredPasswordDataSecurityAuditorRequest = nil
		dst.AddFilterDataSecurityAuditorRequest = nil
		dst.AddIdleAccountDataSecurityAuditorRequest = nil
		dst.AddLockedAccountDataSecurityAuditorRequest = nil
		dst.AddMultiplePasswordDataSecurityAuditorRequest = nil
		dst.AddNonexistentPasswordPolicyDataSecurityAuditorRequest = nil
		dst.AddPrivilegeDataSecurityAuditorRequest = nil
		dst.AddThirdPartyDataSecurityAuditorRequest = nil
		dst.AddWeaklyEncodedPasswordDataSecurityAuditorRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddDataSecurityAuditorRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddDataSecurityAuditorRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddDataSecurityAuditorRequest) MarshalJSON() ([]byte, error) {
	if src.AddAccessControlDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddAccessControlDataSecurityAuditorRequest)
	}

	if src.AddAccountUsabilityIssuesDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddAccountUsabilityIssuesDataSecurityAuditorRequest)
	}

	if src.AddAccountValidityWindowDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddAccountValidityWindowDataSecurityAuditorRequest)
	}

	if src.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest)
	}

	if src.AddDisabledAccountDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddDisabledAccountDataSecurityAuditorRequest)
	}

	if src.AddExpiredPasswordDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddExpiredPasswordDataSecurityAuditorRequest)
	}

	if src.AddFilterDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddFilterDataSecurityAuditorRequest)
	}

	if src.AddIdleAccountDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddIdleAccountDataSecurityAuditorRequest)
	}

	if src.AddLockedAccountDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddLockedAccountDataSecurityAuditorRequest)
	}

	if src.AddMultiplePasswordDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddMultiplePasswordDataSecurityAuditorRequest)
	}

	if src.AddNonexistentPasswordPolicyDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddNonexistentPasswordPolicyDataSecurityAuditorRequest)
	}

	if src.AddPrivilegeDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddPrivilegeDataSecurityAuditorRequest)
	}

	if src.AddThirdPartyDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddThirdPartyDataSecurityAuditorRequest)
	}

	if src.AddWeaklyEncodedPasswordDataSecurityAuditorRequest != nil {
		return json.Marshal(&src.AddWeaklyEncodedPasswordDataSecurityAuditorRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddDataSecurityAuditorRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddAccessControlDataSecurityAuditorRequest != nil {
		return obj.AddAccessControlDataSecurityAuditorRequest
	}

	if obj.AddAccountUsabilityIssuesDataSecurityAuditorRequest != nil {
		return obj.AddAccountUsabilityIssuesDataSecurityAuditorRequest
	}

	if obj.AddAccountValidityWindowDataSecurityAuditorRequest != nil {
		return obj.AddAccountValidityWindowDataSecurityAuditorRequest
	}

	if obj.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest != nil {
		return obj.AddDeprecatedPasswordStorageSchemeDataSecurityAuditorRequest
	}

	if obj.AddDisabledAccountDataSecurityAuditorRequest != nil {
		return obj.AddDisabledAccountDataSecurityAuditorRequest
	}

	if obj.AddExpiredPasswordDataSecurityAuditorRequest != nil {
		return obj.AddExpiredPasswordDataSecurityAuditorRequest
	}

	if obj.AddFilterDataSecurityAuditorRequest != nil {
		return obj.AddFilterDataSecurityAuditorRequest
	}

	if obj.AddIdleAccountDataSecurityAuditorRequest != nil {
		return obj.AddIdleAccountDataSecurityAuditorRequest
	}

	if obj.AddLockedAccountDataSecurityAuditorRequest != nil {
		return obj.AddLockedAccountDataSecurityAuditorRequest
	}

	if obj.AddMultiplePasswordDataSecurityAuditorRequest != nil {
		return obj.AddMultiplePasswordDataSecurityAuditorRequest
	}

	if obj.AddNonexistentPasswordPolicyDataSecurityAuditorRequest != nil {
		return obj.AddNonexistentPasswordPolicyDataSecurityAuditorRequest
	}

	if obj.AddPrivilegeDataSecurityAuditorRequest != nil {
		return obj.AddPrivilegeDataSecurityAuditorRequest
	}

	if obj.AddThirdPartyDataSecurityAuditorRequest != nil {
		return obj.AddThirdPartyDataSecurityAuditorRequest
	}

	if obj.AddWeaklyEncodedPasswordDataSecurityAuditorRequest != nil {
		return obj.AddWeaklyEncodedPasswordDataSecurityAuditorRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddDataSecurityAuditorRequest struct {
	value *AddDataSecurityAuditorRequest
	isSet bool
}

func (v NullableAddDataSecurityAuditorRequest) Get() *AddDataSecurityAuditorRequest {
	return v.value
}

func (v *NullableAddDataSecurityAuditorRequest) Set(val *AddDataSecurityAuditorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDataSecurityAuditorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDataSecurityAuditorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDataSecurityAuditorRequest(val *AddDataSecurityAuditorRequest) *NullableAddDataSecurityAuditorRequest {
	return &NullableAddDataSecurityAuditorRequest{value: val, isSet: true}
}

func (v NullableAddDataSecurityAuditorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDataSecurityAuditorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
