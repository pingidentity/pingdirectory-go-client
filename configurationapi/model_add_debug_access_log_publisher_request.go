/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// AddDebugAccessLogPublisherRequest struct for AddDebugAccessLogPublisherRequest
type AddDebugAccessLogPublisherRequest struct {
	// Name of the new Log Publisher
	PublisherName string                                 `json:"publisherName"`
	Schemas       []EnumdebugAccessLogPublisherSchemaUrn `json:"schemas"`
	// Indicates whether access messages that are generated by replication operations should be suppressed.
	SuppressReplicationOperations *bool `json:"suppressReplicationOperations,omitempty"`
	// Indicates whether to log information about the result of any security negotiation (e.g., SSL handshake) processing that has been performed.
	LogSecurityNegotiation *bool `json:"logSecurityNegotiation,omitempty"`
	// Indicates whether to log information about the result of replication assurance processing.
	LogAssuranceCompleted *bool `json:"logAssuranceCompleted,omitempty"`
	// Indicates whether to log information about search result entries sent to the client.
	LogSearchEntries *bool `json:"logSearchEntries,omitempty"`
	// Indicates whether to log information about search result references sent to the client.
	LogSearchReferences *bool `json:"logSearchReferences,omitempty"`
	// The file name to use for the log files generated by the Debug Access Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
	LogFile string `json:"logFile"`
	// The UNIX permissions of the log files created by this Debug Access Log Publisher.
	LogFilePermissions string `json:"logFilePermissions"`
	// The rotation policy to use for the Debug Access Log Publisher .
	RotationPolicy []string `json:"rotationPolicy"`
	// A listener that should be notified whenever a log file is rotated out of service.
	RotationListener []string `json:"rotationListener,omitempty"`
	// The retention policy to use for the Debug Access Log Publisher .
	RetentionPolicy      []string                                  `json:"retentionPolicy"`
	CompressionMechanism *EnumlogPublisherCompressionMechanismProp `json:"compressionMechanism,omitempty"`
	// Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
	SignLog *bool `json:"signLog,omitempty"`
	// Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
	EncryptLog *bool `json:"encryptLog,omitempty"`
	// Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server's preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.
	EncryptionSettingsDefinitionID *string `json:"encryptionSettingsDefinitionID,omitempty"`
	// Specifies whether to append to existing log files.
	Append *bool `json:"append,omitempty"`
	// Indicates whether the resulting log file should attempt to obscure content that may be considered sensitive. This primarily includes the credentials for bind requests, the values of password modify extended requests and responses, and the values of any attributes specified in the obscure-attribute property. Note that the use of this option does not guarantee no sensitive information will be exposed, so the log output should still be carefully guarded.
	ObscureSensitiveContent *bool `json:"obscureSensitiveContent,omitempty"`
	// Specifies the names of any attribute types that should have their values obscured if the obscure-sensitive-content property has a value of true.
	ObscureAttribute []string `json:"obscureAttribute,omitempty"`
	// Indicates whether to include debugging information about ACIs being used by the operations being logged.
	DebugACIEnabled *bool `json:"debugACIEnabled,omitempty"`
	// Indicates whether the Debug Access Log Publisher will publish records asynchronously.
	Asynchronous bool `json:"asynchronous"`
	// Specifies whether to flush the writer after every log record.
	AutoFlush *bool `json:"autoFlush,omitempty"`
	// Specifies the log file buffer size.
	BufferSize *string `json:"bufferSize,omitempty"`
	// The maximum number of log records that can be stored in the asynchronous queue.
	QueueSize *int32 `json:"queueSize,omitempty"`
	// Specifies the interval at which to check whether the log files need to be rotated.
	TimeInterval *string `json:"timeInterval,omitempty"`
	// Indicates whether to log information about connections established to the server.
	LogConnects *bool `json:"logConnects,omitempty"`
	// Indicates whether to log information about connections that have been closed by the client or terminated by the server.
	LogDisconnects *bool `json:"logDisconnects,omitempty"`
	// Indicates whether to log information about any client certificates presented to the server.
	LogClientCertificates *bool `json:"logClientCertificates,omitempty"`
	// Indicates whether to log information about requests received from clients.
	LogRequests *bool `json:"logRequests,omitempty"`
	// Indicates whether to log information about the results of client requests.
	LogResults *bool `json:"logResults,omitempty"`
	// Indicates whether to log information about intermediate responses sent to the client.
	LogIntermediateResponses *bool `json:"logIntermediateResponses,omitempty"`
	// Indicates whether internal operations (for example, operations that are initiated by plugins) should be logged along with the operations that are requested by users.
	SuppressInternalOperations *bool `json:"suppressInternalOperations,omitempty"`
	// Indicates whether to automatically log result messages for any operation in which the corresponding request was logged. In such cases, the result, entry, and reference criteria will be ignored, although the log-responses, log-search-entries, and log-search-references properties will be honored.
	CorrelateRequestsAndResults *bool `json:"correlateRequestsAndResults,omitempty"`
	// Specifies a set of connection criteria that must match the associated client connection in order for a connect, disconnect, request, or result message to be logged.
	ConnectionCriteria *string `json:"connectionCriteria,omitempty"`
	// Specifies a set of request criteria that must match the associated operation request in order for a request or result to be logged by this Access Log Publisher.
	RequestCriteria *string `json:"requestCriteria,omitempty"`
	// Specifies a set of result criteria that must match the associated operation result in order for that result to be logged by this Access Log Publisher.
	ResultCriteria *string `json:"resultCriteria,omitempty"`
	// Specifies a set of search entry criteria that must match the associated search result entry in order for that it to be logged by this Access Log Publisher.
	SearchEntryCriteria *string `json:"searchEntryCriteria,omitempty"`
	// Specifies a set of search reference criteria that must match the associated search result reference in order for that it to be logged by this Access Log Publisher.
	SearchReferenceCriteria *string `json:"searchReferenceCriteria,omitempty"`
	// A description for this Log Publisher
	Description *string `json:"description,omitempty"`
	// Indicates whether the Log Publisher is enabled for use.
	Enabled              bool                                      `json:"enabled"`
	LoggingErrorBehavior *EnumlogPublisherLoggingErrorBehaviorProp `json:"loggingErrorBehavior,omitempty"`
}

// NewAddDebugAccessLogPublisherRequest instantiates a new AddDebugAccessLogPublisherRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDebugAccessLogPublisherRequest(publisherName string, schemas []EnumdebugAccessLogPublisherSchemaUrn, logFile string, logFilePermissions string, rotationPolicy []string, retentionPolicy []string, asynchronous bool, enabled bool) *AddDebugAccessLogPublisherRequest {
	this := AddDebugAccessLogPublisherRequest{}
	this.PublisherName = publisherName
	this.Schemas = schemas
	this.LogFile = logFile
	this.LogFilePermissions = logFilePermissions
	this.RotationPolicy = rotationPolicy
	this.RetentionPolicy = retentionPolicy
	this.Asynchronous = asynchronous
	this.Enabled = enabled
	return &this
}

// NewAddDebugAccessLogPublisherRequestWithDefaults instantiates a new AddDebugAccessLogPublisherRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDebugAccessLogPublisherRequestWithDefaults() *AddDebugAccessLogPublisherRequest {
	this := AddDebugAccessLogPublisherRequest{}
	return &this
}

// GetPublisherName returns the PublisherName field value
func (o *AddDebugAccessLogPublisherRequest) GetPublisherName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublisherName
}

// GetPublisherNameOk returns a tuple with the PublisherName field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetPublisherNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublisherName, true
}

// SetPublisherName sets field value
func (o *AddDebugAccessLogPublisherRequest) SetPublisherName(v string) {
	o.PublisherName = v
}

// GetSchemas returns the Schemas field value
func (o *AddDebugAccessLogPublisherRequest) GetSchemas() []EnumdebugAccessLogPublisherSchemaUrn {
	if o == nil {
		var ret []EnumdebugAccessLogPublisherSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetSchemasOk() ([]EnumdebugAccessLogPublisherSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddDebugAccessLogPublisherRequest) SetSchemas(v []EnumdebugAccessLogPublisherSchemaUrn) {
	o.Schemas = v
}

// GetSuppressReplicationOperations returns the SuppressReplicationOperations field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetSuppressReplicationOperations() bool {
	if o == nil || isNil(o.SuppressReplicationOperations) {
		var ret bool
		return ret
	}
	return *o.SuppressReplicationOperations
}

// GetSuppressReplicationOperationsOk returns a tuple with the SuppressReplicationOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetSuppressReplicationOperationsOk() (*bool, bool) {
	if o == nil || isNil(o.SuppressReplicationOperations) {
		return nil, false
	}
	return o.SuppressReplicationOperations, true
}

// HasSuppressReplicationOperations returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasSuppressReplicationOperations() bool {
	if o != nil && !isNil(o.SuppressReplicationOperations) {
		return true
	}

	return false
}

// SetSuppressReplicationOperations gets a reference to the given bool and assigns it to the SuppressReplicationOperations field.
func (o *AddDebugAccessLogPublisherRequest) SetSuppressReplicationOperations(v bool) {
	o.SuppressReplicationOperations = &v
}

// GetLogSecurityNegotiation returns the LogSecurityNegotiation field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogSecurityNegotiation() bool {
	if o == nil || isNil(o.LogSecurityNegotiation) {
		var ret bool
		return ret
	}
	return *o.LogSecurityNegotiation
}

// GetLogSecurityNegotiationOk returns a tuple with the LogSecurityNegotiation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogSecurityNegotiationOk() (*bool, bool) {
	if o == nil || isNil(o.LogSecurityNegotiation) {
		return nil, false
	}
	return o.LogSecurityNegotiation, true
}

// HasLogSecurityNegotiation returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogSecurityNegotiation() bool {
	if o != nil && !isNil(o.LogSecurityNegotiation) {
		return true
	}

	return false
}

// SetLogSecurityNegotiation gets a reference to the given bool and assigns it to the LogSecurityNegotiation field.
func (o *AddDebugAccessLogPublisherRequest) SetLogSecurityNegotiation(v bool) {
	o.LogSecurityNegotiation = &v
}

// GetLogAssuranceCompleted returns the LogAssuranceCompleted field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogAssuranceCompleted() bool {
	if o == nil || isNil(o.LogAssuranceCompleted) {
		var ret bool
		return ret
	}
	return *o.LogAssuranceCompleted
}

// GetLogAssuranceCompletedOk returns a tuple with the LogAssuranceCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogAssuranceCompletedOk() (*bool, bool) {
	if o == nil || isNil(o.LogAssuranceCompleted) {
		return nil, false
	}
	return o.LogAssuranceCompleted, true
}

// HasLogAssuranceCompleted returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogAssuranceCompleted() bool {
	if o != nil && !isNil(o.LogAssuranceCompleted) {
		return true
	}

	return false
}

// SetLogAssuranceCompleted gets a reference to the given bool and assigns it to the LogAssuranceCompleted field.
func (o *AddDebugAccessLogPublisherRequest) SetLogAssuranceCompleted(v bool) {
	o.LogAssuranceCompleted = &v
}

// GetLogSearchEntries returns the LogSearchEntries field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogSearchEntries() bool {
	if o == nil || isNil(o.LogSearchEntries) {
		var ret bool
		return ret
	}
	return *o.LogSearchEntries
}

// GetLogSearchEntriesOk returns a tuple with the LogSearchEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogSearchEntriesOk() (*bool, bool) {
	if o == nil || isNil(o.LogSearchEntries) {
		return nil, false
	}
	return o.LogSearchEntries, true
}

// HasLogSearchEntries returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogSearchEntries() bool {
	if o != nil && !isNil(o.LogSearchEntries) {
		return true
	}

	return false
}

// SetLogSearchEntries gets a reference to the given bool and assigns it to the LogSearchEntries field.
func (o *AddDebugAccessLogPublisherRequest) SetLogSearchEntries(v bool) {
	o.LogSearchEntries = &v
}

// GetLogSearchReferences returns the LogSearchReferences field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogSearchReferences() bool {
	if o == nil || isNil(o.LogSearchReferences) {
		var ret bool
		return ret
	}
	return *o.LogSearchReferences
}

// GetLogSearchReferencesOk returns a tuple with the LogSearchReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogSearchReferencesOk() (*bool, bool) {
	if o == nil || isNil(o.LogSearchReferences) {
		return nil, false
	}
	return o.LogSearchReferences, true
}

// HasLogSearchReferences returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogSearchReferences() bool {
	if o != nil && !isNil(o.LogSearchReferences) {
		return true
	}

	return false
}

// SetLogSearchReferences gets a reference to the given bool and assigns it to the LogSearchReferences field.
func (o *AddDebugAccessLogPublisherRequest) SetLogSearchReferences(v bool) {
	o.LogSearchReferences = &v
}

// GetLogFile returns the LogFile field value
func (o *AddDebugAccessLogPublisherRequest) GetLogFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFile, true
}

// SetLogFile sets field value
func (o *AddDebugAccessLogPublisherRequest) SetLogFile(v string) {
	o.LogFile = v
}

// GetLogFilePermissions returns the LogFilePermissions field value
func (o *AddDebugAccessLogPublisherRequest) GetLogFilePermissions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogFilePermissions
}

// GetLogFilePermissionsOk returns a tuple with the LogFilePermissions field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogFilePermissionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFilePermissions, true
}

// SetLogFilePermissions sets field value
func (o *AddDebugAccessLogPublisherRequest) SetLogFilePermissions(v string) {
	o.LogFilePermissions = v
}

// GetRotationPolicy returns the RotationPolicy field value
func (o *AddDebugAccessLogPublisherRequest) GetRotationPolicy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RotationPolicy
}

// GetRotationPolicyOk returns a tuple with the RotationPolicy field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetRotationPolicyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RotationPolicy, true
}

// SetRotationPolicy sets field value
func (o *AddDebugAccessLogPublisherRequest) SetRotationPolicy(v []string) {
	o.RotationPolicy = v
}

// GetRotationListener returns the RotationListener field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetRotationListener() []string {
	if o == nil || isNil(o.RotationListener) {
		var ret []string
		return ret
	}
	return o.RotationListener
}

// GetRotationListenerOk returns a tuple with the RotationListener field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetRotationListenerOk() ([]string, bool) {
	if o == nil || isNil(o.RotationListener) {
		return nil, false
	}
	return o.RotationListener, true
}

// HasRotationListener returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasRotationListener() bool {
	if o != nil && !isNil(o.RotationListener) {
		return true
	}

	return false
}

// SetRotationListener gets a reference to the given []string and assigns it to the RotationListener field.
func (o *AddDebugAccessLogPublisherRequest) SetRotationListener(v []string) {
	o.RotationListener = v
}

// GetRetentionPolicy returns the RetentionPolicy field value
func (o *AddDebugAccessLogPublisherRequest) GetRetentionPolicy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RetentionPolicy
}

// GetRetentionPolicyOk returns a tuple with the RetentionPolicy field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetRetentionPolicyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPolicy, true
}

// SetRetentionPolicy sets field value
func (o *AddDebugAccessLogPublisherRequest) SetRetentionPolicy(v []string) {
	o.RetentionPolicy = v
}

// GetCompressionMechanism returns the CompressionMechanism field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetCompressionMechanism() EnumlogPublisherCompressionMechanismProp {
	if o == nil || isNil(o.CompressionMechanism) {
		var ret EnumlogPublisherCompressionMechanismProp
		return ret
	}
	return *o.CompressionMechanism
}

// GetCompressionMechanismOk returns a tuple with the CompressionMechanism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetCompressionMechanismOk() (*EnumlogPublisherCompressionMechanismProp, bool) {
	if o == nil || isNil(o.CompressionMechanism) {
		return nil, false
	}
	return o.CompressionMechanism, true
}

// HasCompressionMechanism returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasCompressionMechanism() bool {
	if o != nil && !isNil(o.CompressionMechanism) {
		return true
	}

	return false
}

// SetCompressionMechanism gets a reference to the given EnumlogPublisherCompressionMechanismProp and assigns it to the CompressionMechanism field.
func (o *AddDebugAccessLogPublisherRequest) SetCompressionMechanism(v EnumlogPublisherCompressionMechanismProp) {
	o.CompressionMechanism = &v
}

// GetSignLog returns the SignLog field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetSignLog() bool {
	if o == nil || isNil(o.SignLog) {
		var ret bool
		return ret
	}
	return *o.SignLog
}

// GetSignLogOk returns a tuple with the SignLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetSignLogOk() (*bool, bool) {
	if o == nil || isNil(o.SignLog) {
		return nil, false
	}
	return o.SignLog, true
}

// HasSignLog returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasSignLog() bool {
	if o != nil && !isNil(o.SignLog) {
		return true
	}

	return false
}

// SetSignLog gets a reference to the given bool and assigns it to the SignLog field.
func (o *AddDebugAccessLogPublisherRequest) SetSignLog(v bool) {
	o.SignLog = &v
}

// GetEncryptLog returns the EncryptLog field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetEncryptLog() bool {
	if o == nil || isNil(o.EncryptLog) {
		var ret bool
		return ret
	}
	return *o.EncryptLog
}

// GetEncryptLogOk returns a tuple with the EncryptLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetEncryptLogOk() (*bool, bool) {
	if o == nil || isNil(o.EncryptLog) {
		return nil, false
	}
	return o.EncryptLog, true
}

// HasEncryptLog returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasEncryptLog() bool {
	if o != nil && !isNil(o.EncryptLog) {
		return true
	}

	return false
}

// SetEncryptLog gets a reference to the given bool and assigns it to the EncryptLog field.
func (o *AddDebugAccessLogPublisherRequest) SetEncryptLog(v bool) {
	o.EncryptLog = &v
}

// GetEncryptionSettingsDefinitionID returns the EncryptionSettingsDefinitionID field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetEncryptionSettingsDefinitionID() string {
	if o == nil || isNil(o.EncryptionSettingsDefinitionID) {
		var ret string
		return ret
	}
	return *o.EncryptionSettingsDefinitionID
}

// GetEncryptionSettingsDefinitionIDOk returns a tuple with the EncryptionSettingsDefinitionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetEncryptionSettingsDefinitionIDOk() (*string, bool) {
	if o == nil || isNil(o.EncryptionSettingsDefinitionID) {
		return nil, false
	}
	return o.EncryptionSettingsDefinitionID, true
}

// HasEncryptionSettingsDefinitionID returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasEncryptionSettingsDefinitionID() bool {
	if o != nil && !isNil(o.EncryptionSettingsDefinitionID) {
		return true
	}

	return false
}

// SetEncryptionSettingsDefinitionID gets a reference to the given string and assigns it to the EncryptionSettingsDefinitionID field.
func (o *AddDebugAccessLogPublisherRequest) SetEncryptionSettingsDefinitionID(v string) {
	o.EncryptionSettingsDefinitionID = &v
}

// GetAppend returns the Append field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetAppend() bool {
	if o == nil || isNil(o.Append) {
		var ret bool
		return ret
	}
	return *o.Append
}

// GetAppendOk returns a tuple with the Append field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetAppendOk() (*bool, bool) {
	if o == nil || isNil(o.Append) {
		return nil, false
	}
	return o.Append, true
}

// HasAppend returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasAppend() bool {
	if o != nil && !isNil(o.Append) {
		return true
	}

	return false
}

// SetAppend gets a reference to the given bool and assigns it to the Append field.
func (o *AddDebugAccessLogPublisherRequest) SetAppend(v bool) {
	o.Append = &v
}

// GetObscureSensitiveContent returns the ObscureSensitiveContent field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetObscureSensitiveContent() bool {
	if o == nil || isNil(o.ObscureSensitiveContent) {
		var ret bool
		return ret
	}
	return *o.ObscureSensitiveContent
}

// GetObscureSensitiveContentOk returns a tuple with the ObscureSensitiveContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetObscureSensitiveContentOk() (*bool, bool) {
	if o == nil || isNil(o.ObscureSensitiveContent) {
		return nil, false
	}
	return o.ObscureSensitiveContent, true
}

// HasObscureSensitiveContent returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasObscureSensitiveContent() bool {
	if o != nil && !isNil(o.ObscureSensitiveContent) {
		return true
	}

	return false
}

// SetObscureSensitiveContent gets a reference to the given bool and assigns it to the ObscureSensitiveContent field.
func (o *AddDebugAccessLogPublisherRequest) SetObscureSensitiveContent(v bool) {
	o.ObscureSensitiveContent = &v
}

// GetObscureAttribute returns the ObscureAttribute field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetObscureAttribute() []string {
	if o == nil || isNil(o.ObscureAttribute) {
		var ret []string
		return ret
	}
	return o.ObscureAttribute
}

// GetObscureAttributeOk returns a tuple with the ObscureAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetObscureAttributeOk() ([]string, bool) {
	if o == nil || isNil(o.ObscureAttribute) {
		return nil, false
	}
	return o.ObscureAttribute, true
}

// HasObscureAttribute returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasObscureAttribute() bool {
	if o != nil && !isNil(o.ObscureAttribute) {
		return true
	}

	return false
}

// SetObscureAttribute gets a reference to the given []string and assigns it to the ObscureAttribute field.
func (o *AddDebugAccessLogPublisherRequest) SetObscureAttribute(v []string) {
	o.ObscureAttribute = v
}

// GetDebugACIEnabled returns the DebugACIEnabled field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetDebugACIEnabled() bool {
	if o == nil || isNil(o.DebugACIEnabled) {
		var ret bool
		return ret
	}
	return *o.DebugACIEnabled
}

// GetDebugACIEnabledOk returns a tuple with the DebugACIEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetDebugACIEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.DebugACIEnabled) {
		return nil, false
	}
	return o.DebugACIEnabled, true
}

// HasDebugACIEnabled returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasDebugACIEnabled() bool {
	if o != nil && !isNil(o.DebugACIEnabled) {
		return true
	}

	return false
}

// SetDebugACIEnabled gets a reference to the given bool and assigns it to the DebugACIEnabled field.
func (o *AddDebugAccessLogPublisherRequest) SetDebugACIEnabled(v bool) {
	o.DebugACIEnabled = &v
}

// GetAsynchronous returns the Asynchronous field value
func (o *AddDebugAccessLogPublisherRequest) GetAsynchronous() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Asynchronous
}

// GetAsynchronousOk returns a tuple with the Asynchronous field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetAsynchronousOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asynchronous, true
}

// SetAsynchronous sets field value
func (o *AddDebugAccessLogPublisherRequest) SetAsynchronous(v bool) {
	o.Asynchronous = v
}

// GetAutoFlush returns the AutoFlush field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetAutoFlush() bool {
	if o == nil || isNil(o.AutoFlush) {
		var ret bool
		return ret
	}
	return *o.AutoFlush
}

// GetAutoFlushOk returns a tuple with the AutoFlush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetAutoFlushOk() (*bool, bool) {
	if o == nil || isNil(o.AutoFlush) {
		return nil, false
	}
	return o.AutoFlush, true
}

// HasAutoFlush returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasAutoFlush() bool {
	if o != nil && !isNil(o.AutoFlush) {
		return true
	}

	return false
}

// SetAutoFlush gets a reference to the given bool and assigns it to the AutoFlush field.
func (o *AddDebugAccessLogPublisherRequest) SetAutoFlush(v bool) {
	o.AutoFlush = &v
}

// GetBufferSize returns the BufferSize field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetBufferSize() string {
	if o == nil || isNil(o.BufferSize) {
		var ret string
		return ret
	}
	return *o.BufferSize
}

// GetBufferSizeOk returns a tuple with the BufferSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetBufferSizeOk() (*string, bool) {
	if o == nil || isNil(o.BufferSize) {
		return nil, false
	}
	return o.BufferSize, true
}

// HasBufferSize returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasBufferSize() bool {
	if o != nil && !isNil(o.BufferSize) {
		return true
	}

	return false
}

// SetBufferSize gets a reference to the given string and assigns it to the BufferSize field.
func (o *AddDebugAccessLogPublisherRequest) SetBufferSize(v string) {
	o.BufferSize = &v
}

// GetQueueSize returns the QueueSize field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetQueueSize() int32 {
	if o == nil || isNil(o.QueueSize) {
		var ret int32
		return ret
	}
	return *o.QueueSize
}

// GetQueueSizeOk returns a tuple with the QueueSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetQueueSizeOk() (*int32, bool) {
	if o == nil || isNil(o.QueueSize) {
		return nil, false
	}
	return o.QueueSize, true
}

// HasQueueSize returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasQueueSize() bool {
	if o != nil && !isNil(o.QueueSize) {
		return true
	}

	return false
}

// SetQueueSize gets a reference to the given int32 and assigns it to the QueueSize field.
func (o *AddDebugAccessLogPublisherRequest) SetQueueSize(v int32) {
	o.QueueSize = &v
}

// GetTimeInterval returns the TimeInterval field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetTimeInterval() string {
	if o == nil || isNil(o.TimeInterval) {
		var ret string
		return ret
	}
	return *o.TimeInterval
}

// GetTimeIntervalOk returns a tuple with the TimeInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetTimeIntervalOk() (*string, bool) {
	if o == nil || isNil(o.TimeInterval) {
		return nil, false
	}
	return o.TimeInterval, true
}

// HasTimeInterval returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasTimeInterval() bool {
	if o != nil && !isNil(o.TimeInterval) {
		return true
	}

	return false
}

// SetTimeInterval gets a reference to the given string and assigns it to the TimeInterval field.
func (o *AddDebugAccessLogPublisherRequest) SetTimeInterval(v string) {
	o.TimeInterval = &v
}

// GetLogConnects returns the LogConnects field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogConnects() bool {
	if o == nil || isNil(o.LogConnects) {
		var ret bool
		return ret
	}
	return *o.LogConnects
}

// GetLogConnectsOk returns a tuple with the LogConnects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogConnectsOk() (*bool, bool) {
	if o == nil || isNil(o.LogConnects) {
		return nil, false
	}
	return o.LogConnects, true
}

// HasLogConnects returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogConnects() bool {
	if o != nil && !isNil(o.LogConnects) {
		return true
	}

	return false
}

// SetLogConnects gets a reference to the given bool and assigns it to the LogConnects field.
func (o *AddDebugAccessLogPublisherRequest) SetLogConnects(v bool) {
	o.LogConnects = &v
}

// GetLogDisconnects returns the LogDisconnects field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogDisconnects() bool {
	if o == nil || isNil(o.LogDisconnects) {
		var ret bool
		return ret
	}
	return *o.LogDisconnects
}

// GetLogDisconnectsOk returns a tuple with the LogDisconnects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogDisconnectsOk() (*bool, bool) {
	if o == nil || isNil(o.LogDisconnects) {
		return nil, false
	}
	return o.LogDisconnects, true
}

// HasLogDisconnects returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogDisconnects() bool {
	if o != nil && !isNil(o.LogDisconnects) {
		return true
	}

	return false
}

// SetLogDisconnects gets a reference to the given bool and assigns it to the LogDisconnects field.
func (o *AddDebugAccessLogPublisherRequest) SetLogDisconnects(v bool) {
	o.LogDisconnects = &v
}

// GetLogClientCertificates returns the LogClientCertificates field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogClientCertificates() bool {
	if o == nil || isNil(o.LogClientCertificates) {
		var ret bool
		return ret
	}
	return *o.LogClientCertificates
}

// GetLogClientCertificatesOk returns a tuple with the LogClientCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogClientCertificatesOk() (*bool, bool) {
	if o == nil || isNil(o.LogClientCertificates) {
		return nil, false
	}
	return o.LogClientCertificates, true
}

// HasLogClientCertificates returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogClientCertificates() bool {
	if o != nil && !isNil(o.LogClientCertificates) {
		return true
	}

	return false
}

// SetLogClientCertificates gets a reference to the given bool and assigns it to the LogClientCertificates field.
func (o *AddDebugAccessLogPublisherRequest) SetLogClientCertificates(v bool) {
	o.LogClientCertificates = &v
}

// GetLogRequests returns the LogRequests field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogRequests() bool {
	if o == nil || isNil(o.LogRequests) {
		var ret bool
		return ret
	}
	return *o.LogRequests
}

// GetLogRequestsOk returns a tuple with the LogRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogRequestsOk() (*bool, bool) {
	if o == nil || isNil(o.LogRequests) {
		return nil, false
	}
	return o.LogRequests, true
}

// HasLogRequests returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogRequests() bool {
	if o != nil && !isNil(o.LogRequests) {
		return true
	}

	return false
}

// SetLogRequests gets a reference to the given bool and assigns it to the LogRequests field.
func (o *AddDebugAccessLogPublisherRequest) SetLogRequests(v bool) {
	o.LogRequests = &v
}

// GetLogResults returns the LogResults field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogResults() bool {
	if o == nil || isNil(o.LogResults) {
		var ret bool
		return ret
	}
	return *o.LogResults
}

// GetLogResultsOk returns a tuple with the LogResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogResultsOk() (*bool, bool) {
	if o == nil || isNil(o.LogResults) {
		return nil, false
	}
	return o.LogResults, true
}

// HasLogResults returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogResults() bool {
	if o != nil && !isNil(o.LogResults) {
		return true
	}

	return false
}

// SetLogResults gets a reference to the given bool and assigns it to the LogResults field.
func (o *AddDebugAccessLogPublisherRequest) SetLogResults(v bool) {
	o.LogResults = &v
}

// GetLogIntermediateResponses returns the LogIntermediateResponses field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLogIntermediateResponses() bool {
	if o == nil || isNil(o.LogIntermediateResponses) {
		var ret bool
		return ret
	}
	return *o.LogIntermediateResponses
}

// GetLogIntermediateResponsesOk returns a tuple with the LogIntermediateResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLogIntermediateResponsesOk() (*bool, bool) {
	if o == nil || isNil(o.LogIntermediateResponses) {
		return nil, false
	}
	return o.LogIntermediateResponses, true
}

// HasLogIntermediateResponses returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLogIntermediateResponses() bool {
	if o != nil && !isNil(o.LogIntermediateResponses) {
		return true
	}

	return false
}

// SetLogIntermediateResponses gets a reference to the given bool and assigns it to the LogIntermediateResponses field.
func (o *AddDebugAccessLogPublisherRequest) SetLogIntermediateResponses(v bool) {
	o.LogIntermediateResponses = &v
}

// GetSuppressInternalOperations returns the SuppressInternalOperations field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetSuppressInternalOperations() bool {
	if o == nil || isNil(o.SuppressInternalOperations) {
		var ret bool
		return ret
	}
	return *o.SuppressInternalOperations
}

// GetSuppressInternalOperationsOk returns a tuple with the SuppressInternalOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetSuppressInternalOperationsOk() (*bool, bool) {
	if o == nil || isNil(o.SuppressInternalOperations) {
		return nil, false
	}
	return o.SuppressInternalOperations, true
}

// HasSuppressInternalOperations returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasSuppressInternalOperations() bool {
	if o != nil && !isNil(o.SuppressInternalOperations) {
		return true
	}

	return false
}

// SetSuppressInternalOperations gets a reference to the given bool and assigns it to the SuppressInternalOperations field.
func (o *AddDebugAccessLogPublisherRequest) SetSuppressInternalOperations(v bool) {
	o.SuppressInternalOperations = &v
}

// GetCorrelateRequestsAndResults returns the CorrelateRequestsAndResults field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetCorrelateRequestsAndResults() bool {
	if o == nil || isNil(o.CorrelateRequestsAndResults) {
		var ret bool
		return ret
	}
	return *o.CorrelateRequestsAndResults
}

// GetCorrelateRequestsAndResultsOk returns a tuple with the CorrelateRequestsAndResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetCorrelateRequestsAndResultsOk() (*bool, bool) {
	if o == nil || isNil(o.CorrelateRequestsAndResults) {
		return nil, false
	}
	return o.CorrelateRequestsAndResults, true
}

// HasCorrelateRequestsAndResults returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasCorrelateRequestsAndResults() bool {
	if o != nil && !isNil(o.CorrelateRequestsAndResults) {
		return true
	}

	return false
}

// SetCorrelateRequestsAndResults gets a reference to the given bool and assigns it to the CorrelateRequestsAndResults field.
func (o *AddDebugAccessLogPublisherRequest) SetCorrelateRequestsAndResults(v bool) {
	o.CorrelateRequestsAndResults = &v
}

// GetConnectionCriteria returns the ConnectionCriteria field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetConnectionCriteria() string {
	if o == nil || isNil(o.ConnectionCriteria) {
		var ret string
		return ret
	}
	return *o.ConnectionCriteria
}

// GetConnectionCriteriaOk returns a tuple with the ConnectionCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetConnectionCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.ConnectionCriteria) {
		return nil, false
	}
	return o.ConnectionCriteria, true
}

// HasConnectionCriteria returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasConnectionCriteria() bool {
	if o != nil && !isNil(o.ConnectionCriteria) {
		return true
	}

	return false
}

// SetConnectionCriteria gets a reference to the given string and assigns it to the ConnectionCriteria field.
func (o *AddDebugAccessLogPublisherRequest) SetConnectionCriteria(v string) {
	o.ConnectionCriteria = &v
}

// GetRequestCriteria returns the RequestCriteria field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetRequestCriteria() string {
	if o == nil || isNil(o.RequestCriteria) {
		var ret string
		return ret
	}
	return *o.RequestCriteria
}

// GetRequestCriteriaOk returns a tuple with the RequestCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetRequestCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.RequestCriteria) {
		return nil, false
	}
	return o.RequestCriteria, true
}

// HasRequestCriteria returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasRequestCriteria() bool {
	if o != nil && !isNil(o.RequestCriteria) {
		return true
	}

	return false
}

// SetRequestCriteria gets a reference to the given string and assigns it to the RequestCriteria field.
func (o *AddDebugAccessLogPublisherRequest) SetRequestCriteria(v string) {
	o.RequestCriteria = &v
}

// GetResultCriteria returns the ResultCriteria field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetResultCriteria() string {
	if o == nil || isNil(o.ResultCriteria) {
		var ret string
		return ret
	}
	return *o.ResultCriteria
}

// GetResultCriteriaOk returns a tuple with the ResultCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetResultCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.ResultCriteria) {
		return nil, false
	}
	return o.ResultCriteria, true
}

// HasResultCriteria returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasResultCriteria() bool {
	if o != nil && !isNil(o.ResultCriteria) {
		return true
	}

	return false
}

// SetResultCriteria gets a reference to the given string and assigns it to the ResultCriteria field.
func (o *AddDebugAccessLogPublisherRequest) SetResultCriteria(v string) {
	o.ResultCriteria = &v
}

// GetSearchEntryCriteria returns the SearchEntryCriteria field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetSearchEntryCriteria() string {
	if o == nil || isNil(o.SearchEntryCriteria) {
		var ret string
		return ret
	}
	return *o.SearchEntryCriteria
}

// GetSearchEntryCriteriaOk returns a tuple with the SearchEntryCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetSearchEntryCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.SearchEntryCriteria) {
		return nil, false
	}
	return o.SearchEntryCriteria, true
}

// HasSearchEntryCriteria returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasSearchEntryCriteria() bool {
	if o != nil && !isNil(o.SearchEntryCriteria) {
		return true
	}

	return false
}

// SetSearchEntryCriteria gets a reference to the given string and assigns it to the SearchEntryCriteria field.
func (o *AddDebugAccessLogPublisherRequest) SetSearchEntryCriteria(v string) {
	o.SearchEntryCriteria = &v
}

// GetSearchReferenceCriteria returns the SearchReferenceCriteria field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetSearchReferenceCriteria() string {
	if o == nil || isNil(o.SearchReferenceCriteria) {
		var ret string
		return ret
	}
	return *o.SearchReferenceCriteria
}

// GetSearchReferenceCriteriaOk returns a tuple with the SearchReferenceCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetSearchReferenceCriteriaOk() (*string, bool) {
	if o == nil || isNil(o.SearchReferenceCriteria) {
		return nil, false
	}
	return o.SearchReferenceCriteria, true
}

// HasSearchReferenceCriteria returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasSearchReferenceCriteria() bool {
	if o != nil && !isNil(o.SearchReferenceCriteria) {
		return true
	}

	return false
}

// SetSearchReferenceCriteria gets a reference to the given string and assigns it to the SearchReferenceCriteria field.
func (o *AddDebugAccessLogPublisherRequest) SetSearchReferenceCriteria(v string) {
	o.SearchReferenceCriteria = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddDebugAccessLogPublisherRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddDebugAccessLogPublisherRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddDebugAccessLogPublisherRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetLoggingErrorBehavior returns the LoggingErrorBehavior field value if set, zero value otherwise.
func (o *AddDebugAccessLogPublisherRequest) GetLoggingErrorBehavior() EnumlogPublisherLoggingErrorBehaviorProp {
	if o == nil || isNil(o.LoggingErrorBehavior) {
		var ret EnumlogPublisherLoggingErrorBehaviorProp
		return ret
	}
	return *o.LoggingErrorBehavior
}

// GetLoggingErrorBehaviorOk returns a tuple with the LoggingErrorBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDebugAccessLogPublisherRequest) GetLoggingErrorBehaviorOk() (*EnumlogPublisherLoggingErrorBehaviorProp, bool) {
	if o == nil || isNil(o.LoggingErrorBehavior) {
		return nil, false
	}
	return o.LoggingErrorBehavior, true
}

// HasLoggingErrorBehavior returns a boolean if a field has been set.
func (o *AddDebugAccessLogPublisherRequest) HasLoggingErrorBehavior() bool {
	if o != nil && !isNil(o.LoggingErrorBehavior) {
		return true
	}

	return false
}

// SetLoggingErrorBehavior gets a reference to the given EnumlogPublisherLoggingErrorBehaviorProp and assigns it to the LoggingErrorBehavior field.
func (o *AddDebugAccessLogPublisherRequest) SetLoggingErrorBehavior(v EnumlogPublisherLoggingErrorBehaviorProp) {
	o.LoggingErrorBehavior = &v
}

func (o AddDebugAccessLogPublisherRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["publisherName"] = o.PublisherName
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if !isNil(o.SuppressReplicationOperations) {
		toSerialize["suppressReplicationOperations"] = o.SuppressReplicationOperations
	}
	if !isNil(o.LogSecurityNegotiation) {
		toSerialize["logSecurityNegotiation"] = o.LogSecurityNegotiation
	}
	if !isNil(o.LogAssuranceCompleted) {
		toSerialize["logAssuranceCompleted"] = o.LogAssuranceCompleted
	}
	if !isNil(o.LogSearchEntries) {
		toSerialize["logSearchEntries"] = o.LogSearchEntries
	}
	if !isNil(o.LogSearchReferences) {
		toSerialize["logSearchReferences"] = o.LogSearchReferences
	}
	if true {
		toSerialize["logFile"] = o.LogFile
	}
	if true {
		toSerialize["logFilePermissions"] = o.LogFilePermissions
	}
	if true {
		toSerialize["rotationPolicy"] = o.RotationPolicy
	}
	if !isNil(o.RotationListener) {
		toSerialize["rotationListener"] = o.RotationListener
	}
	if true {
		toSerialize["retentionPolicy"] = o.RetentionPolicy
	}
	if !isNil(o.CompressionMechanism) {
		toSerialize["compressionMechanism"] = o.CompressionMechanism
	}
	if !isNil(o.SignLog) {
		toSerialize["signLog"] = o.SignLog
	}
	if !isNil(o.EncryptLog) {
		toSerialize["encryptLog"] = o.EncryptLog
	}
	if !isNil(o.EncryptionSettingsDefinitionID) {
		toSerialize["encryptionSettingsDefinitionID"] = o.EncryptionSettingsDefinitionID
	}
	if !isNil(o.Append) {
		toSerialize["append"] = o.Append
	}
	if !isNil(o.ObscureSensitiveContent) {
		toSerialize["obscureSensitiveContent"] = o.ObscureSensitiveContent
	}
	if !isNil(o.ObscureAttribute) {
		toSerialize["obscureAttribute"] = o.ObscureAttribute
	}
	if !isNil(o.DebugACIEnabled) {
		toSerialize["debugACIEnabled"] = o.DebugACIEnabled
	}
	if true {
		toSerialize["asynchronous"] = o.Asynchronous
	}
	if !isNil(o.AutoFlush) {
		toSerialize["autoFlush"] = o.AutoFlush
	}
	if !isNil(o.BufferSize) {
		toSerialize["bufferSize"] = o.BufferSize
	}
	if !isNil(o.QueueSize) {
		toSerialize["queueSize"] = o.QueueSize
	}
	if !isNil(o.TimeInterval) {
		toSerialize["timeInterval"] = o.TimeInterval
	}
	if !isNil(o.LogConnects) {
		toSerialize["logConnects"] = o.LogConnects
	}
	if !isNil(o.LogDisconnects) {
		toSerialize["logDisconnects"] = o.LogDisconnects
	}
	if !isNil(o.LogClientCertificates) {
		toSerialize["logClientCertificates"] = o.LogClientCertificates
	}
	if !isNil(o.LogRequests) {
		toSerialize["logRequests"] = o.LogRequests
	}
	if !isNil(o.LogResults) {
		toSerialize["logResults"] = o.LogResults
	}
	if !isNil(o.LogIntermediateResponses) {
		toSerialize["logIntermediateResponses"] = o.LogIntermediateResponses
	}
	if !isNil(o.SuppressInternalOperations) {
		toSerialize["suppressInternalOperations"] = o.SuppressInternalOperations
	}
	if !isNil(o.CorrelateRequestsAndResults) {
		toSerialize["correlateRequestsAndResults"] = o.CorrelateRequestsAndResults
	}
	if !isNil(o.ConnectionCriteria) {
		toSerialize["connectionCriteria"] = o.ConnectionCriteria
	}
	if !isNil(o.RequestCriteria) {
		toSerialize["requestCriteria"] = o.RequestCriteria
	}
	if !isNil(o.ResultCriteria) {
		toSerialize["resultCriteria"] = o.ResultCriteria
	}
	if !isNil(o.SearchEntryCriteria) {
		toSerialize["searchEntryCriteria"] = o.SearchEntryCriteria
	}
	if !isNil(o.SearchReferenceCriteria) {
		toSerialize["searchReferenceCriteria"] = o.SearchReferenceCriteria
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.LoggingErrorBehavior) {
		toSerialize["loggingErrorBehavior"] = o.LoggingErrorBehavior
	}
	return json.Marshal(toSerialize)
}

type NullableAddDebugAccessLogPublisherRequest struct {
	value *AddDebugAccessLogPublisherRequest
	isSet bool
}

func (v NullableAddDebugAccessLogPublisherRequest) Get() *AddDebugAccessLogPublisherRequest {
	return v.value
}

func (v *NullableAddDebugAccessLogPublisherRequest) Set(val *AddDebugAccessLogPublisherRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDebugAccessLogPublisherRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDebugAccessLogPublisherRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDebugAccessLogPublisherRequest(val *AddDebugAccessLogPublisherRequest) *NullableAddDebugAccessLogPublisherRequest {
	return &NullableAddDebugAccessLogPublisherRequest{value: val, isSet: true}
}

func (v NullableAddDebugAccessLogPublisherRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDebugAccessLogPublisherRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
