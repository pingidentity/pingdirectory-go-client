/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumldapAttributeDescriptionListPluginSchemaUrn the model 'EnumldapAttributeDescriptionListPluginSchemaUrn'
type EnumldapAttributeDescriptionListPluginSchemaUrn string

// List of Enumldap-attribute-description-list-pluginSchemaUrn
const (
	ENUMLDAPATTRIBUTEDESCRIPTIONLISTPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINLDAP_ATTRIBUTE_DESCRIPTION_LIST EnumldapAttributeDescriptionListPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:ldap-attribute-description-list"
)

// All allowed values of EnumldapAttributeDescriptionListPluginSchemaUrn enum
var AllowedEnumldapAttributeDescriptionListPluginSchemaUrnEnumValues = []EnumldapAttributeDescriptionListPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:ldap-attribute-description-list",
}

func (v *EnumldapAttributeDescriptionListPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldapAttributeDescriptionListPluginSchemaUrn(value)
	for _, existing := range AllowedEnumldapAttributeDescriptionListPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldapAttributeDescriptionListPluginSchemaUrn", value)
}

// NewEnumldapAttributeDescriptionListPluginSchemaUrnFromValue returns a pointer to a valid EnumldapAttributeDescriptionListPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldapAttributeDescriptionListPluginSchemaUrnFromValue(v string) (*EnumldapAttributeDescriptionListPluginSchemaUrn, error) {
	ev := EnumldapAttributeDescriptionListPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldapAttributeDescriptionListPluginSchemaUrn: valid values are %v", v, AllowedEnumldapAttributeDescriptionListPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldapAttributeDescriptionListPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldapAttributeDescriptionListPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldap-attribute-description-list-pluginSchemaUrn value
func (v EnumldapAttributeDescriptionListPluginSchemaUrn) Ptr() *EnumldapAttributeDescriptionListPluginSchemaUrn {
	return &v
}

type NullableEnumldapAttributeDescriptionListPluginSchemaUrn struct {
	value *EnumldapAttributeDescriptionListPluginSchemaUrn
	isSet bool
}

func (v NullableEnumldapAttributeDescriptionListPluginSchemaUrn) Get() *EnumldapAttributeDescriptionListPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumldapAttributeDescriptionListPluginSchemaUrn) Set(val *EnumldapAttributeDescriptionListPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldapAttributeDescriptionListPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldapAttributeDescriptionListPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldapAttributeDescriptionListPluginSchemaUrn(val *EnumldapAttributeDescriptionListPluginSchemaUrn) *NullableEnumldapAttributeDescriptionListPluginSchemaUrn {
	return &NullableEnumldapAttributeDescriptionListPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldapAttributeDescriptionListPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldapAttributeDescriptionListPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
