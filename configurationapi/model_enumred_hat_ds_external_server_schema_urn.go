/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumredHatDsExternalServerSchemaUrn the model 'EnumredHatDsExternalServerSchemaUrn'
type EnumredHatDsExternalServerSchemaUrn string

// List of Enumred-hat-ds-external-serverSchemaUrn
const (
	ENUMREDHATDSEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERRED_HAT_DS EnumredHatDsExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:red-hat-ds"
)

// All allowed values of EnumredHatDsExternalServerSchemaUrn enum
var AllowedEnumredHatDsExternalServerSchemaUrnEnumValues = []EnumredHatDsExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:red-hat-ds",
}

func (v *EnumredHatDsExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumredHatDsExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumredHatDsExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumredHatDsExternalServerSchemaUrn", value)
}

// NewEnumredHatDsExternalServerSchemaUrnFromValue returns a pointer to a valid EnumredHatDsExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumredHatDsExternalServerSchemaUrnFromValue(v string) (*EnumredHatDsExternalServerSchemaUrn, error) {
	ev := EnumredHatDsExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumredHatDsExternalServerSchemaUrn: valid values are %v", v, AllowedEnumredHatDsExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumredHatDsExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumredHatDsExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumred-hat-ds-external-serverSchemaUrn value
func (v EnumredHatDsExternalServerSchemaUrn) Ptr() *EnumredHatDsExternalServerSchemaUrn {
	return &v
}

type NullableEnumredHatDsExternalServerSchemaUrn struct {
	value *EnumredHatDsExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumredHatDsExternalServerSchemaUrn) Get() *EnumredHatDsExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumredHatDsExternalServerSchemaUrn) Set(val *EnumredHatDsExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumredHatDsExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumredHatDsExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumredHatDsExternalServerSchemaUrn(val *EnumredHatDsExternalServerSchemaUrn) *NullableEnumredHatDsExternalServerSchemaUrn {
	return &NullableEnumredHatDsExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumredHatDsExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumredHatDsExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
