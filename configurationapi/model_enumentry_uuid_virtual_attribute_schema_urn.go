/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumentryUuidVirtualAttributeSchemaUrn the model 'EnumentryUuidVirtualAttributeSchemaUrn'
type EnumentryUuidVirtualAttributeSchemaUrn string

// List of Enumentry-uuid-virtual-attributeSchemaUrn
const (
	ENUMENTRYUUIDVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTEENTRY_UUID EnumentryUuidVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-uuid"
)

// All allowed values of EnumentryUuidVirtualAttributeSchemaUrn enum
var AllowedEnumentryUuidVirtualAttributeSchemaUrnEnumValues = []EnumentryUuidVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:entry-uuid",
}

func (v *EnumentryUuidVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumentryUuidVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumentryUuidVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumentryUuidVirtualAttributeSchemaUrn", value)
}

// NewEnumentryUuidVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumentryUuidVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumentryUuidVirtualAttributeSchemaUrnFromValue(v string) (*EnumentryUuidVirtualAttributeSchemaUrn, error) {
	ev := EnumentryUuidVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumentryUuidVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumentryUuidVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumentryUuidVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumentryUuidVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumentry-uuid-virtual-attributeSchemaUrn value
func (v EnumentryUuidVirtualAttributeSchemaUrn) Ptr() *EnumentryUuidVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumentryUuidVirtualAttributeSchemaUrn struct {
	value *EnumentryUuidVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumentryUuidVirtualAttributeSchemaUrn) Get() *EnumentryUuidVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumentryUuidVirtualAttributeSchemaUrn) Set(val *EnumentryUuidVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumentryUuidVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumentryUuidVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumentryUuidVirtualAttributeSchemaUrn(val *EnumentryUuidVirtualAttributeSchemaUrn) *NullableEnumentryUuidVirtualAttributeSchemaUrn {
	return &NullableEnumentryUuidVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumentryUuidVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumentryUuidVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
