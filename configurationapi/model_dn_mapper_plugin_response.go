/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the DnMapperPluginResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnMapperPluginResponse{}

// DnMapperPluginResponse struct for DnMapperPluginResponse
type DnMapperPluginResponse struct {
	// Name of the Plugin
	Id         string                        `json:"id"`
	Schemas    []EnumdnMapperPluginSchemaUrn `json:"schemas"`
	PluginType []EnumpluginPluginTypeProp    `json:"pluginType"`
	// Specifies the source DN that may appear in client requests which should be remapped to the target DN. Note that the source DN must not be equal to the target DN.
	SourceDN string `json:"sourceDN"`
	// Specifies the DN to which the source DN should be mapped. Note that the target DN must not be equal to the source DN.
	TargetDN string `json:"targetDN"`
	// Indicates whether DN mapping should be applied to the values of attributes with appropriate syntaxes.
	EnableAttributeMapping bool `json:"enableAttributeMapping"`
	// Specifies a set of specific attributes for which DN mapping should be applied. This will only be applicable if the enable-attribute-mapping property has a value of \"true\". Any attributes listed must be defined in the server schema with either the distinguished name syntax or the name and optional UID syntax.
	MapAttribute []string `json:"mapAttribute,omitempty"`
	// Indicates whether DN mapping should be applied to DNs that may be present in specific controls. DN mapping will only be applied for control types which are specifically supported by the DN mapper plugin.
	EnableControlMapping bool `json:"enableControlMapping"`
	// Indicates whether DNs in response messages containing the target DN should always be remapped back to the source DN. If this is \"false\", then mapping will be performed for a response message only if one or more elements of the associated request are mapped. Otherwise, the mapping will be performed for all responses regardless of whether the mapping was applied to the request.
	AlwaysMapResponses bool `json:"alwaysMapResponses"`
	// A description for this Plugin
	Description *string `json:"description,omitempty"`
	// Indicates whether the plug-in is enabled for use.
	Enabled bool `json:"enabled"`
	// Indicates whether the plug-in should be invoked for internal operations.
	InvokeForInternalOperations                   *bool                                              `json:"invokeForInternalOperations,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewDnMapperPluginResponse instantiates a new DnMapperPluginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnMapperPluginResponse(id string, schemas []EnumdnMapperPluginSchemaUrn, pluginType []EnumpluginPluginTypeProp, sourceDN string, targetDN string, enableAttributeMapping bool, enableControlMapping bool, alwaysMapResponses bool, enabled bool) *DnMapperPluginResponse {
	this := DnMapperPluginResponse{}
	this.Id = id
	this.Schemas = schemas
	this.PluginType = pluginType
	this.SourceDN = sourceDN
	this.TargetDN = targetDN
	this.EnableAttributeMapping = enableAttributeMapping
	this.EnableControlMapping = enableControlMapping
	this.AlwaysMapResponses = alwaysMapResponses
	this.Enabled = enabled
	return &this
}

// NewDnMapperPluginResponseWithDefaults instantiates a new DnMapperPluginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnMapperPluginResponseWithDefaults() *DnMapperPluginResponse {
	this := DnMapperPluginResponse{}
	return &this
}

// GetId returns the Id field value
func (o *DnMapperPluginResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DnMapperPluginResponse) SetId(v string) {
	o.Id = v
}

// GetSchemas returns the Schemas field value
func (o *DnMapperPluginResponse) GetSchemas() []EnumdnMapperPluginSchemaUrn {
	if o == nil {
		var ret []EnumdnMapperPluginSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetSchemasOk() ([]EnumdnMapperPluginSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *DnMapperPluginResponse) SetSchemas(v []EnumdnMapperPluginSchemaUrn) {
	o.Schemas = v
}

// GetPluginType returns the PluginType field value
func (o *DnMapperPluginResponse) GetPluginType() []EnumpluginPluginTypeProp {
	if o == nil {
		var ret []EnumpluginPluginTypeProp
		return ret
	}

	return o.PluginType
}

// GetPluginTypeOk returns a tuple with the PluginType field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetPluginTypeOk() ([]EnumpluginPluginTypeProp, bool) {
	if o == nil {
		return nil, false
	}
	return o.PluginType, true
}

// SetPluginType sets field value
func (o *DnMapperPluginResponse) SetPluginType(v []EnumpluginPluginTypeProp) {
	o.PluginType = v
}

// GetSourceDN returns the SourceDN field value
func (o *DnMapperPluginResponse) GetSourceDN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceDN
}

// GetSourceDNOk returns a tuple with the SourceDN field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetSourceDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDN, true
}

// SetSourceDN sets field value
func (o *DnMapperPluginResponse) SetSourceDN(v string) {
	o.SourceDN = v
}

// GetTargetDN returns the TargetDN field value
func (o *DnMapperPluginResponse) GetTargetDN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetDN
}

// GetTargetDNOk returns a tuple with the TargetDN field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetTargetDNOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetDN, true
}

// SetTargetDN sets field value
func (o *DnMapperPluginResponse) SetTargetDN(v string) {
	o.TargetDN = v
}

// GetEnableAttributeMapping returns the EnableAttributeMapping field value
func (o *DnMapperPluginResponse) GetEnableAttributeMapping() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableAttributeMapping
}

// GetEnableAttributeMappingOk returns a tuple with the EnableAttributeMapping field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetEnableAttributeMappingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableAttributeMapping, true
}

// SetEnableAttributeMapping sets field value
func (o *DnMapperPluginResponse) SetEnableAttributeMapping(v bool) {
	o.EnableAttributeMapping = v
}

// GetMapAttribute returns the MapAttribute field value if set, zero value otherwise.
func (o *DnMapperPluginResponse) GetMapAttribute() []string {
	if o == nil || IsNil(o.MapAttribute) {
		var ret []string
		return ret
	}
	return o.MapAttribute
}

// GetMapAttributeOk returns a tuple with the MapAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetMapAttributeOk() ([]string, bool) {
	if o == nil || IsNil(o.MapAttribute) {
		return nil, false
	}
	return o.MapAttribute, true
}

// HasMapAttribute returns a boolean if a field has been set.
func (o *DnMapperPluginResponse) HasMapAttribute() bool {
	if o != nil && !IsNil(o.MapAttribute) {
		return true
	}

	return false
}

// SetMapAttribute gets a reference to the given []string and assigns it to the MapAttribute field.
func (o *DnMapperPluginResponse) SetMapAttribute(v []string) {
	o.MapAttribute = v
}

// GetEnableControlMapping returns the EnableControlMapping field value
func (o *DnMapperPluginResponse) GetEnableControlMapping() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableControlMapping
}

// GetEnableControlMappingOk returns a tuple with the EnableControlMapping field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetEnableControlMappingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableControlMapping, true
}

// SetEnableControlMapping sets field value
func (o *DnMapperPluginResponse) SetEnableControlMapping(v bool) {
	o.EnableControlMapping = v
}

// GetAlwaysMapResponses returns the AlwaysMapResponses field value
func (o *DnMapperPluginResponse) GetAlwaysMapResponses() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AlwaysMapResponses
}

// GetAlwaysMapResponsesOk returns a tuple with the AlwaysMapResponses field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetAlwaysMapResponsesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlwaysMapResponses, true
}

// SetAlwaysMapResponses sets field value
func (o *DnMapperPluginResponse) SetAlwaysMapResponses(v bool) {
	o.AlwaysMapResponses = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DnMapperPluginResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DnMapperPluginResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DnMapperPluginResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *DnMapperPluginResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DnMapperPluginResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetInvokeForInternalOperations returns the InvokeForInternalOperations field value if set, zero value otherwise.
func (o *DnMapperPluginResponse) GetInvokeForInternalOperations() bool {
	if o == nil || IsNil(o.InvokeForInternalOperations) {
		var ret bool
		return ret
	}
	return *o.InvokeForInternalOperations
}

// GetInvokeForInternalOperationsOk returns a tuple with the InvokeForInternalOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetInvokeForInternalOperationsOk() (*bool, bool) {
	if o == nil || IsNil(o.InvokeForInternalOperations) {
		return nil, false
	}
	return o.InvokeForInternalOperations, true
}

// HasInvokeForInternalOperations returns a boolean if a field has been set.
func (o *DnMapperPluginResponse) HasInvokeForInternalOperations() bool {
	if o != nil && !IsNil(o.InvokeForInternalOperations) {
		return true
	}

	return false
}

// SetInvokeForInternalOperations gets a reference to the given bool and assigns it to the InvokeForInternalOperations field.
func (o *DnMapperPluginResponse) SetInvokeForInternalOperations(v bool) {
	o.InvokeForInternalOperations = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DnMapperPluginResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DnMapperPluginResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *DnMapperPluginResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *DnMapperPluginResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnMapperPluginResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *DnMapperPluginResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *DnMapperPluginResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o DnMapperPluginResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnMapperPluginResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["schemas"] = o.Schemas
	toSerialize["pluginType"] = o.PluginType
	toSerialize["sourceDN"] = o.SourceDN
	toSerialize["targetDN"] = o.TargetDN
	toSerialize["enableAttributeMapping"] = o.EnableAttributeMapping
	if !IsNil(o.MapAttribute) {
		toSerialize["mapAttribute"] = o.MapAttribute
	}
	toSerialize["enableControlMapping"] = o.EnableControlMapping
	toSerialize["alwaysMapResponses"] = o.AlwaysMapResponses
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.InvokeForInternalOperations) {
		toSerialize["invokeForInternalOperations"] = o.InvokeForInternalOperations
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableDnMapperPluginResponse struct {
	value *DnMapperPluginResponse
	isSet bool
}

func (v NullableDnMapperPluginResponse) Get() *DnMapperPluginResponse {
	return v.value
}

func (v *NullableDnMapperPluginResponse) Set(val *DnMapperPluginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDnMapperPluginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDnMapperPluginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnMapperPluginResponse(val *DnMapperPluginResponse) *NullableDnMapperPluginResponse {
	return &NullableDnMapperPluginResponse{value: val, isSet: true}
}

func (v NullableDnMapperPluginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnMapperPluginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
