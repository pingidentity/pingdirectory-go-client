/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnummetricsEngineExternalServerSchemaUrn the model 'EnummetricsEngineExternalServerSchemaUrn'
type EnummetricsEngineExternalServerSchemaUrn string

// List of Enummetrics-engine-external-serverSchemaUrn
const (
	ENUMMETRICSENGINEEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERMETRICS_ENGINE EnummetricsEngineExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:metrics-engine"
)

// All allowed values of EnummetricsEngineExternalServerSchemaUrn enum
var AllowedEnummetricsEngineExternalServerSchemaUrnEnumValues = []EnummetricsEngineExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:metrics-engine",
}

func (v *EnummetricsEngineExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummetricsEngineExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnummetricsEngineExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummetricsEngineExternalServerSchemaUrn", value)
}

// NewEnummetricsEngineExternalServerSchemaUrnFromValue returns a pointer to a valid EnummetricsEngineExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummetricsEngineExternalServerSchemaUrnFromValue(v string) (*EnummetricsEngineExternalServerSchemaUrn, error) {
	ev := EnummetricsEngineExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummetricsEngineExternalServerSchemaUrn: valid values are %v", v, AllowedEnummetricsEngineExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummetricsEngineExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummetricsEngineExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummetrics-engine-external-serverSchemaUrn value
func (v EnummetricsEngineExternalServerSchemaUrn) Ptr() *EnummetricsEngineExternalServerSchemaUrn {
	return &v
}

type NullableEnummetricsEngineExternalServerSchemaUrn struct {
	value *EnummetricsEngineExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnummetricsEngineExternalServerSchemaUrn) Get() *EnummetricsEngineExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnummetricsEngineExternalServerSchemaUrn) Set(val *EnummetricsEngineExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummetricsEngineExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummetricsEngineExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummetricsEngineExternalServerSchemaUrn(val *EnummetricsEngineExternalServerSchemaUrn) *NullableEnummetricsEngineExternalServerSchemaUrn {
	return &NullableEnummetricsEngineExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummetricsEngineExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummetricsEngineExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
