/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// JsonFieldConstraintsApiService JsonFieldConstraintsApi service
type JsonFieldConstraintsApiService service

type ApiAddJsonFieldConstraintsRequest struct {
	ctx                            context.Context
	ApiService                     *JsonFieldConstraintsApiService
	jsonAttributeConstraintsName   string
	addJsonFieldConstraintsRequest *AddJsonFieldConstraintsRequest
}

// Create a new JSON Field Constraints in the config
func (r ApiAddJsonFieldConstraintsRequest) AddJsonFieldConstraintsRequest(addJsonFieldConstraintsRequest AddJsonFieldConstraintsRequest) ApiAddJsonFieldConstraintsRequest {
	r.addJsonFieldConstraintsRequest = &addJsonFieldConstraintsRequest
	return r
}

func (r ApiAddJsonFieldConstraintsRequest) Execute() (*JsonFieldConstraintsResponse, *http.Response, error) {
	return r.ApiService.AddJsonFieldConstraintsExecute(r)
}

/*
AddJsonFieldConstraints Add a new JSON Field Constraints to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jsonAttributeConstraintsName Name of the JSON Attribute Constraints
	@return ApiAddJsonFieldConstraintsRequest
*/
func (a *JsonFieldConstraintsApiService) AddJsonFieldConstraints(ctx context.Context, jsonAttributeConstraintsName string) ApiAddJsonFieldConstraintsRequest {
	return ApiAddJsonFieldConstraintsRequest{
		ApiService:                   a,
		ctx:                          ctx,
		jsonAttributeConstraintsName: jsonAttributeConstraintsName,
	}
}

// Execute executes the request
//
//	@return JsonFieldConstraintsResponse
func (a *JsonFieldConstraintsApiService) AddJsonFieldConstraintsExecute(r ApiAddJsonFieldConstraintsRequest) (*JsonFieldConstraintsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JsonFieldConstraintsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JsonFieldConstraintsApiService.AddJsonFieldConstraints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints"
	localVarPath = strings.Replace(localVarPath, "{"+"json-attribute-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonAttributeConstraintsName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addJsonFieldConstraintsRequest == nil {
		return localVarReturnValue, nil, reportError("addJsonFieldConstraintsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addJsonFieldConstraintsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteJsonFieldConstraintsRequest struct {
	ctx                          context.Context
	ApiService                   *JsonFieldConstraintsApiService
	jsonFieldConstraintsName     string
	jsonAttributeConstraintsName string
}

func (r ApiDeleteJsonFieldConstraintsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteJsonFieldConstraintsExecute(r)
}

/*
DeleteJsonFieldConstraints Delete a JSON Field Constraints

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jsonFieldConstraintsName Name of the JSON Field Constraints
	@param jsonAttributeConstraintsName Name of the JSON Attribute Constraints
	@return ApiDeleteJsonFieldConstraintsRequest
*/
func (a *JsonFieldConstraintsApiService) DeleteJsonFieldConstraints(ctx context.Context, jsonFieldConstraintsName string, jsonAttributeConstraintsName string) ApiDeleteJsonFieldConstraintsRequest {
	return ApiDeleteJsonFieldConstraintsRequest{
		ApiService:                   a,
		ctx:                          ctx,
		jsonFieldConstraintsName:     jsonFieldConstraintsName,
		jsonAttributeConstraintsName: jsonAttributeConstraintsName,
	}
}

// Execute executes the request
func (a *JsonFieldConstraintsApiService) DeleteJsonFieldConstraintsExecute(r ApiDeleteJsonFieldConstraintsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JsonFieldConstraintsApiService.DeleteJsonFieldConstraints")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints/{json-field-constraints-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"json-field-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonFieldConstraintsName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"json-attribute-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonAttributeConstraintsName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetJsonFieldConstraintsRequest struct {
	ctx                          context.Context
	ApiService                   *JsonFieldConstraintsApiService
	jsonFieldConstraintsName     string
	jsonAttributeConstraintsName string
}

func (r ApiGetJsonFieldConstraintsRequest) Execute() (*JsonFieldConstraintsResponse, *http.Response, error) {
	return r.ApiService.GetJsonFieldConstraintsExecute(r)
}

/*
GetJsonFieldConstraints Returns a single JSON Field Constraints

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jsonFieldConstraintsName Name of the JSON Field Constraints
	@param jsonAttributeConstraintsName Name of the JSON Attribute Constraints
	@return ApiGetJsonFieldConstraintsRequest
*/
func (a *JsonFieldConstraintsApiService) GetJsonFieldConstraints(ctx context.Context, jsonFieldConstraintsName string, jsonAttributeConstraintsName string) ApiGetJsonFieldConstraintsRequest {
	return ApiGetJsonFieldConstraintsRequest{
		ApiService:                   a,
		ctx:                          ctx,
		jsonFieldConstraintsName:     jsonFieldConstraintsName,
		jsonAttributeConstraintsName: jsonAttributeConstraintsName,
	}
}

// Execute executes the request
//
//	@return JsonFieldConstraintsResponse
func (a *JsonFieldConstraintsApiService) GetJsonFieldConstraintsExecute(r ApiGetJsonFieldConstraintsRequest) (*JsonFieldConstraintsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JsonFieldConstraintsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JsonFieldConstraintsApiService.GetJsonFieldConstraints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints/{json-field-constraints-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"json-field-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonFieldConstraintsName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"json-attribute-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonAttributeConstraintsName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateJsonFieldConstraintsRequest struct {
	ctx                          context.Context
	ApiService                   *JsonFieldConstraintsApiService
	jsonFieldConstraintsName     string
	jsonAttributeConstraintsName string
	updateRequest                *UpdateRequest
}

// Update an existing JSON Field Constraints
func (r ApiUpdateJsonFieldConstraintsRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateJsonFieldConstraintsRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateJsonFieldConstraintsRequest) Execute() (*JsonFieldConstraintsResponse, *http.Response, error) {
	return r.ApiService.UpdateJsonFieldConstraintsExecute(r)
}

/*
UpdateJsonFieldConstraints Update an existing JSON Field Constraints by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jsonFieldConstraintsName Name of the JSON Field Constraints
	@param jsonAttributeConstraintsName Name of the JSON Attribute Constraints
	@return ApiUpdateJsonFieldConstraintsRequest
*/
func (a *JsonFieldConstraintsApiService) UpdateJsonFieldConstraints(ctx context.Context, jsonFieldConstraintsName string, jsonAttributeConstraintsName string) ApiUpdateJsonFieldConstraintsRequest {
	return ApiUpdateJsonFieldConstraintsRequest{
		ApiService:                   a,
		ctx:                          ctx,
		jsonFieldConstraintsName:     jsonFieldConstraintsName,
		jsonAttributeConstraintsName: jsonAttributeConstraintsName,
	}
}

// Execute executes the request
//
//	@return JsonFieldConstraintsResponse
func (a *JsonFieldConstraintsApiService) UpdateJsonFieldConstraintsExecute(r ApiUpdateJsonFieldConstraintsRequest) (*JsonFieldConstraintsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JsonFieldConstraintsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JsonFieldConstraintsApiService.UpdateJsonFieldConstraints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints/{json-field-constraints-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"json-field-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonFieldConstraintsName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"json-attribute-constraints-name"+"}", url.PathEscape(parameterToString(r.jsonAttributeConstraintsName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
