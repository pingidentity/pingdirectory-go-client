/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddDataSecurityAuditor200Response - struct for AddDataSecurityAuditor200Response
type AddDataSecurityAuditor200Response struct {
	AccessControlDataSecurityAuditorResponse                   *AccessControlDataSecurityAuditorResponse
	AccountUsabilityIssuesDataSecurityAuditorResponse          *AccountUsabilityIssuesDataSecurityAuditorResponse
	AccountValidityWindowDataSecurityAuditorResponse           *AccountValidityWindowDataSecurityAuditorResponse
	DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse *DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse
	DisabledAccountDataSecurityAuditorResponse                 *DisabledAccountDataSecurityAuditorResponse
	ExpiredPasswordDataSecurityAuditorResponse                 *ExpiredPasswordDataSecurityAuditorResponse
	FilterDataSecurityAuditorResponse                          *FilterDataSecurityAuditorResponse
	IdleAccountDataSecurityAuditorResponse                     *IdleAccountDataSecurityAuditorResponse
	LockedAccountDataSecurityAuditorResponse                   *LockedAccountDataSecurityAuditorResponse
	MultiplePasswordDataSecurityAuditorResponse                *MultiplePasswordDataSecurityAuditorResponse
	NonexistentPasswordPolicyDataSecurityAuditorResponse       *NonexistentPasswordPolicyDataSecurityAuditorResponse
	PrivilegeDataSecurityAuditorResponse                       *PrivilegeDataSecurityAuditorResponse
	ThirdPartyDataSecurityAuditorResponse                      *ThirdPartyDataSecurityAuditorResponse
	WeaklyEncodedPasswordDataSecurityAuditorResponse           *WeaklyEncodedPasswordDataSecurityAuditorResponse
}

// AccessControlDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns AccessControlDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func AccessControlDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *AccessControlDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		AccessControlDataSecurityAuditorResponse: v,
	}
}

// AccountUsabilityIssuesDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns AccountUsabilityIssuesDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func AccountUsabilityIssuesDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *AccountUsabilityIssuesDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		AccountUsabilityIssuesDataSecurityAuditorResponse: v,
	}
}

// AccountValidityWindowDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns AccountValidityWindowDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func AccountValidityWindowDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *AccountValidityWindowDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		AccountValidityWindowDataSecurityAuditorResponse: v,
	}
}

// DeprecatedPasswordStorageSchemeDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func DeprecatedPasswordStorageSchemeDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse: v,
	}
}

// DisabledAccountDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns DisabledAccountDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func DisabledAccountDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *DisabledAccountDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		DisabledAccountDataSecurityAuditorResponse: v,
	}
}

// ExpiredPasswordDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns ExpiredPasswordDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func ExpiredPasswordDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *ExpiredPasswordDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		ExpiredPasswordDataSecurityAuditorResponse: v,
	}
}

// FilterDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns FilterDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func FilterDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *FilterDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		FilterDataSecurityAuditorResponse: v,
	}
}

// IdleAccountDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns IdleAccountDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func IdleAccountDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *IdleAccountDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		IdleAccountDataSecurityAuditorResponse: v,
	}
}

// LockedAccountDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns LockedAccountDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func LockedAccountDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *LockedAccountDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		LockedAccountDataSecurityAuditorResponse: v,
	}
}

// MultiplePasswordDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns MultiplePasswordDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func MultiplePasswordDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *MultiplePasswordDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		MultiplePasswordDataSecurityAuditorResponse: v,
	}
}

// NonexistentPasswordPolicyDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns NonexistentPasswordPolicyDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func NonexistentPasswordPolicyDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *NonexistentPasswordPolicyDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		NonexistentPasswordPolicyDataSecurityAuditorResponse: v,
	}
}

// PrivilegeDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns PrivilegeDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func PrivilegeDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *PrivilegeDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		PrivilegeDataSecurityAuditorResponse: v,
	}
}

// ThirdPartyDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns ThirdPartyDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func ThirdPartyDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *ThirdPartyDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		ThirdPartyDataSecurityAuditorResponse: v,
	}
}

// WeaklyEncodedPasswordDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response is a convenience function that returns WeaklyEncodedPasswordDataSecurityAuditorResponse wrapped in AddDataSecurityAuditor200Response
func WeaklyEncodedPasswordDataSecurityAuditorResponseAsAddDataSecurityAuditor200Response(v *WeaklyEncodedPasswordDataSecurityAuditorResponse) AddDataSecurityAuditor200Response {
	return AddDataSecurityAuditor200Response{
		WeaklyEncodedPasswordDataSecurityAuditorResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddDataSecurityAuditor200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccessControlDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.AccessControlDataSecurityAuditorResponse)
	if err == nil {
		jsonAccessControlDataSecurityAuditorResponse, _ := json.Marshal(dst.AccessControlDataSecurityAuditorResponse)
		if string(jsonAccessControlDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.AccessControlDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.AccessControlDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into AccountUsabilityIssuesDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.AccountUsabilityIssuesDataSecurityAuditorResponse)
	if err == nil {
		jsonAccountUsabilityIssuesDataSecurityAuditorResponse, _ := json.Marshal(dst.AccountUsabilityIssuesDataSecurityAuditorResponse)
		if string(jsonAccountUsabilityIssuesDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.AccountUsabilityIssuesDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.AccountUsabilityIssuesDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into AccountValidityWindowDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.AccountValidityWindowDataSecurityAuditorResponse)
	if err == nil {
		jsonAccountValidityWindowDataSecurityAuditorResponse, _ := json.Marshal(dst.AccountValidityWindowDataSecurityAuditorResponse)
		if string(jsonAccountValidityWindowDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.AccountValidityWindowDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.AccountValidityWindowDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse)
	if err == nil {
		jsonDeprecatedPasswordStorageSchemeDataSecurityAuditorResponse, _ := json.Marshal(dst.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse)
		if string(jsonDeprecatedPasswordStorageSchemeDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into DisabledAccountDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.DisabledAccountDataSecurityAuditorResponse)
	if err == nil {
		jsonDisabledAccountDataSecurityAuditorResponse, _ := json.Marshal(dst.DisabledAccountDataSecurityAuditorResponse)
		if string(jsonDisabledAccountDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.DisabledAccountDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.DisabledAccountDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into ExpiredPasswordDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.ExpiredPasswordDataSecurityAuditorResponse)
	if err == nil {
		jsonExpiredPasswordDataSecurityAuditorResponse, _ := json.Marshal(dst.ExpiredPasswordDataSecurityAuditorResponse)
		if string(jsonExpiredPasswordDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.ExpiredPasswordDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ExpiredPasswordDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into FilterDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.FilterDataSecurityAuditorResponse)
	if err == nil {
		jsonFilterDataSecurityAuditorResponse, _ := json.Marshal(dst.FilterDataSecurityAuditorResponse)
		if string(jsonFilterDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.FilterDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.FilterDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into IdleAccountDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.IdleAccountDataSecurityAuditorResponse)
	if err == nil {
		jsonIdleAccountDataSecurityAuditorResponse, _ := json.Marshal(dst.IdleAccountDataSecurityAuditorResponse)
		if string(jsonIdleAccountDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.IdleAccountDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.IdleAccountDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into LockedAccountDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.LockedAccountDataSecurityAuditorResponse)
	if err == nil {
		jsonLockedAccountDataSecurityAuditorResponse, _ := json.Marshal(dst.LockedAccountDataSecurityAuditorResponse)
		if string(jsonLockedAccountDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.LockedAccountDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.LockedAccountDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into MultiplePasswordDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.MultiplePasswordDataSecurityAuditorResponse)
	if err == nil {
		jsonMultiplePasswordDataSecurityAuditorResponse, _ := json.Marshal(dst.MultiplePasswordDataSecurityAuditorResponse)
		if string(jsonMultiplePasswordDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.MultiplePasswordDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.MultiplePasswordDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into NonexistentPasswordPolicyDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.NonexistentPasswordPolicyDataSecurityAuditorResponse)
	if err == nil {
		jsonNonexistentPasswordPolicyDataSecurityAuditorResponse, _ := json.Marshal(dst.NonexistentPasswordPolicyDataSecurityAuditorResponse)
		if string(jsonNonexistentPasswordPolicyDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.NonexistentPasswordPolicyDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.NonexistentPasswordPolicyDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into PrivilegeDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.PrivilegeDataSecurityAuditorResponse)
	if err == nil {
		jsonPrivilegeDataSecurityAuditorResponse, _ := json.Marshal(dst.PrivilegeDataSecurityAuditorResponse)
		if string(jsonPrivilegeDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.PrivilegeDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.PrivilegeDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into ThirdPartyDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyDataSecurityAuditorResponse)
	if err == nil {
		jsonThirdPartyDataSecurityAuditorResponse, _ := json.Marshal(dst.ThirdPartyDataSecurityAuditorResponse)
		if string(jsonThirdPartyDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.ThirdPartyDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyDataSecurityAuditorResponse = nil
	}

	// try to unmarshal data into WeaklyEncodedPasswordDataSecurityAuditorResponse
	err = newStrictDecoder(data).Decode(&dst.WeaklyEncodedPasswordDataSecurityAuditorResponse)
	if err == nil {
		jsonWeaklyEncodedPasswordDataSecurityAuditorResponse, _ := json.Marshal(dst.WeaklyEncodedPasswordDataSecurityAuditorResponse)
		if string(jsonWeaklyEncodedPasswordDataSecurityAuditorResponse) == "{}" { // empty struct
			dst.WeaklyEncodedPasswordDataSecurityAuditorResponse = nil
		} else {
			match++
		}
	} else {
		dst.WeaklyEncodedPasswordDataSecurityAuditorResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccessControlDataSecurityAuditorResponse = nil
		dst.AccountUsabilityIssuesDataSecurityAuditorResponse = nil
		dst.AccountValidityWindowDataSecurityAuditorResponse = nil
		dst.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse = nil
		dst.DisabledAccountDataSecurityAuditorResponse = nil
		dst.ExpiredPasswordDataSecurityAuditorResponse = nil
		dst.FilterDataSecurityAuditorResponse = nil
		dst.IdleAccountDataSecurityAuditorResponse = nil
		dst.LockedAccountDataSecurityAuditorResponse = nil
		dst.MultiplePasswordDataSecurityAuditorResponse = nil
		dst.NonexistentPasswordPolicyDataSecurityAuditorResponse = nil
		dst.PrivilegeDataSecurityAuditorResponse = nil
		dst.ThirdPartyDataSecurityAuditorResponse = nil
		dst.WeaklyEncodedPasswordDataSecurityAuditorResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddDataSecurityAuditor200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddDataSecurityAuditor200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddDataSecurityAuditor200Response) MarshalJSON() ([]byte, error) {
	if src.AccessControlDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.AccessControlDataSecurityAuditorResponse)
	}

	if src.AccountUsabilityIssuesDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.AccountUsabilityIssuesDataSecurityAuditorResponse)
	}

	if src.AccountValidityWindowDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.AccountValidityWindowDataSecurityAuditorResponse)
	}

	if src.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse)
	}

	if src.DisabledAccountDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.DisabledAccountDataSecurityAuditorResponse)
	}

	if src.ExpiredPasswordDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.ExpiredPasswordDataSecurityAuditorResponse)
	}

	if src.FilterDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.FilterDataSecurityAuditorResponse)
	}

	if src.IdleAccountDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.IdleAccountDataSecurityAuditorResponse)
	}

	if src.LockedAccountDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.LockedAccountDataSecurityAuditorResponse)
	}

	if src.MultiplePasswordDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.MultiplePasswordDataSecurityAuditorResponse)
	}

	if src.NonexistentPasswordPolicyDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.NonexistentPasswordPolicyDataSecurityAuditorResponse)
	}

	if src.PrivilegeDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.PrivilegeDataSecurityAuditorResponse)
	}

	if src.ThirdPartyDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.ThirdPartyDataSecurityAuditorResponse)
	}

	if src.WeaklyEncodedPasswordDataSecurityAuditorResponse != nil {
		return json.Marshal(&src.WeaklyEncodedPasswordDataSecurityAuditorResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddDataSecurityAuditor200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AccessControlDataSecurityAuditorResponse != nil {
		return obj.AccessControlDataSecurityAuditorResponse
	}

	if obj.AccountUsabilityIssuesDataSecurityAuditorResponse != nil {
		return obj.AccountUsabilityIssuesDataSecurityAuditorResponse
	}

	if obj.AccountValidityWindowDataSecurityAuditorResponse != nil {
		return obj.AccountValidityWindowDataSecurityAuditorResponse
	}

	if obj.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse != nil {
		return obj.DeprecatedPasswordStorageSchemeDataSecurityAuditorResponse
	}

	if obj.DisabledAccountDataSecurityAuditorResponse != nil {
		return obj.DisabledAccountDataSecurityAuditorResponse
	}

	if obj.ExpiredPasswordDataSecurityAuditorResponse != nil {
		return obj.ExpiredPasswordDataSecurityAuditorResponse
	}

	if obj.FilterDataSecurityAuditorResponse != nil {
		return obj.FilterDataSecurityAuditorResponse
	}

	if obj.IdleAccountDataSecurityAuditorResponse != nil {
		return obj.IdleAccountDataSecurityAuditorResponse
	}

	if obj.LockedAccountDataSecurityAuditorResponse != nil {
		return obj.LockedAccountDataSecurityAuditorResponse
	}

	if obj.MultiplePasswordDataSecurityAuditorResponse != nil {
		return obj.MultiplePasswordDataSecurityAuditorResponse
	}

	if obj.NonexistentPasswordPolicyDataSecurityAuditorResponse != nil {
		return obj.NonexistentPasswordPolicyDataSecurityAuditorResponse
	}

	if obj.PrivilegeDataSecurityAuditorResponse != nil {
		return obj.PrivilegeDataSecurityAuditorResponse
	}

	if obj.ThirdPartyDataSecurityAuditorResponse != nil {
		return obj.ThirdPartyDataSecurityAuditorResponse
	}

	if obj.WeaklyEncodedPasswordDataSecurityAuditorResponse != nil {
		return obj.WeaklyEncodedPasswordDataSecurityAuditorResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddDataSecurityAuditor200Response struct {
	value *AddDataSecurityAuditor200Response
	isSet bool
}

func (v NullableAddDataSecurityAuditor200Response) Get() *AddDataSecurityAuditor200Response {
	return v.value
}

func (v *NullableAddDataSecurityAuditor200Response) Set(val *AddDataSecurityAuditor200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDataSecurityAuditor200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDataSecurityAuditor200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDataSecurityAuditor200Response(val *AddDataSecurityAuditor200Response) *NullableAddDataSecurityAuditor200Response {
	return &NullableAddDataSecurityAuditor200Response{value: val, isSet: true}
}

func (v NullableAddDataSecurityAuditor200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDataSecurityAuditor200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
