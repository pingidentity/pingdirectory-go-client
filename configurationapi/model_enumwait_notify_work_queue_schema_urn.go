/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumwaitNotifyWorkQueueSchemaUrn the model 'EnumwaitNotifyWorkQueueSchemaUrn'
type EnumwaitNotifyWorkQueueSchemaUrn string

// List of Enumwait-notify-work-queueSchemaUrn
const (
	ENUMWAITNOTIFYWORKQUEUESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0WORK_QUEUEWAIT_NOTIFY EnumwaitNotifyWorkQueueSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:work-queue:wait-notify"
)

// All allowed values of EnumwaitNotifyWorkQueueSchemaUrn enum
var AllowedEnumwaitNotifyWorkQueueSchemaUrnEnumValues = []EnumwaitNotifyWorkQueueSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:work-queue:wait-notify",
}

func (v *EnumwaitNotifyWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumwaitNotifyWorkQueueSchemaUrn(value)
	for _, existing := range AllowedEnumwaitNotifyWorkQueueSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumwaitNotifyWorkQueueSchemaUrn", value)
}

// NewEnumwaitNotifyWorkQueueSchemaUrnFromValue returns a pointer to a valid EnumwaitNotifyWorkQueueSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumwaitNotifyWorkQueueSchemaUrnFromValue(v string) (*EnumwaitNotifyWorkQueueSchemaUrn, error) {
	ev := EnumwaitNotifyWorkQueueSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumwaitNotifyWorkQueueSchemaUrn: valid values are %v", v, AllowedEnumwaitNotifyWorkQueueSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumwaitNotifyWorkQueueSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumwaitNotifyWorkQueueSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumwait-notify-work-queueSchemaUrn value
func (v EnumwaitNotifyWorkQueueSchemaUrn) Ptr() *EnumwaitNotifyWorkQueueSchemaUrn {
	return &v
}

type NullableEnumwaitNotifyWorkQueueSchemaUrn struct {
	value *EnumwaitNotifyWorkQueueSchemaUrn
	isSet bool
}

func (v NullableEnumwaitNotifyWorkQueueSchemaUrn) Get() *EnumwaitNotifyWorkQueueSchemaUrn {
	return v.value
}

func (v *NullableEnumwaitNotifyWorkQueueSchemaUrn) Set(val *EnumwaitNotifyWorkQueueSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumwaitNotifyWorkQueueSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumwaitNotifyWorkQueueSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumwaitNotifyWorkQueueSchemaUrn(val *EnumwaitNotifyWorkQueueSchemaUrn) *NullableEnumwaitNotifyWorkQueueSchemaUrn {
	return &NullableEnumwaitNotifyWorkQueueSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumwaitNotifyWorkQueueSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumwaitNotifyWorkQueueSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
