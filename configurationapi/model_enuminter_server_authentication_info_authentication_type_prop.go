/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnuminterServerAuthenticationInfoAuthenticationTypeProp Identifies the type of password authentication that will be used.
type EnuminterServerAuthenticationInfoAuthenticationTypeProp string

// List of Enuminter-server-authentication-info-authenticationTypeProp
const (
	ENUMINTERSERVERAUTHENTICATIONINFOAUTHENTICATIONTYPEPROP_SIMPLE     EnuminterServerAuthenticationInfoAuthenticationTypeProp = "simple"
	ENUMINTERSERVERAUTHENTICATIONINFOAUTHENTICATIONTYPEPROP_SASL_PLAIN EnuminterServerAuthenticationInfoAuthenticationTypeProp = "sasl-plain"
)

// All allowed values of EnuminterServerAuthenticationInfoAuthenticationTypeProp enum
var AllowedEnuminterServerAuthenticationInfoAuthenticationTypePropEnumValues = []EnuminterServerAuthenticationInfoAuthenticationTypeProp{
	"simple",
	"sasl-plain",
}

func (v *EnuminterServerAuthenticationInfoAuthenticationTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnuminterServerAuthenticationInfoAuthenticationTypeProp(value)
	for _, existing := range AllowedEnuminterServerAuthenticationInfoAuthenticationTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnuminterServerAuthenticationInfoAuthenticationTypeProp", value)
}

// NewEnuminterServerAuthenticationInfoAuthenticationTypePropFromValue returns a pointer to a valid EnuminterServerAuthenticationInfoAuthenticationTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnuminterServerAuthenticationInfoAuthenticationTypePropFromValue(v string) (*EnuminterServerAuthenticationInfoAuthenticationTypeProp, error) {
	ev := EnuminterServerAuthenticationInfoAuthenticationTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnuminterServerAuthenticationInfoAuthenticationTypeProp: valid values are %v", v, AllowedEnuminterServerAuthenticationInfoAuthenticationTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnuminterServerAuthenticationInfoAuthenticationTypeProp) IsValid() bool {
	for _, existing := range AllowedEnuminterServerAuthenticationInfoAuthenticationTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enuminter-server-authentication-info-authenticationTypeProp value
func (v EnuminterServerAuthenticationInfoAuthenticationTypeProp) Ptr() *EnuminterServerAuthenticationInfoAuthenticationTypeProp {
	return &v
}

type NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp struct {
	value *EnuminterServerAuthenticationInfoAuthenticationTypeProp
	isSet bool
}

func (v NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp) Get() *EnuminterServerAuthenticationInfoAuthenticationTypeProp {
	return v.value
}

func (v *NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp) Set(val *EnuminterServerAuthenticationInfoAuthenticationTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnuminterServerAuthenticationInfoAuthenticationTypeProp(val *EnuminterServerAuthenticationInfoAuthenticationTypeProp) *NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp {
	return &NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp{value: val, isSet: true}
}

func (v NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnuminterServerAuthenticationInfoAuthenticationTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
