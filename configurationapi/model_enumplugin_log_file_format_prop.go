/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginLogFileFormatProp Specifies the format to use when logging server statistics.
type EnumpluginLogFileFormatProp string

// List of Enumplugin-logFileFormatProp
const (
	ENUMPLUGINLOGFILEFORMATPROP_CSV  EnumpluginLogFileFormatProp = "csv"
	ENUMPLUGINLOGFILEFORMATPROP_JSON EnumpluginLogFileFormatProp = "json"
)

// All allowed values of EnumpluginLogFileFormatProp enum
var AllowedEnumpluginLogFileFormatPropEnumValues = []EnumpluginLogFileFormatProp{
	"csv",
	"json",
}

func (v *EnumpluginLogFileFormatProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginLogFileFormatProp(value)
	for _, existing := range AllowedEnumpluginLogFileFormatPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginLogFileFormatProp", value)
}

// NewEnumpluginLogFileFormatPropFromValue returns a pointer to a valid EnumpluginLogFileFormatProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginLogFileFormatPropFromValue(v string) (*EnumpluginLogFileFormatProp, error) {
	ev := EnumpluginLogFileFormatProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginLogFileFormatProp: valid values are %v", v, AllowedEnumpluginLogFileFormatPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginLogFileFormatProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginLogFileFormatPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-logFileFormatProp value
func (v EnumpluginLogFileFormatProp) Ptr() *EnumpluginLogFileFormatProp {
	return &v
}

type NullableEnumpluginLogFileFormatProp struct {
	value *EnumpluginLogFileFormatProp
	isSet bool
}

func (v NullableEnumpluginLogFileFormatProp) Get() *EnumpluginLogFileFormatProp {
	return v.value
}

func (v *NullableEnumpluginLogFileFormatProp) Set(val *EnumpluginLogFileFormatProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginLogFileFormatProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginLogFileFormatProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginLogFileFormatProp(val *EnumpluginLogFileFormatProp) *NullableEnumpluginLogFileFormatProp {
	return &NullableEnumpluginLogFileFormatProp{value: val, isSet: true}
}

func (v NullableEnumpluginLogFileFormatProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginLogFileFormatProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
