/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumglobalConfigurationAllowedInsecureTLSProtocolProp Specifies a set of TLS protocols that will be permitted for use in the server even though there may be known vulnerabilities that could cause their use to be unsafe in some conditions. Enabling support for insecure TLS protocols is discouraged, and is generally recommended only as a short-term measure to permit legacy clients to interact with the server until they can be updated to support more secure communication protocols.
type EnumglobalConfigurationAllowedInsecureTLSProtocolProp string

// List of Enumglobal-configuration-allowedInsecureTLSProtocolProp
const (
	ENUMGLOBALCONFIGURATIONALLOWEDINSECURETLSPROTOCOLPROP_SSLV3 EnumglobalConfigurationAllowedInsecureTLSProtocolProp = "sslv3"
)

// All allowed values of EnumglobalConfigurationAllowedInsecureTLSProtocolProp enum
var AllowedEnumglobalConfigurationAllowedInsecureTLSProtocolPropEnumValues = []EnumglobalConfigurationAllowedInsecureTLSProtocolProp{
	"sslv3",
}

func (v *EnumglobalConfigurationAllowedInsecureTLSProtocolProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumglobalConfigurationAllowedInsecureTLSProtocolProp(value)
	for _, existing := range AllowedEnumglobalConfigurationAllowedInsecureTLSProtocolPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumglobalConfigurationAllowedInsecureTLSProtocolProp", value)
}

// NewEnumglobalConfigurationAllowedInsecureTLSProtocolPropFromValue returns a pointer to a valid EnumglobalConfigurationAllowedInsecureTLSProtocolProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumglobalConfigurationAllowedInsecureTLSProtocolPropFromValue(v string) (*EnumglobalConfigurationAllowedInsecureTLSProtocolProp, error) {
	ev := EnumglobalConfigurationAllowedInsecureTLSProtocolProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumglobalConfigurationAllowedInsecureTLSProtocolProp: valid values are %v", v, AllowedEnumglobalConfigurationAllowedInsecureTLSProtocolPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumglobalConfigurationAllowedInsecureTLSProtocolProp) IsValid() bool {
	for _, existing := range AllowedEnumglobalConfigurationAllowedInsecureTLSProtocolPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumglobal-configuration-allowedInsecureTLSProtocolProp value
func (v EnumglobalConfigurationAllowedInsecureTLSProtocolProp) Ptr() *EnumglobalConfigurationAllowedInsecureTLSProtocolProp {
	return &v
}

type NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp struct {
	value *EnumglobalConfigurationAllowedInsecureTLSProtocolProp
	isSet bool
}

func (v NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp) Get() *EnumglobalConfigurationAllowedInsecureTLSProtocolProp {
	return v.value
}

func (v *NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp) Set(val *EnumglobalConfigurationAllowedInsecureTLSProtocolProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp(val *EnumglobalConfigurationAllowedInsecureTLSProtocolProp) *NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp {
	return &NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp{value: val, isSet: true}
}

func (v NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumglobalConfigurationAllowedInsecureTLSProtocolProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
