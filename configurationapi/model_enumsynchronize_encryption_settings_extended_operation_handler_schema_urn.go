/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn the model 'EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn'
type EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn string

// List of Enumsynchronize-encryption-settings-extended-operation-handlerSchemaUrn
const (
	ENUMSYNCHRONIZEENCRYPTIONSETTINGSEXTENDEDOPERATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERSYNCHRONIZE_ENCRYPTION_SETTINGS EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:synchronize-encryption-settings"
)

// All allowed values of EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn enum
var AllowedEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrnEnumValues = []EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:synchronize-encryption-settings",
}

func (v *EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsynchronize-encryption-settings-extended-operation-handlerSchemaUrn value
func (v EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) Ptr() *EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn struct {
	value *EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) Get() *EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) Set(val *EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn(val *EnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) *NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn {
	return &NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsynchronizeEncryptionSettingsExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
