/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddGenericWebApplicationExtensionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddGenericWebApplicationExtensionRequest{}

// AddGenericWebApplicationExtensionRequest struct for AddGenericWebApplicationExtensionRequest
type AddGenericWebApplicationExtensionRequest struct {
	// Name of the new Web Application Extension
	ExtensionName string                                        `json:"extensionName"`
	Schemas       []EnumgenericWebApplicationExtensionSchemaUrn `json:"schemas"`
	// A description for this Web Application Extension
	Description *string `json:"description,omitempty"`
	// Specifies the base context path that should be used by HTTP clients to reference content. The value must start with a forward slash and at least one additional character and must represent a valid HTTP context path.
	BaseContextPath string `json:"baseContextPath"`
	// Specifies the path to a standard web application archive (WAR) file.
	WarFile *string `json:"warFile,omitempty"`
	// Specifies the path to the directory on the local filesystem containing the files to be served by this Web Application Extension. The path must exist, and it must be a directory.
	DocumentRootDirectory *string `json:"documentRootDirectory,omitempty"`
	// Specifies the path to the deployment descriptor file when used with document-root-directory.
	DeploymentDescriptorFile *string `json:"deploymentDescriptorFile,omitempty"`
	// Specifies the path to the directory that may be used to store temporary files such as extracted WAR files and compiled JSP files.
	TemporaryDirectory *string `json:"temporaryDirectory,omitempty"`
	// Specifies an initialization parameter to pass into the web application during startup.
	InitParameter []string `json:"initParameter,omitempty"`
}

// NewAddGenericWebApplicationExtensionRequest instantiates a new AddGenericWebApplicationExtensionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddGenericWebApplicationExtensionRequest(extensionName string, schemas []EnumgenericWebApplicationExtensionSchemaUrn, baseContextPath string) *AddGenericWebApplicationExtensionRequest {
	this := AddGenericWebApplicationExtensionRequest{}
	this.ExtensionName = extensionName
	this.Schemas = schemas
	this.BaseContextPath = baseContextPath
	return &this
}

// NewAddGenericWebApplicationExtensionRequestWithDefaults instantiates a new AddGenericWebApplicationExtensionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddGenericWebApplicationExtensionRequestWithDefaults() *AddGenericWebApplicationExtensionRequest {
	this := AddGenericWebApplicationExtensionRequest{}
	return &this
}

// GetExtensionName returns the ExtensionName field value
func (o *AddGenericWebApplicationExtensionRequest) GetExtensionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtensionName
}

// GetExtensionNameOk returns a tuple with the ExtensionName field value
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetExtensionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtensionName, true
}

// SetExtensionName sets field value
func (o *AddGenericWebApplicationExtensionRequest) SetExtensionName(v string) {
	o.ExtensionName = v
}

// GetSchemas returns the Schemas field value
func (o *AddGenericWebApplicationExtensionRequest) GetSchemas() []EnumgenericWebApplicationExtensionSchemaUrn {
	if o == nil {
		var ret []EnumgenericWebApplicationExtensionSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetSchemasOk() ([]EnumgenericWebApplicationExtensionSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddGenericWebApplicationExtensionRequest) SetSchemas(v []EnumgenericWebApplicationExtensionSchemaUrn) {
	o.Schemas = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddGenericWebApplicationExtensionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddGenericWebApplicationExtensionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddGenericWebApplicationExtensionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetBaseContextPath returns the BaseContextPath field value
func (o *AddGenericWebApplicationExtensionRequest) GetBaseContextPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseContextPath
}

// GetBaseContextPathOk returns a tuple with the BaseContextPath field value
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetBaseContextPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseContextPath, true
}

// SetBaseContextPath sets field value
func (o *AddGenericWebApplicationExtensionRequest) SetBaseContextPath(v string) {
	o.BaseContextPath = v
}

// GetWarFile returns the WarFile field value if set, zero value otherwise.
func (o *AddGenericWebApplicationExtensionRequest) GetWarFile() string {
	if o == nil || IsNil(o.WarFile) {
		var ret string
		return ret
	}
	return *o.WarFile
}

// GetWarFileOk returns a tuple with the WarFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetWarFileOk() (*string, bool) {
	if o == nil || IsNil(o.WarFile) {
		return nil, false
	}
	return o.WarFile, true
}

// HasWarFile returns a boolean if a field has been set.
func (o *AddGenericWebApplicationExtensionRequest) HasWarFile() bool {
	if o != nil && !IsNil(o.WarFile) {
		return true
	}

	return false
}

// SetWarFile gets a reference to the given string and assigns it to the WarFile field.
func (o *AddGenericWebApplicationExtensionRequest) SetWarFile(v string) {
	o.WarFile = &v
}

// GetDocumentRootDirectory returns the DocumentRootDirectory field value if set, zero value otherwise.
func (o *AddGenericWebApplicationExtensionRequest) GetDocumentRootDirectory() string {
	if o == nil || IsNil(o.DocumentRootDirectory) {
		var ret string
		return ret
	}
	return *o.DocumentRootDirectory
}

// GetDocumentRootDirectoryOk returns a tuple with the DocumentRootDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetDocumentRootDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentRootDirectory) {
		return nil, false
	}
	return o.DocumentRootDirectory, true
}

// HasDocumentRootDirectory returns a boolean if a field has been set.
func (o *AddGenericWebApplicationExtensionRequest) HasDocumentRootDirectory() bool {
	if o != nil && !IsNil(o.DocumentRootDirectory) {
		return true
	}

	return false
}

// SetDocumentRootDirectory gets a reference to the given string and assigns it to the DocumentRootDirectory field.
func (o *AddGenericWebApplicationExtensionRequest) SetDocumentRootDirectory(v string) {
	o.DocumentRootDirectory = &v
}

// GetDeploymentDescriptorFile returns the DeploymentDescriptorFile field value if set, zero value otherwise.
func (o *AddGenericWebApplicationExtensionRequest) GetDeploymentDescriptorFile() string {
	if o == nil || IsNil(o.DeploymentDescriptorFile) {
		var ret string
		return ret
	}
	return *o.DeploymentDescriptorFile
}

// GetDeploymentDescriptorFileOk returns a tuple with the DeploymentDescriptorFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetDeploymentDescriptorFileOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentDescriptorFile) {
		return nil, false
	}
	return o.DeploymentDescriptorFile, true
}

// HasDeploymentDescriptorFile returns a boolean if a field has been set.
func (o *AddGenericWebApplicationExtensionRequest) HasDeploymentDescriptorFile() bool {
	if o != nil && !IsNil(o.DeploymentDescriptorFile) {
		return true
	}

	return false
}

// SetDeploymentDescriptorFile gets a reference to the given string and assigns it to the DeploymentDescriptorFile field.
func (o *AddGenericWebApplicationExtensionRequest) SetDeploymentDescriptorFile(v string) {
	o.DeploymentDescriptorFile = &v
}

// GetTemporaryDirectory returns the TemporaryDirectory field value if set, zero value otherwise.
func (o *AddGenericWebApplicationExtensionRequest) GetTemporaryDirectory() string {
	if o == nil || IsNil(o.TemporaryDirectory) {
		var ret string
		return ret
	}
	return *o.TemporaryDirectory
}

// GetTemporaryDirectoryOk returns a tuple with the TemporaryDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetTemporaryDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.TemporaryDirectory) {
		return nil, false
	}
	return o.TemporaryDirectory, true
}

// HasTemporaryDirectory returns a boolean if a field has been set.
func (o *AddGenericWebApplicationExtensionRequest) HasTemporaryDirectory() bool {
	if o != nil && !IsNil(o.TemporaryDirectory) {
		return true
	}

	return false
}

// SetTemporaryDirectory gets a reference to the given string and assigns it to the TemporaryDirectory field.
func (o *AddGenericWebApplicationExtensionRequest) SetTemporaryDirectory(v string) {
	o.TemporaryDirectory = &v
}

// GetInitParameter returns the InitParameter field value if set, zero value otherwise.
func (o *AddGenericWebApplicationExtensionRequest) GetInitParameter() []string {
	if o == nil || IsNil(o.InitParameter) {
		var ret []string
		return ret
	}
	return o.InitParameter
}

// GetInitParameterOk returns a tuple with the InitParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGenericWebApplicationExtensionRequest) GetInitParameterOk() ([]string, bool) {
	if o == nil || IsNil(o.InitParameter) {
		return nil, false
	}
	return o.InitParameter, true
}

// HasInitParameter returns a boolean if a field has been set.
func (o *AddGenericWebApplicationExtensionRequest) HasInitParameter() bool {
	if o != nil && !IsNil(o.InitParameter) {
		return true
	}

	return false
}

// SetInitParameter gets a reference to the given []string and assigns it to the InitParameter field.
func (o *AddGenericWebApplicationExtensionRequest) SetInitParameter(v []string) {
	o.InitParameter = v
}

func (o AddGenericWebApplicationExtensionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddGenericWebApplicationExtensionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extensionName"] = o.ExtensionName
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["baseContextPath"] = o.BaseContextPath
	if !IsNil(o.WarFile) {
		toSerialize["warFile"] = o.WarFile
	}
	if !IsNil(o.DocumentRootDirectory) {
		toSerialize["documentRootDirectory"] = o.DocumentRootDirectory
	}
	if !IsNil(o.DeploymentDescriptorFile) {
		toSerialize["deploymentDescriptorFile"] = o.DeploymentDescriptorFile
	}
	if !IsNil(o.TemporaryDirectory) {
		toSerialize["temporaryDirectory"] = o.TemporaryDirectory
	}
	if !IsNil(o.InitParameter) {
		toSerialize["initParameter"] = o.InitParameter
	}
	return toSerialize, nil
}

type NullableAddGenericWebApplicationExtensionRequest struct {
	value *AddGenericWebApplicationExtensionRequest
	isSet bool
}

func (v NullableAddGenericWebApplicationExtensionRequest) Get() *AddGenericWebApplicationExtensionRequest {
	return v.value
}

func (v *NullableAddGenericWebApplicationExtensionRequest) Set(val *AddGenericWebApplicationExtensionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddGenericWebApplicationExtensionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddGenericWebApplicationExtensionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddGenericWebApplicationExtensionRequest(val *AddGenericWebApplicationExtensionRequest) *NullableAddGenericWebApplicationExtensionRequest {
	return &NullableAddGenericWebApplicationExtensionRequest{value: val, isSet: true}
}

func (v NullableAddGenericWebApplicationExtensionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddGenericWebApplicationExtensionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
