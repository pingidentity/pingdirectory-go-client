/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// AddScimResourceTypeRequest - struct for AddScimResourceTypeRequest
type AddScimResourceTypeRequest struct {
	AddLdapMappingScimResourceTypeRequest     *AddLdapMappingScimResourceTypeRequest
	AddLdapPassThroughScimResourceTypeRequest *AddLdapPassThroughScimResourceTypeRequest
	AddMappingScimResourceTypeRequest         *AddMappingScimResourceTypeRequest
}

// AddLdapMappingScimResourceTypeRequestAsAddScimResourceTypeRequest is a convenience function that returns AddLdapMappingScimResourceTypeRequest wrapped in AddScimResourceTypeRequest
func AddLdapMappingScimResourceTypeRequestAsAddScimResourceTypeRequest(v *AddLdapMappingScimResourceTypeRequest) AddScimResourceTypeRequest {
	return AddScimResourceTypeRequest{
		AddLdapMappingScimResourceTypeRequest: v,
	}
}

// AddLdapPassThroughScimResourceTypeRequestAsAddScimResourceTypeRequest is a convenience function that returns AddLdapPassThroughScimResourceTypeRequest wrapped in AddScimResourceTypeRequest
func AddLdapPassThroughScimResourceTypeRequestAsAddScimResourceTypeRequest(v *AddLdapPassThroughScimResourceTypeRequest) AddScimResourceTypeRequest {
	return AddScimResourceTypeRequest{
		AddLdapPassThroughScimResourceTypeRequest: v,
	}
}

// AddMappingScimResourceTypeRequestAsAddScimResourceTypeRequest is a convenience function that returns AddMappingScimResourceTypeRequest wrapped in AddScimResourceTypeRequest
func AddMappingScimResourceTypeRequestAsAddScimResourceTypeRequest(v *AddMappingScimResourceTypeRequest) AddScimResourceTypeRequest {
	return AddScimResourceTypeRequest{
		AddMappingScimResourceTypeRequest: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddScimResourceTypeRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddLdapMappingScimResourceTypeRequest
	err = newStrictDecoder(data).Decode(&dst.AddLdapMappingScimResourceTypeRequest)
	if err == nil {
		jsonAddLdapMappingScimResourceTypeRequest, _ := json.Marshal(dst.AddLdapMappingScimResourceTypeRequest)
		if string(jsonAddLdapMappingScimResourceTypeRequest) == "{}" { // empty struct
			dst.AddLdapMappingScimResourceTypeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddLdapMappingScimResourceTypeRequest = nil
	}

	// try to unmarshal data into AddLdapPassThroughScimResourceTypeRequest
	err = newStrictDecoder(data).Decode(&dst.AddLdapPassThroughScimResourceTypeRequest)
	if err == nil {
		jsonAddLdapPassThroughScimResourceTypeRequest, _ := json.Marshal(dst.AddLdapPassThroughScimResourceTypeRequest)
		if string(jsonAddLdapPassThroughScimResourceTypeRequest) == "{}" { // empty struct
			dst.AddLdapPassThroughScimResourceTypeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddLdapPassThroughScimResourceTypeRequest = nil
	}

	// try to unmarshal data into AddMappingScimResourceTypeRequest
	err = newStrictDecoder(data).Decode(&dst.AddMappingScimResourceTypeRequest)
	if err == nil {
		jsonAddMappingScimResourceTypeRequest, _ := json.Marshal(dst.AddMappingScimResourceTypeRequest)
		if string(jsonAddMappingScimResourceTypeRequest) == "{}" { // empty struct
			dst.AddMappingScimResourceTypeRequest = nil
		} else {
			match++
		}
	} else {
		dst.AddMappingScimResourceTypeRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddLdapMappingScimResourceTypeRequest = nil
		dst.AddLdapPassThroughScimResourceTypeRequest = nil
		dst.AddMappingScimResourceTypeRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddScimResourceTypeRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddScimResourceTypeRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddScimResourceTypeRequest) MarshalJSON() ([]byte, error) {
	if src.AddLdapMappingScimResourceTypeRequest != nil {
		return json.Marshal(&src.AddLdapMappingScimResourceTypeRequest)
	}

	if src.AddLdapPassThroughScimResourceTypeRequest != nil {
		return json.Marshal(&src.AddLdapPassThroughScimResourceTypeRequest)
	}

	if src.AddMappingScimResourceTypeRequest != nil {
		return json.Marshal(&src.AddMappingScimResourceTypeRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddScimResourceTypeRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AddLdapMappingScimResourceTypeRequest != nil {
		return obj.AddLdapMappingScimResourceTypeRequest
	}

	if obj.AddLdapPassThroughScimResourceTypeRequest != nil {
		return obj.AddLdapPassThroughScimResourceTypeRequest
	}

	if obj.AddMappingScimResourceTypeRequest != nil {
		return obj.AddMappingScimResourceTypeRequest
	}

	// all schemas are nil
	return nil
}

type NullableAddScimResourceTypeRequest struct {
	value *AddScimResourceTypeRequest
	isSet bool
}

func (v NullableAddScimResourceTypeRequest) Get() *AddScimResourceTypeRequest {
	return v.value
}

func (v *NullableAddScimResourceTypeRequest) Set(val *AddScimResourceTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddScimResourceTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddScimResourceTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddScimResourceTypeRequest(val *AddScimResourceTypeRequest) *NullableAddScimResourceTypeRequest {
	return &NullableAddScimResourceTypeRequest{value: val, isSet: true}
}

func (v NullableAddScimResourceTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddScimResourceTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
