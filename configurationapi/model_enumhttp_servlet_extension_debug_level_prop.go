/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumhttpServletExtensionDebugLevelProp The minimum debug level that should be used for messages to be logged.
type EnumhttpServletExtensionDebugLevelProp string

// List of Enumhttp-servlet-extension-debugLevelProp
const (
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_SEVERE  EnumhttpServletExtensionDebugLevelProp = "severe"
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_WARNING EnumhttpServletExtensionDebugLevelProp = "warning"
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_INFO    EnumhttpServletExtensionDebugLevelProp = "info"
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_CONFIG  EnumhttpServletExtensionDebugLevelProp = "config"
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_FINE    EnumhttpServletExtensionDebugLevelProp = "fine"
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_FINER   EnumhttpServletExtensionDebugLevelProp = "finer"
	ENUMHTTPSERVLETEXTENSIONDEBUGLEVELPROP_FINEST  EnumhttpServletExtensionDebugLevelProp = "finest"
)

// All allowed values of EnumhttpServletExtensionDebugLevelProp enum
var AllowedEnumhttpServletExtensionDebugLevelPropEnumValues = []EnumhttpServletExtensionDebugLevelProp{
	"severe",
	"warning",
	"info",
	"config",
	"fine",
	"finer",
	"finest",
}

func (v *EnumhttpServletExtensionDebugLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhttpServletExtensionDebugLevelProp(value)
	for _, existing := range AllowedEnumhttpServletExtensionDebugLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhttpServletExtensionDebugLevelProp", value)
}

// NewEnumhttpServletExtensionDebugLevelPropFromValue returns a pointer to a valid EnumhttpServletExtensionDebugLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhttpServletExtensionDebugLevelPropFromValue(v string) (*EnumhttpServletExtensionDebugLevelProp, error) {
	ev := EnumhttpServletExtensionDebugLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhttpServletExtensionDebugLevelProp: valid values are %v", v, AllowedEnumhttpServletExtensionDebugLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhttpServletExtensionDebugLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumhttpServletExtensionDebugLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhttp-servlet-extension-debugLevelProp value
func (v EnumhttpServletExtensionDebugLevelProp) Ptr() *EnumhttpServletExtensionDebugLevelProp {
	return &v
}

type NullableEnumhttpServletExtensionDebugLevelProp struct {
	value *EnumhttpServletExtensionDebugLevelProp
	isSet bool
}

func (v NullableEnumhttpServletExtensionDebugLevelProp) Get() *EnumhttpServletExtensionDebugLevelProp {
	return v.value
}

func (v *NullableEnumhttpServletExtensionDebugLevelProp) Set(val *EnumhttpServletExtensionDebugLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhttpServletExtensionDebugLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhttpServletExtensionDebugLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhttpServletExtensionDebugLevelProp(val *EnumhttpServletExtensionDebugLevelProp) *NullableEnumhttpServletExtensionDebugLevelProp {
	return &NullableEnumhttpServletExtensionDebugLevelProp{value: val, isSet: true}
}

func (v NullableEnumhttpServletExtensionDebugLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhttpServletExtensionDebugLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
