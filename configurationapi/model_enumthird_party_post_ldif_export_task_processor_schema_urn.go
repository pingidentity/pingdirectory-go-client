/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn the model 'EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn'
type EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn string

// List of Enumthird-party-post-ldif-export-task-processorSchemaUrn
const (
	ENUMTHIRDPARTYPOSTLDIFEXPORTTASKPROCESSORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0POST_LDIF_EXPORT_TASK_PROCESSORTHIRD_PARTY EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:post-ldif-export-task-processor:third-party"
)

// All allowed values of EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn enum
var AllowedEnumthirdPartyPostLdifExportTaskProcessorSchemaUrnEnumValues = []EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:post-ldif-export-task-processor:third-party",
}

func (v *EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyPostLdifExportTaskProcessorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn", value)
}

// NewEnumthirdPartyPostLdifExportTaskProcessorSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyPostLdifExportTaskProcessorSchemaUrnFromValue(v string) (*EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn, error) {
	ev := EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyPostLdifExportTaskProcessorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyPostLdifExportTaskProcessorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-post-ldif-export-task-processorSchemaUrn value
func (v EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) Ptr() *EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn {
	return &v
}

type NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn struct {
	value *EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) Get() *EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) Set(val *EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn(val *EnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) *NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn {
	return &NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyPostLdifExportTaskProcessorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
