/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexpandTimestampVirtualAttributeSchemaUrn the model 'EnumexpandTimestampVirtualAttributeSchemaUrn'
type EnumexpandTimestampVirtualAttributeSchemaUrn string

// List of Enumexpand-timestamp-virtual-attributeSchemaUrn
const (
	ENUMEXPANDTIMESTAMPVIRTUALATTRIBUTESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VIRTUAL_ATTRIBUTEEXPAND_TIMESTAMP EnumexpandTimestampVirtualAttributeSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:virtual-attribute:expand-timestamp"
)

// All allowed values of EnumexpandTimestampVirtualAttributeSchemaUrn enum
var AllowedEnumexpandTimestampVirtualAttributeSchemaUrnEnumValues = []EnumexpandTimestampVirtualAttributeSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:virtual-attribute:expand-timestamp",
}

func (v *EnumexpandTimestampVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexpandTimestampVirtualAttributeSchemaUrn(value)
	for _, existing := range AllowedEnumexpandTimestampVirtualAttributeSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexpandTimestampVirtualAttributeSchemaUrn", value)
}

// NewEnumexpandTimestampVirtualAttributeSchemaUrnFromValue returns a pointer to a valid EnumexpandTimestampVirtualAttributeSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexpandTimestampVirtualAttributeSchemaUrnFromValue(v string) (*EnumexpandTimestampVirtualAttributeSchemaUrn, error) {
	ev := EnumexpandTimestampVirtualAttributeSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexpandTimestampVirtualAttributeSchemaUrn: valid values are %v", v, AllowedEnumexpandTimestampVirtualAttributeSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexpandTimestampVirtualAttributeSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumexpandTimestampVirtualAttributeSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexpand-timestamp-virtual-attributeSchemaUrn value
func (v EnumexpandTimestampVirtualAttributeSchemaUrn) Ptr() *EnumexpandTimestampVirtualAttributeSchemaUrn {
	return &v
}

type NullableEnumexpandTimestampVirtualAttributeSchemaUrn struct {
	value *EnumexpandTimestampVirtualAttributeSchemaUrn
	isSet bool
}

func (v NullableEnumexpandTimestampVirtualAttributeSchemaUrn) Get() *EnumexpandTimestampVirtualAttributeSchemaUrn {
	return v.value
}

func (v *NullableEnumexpandTimestampVirtualAttributeSchemaUrn) Set(val *EnumexpandTimestampVirtualAttributeSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexpandTimestampVirtualAttributeSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexpandTimestampVirtualAttributeSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexpandTimestampVirtualAttributeSchemaUrn(val *EnumexpandTimestampVirtualAttributeSchemaUrn) *NullableEnumexpandTimestampVirtualAttributeSchemaUrn {
	return &NullableEnumexpandTimestampVirtualAttributeSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumexpandTimestampVirtualAttributeSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexpandTimestampVirtualAttributeSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
