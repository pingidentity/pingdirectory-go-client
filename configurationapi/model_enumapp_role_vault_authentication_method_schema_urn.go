/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumappRoleVaultAuthenticationMethodSchemaUrn the model 'EnumappRoleVaultAuthenticationMethodSchemaUrn'
type EnumappRoleVaultAuthenticationMethodSchemaUrn string

// List of Enumapp-role-vault-authentication-methodSchemaUrn
const (
	ENUMAPPROLEVAULTAUTHENTICATIONMETHODSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0VAULT_AUTHENTICATION_METHODAPP_ROLE EnumappRoleVaultAuthenticationMethodSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:vault-authentication-method:app-role"
)

// All allowed values of EnumappRoleVaultAuthenticationMethodSchemaUrn enum
var AllowedEnumappRoleVaultAuthenticationMethodSchemaUrnEnumValues = []EnumappRoleVaultAuthenticationMethodSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:vault-authentication-method:app-role",
}

func (v *EnumappRoleVaultAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumappRoleVaultAuthenticationMethodSchemaUrn(value)
	for _, existing := range AllowedEnumappRoleVaultAuthenticationMethodSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumappRoleVaultAuthenticationMethodSchemaUrn", value)
}

// NewEnumappRoleVaultAuthenticationMethodSchemaUrnFromValue returns a pointer to a valid EnumappRoleVaultAuthenticationMethodSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumappRoleVaultAuthenticationMethodSchemaUrnFromValue(v string) (*EnumappRoleVaultAuthenticationMethodSchemaUrn, error) {
	ev := EnumappRoleVaultAuthenticationMethodSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumappRoleVaultAuthenticationMethodSchemaUrn: valid values are %v", v, AllowedEnumappRoleVaultAuthenticationMethodSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumappRoleVaultAuthenticationMethodSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumappRoleVaultAuthenticationMethodSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumapp-role-vault-authentication-methodSchemaUrn value
func (v EnumappRoleVaultAuthenticationMethodSchemaUrn) Ptr() *EnumappRoleVaultAuthenticationMethodSchemaUrn {
	return &v
}

type NullableEnumappRoleVaultAuthenticationMethodSchemaUrn struct {
	value *EnumappRoleVaultAuthenticationMethodSchemaUrn
	isSet bool
}

func (v NullableEnumappRoleVaultAuthenticationMethodSchemaUrn) Get() *EnumappRoleVaultAuthenticationMethodSchemaUrn {
	return v.value
}

func (v *NullableEnumappRoleVaultAuthenticationMethodSchemaUrn) Set(val *EnumappRoleVaultAuthenticationMethodSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumappRoleVaultAuthenticationMethodSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumappRoleVaultAuthenticationMethodSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumappRoleVaultAuthenticationMethodSchemaUrn(val *EnumappRoleVaultAuthenticationMethodSchemaUrn) *NullableEnumappRoleVaultAuthenticationMethodSchemaUrn {
	return &NullableEnumappRoleVaultAuthenticationMethodSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumappRoleVaultAuthenticationMethodSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumappRoleVaultAuthenticationMethodSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
