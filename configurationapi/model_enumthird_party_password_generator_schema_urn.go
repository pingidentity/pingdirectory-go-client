/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyPasswordGeneratorSchemaUrn the model 'EnumthirdPartyPasswordGeneratorSchemaUrn'
type EnumthirdPartyPasswordGeneratorSchemaUrn string

// List of Enumthird-party-password-generatorSchemaUrn
const (
	ENUMTHIRDPARTYPASSWORDGENERATORSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASSWORD_GENERATORTHIRD_PARTY EnumthirdPartyPasswordGeneratorSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:password-generator:third-party"
)

// All allowed values of EnumthirdPartyPasswordGeneratorSchemaUrn enum
var AllowedEnumthirdPartyPasswordGeneratorSchemaUrnEnumValues = []EnumthirdPartyPasswordGeneratorSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:password-generator:third-party",
}

func (v *EnumthirdPartyPasswordGeneratorSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyPasswordGeneratorSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyPasswordGeneratorSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyPasswordGeneratorSchemaUrn", value)
}

// NewEnumthirdPartyPasswordGeneratorSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyPasswordGeneratorSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyPasswordGeneratorSchemaUrnFromValue(v string) (*EnumthirdPartyPasswordGeneratorSchemaUrn, error) {
	ev := EnumthirdPartyPasswordGeneratorSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyPasswordGeneratorSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyPasswordGeneratorSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyPasswordGeneratorSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyPasswordGeneratorSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-password-generatorSchemaUrn value
func (v EnumthirdPartyPasswordGeneratorSchemaUrn) Ptr() *EnumthirdPartyPasswordGeneratorSchemaUrn {
	return &v
}

type NullableEnumthirdPartyPasswordGeneratorSchemaUrn struct {
	value *EnumthirdPartyPasswordGeneratorSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyPasswordGeneratorSchemaUrn) Get() *EnumthirdPartyPasswordGeneratorSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyPasswordGeneratorSchemaUrn) Set(val *EnumthirdPartyPasswordGeneratorSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyPasswordGeneratorSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyPasswordGeneratorSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyPasswordGeneratorSchemaUrn(val *EnumthirdPartyPasswordGeneratorSchemaUrn) *NullableEnumthirdPartyPasswordGeneratorSchemaUrn {
	return &NullableEnumthirdPartyPasswordGeneratorSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyPasswordGeneratorSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyPasswordGeneratorSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
