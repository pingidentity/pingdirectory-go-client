/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnummemoryBackendSchemaUrn the model 'EnummemoryBackendSchemaUrn'
type EnummemoryBackendSchemaUrn string

// List of Enummemory-backendSchemaUrn
const (
	ENUMMEMORYBACKENDSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0BACKENDMEMORY EnummemoryBackendSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:backend:memory"
)

// All allowed values of EnummemoryBackendSchemaUrn enum
var AllowedEnummemoryBackendSchemaUrnEnumValues = []EnummemoryBackendSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:backend:memory",
}

func (v *EnummemoryBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummemoryBackendSchemaUrn(value)
	for _, existing := range AllowedEnummemoryBackendSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummemoryBackendSchemaUrn", value)
}

// NewEnummemoryBackendSchemaUrnFromValue returns a pointer to a valid EnummemoryBackendSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummemoryBackendSchemaUrnFromValue(v string) (*EnummemoryBackendSchemaUrn, error) {
	ev := EnummemoryBackendSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummemoryBackendSchemaUrn: valid values are %v", v, AllowedEnummemoryBackendSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummemoryBackendSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummemoryBackendSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummemory-backendSchemaUrn value
func (v EnummemoryBackendSchemaUrn) Ptr() *EnummemoryBackendSchemaUrn {
	return &v
}

type NullableEnummemoryBackendSchemaUrn struct {
	value *EnummemoryBackendSchemaUrn
	isSet bool
}

func (v NullableEnummemoryBackendSchemaUrn) Get() *EnummemoryBackendSchemaUrn {
	return v.value
}

func (v *NullableEnummemoryBackendSchemaUrn) Set(val *EnummemoryBackendSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummemoryBackendSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummemoryBackendSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummemoryBackendSchemaUrn(val *EnummemoryBackendSchemaUrn) *NullableEnummemoryBackendSchemaUrn {
	return &NullableEnummemoryBackendSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummemoryBackendSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummemoryBackendSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
