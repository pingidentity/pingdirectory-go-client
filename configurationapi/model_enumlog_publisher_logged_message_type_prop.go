/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumlogPublisherLoggedMessageTypeProp Specifies the types of sync messages that will be logged.
type EnumlogPublisherLoggedMessageTypeProp string

// List of Enumlog-publisher-loggedMessageTypeProp
const (
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_DETECTED                  EnumlogPublisherLoggedMessageTypeProp = "change-detected"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_DETECTED_DETAILED         EnumlogPublisherLoggedMessageTypeProp = "change-detected-detailed"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_DROPPED_OUT_OF_SCOPE             EnumlogPublisherLoggedMessageTypeProp = "dropped-out-of-scope"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_DROPPED_OP_TYPE_NOT_SYNCHRONIZED EnumlogPublisherLoggedMessageTypeProp = "dropped-op-type-not-synchronized"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_NO_CHANGE_NEEDED                 EnumlogPublisherLoggedMessageTypeProp = "no-change-needed"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_SYNCHRONIZING_OUT_OF_DATE_CHANGE EnumlogPublisherLoggedMessageTypeProp = "synchronizing-out-of-date-change"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_ENTRY_MAPPING_DETAILS            EnumlogPublisherLoggedMessageTypeProp = "entry-mapping-details"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_APPLIED                   EnumlogPublisherLoggedMessageTypeProp = "change-applied"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_APPLIED_DETAILED          EnumlogPublisherLoggedMessageTypeProp = "change-applied-detailed"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_FAILED                    EnumlogPublisherLoggedMessageTypeProp = "change-failed"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_FAILED_DETAILED           EnumlogPublisherLoggedMessageTypeProp = "change-failed-detailed"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_CHANGE_IGNORED                   EnumlogPublisherLoggedMessageTypeProp = "change-ignored"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_INTERMEDIATE_FAILURE             EnumlogPublisherLoggedMessageTypeProp = "intermediate-failure"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_ABORTED_BY_PLUGIN                EnumlogPublisherLoggedMessageTypeProp = "aborted-by-plugin"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_PLUGIN_ERROR                     EnumlogPublisherLoggedMessageTypeProp = "plugin-error"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_PLUGIN                           EnumlogPublisherLoggedMessageTypeProp = "plugin"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_PLUGIN_DEBUG                     EnumlogPublisherLoggedMessageTypeProp = "plugin-debug"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_MAPPING_WARNING                  EnumlogPublisherLoggedMessageTypeProp = "mapping-warning"
	ENUMLOGPUBLISHERLOGGEDMESSAGETYPEPROP_ENDPOINT_WARNING                 EnumlogPublisherLoggedMessageTypeProp = "endpoint-warning"
)

// All allowed values of EnumlogPublisherLoggedMessageTypeProp enum
var AllowedEnumlogPublisherLoggedMessageTypePropEnumValues = []EnumlogPublisherLoggedMessageTypeProp{
	"change-detected",
	"change-detected-detailed",
	"dropped-out-of-scope",
	"dropped-op-type-not-synchronized",
	"no-change-needed",
	"synchronizing-out-of-date-change",
	"entry-mapping-details",
	"change-applied",
	"change-applied-detailed",
	"change-failed",
	"change-failed-detailed",
	"change-ignored",
	"intermediate-failure",
	"aborted-by-plugin",
	"plugin-error",
	"plugin",
	"plugin-debug",
	"mapping-warning",
	"endpoint-warning",
}

func (v *EnumlogPublisherLoggedMessageTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumlogPublisherLoggedMessageTypeProp(value)
	for _, existing := range AllowedEnumlogPublisherLoggedMessageTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumlogPublisherLoggedMessageTypeProp", value)
}

// NewEnumlogPublisherLoggedMessageTypePropFromValue returns a pointer to a valid EnumlogPublisherLoggedMessageTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumlogPublisherLoggedMessageTypePropFromValue(v string) (*EnumlogPublisherLoggedMessageTypeProp, error) {
	ev := EnumlogPublisherLoggedMessageTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumlogPublisherLoggedMessageTypeProp: valid values are %v", v, AllowedEnumlogPublisherLoggedMessageTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumlogPublisherLoggedMessageTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumlogPublisherLoggedMessageTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumlog-publisher-loggedMessageTypeProp value
func (v EnumlogPublisherLoggedMessageTypeProp) Ptr() *EnumlogPublisherLoggedMessageTypeProp {
	return &v
}

type NullableEnumlogPublisherLoggedMessageTypeProp struct {
	value *EnumlogPublisherLoggedMessageTypeProp
	isSet bool
}

func (v NullableEnumlogPublisherLoggedMessageTypeProp) Get() *EnumlogPublisherLoggedMessageTypeProp {
	return v.value
}

func (v *NullableEnumlogPublisherLoggedMessageTypeProp) Set(val *EnumlogPublisherLoggedMessageTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumlogPublisherLoggedMessageTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumlogPublisherLoggedMessageTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumlogPublisherLoggedMessageTypeProp(val *EnumlogPublisherLoggedMessageTypeProp) *NullableEnumlogPublisherLoggedMessageTypeProp {
	return &NullableEnumlogPublisherLoggedMessageTypeProp{value: val, isSet: true}
}

func (v NullableEnumlogPublisherLoggedMessageTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumlogPublisherLoggedMessageTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
