/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddArgon2dPasswordStorageSchemeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddArgon2dPasswordStorageSchemeRequest{}

// AddArgon2dPasswordStorageSchemeRequest struct for AddArgon2dPasswordStorageSchemeRequest
type AddArgon2dPasswordStorageSchemeRequest struct {
	Schemas []Enumargon2dPasswordStorageSchemeSchemaUrn `json:"schemas"`
	// The number of rounds of cryptographic processing required in the course of encoding each password.
	IterationCount int64 `json:"iterationCount"`
	// The number of concurrent threads that will be used in the course of encoding each password.
	ParallelismFactor int64 `json:"parallelismFactor"`
	// The number of kilobytes of memory that must be used in the course of encoding each password.
	MemoryUsageKb int64 `json:"memoryUsageKb"`
	// The number of bytes to use for the generated salt.
	SaltLengthBytes int64 `json:"saltLengthBytes"`
	// The number of bytes to use for the derived key. The value must be greater than or equal to 8 and less than or equal to 512.
	DerivedKeyLengthBytes int64 `json:"derivedKeyLengthBytes"`
	// A description for this Password Storage Scheme
	Description *string `json:"description,omitempty"`
	// Indicates whether the Password Storage Scheme is enabled for use.
	Enabled bool `json:"enabled"`
	// Name of the new Password Storage Scheme
	SchemeName string `json:"schemeName"`
}

// NewAddArgon2dPasswordStorageSchemeRequest instantiates a new AddArgon2dPasswordStorageSchemeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddArgon2dPasswordStorageSchemeRequest(schemas []Enumargon2dPasswordStorageSchemeSchemaUrn, iterationCount int64, parallelismFactor int64, memoryUsageKb int64, saltLengthBytes int64, derivedKeyLengthBytes int64, enabled bool, schemeName string) *AddArgon2dPasswordStorageSchemeRequest {
	this := AddArgon2dPasswordStorageSchemeRequest{}
	this.Schemas = schemas
	this.IterationCount = iterationCount
	this.ParallelismFactor = parallelismFactor
	this.MemoryUsageKb = memoryUsageKb
	this.SaltLengthBytes = saltLengthBytes
	this.DerivedKeyLengthBytes = derivedKeyLengthBytes
	this.Enabled = enabled
	this.SchemeName = schemeName
	return &this
}

// NewAddArgon2dPasswordStorageSchemeRequestWithDefaults instantiates a new AddArgon2dPasswordStorageSchemeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddArgon2dPasswordStorageSchemeRequestWithDefaults() *AddArgon2dPasswordStorageSchemeRequest {
	this := AddArgon2dPasswordStorageSchemeRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetSchemas() []Enumargon2dPasswordStorageSchemeSchemaUrn {
	if o == nil {
		var ret []Enumargon2dPasswordStorageSchemeSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetSchemasOk() ([]Enumargon2dPasswordStorageSchemeSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetSchemas(v []Enumargon2dPasswordStorageSchemeSchemaUrn) {
	o.Schemas = v
}

// GetIterationCount returns the IterationCount field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetIterationCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IterationCount
}

// GetIterationCountOk returns a tuple with the IterationCount field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetIterationCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IterationCount, true
}

// SetIterationCount sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetIterationCount(v int64) {
	o.IterationCount = v
}

// GetParallelismFactor returns the ParallelismFactor field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetParallelismFactor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ParallelismFactor
}

// GetParallelismFactorOk returns a tuple with the ParallelismFactor field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetParallelismFactorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParallelismFactor, true
}

// SetParallelismFactor sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetParallelismFactor(v int64) {
	o.ParallelismFactor = v
}

// GetMemoryUsageKb returns the MemoryUsageKb field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetMemoryUsageKb() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MemoryUsageKb
}

// GetMemoryUsageKbOk returns a tuple with the MemoryUsageKb field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetMemoryUsageKbOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryUsageKb, true
}

// SetMemoryUsageKb sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetMemoryUsageKb(v int64) {
	o.MemoryUsageKb = v
}

// GetSaltLengthBytes returns the SaltLengthBytes field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetSaltLengthBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SaltLengthBytes
}

// GetSaltLengthBytesOk returns a tuple with the SaltLengthBytes field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetSaltLengthBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaltLengthBytes, true
}

// SetSaltLengthBytes sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetSaltLengthBytes(v int64) {
	o.SaltLengthBytes = v
}

// GetDerivedKeyLengthBytes returns the DerivedKeyLengthBytes field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetDerivedKeyLengthBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DerivedKeyLengthBytes
}

// GetDerivedKeyLengthBytesOk returns a tuple with the DerivedKeyLengthBytes field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetDerivedKeyLengthBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DerivedKeyLengthBytes, true
}

// SetDerivedKeyLengthBytes sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetDerivedKeyLengthBytes(v int64) {
	o.DerivedKeyLengthBytes = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddArgon2dPasswordStorageSchemeRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSchemeName returns the SchemeName field value
func (o *AddArgon2dPasswordStorageSchemeRequest) GetSchemeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemeName
}

// GetSchemeNameOk returns a tuple with the SchemeName field value
// and a boolean to check if the value has been set.
func (o *AddArgon2dPasswordStorageSchemeRequest) GetSchemeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemeName, true
}

// SetSchemeName sets field value
func (o *AddArgon2dPasswordStorageSchemeRequest) SetSchemeName(v string) {
	o.SchemeName = v
}

func (o AddArgon2dPasswordStorageSchemeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddArgon2dPasswordStorageSchemeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	toSerialize["iterationCount"] = o.IterationCount
	toSerialize["parallelismFactor"] = o.ParallelismFactor
	toSerialize["memoryUsageKb"] = o.MemoryUsageKb
	toSerialize["saltLengthBytes"] = o.SaltLengthBytes
	toSerialize["derivedKeyLengthBytes"] = o.DerivedKeyLengthBytes
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["schemeName"] = o.SchemeName
	return toSerialize, nil
}

type NullableAddArgon2dPasswordStorageSchemeRequest struct {
	value *AddArgon2dPasswordStorageSchemeRequest
	isSet bool
}

func (v NullableAddArgon2dPasswordStorageSchemeRequest) Get() *AddArgon2dPasswordStorageSchemeRequest {
	return v.value
}

func (v *NullableAddArgon2dPasswordStorageSchemeRequest) Set(val *AddArgon2dPasswordStorageSchemeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddArgon2dPasswordStorageSchemeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddArgon2dPasswordStorageSchemeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddArgon2dPasswordStorageSchemeRequest(val *AddArgon2dPasswordStorageSchemeRequest) *NullableAddArgon2dPasswordStorageSchemeRequest {
	return &NullableAddArgon2dPasswordStorageSchemeRequest{value: val, isSet: true}
}

func (v NullableAddArgon2dPasswordStorageSchemeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddArgon2dPasswordStorageSchemeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
