/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreferentialIntegrityPluginSchemaUrn the model 'EnumreferentialIntegrityPluginSchemaUrn'
type EnumreferentialIntegrityPluginSchemaUrn string

// List of Enumreferential-integrity-pluginSchemaUrn
const (
	ENUMREFERENTIALINTEGRITYPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINREFERENTIAL_INTEGRITY EnumreferentialIntegrityPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:referential-integrity"
)

// All allowed values of EnumreferentialIntegrityPluginSchemaUrn enum
var AllowedEnumreferentialIntegrityPluginSchemaUrnEnumValues = []EnumreferentialIntegrityPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:referential-integrity",
}

func (v *EnumreferentialIntegrityPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreferentialIntegrityPluginSchemaUrn(value)
	for _, existing := range AllowedEnumreferentialIntegrityPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreferentialIntegrityPluginSchemaUrn", value)
}

// NewEnumreferentialIntegrityPluginSchemaUrnFromValue returns a pointer to a valid EnumreferentialIntegrityPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreferentialIntegrityPluginSchemaUrnFromValue(v string) (*EnumreferentialIntegrityPluginSchemaUrn, error) {
	ev := EnumreferentialIntegrityPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreferentialIntegrityPluginSchemaUrn: valid values are %v", v, AllowedEnumreferentialIntegrityPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreferentialIntegrityPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumreferentialIntegrityPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreferential-integrity-pluginSchemaUrn value
func (v EnumreferentialIntegrityPluginSchemaUrn) Ptr() *EnumreferentialIntegrityPluginSchemaUrn {
	return &v
}

type NullableEnumreferentialIntegrityPluginSchemaUrn struct {
	value *EnumreferentialIntegrityPluginSchemaUrn
	isSet bool
}

func (v NullableEnumreferentialIntegrityPluginSchemaUrn) Get() *EnumreferentialIntegrityPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumreferentialIntegrityPluginSchemaUrn) Set(val *EnumreferentialIntegrityPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreferentialIntegrityPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreferentialIntegrityPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreferentialIntegrityPluginSchemaUrn(val *EnumreferentialIntegrityPluginSchemaUrn) *NullableEnumreferentialIntegrityPluginSchemaUrn {
	return &NullableEnumreferentialIntegrityPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumreferentialIntegrityPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreferentialIntegrityPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
