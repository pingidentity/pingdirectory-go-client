/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpingOnePassThroughAuthenticationHandlerSchemaUrn the model 'EnumpingOnePassThroughAuthenticationHandlerSchemaUrn'
type EnumpingOnePassThroughAuthenticationHandlerSchemaUrn string

// List of Enumping-one-pass-through-authentication-handlerSchemaUrn
const (
	ENUMPINGONEPASSTHROUGHAUTHENTICATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PASS_THROUGH_AUTHENTICATION_HANDLERPING_ONE EnumpingOnePassThroughAuthenticationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:pass-through-authentication-handler:ping-one"
)

// All allowed values of EnumpingOnePassThroughAuthenticationHandlerSchemaUrn enum
var AllowedEnumpingOnePassThroughAuthenticationHandlerSchemaUrnEnumValues = []EnumpingOnePassThroughAuthenticationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:pass-through-authentication-handler:ping-one",
}

func (v *EnumpingOnePassThroughAuthenticationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpingOnePassThroughAuthenticationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumpingOnePassThroughAuthenticationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpingOnePassThroughAuthenticationHandlerSchemaUrn", value)
}

// NewEnumpingOnePassThroughAuthenticationHandlerSchemaUrnFromValue returns a pointer to a valid EnumpingOnePassThroughAuthenticationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpingOnePassThroughAuthenticationHandlerSchemaUrnFromValue(v string) (*EnumpingOnePassThroughAuthenticationHandlerSchemaUrn, error) {
	ev := EnumpingOnePassThroughAuthenticationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpingOnePassThroughAuthenticationHandlerSchemaUrn: valid values are %v", v, AllowedEnumpingOnePassThroughAuthenticationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpingOnePassThroughAuthenticationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpingOnePassThroughAuthenticationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumping-one-pass-through-authentication-handlerSchemaUrn value
func (v EnumpingOnePassThroughAuthenticationHandlerSchemaUrn) Ptr() *EnumpingOnePassThroughAuthenticationHandlerSchemaUrn {
	return &v
}

type NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn struct {
	value *EnumpingOnePassThroughAuthenticationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn) Get() *EnumpingOnePassThroughAuthenticationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn) Set(val *EnumpingOnePassThroughAuthenticationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn(val *EnumpingOnePassThroughAuthenticationHandlerSchemaUrn) *NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn {
	return &NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpingOnePassThroughAuthenticationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
