/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumcustomKeyManagerProviderSchemaUrn the model 'EnumcustomKeyManagerProviderSchemaUrn'
type EnumcustomKeyManagerProviderSchemaUrn string

// List of Enumcustom-key-manager-providerSchemaUrn
const (
	ENUMCUSTOMKEYMANAGERPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0KEY_MANAGER_PROVIDERCUSTOM EnumcustomKeyManagerProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:key-manager-provider:custom"
)

// All allowed values of EnumcustomKeyManagerProviderSchemaUrn enum
var AllowedEnumcustomKeyManagerProviderSchemaUrnEnumValues = []EnumcustomKeyManagerProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:key-manager-provider:custom",
}

func (v *EnumcustomKeyManagerProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumcustomKeyManagerProviderSchemaUrn(value)
	for _, existing := range AllowedEnumcustomKeyManagerProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumcustomKeyManagerProviderSchemaUrn", value)
}

// NewEnumcustomKeyManagerProviderSchemaUrnFromValue returns a pointer to a valid EnumcustomKeyManagerProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumcustomKeyManagerProviderSchemaUrnFromValue(v string) (*EnumcustomKeyManagerProviderSchemaUrn, error) {
	ev := EnumcustomKeyManagerProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumcustomKeyManagerProviderSchemaUrn: valid values are %v", v, AllowedEnumcustomKeyManagerProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumcustomKeyManagerProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumcustomKeyManagerProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumcustom-key-manager-providerSchemaUrn value
func (v EnumcustomKeyManagerProviderSchemaUrn) Ptr() *EnumcustomKeyManagerProviderSchemaUrn {
	return &v
}

type NullableEnumcustomKeyManagerProviderSchemaUrn struct {
	value *EnumcustomKeyManagerProviderSchemaUrn
	isSet bool
}

func (v NullableEnumcustomKeyManagerProviderSchemaUrn) Get() *EnumcustomKeyManagerProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumcustomKeyManagerProviderSchemaUrn) Set(val *EnumcustomKeyManagerProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumcustomKeyManagerProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumcustomKeyManagerProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumcustomKeyManagerProviderSchemaUrn(val *EnumcustomKeyManagerProviderSchemaUrn) *NullableEnumcustomKeyManagerProviderSchemaUrn {
	return &NullableEnumcustomKeyManagerProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumcustomKeyManagerProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumcustomKeyManagerProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
