/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SynchronizationProviderApiService SynchronizationProviderApi service
type SynchronizationProviderApiService service

type ApiGetSynchronizationProviderRequest struct {
	ctx                         context.Context
	ApiService                  *SynchronizationProviderApiService
	synchronizationProviderName string
}

func (r ApiGetSynchronizationProviderRequest) Execute() (*ReplicationSynchronizationProviderResponse, *http.Response, error) {
	return r.ApiService.GetSynchronizationProviderExecute(r)
}

/*
GetSynchronizationProvider Returns a single Synchronization Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param synchronizationProviderName Name of the Synchronization Provider
	@return ApiGetSynchronizationProviderRequest
*/
func (a *SynchronizationProviderApiService) GetSynchronizationProvider(ctx context.Context, synchronizationProviderName string) ApiGetSynchronizationProviderRequest {
	return ApiGetSynchronizationProviderRequest{
		ApiService:                  a,
		ctx:                         ctx,
		synchronizationProviderName: synchronizationProviderName,
	}
}

// Execute executes the request
//
//	@return ReplicationSynchronizationProviderResponse
func (a *SynchronizationProviderApiService) GetSynchronizationProviderExecute(r ApiGetSynchronizationProviderRequest) (*ReplicationSynchronizationProviderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReplicationSynchronizationProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SynchronizationProviderApiService.GetSynchronizationProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synchronization-providers/{synchronization-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"synchronization-provider-name"+"}", url.PathEscape(parameterValueToString(r.synchronizationProviderName, "synchronizationProviderName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSynchronizationProviderRequest struct {
	ctx                         context.Context
	ApiService                  *SynchronizationProviderApiService
	synchronizationProviderName string
	updateRequest               *UpdateRequest
}

// Update an existing Synchronization Provider
func (r ApiUpdateSynchronizationProviderRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateSynchronizationProviderRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateSynchronizationProviderRequest) Execute() (*ReplicationSynchronizationProviderResponse, *http.Response, error) {
	return r.ApiService.UpdateSynchronizationProviderExecute(r)
}

/*
UpdateSynchronizationProvider Update an existing Synchronization Provider by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param synchronizationProviderName Name of the Synchronization Provider
	@return ApiUpdateSynchronizationProviderRequest
*/
func (a *SynchronizationProviderApiService) UpdateSynchronizationProvider(ctx context.Context, synchronizationProviderName string) ApiUpdateSynchronizationProviderRequest {
	return ApiUpdateSynchronizationProviderRequest{
		ApiService:                  a,
		ctx:                         ctx,
		synchronizationProviderName: synchronizationProviderName,
	}
}

// Execute executes the request
//
//	@return ReplicationSynchronizationProviderResponse
func (a *SynchronizationProviderApiService) UpdateSynchronizationProviderExecute(r ApiUpdateSynchronizationProviderRequest) (*ReplicationSynchronizationProviderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReplicationSynchronizationProviderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SynchronizationProviderApiService.UpdateSynchronizationProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synchronization-providers/{synchronization-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"synchronization-provider-name"+"}", url.PathEscape(parameterValueToString(r.synchronizationProviderName, "synchronizationProviderName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
