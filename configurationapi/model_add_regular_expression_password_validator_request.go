/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddRegularExpressionPasswordValidatorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddRegularExpressionPasswordValidatorRequest{}

// AddRegularExpressionPasswordValidatorRequest struct for AddRegularExpressionPasswordValidatorRequest
type AddRegularExpressionPasswordValidatorRequest struct {
	// Name of the new Password Validator
	ValidatorName string                                            `json:"validatorName"`
	Schemas       []EnumregularExpressionPasswordValidatorSchemaUrn `json:"schemas"`
	// The regular expression to use for this password validator.
	MatchPattern  string                                 `json:"matchPattern"`
	MatchBehavior EnumpasswordValidatorMatchBehaviorProp `json:"matchBehavior"`
	// A description for this Password Validator
	Description *string `json:"description,omitempty"`
	// Indicates whether the password validator is enabled for use.
	Enabled bool `json:"enabled"`
	// Specifies a message that can be used to describe the requirements imposed by this password validator to end users. If a value is provided for this property, then it will override any description that may have otherwise been generated by the validator.
	ValidatorRequirementDescription *string `json:"validatorRequirementDescription,omitempty"`
	// Specifies a message that may be provided to the end user in the event that a proposed password is rejected by this validator. If a value is provided for this property, then it will override any failure message that may have otherwise been generated by the validator.
	ValidatorFailureMessage *string `json:"validatorFailureMessage,omitempty"`
}

// NewAddRegularExpressionPasswordValidatorRequest instantiates a new AddRegularExpressionPasswordValidatorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRegularExpressionPasswordValidatorRequest(validatorName string, schemas []EnumregularExpressionPasswordValidatorSchemaUrn, matchPattern string, matchBehavior EnumpasswordValidatorMatchBehaviorProp, enabled bool) *AddRegularExpressionPasswordValidatorRequest {
	this := AddRegularExpressionPasswordValidatorRequest{}
	this.ValidatorName = validatorName
	this.Schemas = schemas
	this.MatchPattern = matchPattern
	this.MatchBehavior = matchBehavior
	this.Enabled = enabled
	return &this
}

// NewAddRegularExpressionPasswordValidatorRequestWithDefaults instantiates a new AddRegularExpressionPasswordValidatorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRegularExpressionPasswordValidatorRequestWithDefaults() *AddRegularExpressionPasswordValidatorRequest {
	this := AddRegularExpressionPasswordValidatorRequest{}
	return &this
}

// GetValidatorName returns the ValidatorName field value
func (o *AddRegularExpressionPasswordValidatorRequest) GetValidatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValidatorName
}

// GetValidatorNameOk returns a tuple with the ValidatorName field value
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetValidatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidatorName, true
}

// SetValidatorName sets field value
func (o *AddRegularExpressionPasswordValidatorRequest) SetValidatorName(v string) {
	o.ValidatorName = v
}

// GetSchemas returns the Schemas field value
func (o *AddRegularExpressionPasswordValidatorRequest) GetSchemas() []EnumregularExpressionPasswordValidatorSchemaUrn {
	if o == nil {
		var ret []EnumregularExpressionPasswordValidatorSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetSchemasOk() ([]EnumregularExpressionPasswordValidatorSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddRegularExpressionPasswordValidatorRequest) SetSchemas(v []EnumregularExpressionPasswordValidatorSchemaUrn) {
	o.Schemas = v
}

// GetMatchPattern returns the MatchPattern field value
func (o *AddRegularExpressionPasswordValidatorRequest) GetMatchPattern() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MatchPattern
}

// GetMatchPatternOk returns a tuple with the MatchPattern field value
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetMatchPatternOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchPattern, true
}

// SetMatchPattern sets field value
func (o *AddRegularExpressionPasswordValidatorRequest) SetMatchPattern(v string) {
	o.MatchPattern = v
}

// GetMatchBehavior returns the MatchBehavior field value
func (o *AddRegularExpressionPasswordValidatorRequest) GetMatchBehavior() EnumpasswordValidatorMatchBehaviorProp {
	if o == nil {
		var ret EnumpasswordValidatorMatchBehaviorProp
		return ret
	}

	return o.MatchBehavior
}

// GetMatchBehaviorOk returns a tuple with the MatchBehavior field value
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetMatchBehaviorOk() (*EnumpasswordValidatorMatchBehaviorProp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchBehavior, true
}

// SetMatchBehavior sets field value
func (o *AddRegularExpressionPasswordValidatorRequest) SetMatchBehavior(v EnumpasswordValidatorMatchBehaviorProp) {
	o.MatchBehavior = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddRegularExpressionPasswordValidatorRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddRegularExpressionPasswordValidatorRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddRegularExpressionPasswordValidatorRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddRegularExpressionPasswordValidatorRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetValidatorRequirementDescription returns the ValidatorRequirementDescription field value if set, zero value otherwise.
func (o *AddRegularExpressionPasswordValidatorRequest) GetValidatorRequirementDescription() string {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		var ret string
		return ret
	}
	return *o.ValidatorRequirementDescription
}

// GetValidatorRequirementDescriptionOk returns a tuple with the ValidatorRequirementDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetValidatorRequirementDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorRequirementDescription) {
		return nil, false
	}
	return o.ValidatorRequirementDescription, true
}

// HasValidatorRequirementDescription returns a boolean if a field has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) HasValidatorRequirementDescription() bool {
	if o != nil && !IsNil(o.ValidatorRequirementDescription) {
		return true
	}

	return false
}

// SetValidatorRequirementDescription gets a reference to the given string and assigns it to the ValidatorRequirementDescription field.
func (o *AddRegularExpressionPasswordValidatorRequest) SetValidatorRequirementDescription(v string) {
	o.ValidatorRequirementDescription = &v
}

// GetValidatorFailureMessage returns the ValidatorFailureMessage field value if set, zero value otherwise.
func (o *AddRegularExpressionPasswordValidatorRequest) GetValidatorFailureMessage() string {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		var ret string
		return ret
	}
	return *o.ValidatorFailureMessage
}

// GetValidatorFailureMessageOk returns a tuple with the ValidatorFailureMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) GetValidatorFailureMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatorFailureMessage) {
		return nil, false
	}
	return o.ValidatorFailureMessage, true
}

// HasValidatorFailureMessage returns a boolean if a field has been set.
func (o *AddRegularExpressionPasswordValidatorRequest) HasValidatorFailureMessage() bool {
	if o != nil && !IsNil(o.ValidatorFailureMessage) {
		return true
	}

	return false
}

// SetValidatorFailureMessage gets a reference to the given string and assigns it to the ValidatorFailureMessage field.
func (o *AddRegularExpressionPasswordValidatorRequest) SetValidatorFailureMessage(v string) {
	o.ValidatorFailureMessage = &v
}

func (o AddRegularExpressionPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddRegularExpressionPasswordValidatorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["validatorName"] = o.ValidatorName
	toSerialize["schemas"] = o.Schemas
	toSerialize["matchPattern"] = o.MatchPattern
	toSerialize["matchBehavior"] = o.MatchBehavior
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.ValidatorRequirementDescription) {
		toSerialize["validatorRequirementDescription"] = o.ValidatorRequirementDescription
	}
	if !IsNil(o.ValidatorFailureMessage) {
		toSerialize["validatorFailureMessage"] = o.ValidatorFailureMessage
	}
	return toSerialize, nil
}

type NullableAddRegularExpressionPasswordValidatorRequest struct {
	value *AddRegularExpressionPasswordValidatorRequest
	isSet bool
}

func (v NullableAddRegularExpressionPasswordValidatorRequest) Get() *AddRegularExpressionPasswordValidatorRequest {
	return v.value
}

func (v *NullableAddRegularExpressionPasswordValidatorRequest) Set(val *AddRegularExpressionPasswordValidatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRegularExpressionPasswordValidatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRegularExpressionPasswordValidatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRegularExpressionPasswordValidatorRequest(val *AddRegularExpressionPasswordValidatorRequest) *NullableAddRegularExpressionPasswordValidatorRequest {
	return &NullableAddRegularExpressionPasswordValidatorRequest{value: val, isSet: true}
}

func (v NullableAddRegularExpressionPasswordValidatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRegularExpressionPasswordValidatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
