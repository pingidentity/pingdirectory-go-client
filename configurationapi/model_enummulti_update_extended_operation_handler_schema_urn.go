/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnummultiUpdateExtendedOperationHandlerSchemaUrn the model 'EnummultiUpdateExtendedOperationHandlerSchemaUrn'
type EnummultiUpdateExtendedOperationHandlerSchemaUrn string

// List of Enummulti-update-extended-operation-handlerSchemaUrn
const (
	ENUMMULTIUPDATEEXTENDEDOPERATIONHANDLERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERMULTI_UPDATE EnummultiUpdateExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:multi-update"
)

// All allowed values of EnummultiUpdateExtendedOperationHandlerSchemaUrn enum
var AllowedEnummultiUpdateExtendedOperationHandlerSchemaUrnEnumValues = []EnummultiUpdateExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:multi-update",
}

func (v *EnummultiUpdateExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnummultiUpdateExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnummultiUpdateExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnummultiUpdateExtendedOperationHandlerSchemaUrn", value)
}

// NewEnummultiUpdateExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnummultiUpdateExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnummultiUpdateExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnummultiUpdateExtendedOperationHandlerSchemaUrn, error) {
	ev := EnummultiUpdateExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnummultiUpdateExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnummultiUpdateExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnummultiUpdateExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnummultiUpdateExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enummulti-update-extended-operation-handlerSchemaUrn value
func (v EnummultiUpdateExtendedOperationHandlerSchemaUrn) Ptr() *EnummultiUpdateExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn struct {
	value *EnummultiUpdateExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn) Get() *EnummultiUpdateExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn) Set(val *EnummultiUpdateExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnummultiUpdateExtendedOperationHandlerSchemaUrn(val *EnummultiUpdateExtendedOperationHandlerSchemaUrn) *NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn {
	return &NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnummultiUpdateExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
