/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelegatedAdminResourceRightsAdminScopeProp Specifies the scope of these Delegated Admin Resource Rights.
type EnumdelegatedAdminResourceRightsAdminScopeProp string

// List of Enumdelegated-admin-resource-rights-adminScopeProp
const (
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINSCOPEPROP_RESOURCES_IN_SPECIFIC_GROUPS   EnumdelegatedAdminResourceRightsAdminScopeProp = "resources-in-specific-groups"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINSCOPEPROP_RESOURCES_IN_SPECIFIC_SUBTREES EnumdelegatedAdminResourceRightsAdminScopeProp = "resources-in-specific-subtrees"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINSCOPEPROP_ALL_RESOURCES_IN_BASE          EnumdelegatedAdminResourceRightsAdminScopeProp = "all-resources-in-base"
)

// All allowed values of EnumdelegatedAdminResourceRightsAdminScopeProp enum
var AllowedEnumdelegatedAdminResourceRightsAdminScopePropEnumValues = []EnumdelegatedAdminResourceRightsAdminScopeProp{
	"resources-in-specific-groups",
	"resources-in-specific-subtrees",
	"all-resources-in-base",
}

func (v *EnumdelegatedAdminResourceRightsAdminScopeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelegatedAdminResourceRightsAdminScopeProp(value)
	for _, existing := range AllowedEnumdelegatedAdminResourceRightsAdminScopePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelegatedAdminResourceRightsAdminScopeProp", value)
}

// NewEnumdelegatedAdminResourceRightsAdminScopePropFromValue returns a pointer to a valid EnumdelegatedAdminResourceRightsAdminScopeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelegatedAdminResourceRightsAdminScopePropFromValue(v string) (*EnumdelegatedAdminResourceRightsAdminScopeProp, error) {
	ev := EnumdelegatedAdminResourceRightsAdminScopeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelegatedAdminResourceRightsAdminScopeProp: valid values are %v", v, AllowedEnumdelegatedAdminResourceRightsAdminScopePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelegatedAdminResourceRightsAdminScopeProp) IsValid() bool {
	for _, existing := range AllowedEnumdelegatedAdminResourceRightsAdminScopePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelegated-admin-resource-rights-adminScopeProp value
func (v EnumdelegatedAdminResourceRightsAdminScopeProp) Ptr() *EnumdelegatedAdminResourceRightsAdminScopeProp {
	return &v
}

type NullableEnumdelegatedAdminResourceRightsAdminScopeProp struct {
	value *EnumdelegatedAdminResourceRightsAdminScopeProp
	isSet bool
}

func (v NullableEnumdelegatedAdminResourceRightsAdminScopeProp) Get() *EnumdelegatedAdminResourceRightsAdminScopeProp {
	return v.value
}

func (v *NullableEnumdelegatedAdminResourceRightsAdminScopeProp) Set(val *EnumdelegatedAdminResourceRightsAdminScopeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelegatedAdminResourceRightsAdminScopeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelegatedAdminResourceRightsAdminScopeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelegatedAdminResourceRightsAdminScopeProp(val *EnumdelegatedAdminResourceRightsAdminScopeProp) *NullableEnumdelegatedAdminResourceRightsAdminScopeProp {
	return &NullableEnumdelegatedAdminResourceRightsAdminScopeProp{value: val, isSet: true}
}

func (v NullableEnumdelegatedAdminResourceRightsAdminScopeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelegatedAdminResourceRightsAdminScopeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
