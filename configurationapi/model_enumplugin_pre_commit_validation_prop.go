/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumpluginPreCommitValidationProp Specifies the degree of validation that should be performed before a change request is forwarded to a backend server in order to ensure that the request will not result in a conflict with any existing entries. If a conflict is detected during pre-commit validation, the change will be rejected and will not be forwarded to any backend server.
type EnumpluginPreCommitValidationProp string

// List of Enumplugin-preCommitValidationProp
const (
	ENUMPLUGINPRECOMMITVALIDATIONPROP_NONE                          EnumpluginPreCommitValidationProp = "none"
	ENUMPLUGINPRECOMMITVALIDATIONPROP_ALL_SUBTREE_VIEWS             EnumpluginPreCommitValidationProp = "all-subtree-views"
	ENUMPLUGINPRECOMMITVALIDATIONPROP_ALL_BACKEND_SETS              EnumpluginPreCommitValidationProp = "all-backend-sets"
	ENUMPLUGINPRECOMMITVALIDATIONPROP_ALL_AVAILABLE_BACKEND_SERVERS EnumpluginPreCommitValidationProp = "all-available-backend-servers"
)

// All allowed values of EnumpluginPreCommitValidationProp enum
var AllowedEnumpluginPreCommitValidationPropEnumValues = []EnumpluginPreCommitValidationProp{
	"none",
	"all-subtree-views",
	"all-backend-sets",
	"all-available-backend-servers",
}

func (v *EnumpluginPreCommitValidationProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpluginPreCommitValidationProp(value)
	for _, existing := range AllowedEnumpluginPreCommitValidationPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpluginPreCommitValidationProp", value)
}

// NewEnumpluginPreCommitValidationPropFromValue returns a pointer to a valid EnumpluginPreCommitValidationProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpluginPreCommitValidationPropFromValue(v string) (*EnumpluginPreCommitValidationProp, error) {
	ev := EnumpluginPreCommitValidationProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpluginPreCommitValidationProp: valid values are %v", v, AllowedEnumpluginPreCommitValidationPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpluginPreCommitValidationProp) IsValid() bool {
	for _, existing := range AllowedEnumpluginPreCommitValidationPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumplugin-preCommitValidationProp value
func (v EnumpluginPreCommitValidationProp) Ptr() *EnumpluginPreCommitValidationProp {
	return &v
}

type NullableEnumpluginPreCommitValidationProp struct {
	value *EnumpluginPreCommitValidationProp
	isSet bool
}

func (v NullableEnumpluginPreCommitValidationProp) Get() *EnumpluginPreCommitValidationProp {
	return v.value
}

func (v *NullableEnumpluginPreCommitValidationProp) Set(val *EnumpluginPreCommitValidationProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpluginPreCommitValidationProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpluginPreCommitValidationProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpluginPreCommitValidationProp(val *EnumpluginPreCommitValidationProp) *NullableEnumpluginPreCommitValidationProp {
	return &NullableEnumpluginPreCommitValidationProp{value: val, isSet: true}
}

func (v NullableEnumpluginPreCommitValidationProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpluginPreCommitValidationProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
