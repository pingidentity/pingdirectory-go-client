/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumbooleanTokenClaimValidationSchemaUrn the model 'EnumbooleanTokenClaimValidationSchemaUrn'
type EnumbooleanTokenClaimValidationSchemaUrn string

// List of Enumboolean-token-claim-validationSchemaUrn
const (
	ENUMBOOLEANTOKENCLAIMVALIDATIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0TOKEN_CLAIM_VALIDATIONBOOLEAN EnumbooleanTokenClaimValidationSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:token-claim-validation:boolean"
)

// All allowed values of EnumbooleanTokenClaimValidationSchemaUrn enum
var AllowedEnumbooleanTokenClaimValidationSchemaUrnEnumValues = []EnumbooleanTokenClaimValidationSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:token-claim-validation:boolean",
}

func (v *EnumbooleanTokenClaimValidationSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbooleanTokenClaimValidationSchemaUrn(value)
	for _, existing := range AllowedEnumbooleanTokenClaimValidationSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbooleanTokenClaimValidationSchemaUrn", value)
}

// NewEnumbooleanTokenClaimValidationSchemaUrnFromValue returns a pointer to a valid EnumbooleanTokenClaimValidationSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbooleanTokenClaimValidationSchemaUrnFromValue(v string) (*EnumbooleanTokenClaimValidationSchemaUrn, error) {
	ev := EnumbooleanTokenClaimValidationSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbooleanTokenClaimValidationSchemaUrn: valid values are %v", v, AllowedEnumbooleanTokenClaimValidationSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbooleanTokenClaimValidationSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumbooleanTokenClaimValidationSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumboolean-token-claim-validationSchemaUrn value
func (v EnumbooleanTokenClaimValidationSchemaUrn) Ptr() *EnumbooleanTokenClaimValidationSchemaUrn {
	return &v
}

type NullableEnumbooleanTokenClaimValidationSchemaUrn struct {
	value *EnumbooleanTokenClaimValidationSchemaUrn
	isSet bool
}

func (v NullableEnumbooleanTokenClaimValidationSchemaUrn) Get() *EnumbooleanTokenClaimValidationSchemaUrn {
	return v.value
}

func (v *NullableEnumbooleanTokenClaimValidationSchemaUrn) Set(val *EnumbooleanTokenClaimValidationSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbooleanTokenClaimValidationSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbooleanTokenClaimValidationSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbooleanTokenClaimValidationSchemaUrn(val *EnumbooleanTokenClaimValidationSchemaUrn) *NullableEnumbooleanTokenClaimValidationSchemaUrn {
	return &NullableEnumbooleanTokenClaimValidationSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumbooleanTokenClaimValidationSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbooleanTokenClaimValidationSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
