/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ConsentDefinitionAPIService ConsentDefinitionAPI service
type ConsentDefinitionAPIService service

type ApiAddConsentDefinitionRequest struct {
	ctx                         context.Context
	ApiService                  *ConsentDefinitionAPIService
	addConsentDefinitionRequest *AddConsentDefinitionRequest
}

// Create a new Consent Definition in the config
func (r ApiAddConsentDefinitionRequest) AddConsentDefinitionRequest(addConsentDefinitionRequest AddConsentDefinitionRequest) ApiAddConsentDefinitionRequest {
	r.addConsentDefinitionRequest = &addConsentDefinitionRequest
	return r
}

func (r ApiAddConsentDefinitionRequest) Execute() (*ConsentDefinitionResponse, *http.Response, error) {
	return r.ApiService.AddConsentDefinitionExecute(r)
}

/*
AddConsentDefinition Add a new Consent Definition to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddConsentDefinitionRequest
*/
func (a *ConsentDefinitionAPIService) AddConsentDefinition(ctx context.Context) ApiAddConsentDefinitionRequest {
	return ApiAddConsentDefinitionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionResponse
func (a *ConsentDefinitionAPIService) AddConsentDefinitionExecute(r ApiAddConsentDefinitionRequest) (*ConsentDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionAPIService.AddConsentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addConsentDefinitionRequest == nil {
		return localVarReturnValue, nil, reportError("addConsentDefinitionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addConsentDefinitionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConsentDefinitionRequest struct {
	ctx                   context.Context
	ApiService            *ConsentDefinitionAPIService
	consentDefinitionName string
}

func (r ApiDeleteConsentDefinitionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConsentDefinitionExecute(r)
}

/*
DeleteConsentDefinition Delete a Consent Definition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionName Name of the Consent Definition
	@return ApiDeleteConsentDefinitionRequest
*/
func (a *ConsentDefinitionAPIService) DeleteConsentDefinition(ctx context.Context, consentDefinitionName string) ApiDeleteConsentDefinitionRequest {
	return ApiDeleteConsentDefinitionRequest{
		ApiService:            a,
		ctx:                   ctx,
		consentDefinitionName: consentDefinitionName,
	}
}

// Execute executes the request
func (a *ConsentDefinitionAPIService) DeleteConsentDefinitionExecute(r ApiDeleteConsentDefinitionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionAPIService.DeleteConsentDefinition")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterValueToString(r.consentDefinitionName, "consentDefinitionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConsentDefinitionRequest struct {
	ctx                   context.Context
	ApiService            *ConsentDefinitionAPIService
	consentDefinitionName string
}

func (r ApiGetConsentDefinitionRequest) Execute() (*ConsentDefinitionResponse, *http.Response, error) {
	return r.ApiService.GetConsentDefinitionExecute(r)
}

/*
GetConsentDefinition Returns a single Consent Definition

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionName Name of the Consent Definition
	@return ApiGetConsentDefinitionRequest
*/
func (a *ConsentDefinitionAPIService) GetConsentDefinition(ctx context.Context, consentDefinitionName string) ApiGetConsentDefinitionRequest {
	return ApiGetConsentDefinitionRequest{
		ApiService:            a,
		ctx:                   ctx,
		consentDefinitionName: consentDefinitionName,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionResponse
func (a *ConsentDefinitionAPIService) GetConsentDefinitionExecute(r ApiGetConsentDefinitionRequest) (*ConsentDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionAPIService.GetConsentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterValueToString(r.consentDefinitionName, "consentDefinitionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListConsentDefinitionsRequest struct {
	ctx        context.Context
	ApiService *ConsentDefinitionAPIService
	filter     *string
}

// SCIM filter
func (r ApiListConsentDefinitionsRequest) Filter(filter string) ApiListConsentDefinitionsRequest {
	r.filter = &filter
	return r
}

func (r ApiListConsentDefinitionsRequest) Execute() (*ConsentDefinitionListResponse, *http.Response, error) {
	return r.ApiService.ListConsentDefinitionsExecute(r)
}

/*
ListConsentDefinitions Returns a list of all Consent Definition objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListConsentDefinitionsRequest
*/
func (a *ConsentDefinitionAPIService) ListConsentDefinitions(ctx context.Context) ApiListConsentDefinitionsRequest {
	return ApiListConsentDefinitionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionListResponse
func (a *ConsentDefinitionAPIService) ListConsentDefinitionsExecute(r ApiListConsentDefinitionsRequest) (*ConsentDefinitionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionAPIService.ListConsentDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConsentDefinitionRequest struct {
	ctx                   context.Context
	ApiService            *ConsentDefinitionAPIService
	consentDefinitionName string
	updateRequest         *UpdateRequest
}

// Update an existing Consent Definition
func (r ApiUpdateConsentDefinitionRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateConsentDefinitionRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateConsentDefinitionRequest) Execute() (*ConsentDefinitionResponse, *http.Response, error) {
	return r.ApiService.UpdateConsentDefinitionExecute(r)
}

/*
UpdateConsentDefinition Update an existing Consent Definition by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionName Name of the Consent Definition
	@return ApiUpdateConsentDefinitionRequest
*/
func (a *ConsentDefinitionAPIService) UpdateConsentDefinition(ctx context.Context, consentDefinitionName string) ApiUpdateConsentDefinitionRequest {
	return ApiUpdateConsentDefinitionRequest{
		ApiService:            a,
		ctx:                   ctx,
		consentDefinitionName: consentDefinitionName,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionResponse
func (a *ConsentDefinitionAPIService) UpdateConsentDefinitionExecute(r ApiUpdateConsentDefinitionRequest) (*ConsentDefinitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionAPIService.UpdateConsentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterValueToString(r.consentDefinitionName, "consentDefinitionName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
