/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumexternalServerOpendjAuthenticationMethodProp The mechanism to use to authenticate to the target server.
type EnumexternalServerOpendjAuthenticationMethodProp string

// List of Enumexternal-server-opendj-authenticationMethodProp
const (
	ENUMEXTERNALSERVEROPENDJAUTHENTICATIONMETHODPROP_NONE         EnumexternalServerOpendjAuthenticationMethodProp = "none"
	ENUMEXTERNALSERVEROPENDJAUTHENTICATIONMETHODPROP_SIMPLE       EnumexternalServerOpendjAuthenticationMethodProp = "simple"
	ENUMEXTERNALSERVEROPENDJAUTHENTICATIONMETHODPROP_EXTERNAL     EnumexternalServerOpendjAuthenticationMethodProp = "external"
	ENUMEXTERNALSERVEROPENDJAUTHENTICATIONMETHODPROP_INTER_SERVER EnumexternalServerOpendjAuthenticationMethodProp = "inter-server"
)

// All allowed values of EnumexternalServerOpendjAuthenticationMethodProp enum
var AllowedEnumexternalServerOpendjAuthenticationMethodPropEnumValues = []EnumexternalServerOpendjAuthenticationMethodProp{
	"none",
	"simple",
	"external",
	"inter-server",
}

func (v *EnumexternalServerOpendjAuthenticationMethodProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexternalServerOpendjAuthenticationMethodProp(value)
	for _, existing := range AllowedEnumexternalServerOpendjAuthenticationMethodPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexternalServerOpendjAuthenticationMethodProp", value)
}

// NewEnumexternalServerOpendjAuthenticationMethodPropFromValue returns a pointer to a valid EnumexternalServerOpendjAuthenticationMethodProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexternalServerOpendjAuthenticationMethodPropFromValue(v string) (*EnumexternalServerOpendjAuthenticationMethodProp, error) {
	ev := EnumexternalServerOpendjAuthenticationMethodProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexternalServerOpendjAuthenticationMethodProp: valid values are %v", v, AllowedEnumexternalServerOpendjAuthenticationMethodPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexternalServerOpendjAuthenticationMethodProp) IsValid() bool {
	for _, existing := range AllowedEnumexternalServerOpendjAuthenticationMethodPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexternal-server-opendj-authenticationMethodProp value
func (v EnumexternalServerOpendjAuthenticationMethodProp) Ptr() *EnumexternalServerOpendjAuthenticationMethodProp {
	return &v
}

type NullableEnumexternalServerOpendjAuthenticationMethodProp struct {
	value *EnumexternalServerOpendjAuthenticationMethodProp
	isSet bool
}

func (v NullableEnumexternalServerOpendjAuthenticationMethodProp) Get() *EnumexternalServerOpendjAuthenticationMethodProp {
	return v.value
}

func (v *NullableEnumexternalServerOpendjAuthenticationMethodProp) Set(val *EnumexternalServerOpendjAuthenticationMethodProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexternalServerOpendjAuthenticationMethodProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexternalServerOpendjAuthenticationMethodProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexternalServerOpendjAuthenticationMethodProp(val *EnumexternalServerOpendjAuthenticationMethodProp) *NullableEnumexternalServerOpendjAuthenticationMethodProp {
	return &NullableEnumexternalServerOpendjAuthenticationMethodProp{value: val, isSet: true}
}

func (v NullableEnumexternalServerOpendjAuthenticationMethodProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexternalServerOpendjAuthenticationMethodProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
