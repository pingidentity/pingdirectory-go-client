/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumreplicationAssuranceResultCriteriaSchemaUrn the model 'EnumreplicationAssuranceResultCriteriaSchemaUrn'
type EnumreplicationAssuranceResultCriteriaSchemaUrn string

// List of Enumreplication-assurance-result-criteriaSchemaUrn
const (
	ENUMREPLICATIONASSURANCERESULTCRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RESULT_CRITERIAREPLICATION_ASSURANCE EnumreplicationAssuranceResultCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:result-criteria:replication-assurance"
)

// All allowed values of EnumreplicationAssuranceResultCriteriaSchemaUrn enum
var AllowedEnumreplicationAssuranceResultCriteriaSchemaUrnEnumValues = []EnumreplicationAssuranceResultCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:result-criteria:replication-assurance",
}

func (v *EnumreplicationAssuranceResultCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumreplicationAssuranceResultCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumreplicationAssuranceResultCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumreplicationAssuranceResultCriteriaSchemaUrn", value)
}

// NewEnumreplicationAssuranceResultCriteriaSchemaUrnFromValue returns a pointer to a valid EnumreplicationAssuranceResultCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumreplicationAssuranceResultCriteriaSchemaUrnFromValue(v string) (*EnumreplicationAssuranceResultCriteriaSchemaUrn, error) {
	ev := EnumreplicationAssuranceResultCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumreplicationAssuranceResultCriteriaSchemaUrn: valid values are %v", v, AllowedEnumreplicationAssuranceResultCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumreplicationAssuranceResultCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumreplicationAssuranceResultCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumreplication-assurance-result-criteriaSchemaUrn value
func (v EnumreplicationAssuranceResultCriteriaSchemaUrn) Ptr() *EnumreplicationAssuranceResultCriteriaSchemaUrn {
	return &v
}

type NullableEnumreplicationAssuranceResultCriteriaSchemaUrn struct {
	value *EnumreplicationAssuranceResultCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumreplicationAssuranceResultCriteriaSchemaUrn) Get() *EnumreplicationAssuranceResultCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumreplicationAssuranceResultCriteriaSchemaUrn) Set(val *EnumreplicationAssuranceResultCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumreplicationAssuranceResultCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumreplicationAssuranceResultCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumreplicationAssuranceResultCriteriaSchemaUrn(val *EnumreplicationAssuranceResultCriteriaSchemaUrn) *NullableEnumreplicationAssuranceResultCriteriaSchemaUrn {
	return &NullableEnumreplicationAssuranceResultCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumreplicationAssuranceResultCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumreplicationAssuranceResultCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
