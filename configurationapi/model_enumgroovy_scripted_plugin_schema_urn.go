/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumgroovyScriptedPluginSchemaUrn the model 'EnumgroovyScriptedPluginSchemaUrn'
type EnumgroovyScriptedPluginSchemaUrn string

// List of Enumgroovy-scripted-pluginSchemaUrn
const (
	ENUMGROOVYSCRIPTEDPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINGROOVY_SCRIPTED EnumgroovyScriptedPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:groovy-scripted"
)

// All allowed values of EnumgroovyScriptedPluginSchemaUrn enum
var AllowedEnumgroovyScriptedPluginSchemaUrnEnumValues = []EnumgroovyScriptedPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:groovy-scripted",
}

func (v *EnumgroovyScriptedPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgroovyScriptedPluginSchemaUrn(value)
	for _, existing := range AllowedEnumgroovyScriptedPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgroovyScriptedPluginSchemaUrn", value)
}

// NewEnumgroovyScriptedPluginSchemaUrnFromValue returns a pointer to a valid EnumgroovyScriptedPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgroovyScriptedPluginSchemaUrnFromValue(v string) (*EnumgroovyScriptedPluginSchemaUrn, error) {
	ev := EnumgroovyScriptedPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgroovyScriptedPluginSchemaUrn: valid values are %v", v, AllowedEnumgroovyScriptedPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgroovyScriptedPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgroovyScriptedPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgroovy-scripted-pluginSchemaUrn value
func (v EnumgroovyScriptedPluginSchemaUrn) Ptr() *EnumgroovyScriptedPluginSchemaUrn {
	return &v
}

type NullableEnumgroovyScriptedPluginSchemaUrn struct {
	value *EnumgroovyScriptedPluginSchemaUrn
	isSet bool
}

func (v NullableEnumgroovyScriptedPluginSchemaUrn) Get() *EnumgroovyScriptedPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumgroovyScriptedPluginSchemaUrn) Set(val *EnumgroovyScriptedPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgroovyScriptedPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgroovyScriptedPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgroovyScriptedPluginSchemaUrn(val *EnumgroovyScriptedPluginSchemaUrn) *NullableEnumgroovyScriptedPluginSchemaUrn {
	return &NullableEnumgroovyScriptedPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgroovyScriptedPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgroovyScriptedPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
