/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// ChangeSubscriptionHandlerListResponseResourcesInner - struct for ChangeSubscriptionHandlerListResponseResourcesInner
type ChangeSubscriptionHandlerListResponseResourcesInner struct {
	GroovyScriptedChangeSubscriptionHandlerResponse *GroovyScriptedChangeSubscriptionHandlerResponse
	LoggingChangeSubscriptionHandlerResponse        *LoggingChangeSubscriptionHandlerResponse
	ThirdPartyChangeSubscriptionHandlerResponse     *ThirdPartyChangeSubscriptionHandlerResponse
}

// GroovyScriptedChangeSubscriptionHandlerResponseAsChangeSubscriptionHandlerListResponseResourcesInner is a convenience function that returns GroovyScriptedChangeSubscriptionHandlerResponse wrapped in ChangeSubscriptionHandlerListResponseResourcesInner
func GroovyScriptedChangeSubscriptionHandlerResponseAsChangeSubscriptionHandlerListResponseResourcesInner(v *GroovyScriptedChangeSubscriptionHandlerResponse) ChangeSubscriptionHandlerListResponseResourcesInner {
	return ChangeSubscriptionHandlerListResponseResourcesInner{
		GroovyScriptedChangeSubscriptionHandlerResponse: v,
	}
}

// LoggingChangeSubscriptionHandlerResponseAsChangeSubscriptionHandlerListResponseResourcesInner is a convenience function that returns LoggingChangeSubscriptionHandlerResponse wrapped in ChangeSubscriptionHandlerListResponseResourcesInner
func LoggingChangeSubscriptionHandlerResponseAsChangeSubscriptionHandlerListResponseResourcesInner(v *LoggingChangeSubscriptionHandlerResponse) ChangeSubscriptionHandlerListResponseResourcesInner {
	return ChangeSubscriptionHandlerListResponseResourcesInner{
		LoggingChangeSubscriptionHandlerResponse: v,
	}
}

// ThirdPartyChangeSubscriptionHandlerResponseAsChangeSubscriptionHandlerListResponseResourcesInner is a convenience function that returns ThirdPartyChangeSubscriptionHandlerResponse wrapped in ChangeSubscriptionHandlerListResponseResourcesInner
func ThirdPartyChangeSubscriptionHandlerResponseAsChangeSubscriptionHandlerListResponseResourcesInner(v *ThirdPartyChangeSubscriptionHandlerResponse) ChangeSubscriptionHandlerListResponseResourcesInner {
	return ChangeSubscriptionHandlerListResponseResourcesInner{
		ThirdPartyChangeSubscriptionHandlerResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChangeSubscriptionHandlerListResponseResourcesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GroovyScriptedChangeSubscriptionHandlerResponse
	err = newStrictDecoder(data).Decode(&dst.GroovyScriptedChangeSubscriptionHandlerResponse)
	if err == nil {
		jsonGroovyScriptedChangeSubscriptionHandlerResponse, _ := json.Marshal(dst.GroovyScriptedChangeSubscriptionHandlerResponse)
		if string(jsonGroovyScriptedChangeSubscriptionHandlerResponse) == "{}" { // empty struct
			dst.GroovyScriptedChangeSubscriptionHandlerResponse = nil
		} else {
			match++
		}
	} else {
		dst.GroovyScriptedChangeSubscriptionHandlerResponse = nil
	}

	// try to unmarshal data into LoggingChangeSubscriptionHandlerResponse
	err = newStrictDecoder(data).Decode(&dst.LoggingChangeSubscriptionHandlerResponse)
	if err == nil {
		jsonLoggingChangeSubscriptionHandlerResponse, _ := json.Marshal(dst.LoggingChangeSubscriptionHandlerResponse)
		if string(jsonLoggingChangeSubscriptionHandlerResponse) == "{}" { // empty struct
			dst.LoggingChangeSubscriptionHandlerResponse = nil
		} else {
			match++
		}
	} else {
		dst.LoggingChangeSubscriptionHandlerResponse = nil
	}

	// try to unmarshal data into ThirdPartyChangeSubscriptionHandlerResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyChangeSubscriptionHandlerResponse)
	if err == nil {
		jsonThirdPartyChangeSubscriptionHandlerResponse, _ := json.Marshal(dst.ThirdPartyChangeSubscriptionHandlerResponse)
		if string(jsonThirdPartyChangeSubscriptionHandlerResponse) == "{}" { // empty struct
			dst.ThirdPartyChangeSubscriptionHandlerResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyChangeSubscriptionHandlerResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GroovyScriptedChangeSubscriptionHandlerResponse = nil
		dst.LoggingChangeSubscriptionHandlerResponse = nil
		dst.ThirdPartyChangeSubscriptionHandlerResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChangeSubscriptionHandlerListResponseResourcesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChangeSubscriptionHandlerListResponseResourcesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChangeSubscriptionHandlerListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	if src.GroovyScriptedChangeSubscriptionHandlerResponse != nil {
		return json.Marshal(&src.GroovyScriptedChangeSubscriptionHandlerResponse)
	}

	if src.LoggingChangeSubscriptionHandlerResponse != nil {
		return json.Marshal(&src.LoggingChangeSubscriptionHandlerResponse)
	}

	if src.ThirdPartyChangeSubscriptionHandlerResponse != nil {
		return json.Marshal(&src.ThirdPartyChangeSubscriptionHandlerResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChangeSubscriptionHandlerListResponseResourcesInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GroovyScriptedChangeSubscriptionHandlerResponse != nil {
		return obj.GroovyScriptedChangeSubscriptionHandlerResponse
	}

	if obj.LoggingChangeSubscriptionHandlerResponse != nil {
		return obj.LoggingChangeSubscriptionHandlerResponse
	}

	if obj.ThirdPartyChangeSubscriptionHandlerResponse != nil {
		return obj.ThirdPartyChangeSubscriptionHandlerResponse
	}

	// all schemas are nil
	return nil
}

type NullableChangeSubscriptionHandlerListResponseResourcesInner struct {
	value *ChangeSubscriptionHandlerListResponseResourcesInner
	isSet bool
}

func (v NullableChangeSubscriptionHandlerListResponseResourcesInner) Get() *ChangeSubscriptionHandlerListResponseResourcesInner {
	return v.value
}

func (v *NullableChangeSubscriptionHandlerListResponseResourcesInner) Set(val *ChangeSubscriptionHandlerListResponseResourcesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeSubscriptionHandlerListResponseResourcesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeSubscriptionHandlerListResponseResourcesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeSubscriptionHandlerListResponseResourcesInner(val *ChangeSubscriptionHandlerListResponseResourcesInner) *NullableChangeSubscriptionHandlerListResponseResourcesInner {
	return &NullableChangeSubscriptionHandlerListResponseResourcesInner{value: val, isSet: true}
}

func (v NullableChangeSubscriptionHandlerListResponseResourcesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeSubscriptionHandlerListResponseResourcesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
