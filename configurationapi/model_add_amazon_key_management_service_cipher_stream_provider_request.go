/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the AddAmazonKeyManagementServiceCipherStreamProviderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddAmazonKeyManagementServiceCipherStreamProviderRequest{}

// AddAmazonKeyManagementServiceCipherStreamProviderRequest struct for AddAmazonKeyManagementServiceCipherStreamProviderRequest
type AddAmazonKeyManagementServiceCipherStreamProviderRequest struct {
	Schemas []EnumamazonKeyManagementServiceCipherStreamProviderSchemaUrn `json:"schemas"`
	// The path to a file that will hold the encrypted passphrase used by this cipher stream provider.
	EncryptedPassphraseFile *string `json:"encryptedPassphraseFile,omitempty"`
	// The external server with information to use when interacting with the Amazon Key Management Service.
	AwsExternalServer *string `json:"awsExternalServer,omitempty"`
	// The access key ID that will be used if this cipher stream provider will authenticate to the Amazon Key Management Service using an access key rather than an IAM role associated with an EC2 instance.
	AwsAccessKeyID *string `json:"awsAccessKeyID,omitempty"`
	// The secret access key that will be used if this cipher stream provider will authenticate to the Amazon Key Management Service using an access key rather than an IAM role associated with an EC2 instance.
	AwsSecretAccessKey *string `json:"awsSecretAccessKey,omitempty"`
	// The name of the Amazon Web Services region that holds the encryption key. This is optional, and if it is not provided, then the server will attempt to determine the region from the key ARN.
	AwsRegionName *string `json:"awsRegionName,omitempty"`
	// The Amazon resource name (ARN) for the KMS key that will be used to encrypt the contents of the passphrase file. This key must exist, and the AWS client must have access to encrypt and decrypt data using this key.
	KmsEncryptionKeyArn string `json:"kmsEncryptionKeyArn"`
	// The PBKDF2 iteration count that will be used when deriving the encryption key used to protect the encryption settings database.
	IterationCount *int64 `json:"iterationCount,omitempty"`
	// A description for this Cipher Stream Provider
	Description *string `json:"description,omitempty"`
	// Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.
	Enabled bool `json:"enabled"`
	// Name of the new Cipher Stream Provider
	ProviderName string `json:"providerName"`
}

// NewAddAmazonKeyManagementServiceCipherStreamProviderRequest instantiates a new AddAmazonKeyManagementServiceCipherStreamProviderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddAmazonKeyManagementServiceCipherStreamProviderRequest(schemas []EnumamazonKeyManagementServiceCipherStreamProviderSchemaUrn, kmsEncryptionKeyArn string, enabled bool, providerName string) *AddAmazonKeyManagementServiceCipherStreamProviderRequest {
	this := AddAmazonKeyManagementServiceCipherStreamProviderRequest{}
	this.Schemas = schemas
	this.KmsEncryptionKeyArn = kmsEncryptionKeyArn
	this.Enabled = enabled
	this.ProviderName = providerName
	return &this
}

// NewAddAmazonKeyManagementServiceCipherStreamProviderRequestWithDefaults instantiates a new AddAmazonKeyManagementServiceCipherStreamProviderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddAmazonKeyManagementServiceCipherStreamProviderRequestWithDefaults() *AddAmazonKeyManagementServiceCipherStreamProviderRequest {
	this := AddAmazonKeyManagementServiceCipherStreamProviderRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetSchemas() []EnumamazonKeyManagementServiceCipherStreamProviderSchemaUrn {
	if o == nil {
		var ret []EnumamazonKeyManagementServiceCipherStreamProviderSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetSchemasOk() ([]EnumamazonKeyManagementServiceCipherStreamProviderSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetSchemas(v []EnumamazonKeyManagementServiceCipherStreamProviderSchemaUrn) {
	o.Schemas = v
}

// GetEncryptedPassphraseFile returns the EncryptedPassphraseFile field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetEncryptedPassphraseFile() string {
	if o == nil || IsNil(o.EncryptedPassphraseFile) {
		var ret string
		return ret
	}
	return *o.EncryptedPassphraseFile
}

// GetEncryptedPassphraseFileOk returns a tuple with the EncryptedPassphraseFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetEncryptedPassphraseFileOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptedPassphraseFile) {
		return nil, false
	}
	return o.EncryptedPassphraseFile, true
}

// HasEncryptedPassphraseFile returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasEncryptedPassphraseFile() bool {
	if o != nil && !IsNil(o.EncryptedPassphraseFile) {
		return true
	}

	return false
}

// SetEncryptedPassphraseFile gets a reference to the given string and assigns it to the EncryptedPassphraseFile field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetEncryptedPassphraseFile(v string) {
	o.EncryptedPassphraseFile = &v
}

// GetAwsExternalServer returns the AwsExternalServer field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsExternalServer() string {
	if o == nil || IsNil(o.AwsExternalServer) {
		var ret string
		return ret
	}
	return *o.AwsExternalServer
}

// GetAwsExternalServerOk returns a tuple with the AwsExternalServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsExternalServerOk() (*string, bool) {
	if o == nil || IsNil(o.AwsExternalServer) {
		return nil, false
	}
	return o.AwsExternalServer, true
}

// HasAwsExternalServer returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasAwsExternalServer() bool {
	if o != nil && !IsNil(o.AwsExternalServer) {
		return true
	}

	return false
}

// SetAwsExternalServer gets a reference to the given string and assigns it to the AwsExternalServer field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetAwsExternalServer(v string) {
	o.AwsExternalServer = &v
}

// GetAwsAccessKeyID returns the AwsAccessKeyID field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsAccessKeyID() string {
	if o == nil || IsNil(o.AwsAccessKeyID) {
		var ret string
		return ret
	}
	return *o.AwsAccessKeyID
}

// GetAwsAccessKeyIDOk returns a tuple with the AwsAccessKeyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsAccessKeyIDOk() (*string, bool) {
	if o == nil || IsNil(o.AwsAccessKeyID) {
		return nil, false
	}
	return o.AwsAccessKeyID, true
}

// HasAwsAccessKeyID returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasAwsAccessKeyID() bool {
	if o != nil && !IsNil(o.AwsAccessKeyID) {
		return true
	}

	return false
}

// SetAwsAccessKeyID gets a reference to the given string and assigns it to the AwsAccessKeyID field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetAwsAccessKeyID(v string) {
	o.AwsAccessKeyID = &v
}

// GetAwsSecretAccessKey returns the AwsSecretAccessKey field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsSecretAccessKey() string {
	if o == nil || IsNil(o.AwsSecretAccessKey) {
		var ret string
		return ret
	}
	return *o.AwsSecretAccessKey
}

// GetAwsSecretAccessKeyOk returns a tuple with the AwsSecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsSecretAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AwsSecretAccessKey) {
		return nil, false
	}
	return o.AwsSecretAccessKey, true
}

// HasAwsSecretAccessKey returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasAwsSecretAccessKey() bool {
	if o != nil && !IsNil(o.AwsSecretAccessKey) {
		return true
	}

	return false
}

// SetAwsSecretAccessKey gets a reference to the given string and assigns it to the AwsSecretAccessKey field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetAwsSecretAccessKey(v string) {
	o.AwsSecretAccessKey = &v
}

// GetAwsRegionName returns the AwsRegionName field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsRegionName() string {
	if o == nil || IsNil(o.AwsRegionName) {
		var ret string
		return ret
	}
	return *o.AwsRegionName
}

// GetAwsRegionNameOk returns a tuple with the AwsRegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetAwsRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRegionName) {
		return nil, false
	}
	return o.AwsRegionName, true
}

// HasAwsRegionName returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasAwsRegionName() bool {
	if o != nil && !IsNil(o.AwsRegionName) {
		return true
	}

	return false
}

// SetAwsRegionName gets a reference to the given string and assigns it to the AwsRegionName field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetAwsRegionName(v string) {
	o.AwsRegionName = &v
}

// GetKmsEncryptionKeyArn returns the KmsEncryptionKeyArn field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetKmsEncryptionKeyArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KmsEncryptionKeyArn
}

// GetKmsEncryptionKeyArnOk returns a tuple with the KmsEncryptionKeyArn field value
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetKmsEncryptionKeyArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KmsEncryptionKeyArn, true
}

// SetKmsEncryptionKeyArn sets field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetKmsEncryptionKeyArn(v string) {
	o.KmsEncryptionKeyArn = v
}

// GetIterationCount returns the IterationCount field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetIterationCount() int64 {
	if o == nil || IsNil(o.IterationCount) {
		var ret int64
		return ret
	}
	return *o.IterationCount
}

// GetIterationCountOk returns a tuple with the IterationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetIterationCountOk() (*int64, bool) {
	if o == nil || IsNil(o.IterationCount) {
		return nil, false
	}
	return o.IterationCount, true
}

// HasIterationCount returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasIterationCount() bool {
	if o != nil && !IsNil(o.IterationCount) {
		return true
	}

	return false
}

// SetIterationCount gets a reference to the given int64 and assigns it to the IterationCount field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetIterationCount(v int64) {
	o.IterationCount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetProviderName returns the ProviderName field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *AddAmazonKeyManagementServiceCipherStreamProviderRequest) SetProviderName(v string) {
	o.ProviderName = v
}

func (o AddAmazonKeyManagementServiceCipherStreamProviderRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddAmazonKeyManagementServiceCipherStreamProviderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.EncryptedPassphraseFile) {
		toSerialize["encryptedPassphraseFile"] = o.EncryptedPassphraseFile
	}
	if !IsNil(o.AwsExternalServer) {
		toSerialize["awsExternalServer"] = o.AwsExternalServer
	}
	if !IsNil(o.AwsAccessKeyID) {
		toSerialize["awsAccessKeyID"] = o.AwsAccessKeyID
	}
	if !IsNil(o.AwsSecretAccessKey) {
		toSerialize["awsSecretAccessKey"] = o.AwsSecretAccessKey
	}
	if !IsNil(o.AwsRegionName) {
		toSerialize["awsRegionName"] = o.AwsRegionName
	}
	toSerialize["kmsEncryptionKeyArn"] = o.KmsEncryptionKeyArn
	if !IsNil(o.IterationCount) {
		toSerialize["iterationCount"] = o.IterationCount
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["providerName"] = o.ProviderName
	return toSerialize, nil
}

type NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest struct {
	value *AddAmazonKeyManagementServiceCipherStreamProviderRequest
	isSet bool
}

func (v NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest) Get() *AddAmazonKeyManagementServiceCipherStreamProviderRequest {
	return v.value
}

func (v *NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest) Set(val *AddAmazonKeyManagementServiceCipherStreamProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddAmazonKeyManagementServiceCipherStreamProviderRequest(val *AddAmazonKeyManagementServiceCipherStreamProviderRequest) *NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest {
	return &NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest{value: val, isSet: true}
}

func (v NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddAmazonKeyManagementServiceCipherStreamProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
