/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
	"fmt"
)

// EnumchangeSubscriptionNotificationPluginSchemaUrn the model 'EnumchangeSubscriptionNotificationPluginSchemaUrn'
type EnumchangeSubscriptionNotificationPluginSchemaUrn string

// List of Enumchange-subscription-notification-pluginSchemaUrn
const (
	ENUMCHANGESUBSCRIPTIONNOTIFICATIONPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINCHANGE_SUBSCRIPTION_NOTIFICATION EnumchangeSubscriptionNotificationPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:change-subscription-notification"
)

// All allowed values of EnumchangeSubscriptionNotificationPluginSchemaUrn enum
var AllowedEnumchangeSubscriptionNotificationPluginSchemaUrnEnumValues = []EnumchangeSubscriptionNotificationPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:change-subscription-notification",
}

func (v *EnumchangeSubscriptionNotificationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumchangeSubscriptionNotificationPluginSchemaUrn(value)
	for _, existing := range AllowedEnumchangeSubscriptionNotificationPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumchangeSubscriptionNotificationPluginSchemaUrn", value)
}

// NewEnumchangeSubscriptionNotificationPluginSchemaUrnFromValue returns a pointer to a valid EnumchangeSubscriptionNotificationPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumchangeSubscriptionNotificationPluginSchemaUrnFromValue(v string) (*EnumchangeSubscriptionNotificationPluginSchemaUrn, error) {
	ev := EnumchangeSubscriptionNotificationPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumchangeSubscriptionNotificationPluginSchemaUrn: valid values are %v", v, AllowedEnumchangeSubscriptionNotificationPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumchangeSubscriptionNotificationPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumchangeSubscriptionNotificationPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumchange-subscription-notification-pluginSchemaUrn value
func (v EnumchangeSubscriptionNotificationPluginSchemaUrn) Ptr() *EnumchangeSubscriptionNotificationPluginSchemaUrn {
	return &v
}

type NullableEnumchangeSubscriptionNotificationPluginSchemaUrn struct {
	value *EnumchangeSubscriptionNotificationPluginSchemaUrn
	isSet bool
}

func (v NullableEnumchangeSubscriptionNotificationPluginSchemaUrn) Get() *EnumchangeSubscriptionNotificationPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumchangeSubscriptionNotificationPluginSchemaUrn) Set(val *EnumchangeSubscriptionNotificationPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumchangeSubscriptionNotificationPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumchangeSubscriptionNotificationPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumchangeSubscriptionNotificationPluginSchemaUrn(val *EnumchangeSubscriptionNotificationPluginSchemaUrn) *NullableEnumchangeSubscriptionNotificationPluginSchemaUrn {
	return &NullableEnumchangeSubscriptionNotificationPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumchangeSubscriptionNotificationPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumchangeSubscriptionNotificationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
