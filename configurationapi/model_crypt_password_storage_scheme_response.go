/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the CryptPasswordStorageSchemeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptPasswordStorageSchemeResponse{}

// CryptPasswordStorageSchemeResponse struct for CryptPasswordStorageSchemeResponse
type CryptPasswordStorageSchemeResponse struct {
	Schemas                   []EnumcryptPasswordStorageSchemeSchemaUrn               `json:"schemas"`
	PasswordEncodingMechanism *EnumpasswordStorageSchemePasswordEncodingMechanismProp `json:"passwordEncodingMechanism,omitempty"`
	// Specifies the number of digest rounds to use for the SHA-2 encodings. This will not be used for the legacy or MD5-based encodings.
	NumDigestRounds *int64 `json:"numDigestRounds,omitempty"`
	// Specifies the maximum allowed length, in bytes, for passwords encoded with this scheme, which can help mitigate denial of service attacks from clients that attempt to bind with very long passwords.
	MaxPasswordLength *int64 `json:"maxPasswordLength,omitempty"`
	// A description for this Password Storage Scheme
	Description *string `json:"description,omitempty"`
	// Indicates whether the Password Storage Scheme is enabled for use.
	Enabled                                       bool                                               `json:"enabled"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	// Name of the Password Storage Scheme
	Id string `json:"id"`
}

// NewCryptPasswordStorageSchemeResponse instantiates a new CryptPasswordStorageSchemeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptPasswordStorageSchemeResponse(schemas []EnumcryptPasswordStorageSchemeSchemaUrn, enabled bool, id string) *CryptPasswordStorageSchemeResponse {
	this := CryptPasswordStorageSchemeResponse{}
	this.Schemas = schemas
	this.Enabled = enabled
	this.Id = id
	return &this
}

// NewCryptPasswordStorageSchemeResponseWithDefaults instantiates a new CryptPasswordStorageSchemeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptPasswordStorageSchemeResponseWithDefaults() *CryptPasswordStorageSchemeResponse {
	this := CryptPasswordStorageSchemeResponse{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *CryptPasswordStorageSchemeResponse) GetSchemas() []EnumcryptPasswordStorageSchemeSchemaUrn {
	if o == nil {
		var ret []EnumcryptPasswordStorageSchemeSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetSchemasOk() ([]EnumcryptPasswordStorageSchemeSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *CryptPasswordStorageSchemeResponse) SetSchemas(v []EnumcryptPasswordStorageSchemeSchemaUrn) {
	o.Schemas = v
}

// GetPasswordEncodingMechanism returns the PasswordEncodingMechanism field value if set, zero value otherwise.
func (o *CryptPasswordStorageSchemeResponse) GetPasswordEncodingMechanism() EnumpasswordStorageSchemePasswordEncodingMechanismProp {
	if o == nil || IsNil(o.PasswordEncodingMechanism) {
		var ret EnumpasswordStorageSchemePasswordEncodingMechanismProp
		return ret
	}
	return *o.PasswordEncodingMechanism
}

// GetPasswordEncodingMechanismOk returns a tuple with the PasswordEncodingMechanism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetPasswordEncodingMechanismOk() (*EnumpasswordStorageSchemePasswordEncodingMechanismProp, bool) {
	if o == nil || IsNil(o.PasswordEncodingMechanism) {
		return nil, false
	}
	return o.PasswordEncodingMechanism, true
}

// HasPasswordEncodingMechanism returns a boolean if a field has been set.
func (o *CryptPasswordStorageSchemeResponse) HasPasswordEncodingMechanism() bool {
	if o != nil && !IsNil(o.PasswordEncodingMechanism) {
		return true
	}

	return false
}

// SetPasswordEncodingMechanism gets a reference to the given EnumpasswordStorageSchemePasswordEncodingMechanismProp and assigns it to the PasswordEncodingMechanism field.
func (o *CryptPasswordStorageSchemeResponse) SetPasswordEncodingMechanism(v EnumpasswordStorageSchemePasswordEncodingMechanismProp) {
	o.PasswordEncodingMechanism = &v
}

// GetNumDigestRounds returns the NumDigestRounds field value if set, zero value otherwise.
func (o *CryptPasswordStorageSchemeResponse) GetNumDigestRounds() int64 {
	if o == nil || IsNil(o.NumDigestRounds) {
		var ret int64
		return ret
	}
	return *o.NumDigestRounds
}

// GetNumDigestRoundsOk returns a tuple with the NumDigestRounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetNumDigestRoundsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumDigestRounds) {
		return nil, false
	}
	return o.NumDigestRounds, true
}

// HasNumDigestRounds returns a boolean if a field has been set.
func (o *CryptPasswordStorageSchemeResponse) HasNumDigestRounds() bool {
	if o != nil && !IsNil(o.NumDigestRounds) {
		return true
	}

	return false
}

// SetNumDigestRounds gets a reference to the given int64 and assigns it to the NumDigestRounds field.
func (o *CryptPasswordStorageSchemeResponse) SetNumDigestRounds(v int64) {
	o.NumDigestRounds = &v
}

// GetMaxPasswordLength returns the MaxPasswordLength field value if set, zero value otherwise.
func (o *CryptPasswordStorageSchemeResponse) GetMaxPasswordLength() int64 {
	if o == nil || IsNil(o.MaxPasswordLength) {
		var ret int64
		return ret
	}
	return *o.MaxPasswordLength
}

// GetMaxPasswordLengthOk returns a tuple with the MaxPasswordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetMaxPasswordLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxPasswordLength) {
		return nil, false
	}
	return o.MaxPasswordLength, true
}

// HasMaxPasswordLength returns a boolean if a field has been set.
func (o *CryptPasswordStorageSchemeResponse) HasMaxPasswordLength() bool {
	if o != nil && !IsNil(o.MaxPasswordLength) {
		return true
	}

	return false
}

// SetMaxPasswordLength gets a reference to the given int64 and assigns it to the MaxPasswordLength field.
func (o *CryptPasswordStorageSchemeResponse) SetMaxPasswordLength(v int64) {
	o.MaxPasswordLength = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CryptPasswordStorageSchemeResponse) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CryptPasswordStorageSchemeResponse) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CryptPasswordStorageSchemeResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *CryptPasswordStorageSchemeResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CryptPasswordStorageSchemeResponse) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CryptPasswordStorageSchemeResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CryptPasswordStorageSchemeResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *CryptPasswordStorageSchemeResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *CryptPasswordStorageSchemeResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *CryptPasswordStorageSchemeResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *CryptPasswordStorageSchemeResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetId returns the Id field value
func (o *CryptPasswordStorageSchemeResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CryptPasswordStorageSchemeResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CryptPasswordStorageSchemeResponse) SetId(v string) {
	o.Id = v
}

func (o CryptPasswordStorageSchemeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptPasswordStorageSchemeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schemas"] = o.Schemas
	if !IsNil(o.PasswordEncodingMechanism) {
		toSerialize["passwordEncodingMechanism"] = o.PasswordEncodingMechanism
	}
	if !IsNil(o.NumDigestRounds) {
		toSerialize["numDigestRounds"] = o.NumDigestRounds
	}
	if !IsNil(o.MaxPasswordLength) {
		toSerialize["maxPasswordLength"] = o.MaxPasswordLength
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableCryptPasswordStorageSchemeResponse struct {
	value *CryptPasswordStorageSchemeResponse
	isSet bool
}

func (v NullableCryptPasswordStorageSchemeResponse) Get() *CryptPasswordStorageSchemeResponse {
	return v.value
}

func (v *NullableCryptPasswordStorageSchemeResponse) Set(val *CryptPasswordStorageSchemeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptPasswordStorageSchemeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptPasswordStorageSchemeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptPasswordStorageSchemeResponse(val *CryptPasswordStorageSchemeResponse) *NullableCryptPasswordStorageSchemeResponse {
	return &NullableCryptPasswordStorageSchemeResponse{value: val, isSet: true}
}

func (v NullableCryptPasswordStorageSchemeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptPasswordStorageSchemeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
