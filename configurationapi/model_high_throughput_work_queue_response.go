/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package configurationapi

import (
	"encoding/json"
)

// checks if the HighThroughputWorkQueueResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighThroughputWorkQueueResponse{}

// HighThroughputWorkQueueResponse struct for HighThroughputWorkQueueResponse
type HighThroughputWorkQueueResponse struct {
	Schemas []EnumhighThroughputWorkQueueSchemaUrn `json:"schemas,omitempty"`
	// Specifies the total number of worker threads that should be used within the server in order to process requested operations. The worker threads will be split evenly across all of the configured queues.
	NumWorkerThreads *int32 `json:"numWorkerThreads,omitempty"`
	// Specifies the number of worker threads that should be used within the server to process write (add, delete, modify, and modify DN) operations. If this is specified, then separate sets of worker threads will be used for processing read and write operations, and the value of the num-worker-threads property will reflect the number of threads to use to process read operations.
	NumWriteWorkerThreads *int32 `json:"numWriteWorkerThreads,omitempty"`
	// Specifies the number of worker threads that should be used to process operations as part of an administrative session. These threads may be reserved only for special use by management applications like dsconfig, the administration console, and other administrative tools, so that these applications may be used to diagnose problems and take any necessary corrective action even if all \"normal\" worker threads are busy processing other requests.
	NumAdministrativeSessionWorkerThreads *int32 `json:"numAdministrativeSessionWorkerThreads,omitempty"`
	// Specifies the number of blocking queues that should be maintained. A value of zero indicates that the server should attempt to automatically select an optimal value (one queue for every two worker threads).
	NumQueues *int32 `json:"numQueues,omitempty"`
	// Specifies the number of blocking queues that should be maintained for write operations. This will only be used if a value is specified for the num-write-worker-threads property, in which case the num-queues property will specify the number of queues for read operations. Otherwise, all operations will be processed by a common set of worker threads and the value of the num-queues property will specify the number of queues for all types of operations.
	NumWriteQueues *int32 `json:"numWriteQueues,omitempty"`
	// Specifies the maximum number of pending operations that may be held in any of the queues at any given time. The total number of pending requests may be as large as this value times the total number of queues.
	MaxWorkQueueCapacity *int32 `json:"maxWorkQueueCapacity,omitempty"`
	// Specifies the maximum length of time that the connection handler should be allowed to wait to enqueue a request if the work queue is full. If the attempt to enqueue an operation does not succeed within this period of time, then the operation will be rejected and an error response will be returned to the client. A value of zero indicates that operations should be rejected immediately if the work queue is already at its maximum capacity.
	MaxOfferTime *string `json:"maxOfferTime,omitempty"`
	// Indicates whether the work queue should monitor the length of time that operations are held in the queue. When enabled the queue time will be included with access log messages as \"qtime\" in milliseconds.
	MonitorQueueTime *bool `json:"monitorQueueTime,omitempty"`
	// Specifies the maximum length of time that an operation should be allowed to wait on the work queue. If an operation has been waiting on the queue longer than this period of time, then it will receive an immediate failure result rather than being processed once it has been handed off to a worker thread. A value of zero seconds indicates that there should not be any maximum queue time imposed. This setting will only be used if the monitor-queue-time property has a value of true.
	MaxQueueTime *string `json:"maxQueueTime,omitempty"`
	// The interval that the work queue should use when checking for potentially expensive operations. If at least expensive-operation-minimum-concurrent-count worker threads are found to be processing the same operation on two consecutive polls separated by this time interval (i.e., the worker thread has been processing that operation for at least this length of time, and potentially up to twice this length of time), then a stack trace of all running threads will be written to a file for analysis to provide potentially useful information that may help better understand the reason it is taking so long. It may be that the operation is simply an expensive one to process, but there may be other external factors (e.g., a database checkpoint, a log rotation, lock contention, etc.) that could be to blame. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.
	ExpensiveOperationCheckInterval *string `json:"expensiveOperationCheckInterval,omitempty"`
	// The minimum number of concurrent expensive operations that should be detected to trigger dumping stack traces for all threads. If at least this number of worker threads are seen processing the same operations in two consecutive intervals, then the server will dump a stack trace of all threads to a file. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.
	ExpensiveOperationMinimumConcurrentCount *int32 `json:"expensiveOperationMinimumConcurrentCount,omitempty"`
	// The minimum length of time that should be required to pass after dumping stack trace information for all threads before the server should be allowed to create a second dump. This will help prevent the server from dumping stack traces too frequently and eventually consuming all available disk space with stack trace log output. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.
	ExpensiveOperationMinimumDumpInterval         *string                                            `json:"expensiveOperationMinimumDumpInterval,omitempty"`
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
}

// NewHighThroughputWorkQueueResponse instantiates a new HighThroughputWorkQueueResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighThroughputWorkQueueResponse() *HighThroughputWorkQueueResponse {
	this := HighThroughputWorkQueueResponse{}
	return &this
}

// NewHighThroughputWorkQueueResponseWithDefaults instantiates a new HighThroughputWorkQueueResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighThroughputWorkQueueResponseWithDefaults() *HighThroughputWorkQueueResponse {
	this := HighThroughputWorkQueueResponse{}
	return &this
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetSchemas() []EnumhighThroughputWorkQueueSchemaUrn {
	if o == nil || IsNil(o.Schemas) {
		var ret []EnumhighThroughputWorkQueueSchemaUrn
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetSchemasOk() ([]EnumhighThroughputWorkQueueSchemaUrn, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []EnumhighThroughputWorkQueueSchemaUrn and assigns it to the Schemas field.
func (o *HighThroughputWorkQueueResponse) SetSchemas(v []EnumhighThroughputWorkQueueSchemaUrn) {
	o.Schemas = v
}

// GetNumWorkerThreads returns the NumWorkerThreads field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetNumWorkerThreads() int32 {
	if o == nil || IsNil(o.NumWorkerThreads) {
		var ret int32
		return ret
	}
	return *o.NumWorkerThreads
}

// GetNumWorkerThreadsOk returns a tuple with the NumWorkerThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetNumWorkerThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumWorkerThreads) {
		return nil, false
	}
	return o.NumWorkerThreads, true
}

// HasNumWorkerThreads returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasNumWorkerThreads() bool {
	if o != nil && !IsNil(o.NumWorkerThreads) {
		return true
	}

	return false
}

// SetNumWorkerThreads gets a reference to the given int32 and assigns it to the NumWorkerThreads field.
func (o *HighThroughputWorkQueueResponse) SetNumWorkerThreads(v int32) {
	o.NumWorkerThreads = &v
}

// GetNumWriteWorkerThreads returns the NumWriteWorkerThreads field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetNumWriteWorkerThreads() int32 {
	if o == nil || IsNil(o.NumWriteWorkerThreads) {
		var ret int32
		return ret
	}
	return *o.NumWriteWorkerThreads
}

// GetNumWriteWorkerThreadsOk returns a tuple with the NumWriteWorkerThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetNumWriteWorkerThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumWriteWorkerThreads) {
		return nil, false
	}
	return o.NumWriteWorkerThreads, true
}

// HasNumWriteWorkerThreads returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasNumWriteWorkerThreads() bool {
	if o != nil && !IsNil(o.NumWriteWorkerThreads) {
		return true
	}

	return false
}

// SetNumWriteWorkerThreads gets a reference to the given int32 and assigns it to the NumWriteWorkerThreads field.
func (o *HighThroughputWorkQueueResponse) SetNumWriteWorkerThreads(v int32) {
	o.NumWriteWorkerThreads = &v
}

// GetNumAdministrativeSessionWorkerThreads returns the NumAdministrativeSessionWorkerThreads field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetNumAdministrativeSessionWorkerThreads() int32 {
	if o == nil || IsNil(o.NumAdministrativeSessionWorkerThreads) {
		var ret int32
		return ret
	}
	return *o.NumAdministrativeSessionWorkerThreads
}

// GetNumAdministrativeSessionWorkerThreadsOk returns a tuple with the NumAdministrativeSessionWorkerThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetNumAdministrativeSessionWorkerThreadsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumAdministrativeSessionWorkerThreads) {
		return nil, false
	}
	return o.NumAdministrativeSessionWorkerThreads, true
}

// HasNumAdministrativeSessionWorkerThreads returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasNumAdministrativeSessionWorkerThreads() bool {
	if o != nil && !IsNil(o.NumAdministrativeSessionWorkerThreads) {
		return true
	}

	return false
}

// SetNumAdministrativeSessionWorkerThreads gets a reference to the given int32 and assigns it to the NumAdministrativeSessionWorkerThreads field.
func (o *HighThroughputWorkQueueResponse) SetNumAdministrativeSessionWorkerThreads(v int32) {
	o.NumAdministrativeSessionWorkerThreads = &v
}

// GetNumQueues returns the NumQueues field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetNumQueues() int32 {
	if o == nil || IsNil(o.NumQueues) {
		var ret int32
		return ret
	}
	return *o.NumQueues
}

// GetNumQueuesOk returns a tuple with the NumQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetNumQueuesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumQueues) {
		return nil, false
	}
	return o.NumQueues, true
}

// HasNumQueues returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasNumQueues() bool {
	if o != nil && !IsNil(o.NumQueues) {
		return true
	}

	return false
}

// SetNumQueues gets a reference to the given int32 and assigns it to the NumQueues field.
func (o *HighThroughputWorkQueueResponse) SetNumQueues(v int32) {
	o.NumQueues = &v
}

// GetNumWriteQueues returns the NumWriteQueues field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetNumWriteQueues() int32 {
	if o == nil || IsNil(o.NumWriteQueues) {
		var ret int32
		return ret
	}
	return *o.NumWriteQueues
}

// GetNumWriteQueuesOk returns a tuple with the NumWriteQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetNumWriteQueuesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumWriteQueues) {
		return nil, false
	}
	return o.NumWriteQueues, true
}

// HasNumWriteQueues returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasNumWriteQueues() bool {
	if o != nil && !IsNil(o.NumWriteQueues) {
		return true
	}

	return false
}

// SetNumWriteQueues gets a reference to the given int32 and assigns it to the NumWriteQueues field.
func (o *HighThroughputWorkQueueResponse) SetNumWriteQueues(v int32) {
	o.NumWriteQueues = &v
}

// GetMaxWorkQueueCapacity returns the MaxWorkQueueCapacity field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetMaxWorkQueueCapacity() int32 {
	if o == nil || IsNil(o.MaxWorkQueueCapacity) {
		var ret int32
		return ret
	}
	return *o.MaxWorkQueueCapacity
}

// GetMaxWorkQueueCapacityOk returns a tuple with the MaxWorkQueueCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetMaxWorkQueueCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxWorkQueueCapacity) {
		return nil, false
	}
	return o.MaxWorkQueueCapacity, true
}

// HasMaxWorkQueueCapacity returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasMaxWorkQueueCapacity() bool {
	if o != nil && !IsNil(o.MaxWorkQueueCapacity) {
		return true
	}

	return false
}

// SetMaxWorkQueueCapacity gets a reference to the given int32 and assigns it to the MaxWorkQueueCapacity field.
func (o *HighThroughputWorkQueueResponse) SetMaxWorkQueueCapacity(v int32) {
	o.MaxWorkQueueCapacity = &v
}

// GetMaxOfferTime returns the MaxOfferTime field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetMaxOfferTime() string {
	if o == nil || IsNil(o.MaxOfferTime) {
		var ret string
		return ret
	}
	return *o.MaxOfferTime
}

// GetMaxOfferTimeOk returns a tuple with the MaxOfferTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetMaxOfferTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxOfferTime) {
		return nil, false
	}
	return o.MaxOfferTime, true
}

// HasMaxOfferTime returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasMaxOfferTime() bool {
	if o != nil && !IsNil(o.MaxOfferTime) {
		return true
	}

	return false
}

// SetMaxOfferTime gets a reference to the given string and assigns it to the MaxOfferTime field.
func (o *HighThroughputWorkQueueResponse) SetMaxOfferTime(v string) {
	o.MaxOfferTime = &v
}

// GetMonitorQueueTime returns the MonitorQueueTime field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetMonitorQueueTime() bool {
	if o == nil || IsNil(o.MonitorQueueTime) {
		var ret bool
		return ret
	}
	return *o.MonitorQueueTime
}

// GetMonitorQueueTimeOk returns a tuple with the MonitorQueueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetMonitorQueueTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.MonitorQueueTime) {
		return nil, false
	}
	return o.MonitorQueueTime, true
}

// HasMonitorQueueTime returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasMonitorQueueTime() bool {
	if o != nil && !IsNil(o.MonitorQueueTime) {
		return true
	}

	return false
}

// SetMonitorQueueTime gets a reference to the given bool and assigns it to the MonitorQueueTime field.
func (o *HighThroughputWorkQueueResponse) SetMonitorQueueTime(v bool) {
	o.MonitorQueueTime = &v
}

// GetMaxQueueTime returns the MaxQueueTime field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetMaxQueueTime() string {
	if o == nil || IsNil(o.MaxQueueTime) {
		var ret string
		return ret
	}
	return *o.MaxQueueTime
}

// GetMaxQueueTimeOk returns a tuple with the MaxQueueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetMaxQueueTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxQueueTime) {
		return nil, false
	}
	return o.MaxQueueTime, true
}

// HasMaxQueueTime returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasMaxQueueTime() bool {
	if o != nil && !IsNil(o.MaxQueueTime) {
		return true
	}

	return false
}

// SetMaxQueueTime gets a reference to the given string and assigns it to the MaxQueueTime field.
func (o *HighThroughputWorkQueueResponse) SetMaxQueueTime(v string) {
	o.MaxQueueTime = &v
}

// GetExpensiveOperationCheckInterval returns the ExpensiveOperationCheckInterval field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetExpensiveOperationCheckInterval() string {
	if o == nil || IsNil(o.ExpensiveOperationCheckInterval) {
		var ret string
		return ret
	}
	return *o.ExpensiveOperationCheckInterval
}

// GetExpensiveOperationCheckIntervalOk returns a tuple with the ExpensiveOperationCheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetExpensiveOperationCheckIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.ExpensiveOperationCheckInterval) {
		return nil, false
	}
	return o.ExpensiveOperationCheckInterval, true
}

// HasExpensiveOperationCheckInterval returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasExpensiveOperationCheckInterval() bool {
	if o != nil && !IsNil(o.ExpensiveOperationCheckInterval) {
		return true
	}

	return false
}

// SetExpensiveOperationCheckInterval gets a reference to the given string and assigns it to the ExpensiveOperationCheckInterval field.
func (o *HighThroughputWorkQueueResponse) SetExpensiveOperationCheckInterval(v string) {
	o.ExpensiveOperationCheckInterval = &v
}

// GetExpensiveOperationMinimumConcurrentCount returns the ExpensiveOperationMinimumConcurrentCount field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetExpensiveOperationMinimumConcurrentCount() int32 {
	if o == nil || IsNil(o.ExpensiveOperationMinimumConcurrentCount) {
		var ret int32
		return ret
	}
	return *o.ExpensiveOperationMinimumConcurrentCount
}

// GetExpensiveOperationMinimumConcurrentCountOk returns a tuple with the ExpensiveOperationMinimumConcurrentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetExpensiveOperationMinimumConcurrentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpensiveOperationMinimumConcurrentCount) {
		return nil, false
	}
	return o.ExpensiveOperationMinimumConcurrentCount, true
}

// HasExpensiveOperationMinimumConcurrentCount returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasExpensiveOperationMinimumConcurrentCount() bool {
	if o != nil && !IsNil(o.ExpensiveOperationMinimumConcurrentCount) {
		return true
	}

	return false
}

// SetExpensiveOperationMinimumConcurrentCount gets a reference to the given int32 and assigns it to the ExpensiveOperationMinimumConcurrentCount field.
func (o *HighThroughputWorkQueueResponse) SetExpensiveOperationMinimumConcurrentCount(v int32) {
	o.ExpensiveOperationMinimumConcurrentCount = &v
}

// GetExpensiveOperationMinimumDumpInterval returns the ExpensiveOperationMinimumDumpInterval field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetExpensiveOperationMinimumDumpInterval() string {
	if o == nil || IsNil(o.ExpensiveOperationMinimumDumpInterval) {
		var ret string
		return ret
	}
	return *o.ExpensiveOperationMinimumDumpInterval
}

// GetExpensiveOperationMinimumDumpIntervalOk returns a tuple with the ExpensiveOperationMinimumDumpInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetExpensiveOperationMinimumDumpIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.ExpensiveOperationMinimumDumpInterval) {
		return nil, false
	}
	return o.ExpensiveOperationMinimumDumpInterval, true
}

// HasExpensiveOperationMinimumDumpInterval returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasExpensiveOperationMinimumDumpInterval() bool {
	if o != nil && !IsNil(o.ExpensiveOperationMinimumDumpInterval) {
		return true
	}

	return false
}

// SetExpensiveOperationMinimumDumpInterval gets a reference to the given string and assigns it to the ExpensiveOperationMinimumDumpInterval field.
func (o *HighThroughputWorkQueueResponse) SetExpensiveOperationMinimumDumpInterval(v string) {
	o.ExpensiveOperationMinimumDumpInterval = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetMeta() MetaMeta {
	if o == nil || IsNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *HighThroughputWorkQueueResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *HighThroughputWorkQueueResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighThroughputWorkQueueResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *HighThroughputWorkQueueResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *HighThroughputWorkQueueResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

func (o HighThroughputWorkQueueResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighThroughputWorkQueueResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schemas) {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.NumWorkerThreads) {
		toSerialize["numWorkerThreads"] = o.NumWorkerThreads
	}
	if !IsNil(o.NumWriteWorkerThreads) {
		toSerialize["numWriteWorkerThreads"] = o.NumWriteWorkerThreads
	}
	if !IsNil(o.NumAdministrativeSessionWorkerThreads) {
		toSerialize["numAdministrativeSessionWorkerThreads"] = o.NumAdministrativeSessionWorkerThreads
	}
	if !IsNil(o.NumQueues) {
		toSerialize["numQueues"] = o.NumQueues
	}
	if !IsNil(o.NumWriteQueues) {
		toSerialize["numWriteQueues"] = o.NumWriteQueues
	}
	if !IsNil(o.MaxWorkQueueCapacity) {
		toSerialize["maxWorkQueueCapacity"] = o.MaxWorkQueueCapacity
	}
	if !IsNil(o.MaxOfferTime) {
		toSerialize["maxOfferTime"] = o.MaxOfferTime
	}
	if !IsNil(o.MonitorQueueTime) {
		toSerialize["monitorQueueTime"] = o.MonitorQueueTime
	}
	if !IsNil(o.MaxQueueTime) {
		toSerialize["maxQueueTime"] = o.MaxQueueTime
	}
	if !IsNil(o.ExpensiveOperationCheckInterval) {
		toSerialize["expensiveOperationCheckInterval"] = o.ExpensiveOperationCheckInterval
	}
	if !IsNil(o.ExpensiveOperationMinimumConcurrentCount) {
		toSerialize["expensiveOperationMinimumConcurrentCount"] = o.ExpensiveOperationMinimumConcurrentCount
	}
	if !IsNil(o.ExpensiveOperationMinimumDumpInterval) {
		toSerialize["expensiveOperationMinimumDumpInterval"] = o.ExpensiveOperationMinimumDumpInterval
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	return toSerialize, nil
}

type NullableHighThroughputWorkQueueResponse struct {
	value *HighThroughputWorkQueueResponse
	isSet bool
}

func (v NullableHighThroughputWorkQueueResponse) Get() *HighThroughputWorkQueueResponse {
	return v.value
}

func (v *NullableHighThroughputWorkQueueResponse) Set(val *HighThroughputWorkQueueResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHighThroughputWorkQueueResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHighThroughputWorkQueueResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighThroughputWorkQueueResponse(val *HighThroughputWorkQueueResponse) *NullableHighThroughputWorkQueueResponse {
	return &NullableHighThroughputWorkQueueResponse{value: val, isSet: true}
}

func (v NullableHighThroughputWorkQueueResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighThroughputWorkQueueResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
