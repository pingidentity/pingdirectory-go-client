/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumintegerAttributeSyntaxSchemaUrn the model 'EnumintegerAttributeSyntaxSchemaUrn'
type EnumintegerAttributeSyntaxSchemaUrn string

// List of Enuminteger-attribute-syntaxSchemaUrn
const (
	ENUMINTEGERATTRIBUTESYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ATTRIBUTE_SYNTAXINTEGER EnumintegerAttributeSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:attribute-syntax:integer"
)

// All allowed values of EnumintegerAttributeSyntaxSchemaUrn enum
var AllowedEnumintegerAttributeSyntaxSchemaUrnEnumValues = []EnumintegerAttributeSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:attribute-syntax:integer",
}

func (v *EnumintegerAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumintegerAttributeSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumintegerAttributeSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumintegerAttributeSyntaxSchemaUrn", value)
}

// NewEnumintegerAttributeSyntaxSchemaUrnFromValue returns a pointer to a valid EnumintegerAttributeSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumintegerAttributeSyntaxSchemaUrnFromValue(v string) (*EnumintegerAttributeSyntaxSchemaUrn, error) {
	ev := EnumintegerAttributeSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumintegerAttributeSyntaxSchemaUrn: valid values are %v", v, AllowedEnumintegerAttributeSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumintegerAttributeSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumintegerAttributeSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enuminteger-attribute-syntaxSchemaUrn value
func (v EnumintegerAttributeSyntaxSchemaUrn) Ptr() *EnumintegerAttributeSyntaxSchemaUrn {
	return &v
}

type NullableEnumintegerAttributeSyntaxSchemaUrn struct {
	value *EnumintegerAttributeSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumintegerAttributeSyntaxSchemaUrn) Get() *EnumintegerAttributeSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumintegerAttributeSyntaxSchemaUrn) Set(val *EnumintegerAttributeSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumintegerAttributeSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumintegerAttributeSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumintegerAttributeSyntaxSchemaUrn(val *EnumintegerAttributeSyntaxSchemaUrn) *NullableEnumintegerAttributeSyntaxSchemaUrn {
	return &NullableEnumintegerAttributeSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumintegerAttributeSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumintegerAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

