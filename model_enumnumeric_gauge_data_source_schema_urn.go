/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumnumericGaugeDataSourceSchemaUrn the model 'EnumnumericGaugeDataSourceSchemaUrn'
type EnumnumericGaugeDataSourceSchemaUrn string

// List of Enumnumeric-gauge-data-sourceSchemaUrn
const (
	ENUMNUMERICGAUGEDATASOURCESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0GAUGE_DATA_SOURCENUMERIC EnumnumericGaugeDataSourceSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:gauge-data-source:numeric"
)

// All allowed values of EnumnumericGaugeDataSourceSchemaUrn enum
var AllowedEnumnumericGaugeDataSourceSchemaUrnEnumValues = []EnumnumericGaugeDataSourceSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:gauge-data-source:numeric",
}

func (v *EnumnumericGaugeDataSourceSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumnumericGaugeDataSourceSchemaUrn(value)
	for _, existing := range AllowedEnumnumericGaugeDataSourceSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumnumericGaugeDataSourceSchemaUrn", value)
}

// NewEnumnumericGaugeDataSourceSchemaUrnFromValue returns a pointer to a valid EnumnumericGaugeDataSourceSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumnumericGaugeDataSourceSchemaUrnFromValue(v string) (*EnumnumericGaugeDataSourceSchemaUrn, error) {
	ev := EnumnumericGaugeDataSourceSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumnumericGaugeDataSourceSchemaUrn: valid values are %v", v, AllowedEnumnumericGaugeDataSourceSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumnumericGaugeDataSourceSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumnumericGaugeDataSourceSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumnumeric-gauge-data-sourceSchemaUrn value
func (v EnumnumericGaugeDataSourceSchemaUrn) Ptr() *EnumnumericGaugeDataSourceSchemaUrn {
	return &v
}

type NullableEnumnumericGaugeDataSourceSchemaUrn struct {
	value *EnumnumericGaugeDataSourceSchemaUrn
	isSet bool
}

func (v NullableEnumnumericGaugeDataSourceSchemaUrn) Get() *EnumnumericGaugeDataSourceSchemaUrn {
	return v.value
}

func (v *NullableEnumnumericGaugeDataSourceSchemaUrn) Set(val *EnumnumericGaugeDataSourceSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumnumericGaugeDataSourceSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumnumericGaugeDataSourceSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumnumericGaugeDataSourceSchemaUrn(val *EnumnumericGaugeDataSourceSchemaUrn) *NullableEnumnumericGaugeDataSourceSchemaUrn {
	return &NullableEnumnumericGaugeDataSourceSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumnumericGaugeDataSourceSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumnumericGaugeDataSourceSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
