/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// ScimAttributeApiService ScimAttributeApi service
type ScimAttributeApiService service

type ApiAddScimAttributeRequest struct {
	ctx                     context.Context
	ApiService              *ScimAttributeApiService
	scimSchemaName          string
	addScimAttributeRequest *AddScimAttributeRequest
}

// Create a new SCIM Attribute in the config
func (r ApiAddScimAttributeRequest) AddScimAttributeRequest(addScimAttributeRequest AddScimAttributeRequest) ApiAddScimAttributeRequest {
	r.addScimAttributeRequest = &addScimAttributeRequest
	return r
}

func (r ApiAddScimAttributeRequest) Execute() (*ScimAttributeResponse, *http.Response, error) {
	return r.ApiService.AddScimAttributeExecute(r)
}

/*
AddScimAttribute Add a new SCIM Attribute to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimSchemaName Name of the SCIM Schema
	@return ApiAddScimAttributeRequest
*/
func (a *ScimAttributeApiService) AddScimAttribute(ctx context.Context, scimSchemaName string) ApiAddScimAttributeRequest {
	return ApiAddScimAttributeRequest{
		ApiService:     a,
		ctx:            ctx,
		scimSchemaName: scimSchemaName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeResponse
func (a *ScimAttributeApiService) AddScimAttributeExecute(r ApiAddScimAttributeRequest) (*ScimAttributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeApiService.AddScimAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterToString(r.scimSchemaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addScimAttributeRequest == nil {
		return localVarReturnValue, nil, reportError("addScimAttributeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addScimAttributeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteScimAttributeRequest struct {
	ctx               context.Context
	ApiService        *ScimAttributeApiService
	scimAttributeName string
	scimSchemaName    string
}

func (r ApiDeleteScimAttributeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScimAttributeExecute(r)
}

/*
DeleteScimAttribute Delete a SCIM Attribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiDeleteScimAttributeRequest
*/
func (a *ScimAttributeApiService) DeleteScimAttribute(ctx context.Context, scimAttributeName string, scimSchemaName string) ApiDeleteScimAttributeRequest {
	return ApiDeleteScimAttributeRequest{
		ApiService:        a,
		ctx:               ctx,
		scimAttributeName: scimAttributeName,
		scimSchemaName:    scimSchemaName,
	}
}

// Execute executes the request
func (a *ScimAttributeApiService) DeleteScimAttributeExecute(r ApiDeleteScimAttributeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeApiService.DeleteScimAttribute")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterToString(r.scimAttributeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterToString(r.scimSchemaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScimAttributeRequest struct {
	ctx               context.Context
	ApiService        *ScimAttributeApiService
	scimAttributeName string
	scimSchemaName    string
}

func (r ApiGetScimAttributeRequest) Execute() (*ScimAttributeResponse, *http.Response, error) {
	return r.ApiService.GetScimAttributeExecute(r)
}

/*
GetScimAttribute Returns a single SCIM Attribute

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiGetScimAttributeRequest
*/
func (a *ScimAttributeApiService) GetScimAttribute(ctx context.Context, scimAttributeName string, scimSchemaName string) ApiGetScimAttributeRequest {
	return ApiGetScimAttributeRequest{
		ApiService:        a,
		ctx:               ctx,
		scimAttributeName: scimAttributeName,
		scimSchemaName:    scimSchemaName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeResponse
func (a *ScimAttributeApiService) GetScimAttributeExecute(r ApiGetScimAttributeRequest) (*ScimAttributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeApiService.GetScimAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterToString(r.scimAttributeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterToString(r.scimSchemaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateScimAttributeRequest struct {
	ctx               context.Context
	ApiService        *ScimAttributeApiService
	scimAttributeName string
	scimSchemaName    string
	updateRequest     *UpdateRequest
}

// Update an existing SCIM Attribute
func (r ApiUpdateScimAttributeRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateScimAttributeRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateScimAttributeRequest) Execute() (*ScimAttributeResponse, *http.Response, error) {
	return r.ApiService.UpdateScimAttributeExecute(r)
}

/*
UpdateScimAttribute Update an existing SCIM Attribute by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param scimAttributeName Name of the SCIM Attribute
	@param scimSchemaName Name of the SCIM Schema
	@return ApiUpdateScimAttributeRequest
*/
func (a *ScimAttributeApiService) UpdateScimAttribute(ctx context.Context, scimAttributeName string, scimSchemaName string) ApiUpdateScimAttributeRequest {
	return ApiUpdateScimAttributeRequest{
		ApiService:        a,
		ctx:               ctx,
		scimAttributeName: scimAttributeName,
		scimSchemaName:    scimSchemaName,
	}
}

// Execute executes the request
//
//	@return ScimAttributeResponse
func (a *ScimAttributeApiService) UpdateScimAttributeExecute(r ApiUpdateScimAttributeRequest) (*ScimAttributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ScimAttributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScimAttributeApiService.UpdateScimAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"scim-attribute-name"+"}", url.PathEscape(parameterToString(r.scimAttributeName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim-schema-name"+"}", url.PathEscape(parameterToString(r.scimSchemaName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
