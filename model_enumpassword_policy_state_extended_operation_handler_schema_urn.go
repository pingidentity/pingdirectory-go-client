/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn the model 'EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn'
type EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn string

// List of Enumpassword-policy-state-extended-operation-handlerSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTENDED_OPERATION_HANDLERPASSWORD_POLICY_STATE EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:password-policy-state"
)

// All allowed values of EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn enum
var AllowedEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrnEnumValues = []EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:extended-operation-handler:password-policy-state",
}

func (v *EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn", value)
}

// NewEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrnFromValue returns a pointer to a valid EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrnFromValue(v string) (*EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn, error) {
	ev := EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn: valid values are %v", v, AllowedEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumpassword-policy-state-extended-operation-handlerSchemaUrn value
func (v EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) Ptr() *EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn {
	return &v
}

type NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn struct {
	value *EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) Get() *EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) Set(val *EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn(val *EnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) *NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn {
	return &NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpasswordPolicyStateExtendedOperationHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

