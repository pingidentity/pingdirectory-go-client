/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// ConsentDefinitionLocalizationApiService ConsentDefinitionLocalizationApi service
type ConsentDefinitionLocalizationApiService service

type ApiAddConsentDefinitionLocalizationRequest struct {
	ctx                                     context.Context
	ApiService                              *ConsentDefinitionLocalizationApiService
	consentDefinitionName                   string
	addConsentDefinitionLocalizationRequest *AddConsentDefinitionLocalizationRequest
}

// Create a new Consent Definition Localization in the config
func (r ApiAddConsentDefinitionLocalizationRequest) AddConsentDefinitionLocalizationRequest(addConsentDefinitionLocalizationRequest AddConsentDefinitionLocalizationRequest) ApiAddConsentDefinitionLocalizationRequest {
	r.addConsentDefinitionLocalizationRequest = &addConsentDefinitionLocalizationRequest
	return r
}

func (r ApiAddConsentDefinitionLocalizationRequest) Execute() (*ConsentDefinitionLocalizationResponse, *http.Response, error) {
	return r.ApiService.AddConsentDefinitionLocalizationExecute(r)
}

/*
AddConsentDefinitionLocalization Add a new Consent Definition Localization to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionName Name of the Consent Definition
	@return ApiAddConsentDefinitionLocalizationRequest
*/
func (a *ConsentDefinitionLocalizationApiService) AddConsentDefinitionLocalization(ctx context.Context, consentDefinitionName string) ApiAddConsentDefinitionLocalizationRequest {
	return ApiAddConsentDefinitionLocalizationRequest{
		ApiService:            a,
		ctx:                   ctx,
		consentDefinitionName: consentDefinitionName,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionLocalizationResponse
func (a *ConsentDefinitionLocalizationApiService) AddConsentDefinitionLocalizationExecute(r ApiAddConsentDefinitionLocalizationRequest) (*ConsentDefinitionLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionLocalizationApiService.AddConsentDefinitionLocalization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}/consent-definition-localizations"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addConsentDefinitionLocalizationRequest == nil {
		return localVarReturnValue, nil, reportError("addConsentDefinitionLocalizationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addConsentDefinitionLocalizationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConsentDefinitionLocalizationRequest struct {
	ctx                               context.Context
	ApiService                        *ConsentDefinitionLocalizationApiService
	consentDefinitionLocalizationName string
	consentDefinitionName             string
}

func (r ApiDeleteConsentDefinitionLocalizationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteConsentDefinitionLocalizationExecute(r)
}

/*
DeleteConsentDefinitionLocalization Delete a Consent Definition Localization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionLocalizationName Name of the Consent Definition Localization
	@param consentDefinitionName Name of the Consent Definition
	@return ApiDeleteConsentDefinitionLocalizationRequest
*/
func (a *ConsentDefinitionLocalizationApiService) DeleteConsentDefinitionLocalization(ctx context.Context, consentDefinitionLocalizationName string, consentDefinitionName string) ApiDeleteConsentDefinitionLocalizationRequest {
	return ApiDeleteConsentDefinitionLocalizationRequest{
		ApiService:                        a,
		ctx:                               ctx,
		consentDefinitionLocalizationName: consentDefinitionLocalizationName,
		consentDefinitionName:             consentDefinitionName,
	}
}

// Execute executes the request
func (a *ConsentDefinitionLocalizationApiService) DeleteConsentDefinitionLocalizationExecute(r ApiDeleteConsentDefinitionLocalizationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionLocalizationApiService.DeleteConsentDefinitionLocalization")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-localization-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionLocalizationName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetConsentDefinitionLocalizationRequest struct {
	ctx                               context.Context
	ApiService                        *ConsentDefinitionLocalizationApiService
	consentDefinitionLocalizationName string
	consentDefinitionName             string
}

func (r ApiGetConsentDefinitionLocalizationRequest) Execute() (*ConsentDefinitionLocalizationResponse, *http.Response, error) {
	return r.ApiService.GetConsentDefinitionLocalizationExecute(r)
}

/*
GetConsentDefinitionLocalization Returns a single Consent Definition Localization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionLocalizationName Name of the Consent Definition Localization
	@param consentDefinitionName Name of the Consent Definition
	@return ApiGetConsentDefinitionLocalizationRequest
*/
func (a *ConsentDefinitionLocalizationApiService) GetConsentDefinitionLocalization(ctx context.Context, consentDefinitionLocalizationName string, consentDefinitionName string) ApiGetConsentDefinitionLocalizationRequest {
	return ApiGetConsentDefinitionLocalizationRequest{
		ApiService:                        a,
		ctx:                               ctx,
		consentDefinitionLocalizationName: consentDefinitionLocalizationName,
		consentDefinitionName:             consentDefinitionName,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionLocalizationResponse
func (a *ConsentDefinitionLocalizationApiService) GetConsentDefinitionLocalizationExecute(r ApiGetConsentDefinitionLocalizationRequest) (*ConsentDefinitionLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionLocalizationApiService.GetConsentDefinitionLocalization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-localization-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionLocalizationName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConsentDefinitionLocalizationRequest struct {
	ctx                               context.Context
	ApiService                        *ConsentDefinitionLocalizationApiService
	consentDefinitionLocalizationName string
	consentDefinitionName             string
	updateRequest                     *UpdateRequest
}

// Update an existing Consent Definition Localization
func (r ApiUpdateConsentDefinitionLocalizationRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateConsentDefinitionLocalizationRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateConsentDefinitionLocalizationRequest) Execute() (*ConsentDefinitionLocalizationResponse, *http.Response, error) {
	return r.ApiService.UpdateConsentDefinitionLocalizationExecute(r)
}

/*
UpdateConsentDefinitionLocalization Update an existing Consent Definition Localization by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consentDefinitionLocalizationName Name of the Consent Definition Localization
	@param consentDefinitionName Name of the Consent Definition
	@return ApiUpdateConsentDefinitionLocalizationRequest
*/
func (a *ConsentDefinitionLocalizationApiService) UpdateConsentDefinitionLocalization(ctx context.Context, consentDefinitionLocalizationName string, consentDefinitionName string) ApiUpdateConsentDefinitionLocalizationRequest {
	return ApiUpdateConsentDefinitionLocalizationRequest{
		ApiService:                        a,
		ctx:                               ctx,
		consentDefinitionLocalizationName: consentDefinitionLocalizationName,
		consentDefinitionName:             consentDefinitionName,
	}
}

// Execute executes the request
//
//	@return ConsentDefinitionLocalizationResponse
func (a *ConsentDefinitionLocalizationApiService) UpdateConsentDefinitionLocalizationExecute(r ApiUpdateConsentDefinitionLocalizationRequest) (*ConsentDefinitionLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsentDefinitionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsentDefinitionLocalizationApiService.UpdateConsentDefinitionLocalization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-localization-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionLocalizationName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"consent-definition-name"+"}", url.PathEscape(parameterToString(r.consentDefinitionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
