/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumfileBasedKeyManagerProviderSchemaUrn the model 'EnumfileBasedKeyManagerProviderSchemaUrn'
type EnumfileBasedKeyManagerProviderSchemaUrn string

// List of Enumfile-based-key-manager-providerSchemaUrn
const (
	ENUMFILEBASEDKEYMANAGERPROVIDERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0KEY_MANAGER_PROVIDERFILE_BASED EnumfileBasedKeyManagerProviderSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:key-manager-provider:file-based"
)

// All allowed values of EnumfileBasedKeyManagerProviderSchemaUrn enum
var AllowedEnumfileBasedKeyManagerProviderSchemaUrnEnumValues = []EnumfileBasedKeyManagerProviderSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:key-manager-provider:file-based",
}

func (v *EnumfileBasedKeyManagerProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumfileBasedKeyManagerProviderSchemaUrn(value)
	for _, existing := range AllowedEnumfileBasedKeyManagerProviderSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumfileBasedKeyManagerProviderSchemaUrn", value)
}

// NewEnumfileBasedKeyManagerProviderSchemaUrnFromValue returns a pointer to a valid EnumfileBasedKeyManagerProviderSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumfileBasedKeyManagerProviderSchemaUrnFromValue(v string) (*EnumfileBasedKeyManagerProviderSchemaUrn, error) {
	ev := EnumfileBasedKeyManagerProviderSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumfileBasedKeyManagerProviderSchemaUrn: valid values are %v", v, AllowedEnumfileBasedKeyManagerProviderSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumfileBasedKeyManagerProviderSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumfileBasedKeyManagerProviderSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumfile-based-key-manager-providerSchemaUrn value
func (v EnumfileBasedKeyManagerProviderSchemaUrn) Ptr() *EnumfileBasedKeyManagerProviderSchemaUrn {
	return &v
}

type NullableEnumfileBasedKeyManagerProviderSchemaUrn struct {
	value *EnumfileBasedKeyManagerProviderSchemaUrn
	isSet bool
}

func (v NullableEnumfileBasedKeyManagerProviderSchemaUrn) Get() *EnumfileBasedKeyManagerProviderSchemaUrn {
	return v.value
}

func (v *NullableEnumfileBasedKeyManagerProviderSchemaUrn) Set(val *EnumfileBasedKeyManagerProviderSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumfileBasedKeyManagerProviderSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumfileBasedKeyManagerProviderSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumfileBasedKeyManagerProviderSchemaUrn(val *EnumfileBasedKeyManagerProviderSchemaUrn) *NullableEnumfileBasedKeyManagerProviderSchemaUrn {
	return &NullableEnumfileBasedKeyManagerProviderSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumfileBasedKeyManagerProviderSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumfileBasedKeyManagerProviderSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
