/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn the model 'EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn'
type EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn string

// List of Enumgroovy-scripted-file-based-access-log-publisherSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERGROOVY_SCRIPTED_FILE_BASED_ACCESS EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:groovy-scripted-file-based-access"
)

// All allowed values of EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn enum
var AllowedEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrnEnumValues = []EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:groovy-scripted-file-based-access",
}

func (v *EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn", value)
}

// NewEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrnFromValue(v string) (*EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn, error) {
	ev := EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumgroovy-scripted-file-based-access-log-publisherSchemaUrn value
func (v EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) Ptr() *EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn {
	return &v
}

type NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn struct {
	value *EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) Get() *EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) Set(val *EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn(val *EnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) *NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn {
	return &NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumgroovyScriptedFileBasedAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

