/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumexecRecurringTaskSchemaUrn the model 'EnumexecRecurringTaskSchemaUrn'
type EnumexecRecurringTaskSchemaUrn string

// List of Enumexec-recurring-taskSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0RECURRING_TASKEXEC EnumexecRecurringTaskSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:recurring-task:exec"
)

// All allowed values of EnumexecRecurringTaskSchemaUrn enum
var AllowedEnumexecRecurringTaskSchemaUrnEnumValues = []EnumexecRecurringTaskSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:recurring-task:exec",
}

func (v *EnumexecRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumexecRecurringTaskSchemaUrn(value)
	for _, existing := range AllowedEnumexecRecurringTaskSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumexecRecurringTaskSchemaUrn", value)
}

// NewEnumexecRecurringTaskSchemaUrnFromValue returns a pointer to a valid EnumexecRecurringTaskSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumexecRecurringTaskSchemaUrnFromValue(v string) (*EnumexecRecurringTaskSchemaUrn, error) {
	ev := EnumexecRecurringTaskSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumexecRecurringTaskSchemaUrn: valid values are %v", v, AllowedEnumexecRecurringTaskSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumexecRecurringTaskSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumexecRecurringTaskSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumexec-recurring-taskSchemaUrn value
func (v EnumexecRecurringTaskSchemaUrn) Ptr() *EnumexecRecurringTaskSchemaUrn {
	return &v
}

type NullableEnumexecRecurringTaskSchemaUrn struct {
	value *EnumexecRecurringTaskSchemaUrn
	isSet bool
}

func (v NullableEnumexecRecurringTaskSchemaUrn) Get() *EnumexecRecurringTaskSchemaUrn {
	return v.value
}

func (v *NullableEnumexecRecurringTaskSchemaUrn) Set(val *EnumexecRecurringTaskSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumexecRecurringTaskSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumexecRecurringTaskSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumexecRecurringTaskSchemaUrn(val *EnumexecRecurringTaskSchemaUrn) *NullableEnumexecRecurringTaskSchemaUrn {
	return &NullableEnumexecRecurringTaskSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumexecRecurringTaskSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumexecRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

