/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumvelocityContextProviderObjectScopeProp Scope for context objects contributed by this Velocity Context Provider. Must be either 'request' or 'session' or 'application'.
type EnumvelocityContextProviderObjectScopeProp string

// List of Enumvelocity-context-provider-objectScopeProp
const (
	ENUMVELOCITYCONTEXTPROVIDEROBJECTSCOPEPROP_APPLICATION EnumvelocityContextProviderObjectScopeProp = "application"
	ENUMVELOCITYCONTEXTPROVIDEROBJECTSCOPEPROP_SESSION     EnumvelocityContextProviderObjectScopeProp = "session"
	ENUMVELOCITYCONTEXTPROVIDEROBJECTSCOPEPROP_REQUEST     EnumvelocityContextProviderObjectScopeProp = "request"
)

// All allowed values of EnumvelocityContextProviderObjectScopeProp enum
var AllowedEnumvelocityContextProviderObjectScopePropEnumValues = []EnumvelocityContextProviderObjectScopeProp{
	"application",
	"session",
	"request",
}

func (v *EnumvelocityContextProviderObjectScopeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumvelocityContextProviderObjectScopeProp(value)
	for _, existing := range AllowedEnumvelocityContextProviderObjectScopePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumvelocityContextProviderObjectScopeProp", value)
}

// NewEnumvelocityContextProviderObjectScopePropFromValue returns a pointer to a valid EnumvelocityContextProviderObjectScopeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumvelocityContextProviderObjectScopePropFromValue(v string) (*EnumvelocityContextProviderObjectScopeProp, error) {
	ev := EnumvelocityContextProviderObjectScopeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumvelocityContextProviderObjectScopeProp: valid values are %v", v, AllowedEnumvelocityContextProviderObjectScopePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumvelocityContextProviderObjectScopeProp) IsValid() bool {
	for _, existing := range AllowedEnumvelocityContextProviderObjectScopePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumvelocity-context-provider-objectScopeProp value
func (v EnumvelocityContextProviderObjectScopeProp) Ptr() *EnumvelocityContextProviderObjectScopeProp {
	return &v
}

type NullableEnumvelocityContextProviderObjectScopeProp struct {
	value *EnumvelocityContextProviderObjectScopeProp
	isSet bool
}

func (v NullableEnumvelocityContextProviderObjectScopeProp) Get() *EnumvelocityContextProviderObjectScopeProp {
	return v.value
}

func (v *NullableEnumvelocityContextProviderObjectScopeProp) Set(val *EnumvelocityContextProviderObjectScopeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumvelocityContextProviderObjectScopeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumvelocityContextProviderObjectScopeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumvelocityContextProviderObjectScopeProp(val *EnumvelocityContextProviderObjectScopeProp) *NullableEnumvelocityContextProviderObjectScopeProp {
	return &NullableEnumvelocityContextProviderObjectScopeProp{value: val, isSet: true}
}

func (v NullableEnumvelocityContextProviderObjectScopeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumvelocityContextProviderObjectScopeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
