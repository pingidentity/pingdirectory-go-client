/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumjdbcExternalServerSchemaUrn the model 'EnumjdbcExternalServerSchemaUrn'
type EnumjdbcExternalServerSchemaUrn string

// List of Enumjdbc-external-serverSchemaUrn
const (
	ENUMJDBCEXTERNALSERVERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0EXTERNAL_SERVERJDBC EnumjdbcExternalServerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:external-server:jdbc"
)

// All allowed values of EnumjdbcExternalServerSchemaUrn enum
var AllowedEnumjdbcExternalServerSchemaUrnEnumValues = []EnumjdbcExternalServerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:external-server:jdbc",
}

func (v *EnumjdbcExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjdbcExternalServerSchemaUrn(value)
	for _, existing := range AllowedEnumjdbcExternalServerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjdbcExternalServerSchemaUrn", value)
}

// NewEnumjdbcExternalServerSchemaUrnFromValue returns a pointer to a valid EnumjdbcExternalServerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjdbcExternalServerSchemaUrnFromValue(v string) (*EnumjdbcExternalServerSchemaUrn, error) {
	ev := EnumjdbcExternalServerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjdbcExternalServerSchemaUrn: valid values are %v", v, AllowedEnumjdbcExternalServerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjdbcExternalServerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjdbcExternalServerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjdbc-external-serverSchemaUrn value
func (v EnumjdbcExternalServerSchemaUrn) Ptr() *EnumjdbcExternalServerSchemaUrn {
	return &v
}

type NullableEnumjdbcExternalServerSchemaUrn struct {
	value *EnumjdbcExternalServerSchemaUrn
	isSet bool
}

func (v NullableEnumjdbcExternalServerSchemaUrn) Get() *EnumjdbcExternalServerSchemaUrn {
	return v.value
}

func (v *NullableEnumjdbcExternalServerSchemaUrn) Set(val *EnumjdbcExternalServerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjdbcExternalServerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjdbcExternalServerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjdbcExternalServerSchemaUrn(val *EnumjdbcExternalServerSchemaUrn) *NullableEnumjdbcExternalServerSchemaUrn {
	return &NullableEnumjdbcExternalServerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjdbcExternalServerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjdbcExternalServerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
