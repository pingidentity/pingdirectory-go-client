/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdirectoryServerInstanceSchemaUrn the model 'EnumdirectoryServerInstanceSchemaUrn'
type EnumdirectoryServerInstanceSchemaUrn string

// List of Enumdirectory-server-instanceSchemaUrn
const (
	ENUMDIRECTORYSERVERINSTANCESCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SERVER_INSTANCEDIRECTORY EnumdirectoryServerInstanceSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:server-instance:directory"
)

// All allowed values of EnumdirectoryServerInstanceSchemaUrn enum
var AllowedEnumdirectoryServerInstanceSchemaUrnEnumValues = []EnumdirectoryServerInstanceSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:server-instance:directory",
}

func (v *EnumdirectoryServerInstanceSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdirectoryServerInstanceSchemaUrn(value)
	for _, existing := range AllowedEnumdirectoryServerInstanceSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdirectoryServerInstanceSchemaUrn", value)
}

// NewEnumdirectoryServerInstanceSchemaUrnFromValue returns a pointer to a valid EnumdirectoryServerInstanceSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdirectoryServerInstanceSchemaUrnFromValue(v string) (*EnumdirectoryServerInstanceSchemaUrn, error) {
	ev := EnumdirectoryServerInstanceSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdirectoryServerInstanceSchemaUrn: valid values are %v", v, AllowedEnumdirectoryServerInstanceSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdirectoryServerInstanceSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumdirectoryServerInstanceSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdirectory-server-instanceSchemaUrn value
func (v EnumdirectoryServerInstanceSchemaUrn) Ptr() *EnumdirectoryServerInstanceSchemaUrn {
	return &v
}

type NullableEnumdirectoryServerInstanceSchemaUrn struct {
	value *EnumdirectoryServerInstanceSchemaUrn
	isSet bool
}

func (v NullableEnumdirectoryServerInstanceSchemaUrn) Get() *EnumdirectoryServerInstanceSchemaUrn {
	return v.value
}

func (v *NullableEnumdirectoryServerInstanceSchemaUrn) Set(val *EnumdirectoryServerInstanceSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdirectoryServerInstanceSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdirectoryServerInstanceSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdirectoryServerInstanceSchemaUrn(val *EnumdirectoryServerInstanceSchemaUrn) *NullableEnumdirectoryServerInstanceSchemaUrn {
	return &NullableEnumdirectoryServerInstanceSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumdirectoryServerInstanceSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdirectoryServerInstanceSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
