/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumpingOnePassThroughAuthenticationPluginSchemaUrn the model 'EnumpingOnePassThroughAuthenticationPluginSchemaUrn'
type EnumpingOnePassThroughAuthenticationPluginSchemaUrn string

// List of Enumping-one-pass-through-authentication-pluginSchemaUrn
const (
	ENUMPINGONEPASSTHROUGHAUTHENTICATIONPLUGINSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0PLUGINPING_ONE_PASS_THROUGH_AUTHENTICATION EnumpingOnePassThroughAuthenticationPluginSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:plugin:ping-one-pass-through-authentication"
)

// All allowed values of EnumpingOnePassThroughAuthenticationPluginSchemaUrn enum
var AllowedEnumpingOnePassThroughAuthenticationPluginSchemaUrnEnumValues = []EnumpingOnePassThroughAuthenticationPluginSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:plugin:ping-one-pass-through-authentication",
}

func (v *EnumpingOnePassThroughAuthenticationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumpingOnePassThroughAuthenticationPluginSchemaUrn(value)
	for _, existing := range AllowedEnumpingOnePassThroughAuthenticationPluginSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumpingOnePassThroughAuthenticationPluginSchemaUrn", value)
}

// NewEnumpingOnePassThroughAuthenticationPluginSchemaUrnFromValue returns a pointer to a valid EnumpingOnePassThroughAuthenticationPluginSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumpingOnePassThroughAuthenticationPluginSchemaUrnFromValue(v string) (*EnumpingOnePassThroughAuthenticationPluginSchemaUrn, error) {
	ev := EnumpingOnePassThroughAuthenticationPluginSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumpingOnePassThroughAuthenticationPluginSchemaUrn: valid values are %v", v, AllowedEnumpingOnePassThroughAuthenticationPluginSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumpingOnePassThroughAuthenticationPluginSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumpingOnePassThroughAuthenticationPluginSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumping-one-pass-through-authentication-pluginSchemaUrn value
func (v EnumpingOnePassThroughAuthenticationPluginSchemaUrn) Ptr() *EnumpingOnePassThroughAuthenticationPluginSchemaUrn {
	return &v
}

type NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn struct {
	value *EnumpingOnePassThroughAuthenticationPluginSchemaUrn
	isSet bool
}

func (v NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn) Get() *EnumpingOnePassThroughAuthenticationPluginSchemaUrn {
	return v.value
}

func (v *NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn) Set(val *EnumpingOnePassThroughAuthenticationPluginSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn(val *EnumpingOnePassThroughAuthenticationPluginSchemaUrn) *NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn {
	return &NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumpingOnePassThroughAuthenticationPluginSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
