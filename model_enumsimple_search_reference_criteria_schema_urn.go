/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsimpleSearchReferenceCriteriaSchemaUrn the model 'EnumsimpleSearchReferenceCriteriaSchemaUrn'
type EnumsimpleSearchReferenceCriteriaSchemaUrn string

// List of Enumsimple-search-reference-criteriaSchemaUrn
const (
	ENUMSIMPLESEARCHREFERENCECRITERIASCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0SEARCH_REFERENCE_CRITERIASIMPLE EnumsimpleSearchReferenceCriteriaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:search-reference-criteria:simple"
)

// All allowed values of EnumsimpleSearchReferenceCriteriaSchemaUrn enum
var AllowedEnumsimpleSearchReferenceCriteriaSchemaUrnEnumValues = []EnumsimpleSearchReferenceCriteriaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:search-reference-criteria:simple",
}

func (v *EnumsimpleSearchReferenceCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsimpleSearchReferenceCriteriaSchemaUrn(value)
	for _, existing := range AllowedEnumsimpleSearchReferenceCriteriaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsimpleSearchReferenceCriteriaSchemaUrn", value)
}

// NewEnumsimpleSearchReferenceCriteriaSchemaUrnFromValue returns a pointer to a valid EnumsimpleSearchReferenceCriteriaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsimpleSearchReferenceCriteriaSchemaUrnFromValue(v string) (*EnumsimpleSearchReferenceCriteriaSchemaUrn, error) {
	ev := EnumsimpleSearchReferenceCriteriaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsimpleSearchReferenceCriteriaSchemaUrn: valid values are %v", v, AllowedEnumsimpleSearchReferenceCriteriaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsimpleSearchReferenceCriteriaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumsimpleSearchReferenceCriteriaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumsimple-search-reference-criteriaSchemaUrn value
func (v EnumsimpleSearchReferenceCriteriaSchemaUrn) Ptr() *EnumsimpleSearchReferenceCriteriaSchemaUrn {
	return &v
}

type NullableEnumsimpleSearchReferenceCriteriaSchemaUrn struct {
	value *EnumsimpleSearchReferenceCriteriaSchemaUrn
	isSet bool
}

func (v NullableEnumsimpleSearchReferenceCriteriaSchemaUrn) Get() *EnumsimpleSearchReferenceCriteriaSchemaUrn {
	return v.value
}

func (v *NullableEnumsimpleSearchReferenceCriteriaSchemaUrn) Set(val *EnumsimpleSearchReferenceCriteriaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsimpleSearchReferenceCriteriaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsimpleSearchReferenceCriteriaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsimpleSearchReferenceCriteriaSchemaUrn(val *EnumsimpleSearchReferenceCriteriaSchemaUrn) *NullableEnumsimpleSearchReferenceCriteriaSchemaUrn {
	return &NullableEnumsimpleSearchReferenceCriteriaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumsimpleSearchReferenceCriteriaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsimpleSearchReferenceCriteriaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

