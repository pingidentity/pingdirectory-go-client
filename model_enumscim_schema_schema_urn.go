/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumscimSchemaSchemaUrn the model 'EnumscimSchemaSchemaUrn'
type EnumscimSchemaSchemaUrn string

// List of Enumscim-schemaSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0SCIM_SCHEMA EnumscimSchemaSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:scim-schema"
)

// All allowed values of EnumscimSchemaSchemaUrn enum
var AllowedEnumscimSchemaSchemaUrnEnumValues = []EnumscimSchemaSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:scim-schema",
}

func (v *EnumscimSchemaSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumscimSchemaSchemaUrn(value)
	for _, existing := range AllowedEnumscimSchemaSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumscimSchemaSchemaUrn", value)
}

// NewEnumscimSchemaSchemaUrnFromValue returns a pointer to a valid EnumscimSchemaSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscimSchemaSchemaUrnFromValue(v string) (*EnumscimSchemaSchemaUrn, error) {
	ev := EnumscimSchemaSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumscimSchemaSchemaUrn: valid values are %v", v, AllowedEnumscimSchemaSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumscimSchemaSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumscimSchemaSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim-schemaSchemaUrn value
func (v EnumscimSchemaSchemaUrn) Ptr() *EnumscimSchemaSchemaUrn {
	return &v
}

type NullableEnumscimSchemaSchemaUrn struct {
	value *EnumscimSchemaSchemaUrn
	isSet bool
}

func (v NullableEnumscimSchemaSchemaUrn) Get() *EnumscimSchemaSchemaUrn {
	return v.value
}

func (v *NullableEnumscimSchemaSchemaUrn) Set(val *EnumscimSchemaSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscimSchemaSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscimSchemaSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscimSchemaSchemaUrn(val *EnumscimSchemaSchemaUrn) *NullableEnumscimSchemaSchemaUrn {
	return &NullableEnumscimSchemaSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumscimSchemaSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscimSchemaSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

