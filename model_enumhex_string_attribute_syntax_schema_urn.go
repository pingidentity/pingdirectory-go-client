/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumhexStringAttributeSyntaxSchemaUrn the model 'EnumhexStringAttributeSyntaxSchemaUrn'
type EnumhexStringAttributeSyntaxSchemaUrn string

// List of Enumhex-string-attribute-syntaxSchemaUrn
const (
	ENUMHEXSTRINGATTRIBUTESYNTAXSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0ATTRIBUTE_SYNTAXHEX_STRING EnumhexStringAttributeSyntaxSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:attribute-syntax:hex-string"
)

// All allowed values of EnumhexStringAttributeSyntaxSchemaUrn enum
var AllowedEnumhexStringAttributeSyntaxSchemaUrnEnumValues = []EnumhexStringAttributeSyntaxSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:attribute-syntax:hex-string",
}

func (v *EnumhexStringAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumhexStringAttributeSyntaxSchemaUrn(value)
	for _, existing := range AllowedEnumhexStringAttributeSyntaxSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumhexStringAttributeSyntaxSchemaUrn", value)
}

// NewEnumhexStringAttributeSyntaxSchemaUrnFromValue returns a pointer to a valid EnumhexStringAttributeSyntaxSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumhexStringAttributeSyntaxSchemaUrnFromValue(v string) (*EnumhexStringAttributeSyntaxSchemaUrn, error) {
	ev := EnumhexStringAttributeSyntaxSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumhexStringAttributeSyntaxSchemaUrn: valid values are %v", v, AllowedEnumhexStringAttributeSyntaxSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumhexStringAttributeSyntaxSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumhexStringAttributeSyntaxSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumhex-string-attribute-syntaxSchemaUrn value
func (v EnumhexStringAttributeSyntaxSchemaUrn) Ptr() *EnumhexStringAttributeSyntaxSchemaUrn {
	return &v
}

type NullableEnumhexStringAttributeSyntaxSchemaUrn struct {
	value *EnumhexStringAttributeSyntaxSchemaUrn
	isSet bool
}

func (v NullableEnumhexStringAttributeSyntaxSchemaUrn) Get() *EnumhexStringAttributeSyntaxSchemaUrn {
	return v.value
}

func (v *NullableEnumhexStringAttributeSyntaxSchemaUrn) Set(val *EnumhexStringAttributeSyntaxSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumhexStringAttributeSyntaxSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumhexStringAttributeSyntaxSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumhexStringAttributeSyntaxSchemaUrn(val *EnumhexStringAttributeSyntaxSchemaUrn) *NullableEnumhexStringAttributeSyntaxSchemaUrn {
	return &NullableEnumhexStringAttributeSyntaxSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumhexStringAttributeSyntaxSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumhexStringAttributeSyntaxSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
