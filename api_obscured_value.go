/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ObscuredValueApiService ObscuredValueApi service
type ObscuredValueApiService service

type ApiAddObscuredValueRequest struct {
	ctx context.Context
	ApiService *ObscuredValueApiService
	addObscuredValueRequest *AddObscuredValueRequest
}

// Create a new Obscured Value in the config
func (r ApiAddObscuredValueRequest) AddObscuredValueRequest(addObscuredValueRequest AddObscuredValueRequest) ApiAddObscuredValueRequest {
	r.addObscuredValueRequest = &addObscuredValueRequest
	return r
}

func (r ApiAddObscuredValueRequest) Execute() (*ObscuredValueResponse, *http.Response, error) {
	return r.ApiService.AddObscuredValueExecute(r)
}

/*
AddObscuredValue Add a new Obscured Value to the config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddObscuredValueRequest
*/
func (a *ObscuredValueApiService) AddObscuredValue(ctx context.Context) ApiAddObscuredValueRequest {
	return ApiAddObscuredValueRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ObscuredValueResponse
func (a *ObscuredValueApiService) AddObscuredValueExecute(r ApiAddObscuredValueRequest) (*ObscuredValueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObscuredValueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObscuredValueApiService.AddObscuredValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/obscured-values"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addObscuredValueRequest == nil {
		return localVarReturnValue, nil, reportError("addObscuredValueRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addObscuredValueRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteObscuredValueRequest struct {
	ctx context.Context
	ApiService *ObscuredValueApiService
	obscuredValueName string
}

func (r ApiDeleteObscuredValueRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteObscuredValueExecute(r)
}

/*
DeleteObscuredValue Delete a Obscured Value

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param obscuredValueName Name of the Obscured Value to be deleted
 @return ApiDeleteObscuredValueRequest
*/
func (a *ObscuredValueApiService) DeleteObscuredValue(ctx context.Context, obscuredValueName string) ApiDeleteObscuredValueRequest {
	return ApiDeleteObscuredValueRequest{
		ApiService: a,
		ctx: ctx,
		obscuredValueName: obscuredValueName,
	}
}

// Execute executes the request
func (a *ObscuredValueApiService) DeleteObscuredValueExecute(r ApiDeleteObscuredValueRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObscuredValueApiService.DeleteObscuredValue")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/obscured-values/{obscured-value-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"obscured-value-name"+"}", url.PathEscape(parameterToString(r.obscuredValueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetObscuredValueRequest struct {
	ctx context.Context
	ApiService *ObscuredValueApiService
	obscuredValueName string
}

func (r ApiGetObscuredValueRequest) Execute() (*ObscuredValueResponse, *http.Response, error) {
	return r.ApiService.GetObscuredValueExecute(r)
}

/*
GetObscuredValue Returns a single Obscured Value

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param obscuredValueName Name of the Obscured Value to be read
 @return ApiGetObscuredValueRequest
*/
func (a *ObscuredValueApiService) GetObscuredValue(ctx context.Context, obscuredValueName string) ApiGetObscuredValueRequest {
	return ApiGetObscuredValueRequest{
		ApiService: a,
		ctx: ctx,
		obscuredValueName: obscuredValueName,
	}
}

// Execute executes the request
//  @return ObscuredValueResponse
func (a *ObscuredValueApiService) GetObscuredValueExecute(r ApiGetObscuredValueRequest) (*ObscuredValueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObscuredValueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObscuredValueApiService.GetObscuredValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/obscured-values/{obscured-value-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"obscured-value-name"+"}", url.PathEscape(parameterToString(r.obscuredValueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateObscuredValueRequest struct {
	ctx context.Context
	ApiService *ObscuredValueApiService
	obscuredValueName string
	updateRequest *UpdateRequest
}

// Update an existing Obscured Value
func (r ApiUpdateObscuredValueRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateObscuredValueRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateObscuredValueRequest) Execute() (*ObscuredValueResponse, *http.Response, error) {
	return r.ApiService.UpdateObscuredValueExecute(r)
}

/*
UpdateObscuredValue Update an existing Obscured Value by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param obscuredValueName Name of the Obscured Value to be updated
 @return ApiUpdateObscuredValueRequest
*/
func (a *ObscuredValueApiService) UpdateObscuredValue(ctx context.Context, obscuredValueName string) ApiUpdateObscuredValueRequest {
	return ApiUpdateObscuredValueRequest{
		ApiService: a,
		ctx: ctx,
		obscuredValueName: obscuredValueName,
	}
}

// Execute executes the request
//  @return ObscuredValueResponse
func (a *ObscuredValueApiService) UpdateObscuredValueExecute(r ApiUpdateObscuredValueRequest) (*ObscuredValueResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObscuredValueResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObscuredValueApiService.UpdateObscuredValue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/obscured-values/{obscured-value-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"obscured-value-name"+"}", url.PathEscape(parameterToString(r.obscuredValueName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
