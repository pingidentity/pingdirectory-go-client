/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VaultPassphraseProviderShared struct for VaultPassphraseProviderShared
type VaultPassphraseProviderShared struct {
	Schemas []EnumvaultPassphraseProviderSchemaUrn `json:"schemas"`
	// An external server definition with information needed to connect and authenticate to the Vault instance containing the passphrase.
	VaultExternalServer string `json:"vaultExternalServer"`
	// The path to the desired secret in the Vault service. This will be appended to the value of the base-url property for the associated Vault external server.
	VaultSecretPath string `json:"vaultSecretPath"`
	// The name of the field in the Vault secret record that contains the passphrase to use to generate the encryption key.
	VaultSecretFieldName string `json:"vaultSecretFieldName"`
	// The maximum length of time that the passphrase provider may cache the passphrase that has been read from Vault. A value of zero seconds indicates that the provider should always attempt to read the passphrase from Vault.
	MaxCacheDuration *string `json:"maxCacheDuration,omitempty"`
	// A description for this Passphrase Provider
	Description *string `json:"description,omitempty"`
	// Indicates whether this Passphrase Provider is enabled for use in the server.
	Enabled bool `json:"enabled"`
}

// NewVaultPassphraseProviderShared instantiates a new VaultPassphraseProviderShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultPassphraseProviderShared(schemas []EnumvaultPassphraseProviderSchemaUrn, vaultExternalServer string, vaultSecretPath string, vaultSecretFieldName string, enabled bool) *VaultPassphraseProviderShared {
	this := VaultPassphraseProviderShared{}
	this.Schemas = schemas
	this.VaultExternalServer = vaultExternalServer
	this.VaultSecretPath = vaultSecretPath
	this.VaultSecretFieldName = vaultSecretFieldName
	this.Enabled = enabled
	return &this
}

// NewVaultPassphraseProviderSharedWithDefaults instantiates a new VaultPassphraseProviderShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultPassphraseProviderSharedWithDefaults() *VaultPassphraseProviderShared {
	this := VaultPassphraseProviderShared{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *VaultPassphraseProviderShared) GetSchemas() []EnumvaultPassphraseProviderSchemaUrn {
	if o == nil {
		var ret []EnumvaultPassphraseProviderSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetSchemasOk() ([]EnumvaultPassphraseProviderSchemaUrn, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *VaultPassphraseProviderShared) SetSchemas(v []EnumvaultPassphraseProviderSchemaUrn) {
	o.Schemas = v
}

// GetVaultExternalServer returns the VaultExternalServer field value
func (o *VaultPassphraseProviderShared) GetVaultExternalServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultExternalServer
}

// GetVaultExternalServerOk returns a tuple with the VaultExternalServer field value
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetVaultExternalServerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.VaultExternalServer, true
}

// SetVaultExternalServer sets field value
func (o *VaultPassphraseProviderShared) SetVaultExternalServer(v string) {
	o.VaultExternalServer = v
}

// GetVaultSecretPath returns the VaultSecretPath field value
func (o *VaultPassphraseProviderShared) GetVaultSecretPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultSecretPath
}

// GetVaultSecretPathOk returns a tuple with the VaultSecretPath field value
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetVaultSecretPathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.VaultSecretPath, true
}

// SetVaultSecretPath sets field value
func (o *VaultPassphraseProviderShared) SetVaultSecretPath(v string) {
	o.VaultSecretPath = v
}

// GetVaultSecretFieldName returns the VaultSecretFieldName field value
func (o *VaultPassphraseProviderShared) GetVaultSecretFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultSecretFieldName
}

// GetVaultSecretFieldNameOk returns a tuple with the VaultSecretFieldName field value
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetVaultSecretFieldNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.VaultSecretFieldName, true
}

// SetVaultSecretFieldName sets field value
func (o *VaultPassphraseProviderShared) SetVaultSecretFieldName(v string) {
	o.VaultSecretFieldName = v
}

// GetMaxCacheDuration returns the MaxCacheDuration field value if set, zero value otherwise.
func (o *VaultPassphraseProviderShared) GetMaxCacheDuration() string {
	if o == nil || isNil(o.MaxCacheDuration) {
		var ret string
		return ret
	}
	return *o.MaxCacheDuration
}

// GetMaxCacheDurationOk returns a tuple with the MaxCacheDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetMaxCacheDurationOk() (*string, bool) {
	if o == nil || isNil(o.MaxCacheDuration) {
    return nil, false
	}
	return o.MaxCacheDuration, true
}

// HasMaxCacheDuration returns a boolean if a field has been set.
func (o *VaultPassphraseProviderShared) HasMaxCacheDuration() bool {
	if o != nil && !isNil(o.MaxCacheDuration) {
		return true
	}

	return false
}

// SetMaxCacheDuration gets a reference to the given string and assigns it to the MaxCacheDuration field.
func (o *VaultPassphraseProviderShared) SetMaxCacheDuration(v string) {
	o.MaxCacheDuration = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VaultPassphraseProviderShared) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VaultPassphraseProviderShared) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VaultPassphraseProviderShared) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *VaultPassphraseProviderShared) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *VaultPassphraseProviderShared) GetEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *VaultPassphraseProviderShared) SetEnabled(v bool) {
	o.Enabled = v
}

func (o VaultPassphraseProviderShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["vaultExternalServer"] = o.VaultExternalServer
	}
	if true {
		toSerialize["vaultSecretPath"] = o.VaultSecretPath
	}
	if true {
		toSerialize["vaultSecretFieldName"] = o.VaultSecretFieldName
	}
	if !isNil(o.MaxCacheDuration) {
		toSerialize["maxCacheDuration"] = o.MaxCacheDuration
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableVaultPassphraseProviderShared struct {
	value *VaultPassphraseProviderShared
	isSet bool
}

func (v NullableVaultPassphraseProviderShared) Get() *VaultPassphraseProviderShared {
	return v.value
}

func (v *NullableVaultPassphraseProviderShared) Set(val *VaultPassphraseProviderShared) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultPassphraseProviderShared) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultPassphraseProviderShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultPassphraseProviderShared(val *VaultPassphraseProviderShared) *NullableVaultPassphraseProviderShared {
	return &NullableVaultPassphraseProviderShared{value: val, isSet: true}
}

func (v NullableVaultPassphraseProviderShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultPassphraseProviderShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


