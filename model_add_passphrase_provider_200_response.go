/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddPassphraseProvider200Response - struct for AddPassphraseProvider200Response
type AddPassphraseProvider200Response struct {
	AmazonSecretsManagerPassphraseProviderResponse *AmazonSecretsManagerPassphraseProviderResponse
	AzureKeyVaultPassphraseProviderResponse        *AzureKeyVaultPassphraseProviderResponse
	ConjurPassphraseProviderResponse               *ConjurPassphraseProviderResponse
	EnvironmentVariablePassphraseProviderResponse  *EnvironmentVariablePassphraseProviderResponse
	FileBasedPassphraseProviderResponse            *FileBasedPassphraseProviderResponse
	ObscuredValuePassphraseProviderResponse        *ObscuredValuePassphraseProviderResponse
	ThirdPartyPassphraseProviderResponse           *ThirdPartyPassphraseProviderResponse
	VaultPassphraseProviderResponse                *VaultPassphraseProviderResponse
}

// AmazonSecretsManagerPassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns AmazonSecretsManagerPassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func AmazonSecretsManagerPassphraseProviderResponseAsAddPassphraseProvider200Response(v *AmazonSecretsManagerPassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		AmazonSecretsManagerPassphraseProviderResponse: v,
	}
}

// AzureKeyVaultPassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns AzureKeyVaultPassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func AzureKeyVaultPassphraseProviderResponseAsAddPassphraseProvider200Response(v *AzureKeyVaultPassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		AzureKeyVaultPassphraseProviderResponse: v,
	}
}

// ConjurPassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns ConjurPassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func ConjurPassphraseProviderResponseAsAddPassphraseProvider200Response(v *ConjurPassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		ConjurPassphraseProviderResponse: v,
	}
}

// EnvironmentVariablePassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns EnvironmentVariablePassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func EnvironmentVariablePassphraseProviderResponseAsAddPassphraseProvider200Response(v *EnvironmentVariablePassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		EnvironmentVariablePassphraseProviderResponse: v,
	}
}

// FileBasedPassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns FileBasedPassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func FileBasedPassphraseProviderResponseAsAddPassphraseProvider200Response(v *FileBasedPassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		FileBasedPassphraseProviderResponse: v,
	}
}

// ObscuredValuePassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns ObscuredValuePassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func ObscuredValuePassphraseProviderResponseAsAddPassphraseProvider200Response(v *ObscuredValuePassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		ObscuredValuePassphraseProviderResponse: v,
	}
}

// ThirdPartyPassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns ThirdPartyPassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func ThirdPartyPassphraseProviderResponseAsAddPassphraseProvider200Response(v *ThirdPartyPassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		ThirdPartyPassphraseProviderResponse: v,
	}
}

// VaultPassphraseProviderResponseAsAddPassphraseProvider200Response is a convenience function that returns VaultPassphraseProviderResponse wrapped in AddPassphraseProvider200Response
func VaultPassphraseProviderResponseAsAddPassphraseProvider200Response(v *VaultPassphraseProviderResponse) AddPassphraseProvider200Response {
	return AddPassphraseProvider200Response{
		VaultPassphraseProviderResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddPassphraseProvider200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonSecretsManagerPassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.AmazonSecretsManagerPassphraseProviderResponse)
	if err == nil {
		jsonAmazonSecretsManagerPassphraseProviderResponse, _ := json.Marshal(dst.AmazonSecretsManagerPassphraseProviderResponse)
		if string(jsonAmazonSecretsManagerPassphraseProviderResponse) == "{}" { // empty struct
			dst.AmazonSecretsManagerPassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.AmazonSecretsManagerPassphraseProviderResponse = nil
	}

	// try to unmarshal data into AzureKeyVaultPassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.AzureKeyVaultPassphraseProviderResponse)
	if err == nil {
		jsonAzureKeyVaultPassphraseProviderResponse, _ := json.Marshal(dst.AzureKeyVaultPassphraseProviderResponse)
		if string(jsonAzureKeyVaultPassphraseProviderResponse) == "{}" { // empty struct
			dst.AzureKeyVaultPassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.AzureKeyVaultPassphraseProviderResponse = nil
	}

	// try to unmarshal data into ConjurPassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ConjurPassphraseProviderResponse)
	if err == nil {
		jsonConjurPassphraseProviderResponse, _ := json.Marshal(dst.ConjurPassphraseProviderResponse)
		if string(jsonConjurPassphraseProviderResponse) == "{}" { // empty struct
			dst.ConjurPassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ConjurPassphraseProviderResponse = nil
	}

	// try to unmarshal data into EnvironmentVariablePassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.EnvironmentVariablePassphraseProviderResponse)
	if err == nil {
		jsonEnvironmentVariablePassphraseProviderResponse, _ := json.Marshal(dst.EnvironmentVariablePassphraseProviderResponse)
		if string(jsonEnvironmentVariablePassphraseProviderResponse) == "{}" { // empty struct
			dst.EnvironmentVariablePassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.EnvironmentVariablePassphraseProviderResponse = nil
	}

	// try to unmarshal data into FileBasedPassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.FileBasedPassphraseProviderResponse)
	if err == nil {
		jsonFileBasedPassphraseProviderResponse, _ := json.Marshal(dst.FileBasedPassphraseProviderResponse)
		if string(jsonFileBasedPassphraseProviderResponse) == "{}" { // empty struct
			dst.FileBasedPassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.FileBasedPassphraseProviderResponse = nil
	}

	// try to unmarshal data into ObscuredValuePassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ObscuredValuePassphraseProviderResponse)
	if err == nil {
		jsonObscuredValuePassphraseProviderResponse, _ := json.Marshal(dst.ObscuredValuePassphraseProviderResponse)
		if string(jsonObscuredValuePassphraseProviderResponse) == "{}" { // empty struct
			dst.ObscuredValuePassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ObscuredValuePassphraseProviderResponse = nil
	}

	// try to unmarshal data into ThirdPartyPassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.ThirdPartyPassphraseProviderResponse)
	if err == nil {
		jsonThirdPartyPassphraseProviderResponse, _ := json.Marshal(dst.ThirdPartyPassphraseProviderResponse)
		if string(jsonThirdPartyPassphraseProviderResponse) == "{}" { // empty struct
			dst.ThirdPartyPassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.ThirdPartyPassphraseProviderResponse = nil
	}

	// try to unmarshal data into VaultPassphraseProviderResponse
	err = newStrictDecoder(data).Decode(&dst.VaultPassphraseProviderResponse)
	if err == nil {
		jsonVaultPassphraseProviderResponse, _ := json.Marshal(dst.VaultPassphraseProviderResponse)
		if string(jsonVaultPassphraseProviderResponse) == "{}" { // empty struct
			dst.VaultPassphraseProviderResponse = nil
		} else {
			match++
		}
	} else {
		dst.VaultPassphraseProviderResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonSecretsManagerPassphraseProviderResponse = nil
		dst.AzureKeyVaultPassphraseProviderResponse = nil
		dst.ConjurPassphraseProviderResponse = nil
		dst.EnvironmentVariablePassphraseProviderResponse = nil
		dst.FileBasedPassphraseProviderResponse = nil
		dst.ObscuredValuePassphraseProviderResponse = nil
		dst.ThirdPartyPassphraseProviderResponse = nil
		dst.VaultPassphraseProviderResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddPassphraseProvider200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddPassphraseProvider200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddPassphraseProvider200Response) MarshalJSON() ([]byte, error) {
	if src.AmazonSecretsManagerPassphraseProviderResponse != nil {
		return json.Marshal(&src.AmazonSecretsManagerPassphraseProviderResponse)
	}

	if src.AzureKeyVaultPassphraseProviderResponse != nil {
		return json.Marshal(&src.AzureKeyVaultPassphraseProviderResponse)
	}

	if src.ConjurPassphraseProviderResponse != nil {
		return json.Marshal(&src.ConjurPassphraseProviderResponse)
	}

	if src.EnvironmentVariablePassphraseProviderResponse != nil {
		return json.Marshal(&src.EnvironmentVariablePassphraseProviderResponse)
	}

	if src.FileBasedPassphraseProviderResponse != nil {
		return json.Marshal(&src.FileBasedPassphraseProviderResponse)
	}

	if src.ObscuredValuePassphraseProviderResponse != nil {
		return json.Marshal(&src.ObscuredValuePassphraseProviderResponse)
	}

	if src.ThirdPartyPassphraseProviderResponse != nil {
		return json.Marshal(&src.ThirdPartyPassphraseProviderResponse)
	}

	if src.VaultPassphraseProviderResponse != nil {
		return json.Marshal(&src.VaultPassphraseProviderResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddPassphraseProvider200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AmazonSecretsManagerPassphraseProviderResponse != nil {
		return obj.AmazonSecretsManagerPassphraseProviderResponse
	}

	if obj.AzureKeyVaultPassphraseProviderResponse != nil {
		return obj.AzureKeyVaultPassphraseProviderResponse
	}

	if obj.ConjurPassphraseProviderResponse != nil {
		return obj.ConjurPassphraseProviderResponse
	}

	if obj.EnvironmentVariablePassphraseProviderResponse != nil {
		return obj.EnvironmentVariablePassphraseProviderResponse
	}

	if obj.FileBasedPassphraseProviderResponse != nil {
		return obj.FileBasedPassphraseProviderResponse
	}

	if obj.ObscuredValuePassphraseProviderResponse != nil {
		return obj.ObscuredValuePassphraseProviderResponse
	}

	if obj.ThirdPartyPassphraseProviderResponse != nil {
		return obj.ThirdPartyPassphraseProviderResponse
	}

	if obj.VaultPassphraseProviderResponse != nil {
		return obj.VaultPassphraseProviderResponse
	}

	// all schemas are nil
	return nil
}

type NullableAddPassphraseProvider200Response struct {
	value *AddPassphraseProvider200Response
	isSet bool
}

func (v NullableAddPassphraseProvider200Response) Get() *AddPassphraseProvider200Response {
	return v.value
}

func (v *NullableAddPassphraseProvider200Response) Set(val *AddPassphraseProvider200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPassphraseProvider200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPassphraseProvider200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPassphraseProvider200Response(val *AddPassphraseProvider200Response) *NullableAddPassphraseProvider200Response {
	return &NullableAddPassphraseProvider200Response{value: val, isSet: true}
}

func (v NullableAddPassphraseProvider200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPassphraseProvider200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
