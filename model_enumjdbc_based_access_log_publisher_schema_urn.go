/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumjdbcBasedAccessLogPublisherSchemaUrn the model 'EnumjdbcBasedAccessLogPublisherSchemaUrn'
type EnumjdbcBasedAccessLogPublisherSchemaUrn string

// List of Enumjdbc-based-access-log-publisherSchemaUrn
const (
	ENUMJDBCBASEDACCESSLOGPUBLISHERSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0LOG_PUBLISHERJDBC_BASED_ACCESS EnumjdbcBasedAccessLogPublisherSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:log-publisher:jdbc-based-access"
)

// All allowed values of EnumjdbcBasedAccessLogPublisherSchemaUrn enum
var AllowedEnumjdbcBasedAccessLogPublisherSchemaUrnEnumValues = []EnumjdbcBasedAccessLogPublisherSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:log-publisher:jdbc-based-access",
}

func (v *EnumjdbcBasedAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjdbcBasedAccessLogPublisherSchemaUrn(value)
	for _, existing := range AllowedEnumjdbcBasedAccessLogPublisherSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjdbcBasedAccessLogPublisherSchemaUrn", value)
}

// NewEnumjdbcBasedAccessLogPublisherSchemaUrnFromValue returns a pointer to a valid EnumjdbcBasedAccessLogPublisherSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjdbcBasedAccessLogPublisherSchemaUrnFromValue(v string) (*EnumjdbcBasedAccessLogPublisherSchemaUrn, error) {
	ev := EnumjdbcBasedAccessLogPublisherSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjdbcBasedAccessLogPublisherSchemaUrn: valid values are %v", v, AllowedEnumjdbcBasedAccessLogPublisherSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjdbcBasedAccessLogPublisherSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumjdbcBasedAccessLogPublisherSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjdbc-based-access-log-publisherSchemaUrn value
func (v EnumjdbcBasedAccessLogPublisherSchemaUrn) Ptr() *EnumjdbcBasedAccessLogPublisherSchemaUrn {
	return &v
}

type NullableEnumjdbcBasedAccessLogPublisherSchemaUrn struct {
	value *EnumjdbcBasedAccessLogPublisherSchemaUrn
	isSet bool
}

func (v NullableEnumjdbcBasedAccessLogPublisherSchemaUrn) Get() *EnumjdbcBasedAccessLogPublisherSchemaUrn {
	return v.value
}

func (v *NullableEnumjdbcBasedAccessLogPublisherSchemaUrn) Set(val *EnumjdbcBasedAccessLogPublisherSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjdbcBasedAccessLogPublisherSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjdbcBasedAccessLogPublisherSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjdbcBasedAccessLogPublisherSchemaUrn(val *EnumjdbcBasedAccessLogPublisherSchemaUrn) *NullableEnumjdbcBasedAccessLogPublisherSchemaUrn {
	return &NullableEnumjdbcBasedAccessLogPublisherSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumjdbcBasedAccessLogPublisherSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjdbcBasedAccessLogPublisherSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

