/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumthirdPartyAlertHandlerSchemaUrn the model 'EnumthirdPartyAlertHandlerSchemaUrn'
type EnumthirdPartyAlertHandlerSchemaUrn string

// List of Enumthird-party-alert-handlerSchemaUrn
const (
	URNPINGIDENTITYSCHEMASCONFIGURATION2_0ALERT_HANDLERTHIRD_PARTY EnumthirdPartyAlertHandlerSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:alert-handler:third-party"
)

// All allowed values of EnumthirdPartyAlertHandlerSchemaUrn enum
var AllowedEnumthirdPartyAlertHandlerSchemaUrnEnumValues = []EnumthirdPartyAlertHandlerSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:alert-handler:third-party",
}

func (v *EnumthirdPartyAlertHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumthirdPartyAlertHandlerSchemaUrn(value)
	for _, existing := range AllowedEnumthirdPartyAlertHandlerSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumthirdPartyAlertHandlerSchemaUrn", value)
}

// NewEnumthirdPartyAlertHandlerSchemaUrnFromValue returns a pointer to a valid EnumthirdPartyAlertHandlerSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumthirdPartyAlertHandlerSchemaUrnFromValue(v string) (*EnumthirdPartyAlertHandlerSchemaUrn, error) {
	ev := EnumthirdPartyAlertHandlerSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumthirdPartyAlertHandlerSchemaUrn: valid values are %v", v, AllowedEnumthirdPartyAlertHandlerSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumthirdPartyAlertHandlerSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumthirdPartyAlertHandlerSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumthird-party-alert-handlerSchemaUrn value
func (v EnumthirdPartyAlertHandlerSchemaUrn) Ptr() *EnumthirdPartyAlertHandlerSchemaUrn {
	return &v
}

type NullableEnumthirdPartyAlertHandlerSchemaUrn struct {
	value *EnumthirdPartyAlertHandlerSchemaUrn
	isSet bool
}

func (v NullableEnumthirdPartyAlertHandlerSchemaUrn) Get() *EnumthirdPartyAlertHandlerSchemaUrn {
	return v.value
}

func (v *NullableEnumthirdPartyAlertHandlerSchemaUrn) Set(val *EnumthirdPartyAlertHandlerSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumthirdPartyAlertHandlerSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumthirdPartyAlertHandlerSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumthirdPartyAlertHandlerSchemaUrn(val *EnumthirdPartyAlertHandlerSchemaUrn) *NullableEnumthirdPartyAlertHandlerSchemaUrn {
	return &NullableEnumthirdPartyAlertHandlerSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumthirdPartyAlertHandlerSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumthirdPartyAlertHandlerSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

