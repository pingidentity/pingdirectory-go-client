/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PassphraseProviderApiService PassphraseProviderApi service
type PassphraseProviderApiService service

type ApiAddPassphraseProviderRequest struct {
	ctx                          context.Context
	ApiService                   *PassphraseProviderApiService
	addPassphraseProviderRequest *AddPassphraseProviderRequest
}

// Create a new Passphrase Provider in the config
func (r ApiAddPassphraseProviderRequest) AddPassphraseProviderRequest(addPassphraseProviderRequest AddPassphraseProviderRequest) ApiAddPassphraseProviderRequest {
	r.addPassphraseProviderRequest = &addPassphraseProviderRequest
	return r
}

func (r ApiAddPassphraseProviderRequest) Execute() (*AddPassphraseProvider200Response, *http.Response, error) {
	return r.ApiService.AddPassphraseProviderExecute(r)
}

/*
AddPassphraseProvider Add a new Passphrase Provider to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddPassphraseProviderRequest
*/
func (a *PassphraseProviderApiService) AddPassphraseProvider(ctx context.Context) ApiAddPassphraseProviderRequest {
	return ApiAddPassphraseProviderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddPassphraseProvider200Response
func (a *PassphraseProviderApiService) AddPassphraseProviderExecute(r ApiAddPassphraseProviderRequest) (*AddPassphraseProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPassphraseProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PassphraseProviderApiService.AddPassphraseProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passphrase-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addPassphraseProviderRequest == nil {
		return localVarReturnValue, nil, reportError("addPassphraseProviderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addPassphraseProviderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePassphraseProviderRequest struct {
	ctx                    context.Context
	ApiService             *PassphraseProviderApiService
	passphraseProviderName string
}

func (r ApiDeletePassphraseProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePassphraseProviderExecute(r)
}

/*
DeletePassphraseProvider Delete a Passphrase Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param passphraseProviderName Name of the Passphrase Provider
	@return ApiDeletePassphraseProviderRequest
*/
func (a *PassphraseProviderApiService) DeletePassphraseProvider(ctx context.Context, passphraseProviderName string) ApiDeletePassphraseProviderRequest {
	return ApiDeletePassphraseProviderRequest{
		ApiService:             a,
		ctx:                    ctx,
		passphraseProviderName: passphraseProviderName,
	}
}

// Execute executes the request
func (a *PassphraseProviderApiService) DeletePassphraseProviderExecute(r ApiDeletePassphraseProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PassphraseProviderApiService.DeletePassphraseProvider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passphrase-providers/{passphrase-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"passphrase-provider-name"+"}", url.PathEscape(parameterToString(r.passphraseProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPassphraseProviderRequest struct {
	ctx                    context.Context
	ApiService             *PassphraseProviderApiService
	passphraseProviderName string
}

func (r ApiGetPassphraseProviderRequest) Execute() (*AddPassphraseProvider200Response, *http.Response, error) {
	return r.ApiService.GetPassphraseProviderExecute(r)
}

/*
GetPassphraseProvider Returns a single Passphrase Provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param passphraseProviderName Name of the Passphrase Provider
	@return ApiGetPassphraseProviderRequest
*/
func (a *PassphraseProviderApiService) GetPassphraseProvider(ctx context.Context, passphraseProviderName string) ApiGetPassphraseProviderRequest {
	return ApiGetPassphraseProviderRequest{
		ApiService:             a,
		ctx:                    ctx,
		passphraseProviderName: passphraseProviderName,
	}
}

// Execute executes the request
//
//	@return AddPassphraseProvider200Response
func (a *PassphraseProviderApiService) GetPassphraseProviderExecute(r ApiGetPassphraseProviderRequest) (*AddPassphraseProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPassphraseProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PassphraseProviderApiService.GetPassphraseProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passphrase-providers/{passphrase-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"passphrase-provider-name"+"}", url.PathEscape(parameterToString(r.passphraseProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePassphraseProviderRequest struct {
	ctx                    context.Context
	ApiService             *PassphraseProviderApiService
	passphraseProviderName string
	updateRequest          *UpdateRequest
}

// Update an existing Passphrase Provider
func (r ApiUpdatePassphraseProviderRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdatePassphraseProviderRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdatePassphraseProviderRequest) Execute() (*AddPassphraseProvider200Response, *http.Response, error) {
	return r.ApiService.UpdatePassphraseProviderExecute(r)
}

/*
UpdatePassphraseProvider Update an existing Passphrase Provider by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param passphraseProviderName Name of the Passphrase Provider
	@return ApiUpdatePassphraseProviderRequest
*/
func (a *PassphraseProviderApiService) UpdatePassphraseProvider(ctx context.Context, passphraseProviderName string) ApiUpdatePassphraseProviderRequest {
	return ApiUpdatePassphraseProviderRequest{
		ApiService:             a,
		ctx:                    ctx,
		passphraseProviderName: passphraseProviderName,
	}
}

// Execute executes the request
//
//	@return AddPassphraseProvider200Response
func (a *PassphraseProviderApiService) UpdatePassphraseProviderExecute(r ApiUpdatePassphraseProviderRequest) (*AddPassphraseProvider200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPassphraseProvider200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PassphraseProviderApiService.UpdatePassphraseProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/passphrase-providers/{passphrase-provider-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"passphrase-provider-name"+"}", url.PathEscape(parameterToString(r.passphraseProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
