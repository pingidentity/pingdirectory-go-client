/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// AccessTokenValidatorApiService AccessTokenValidatorApi service
type AccessTokenValidatorApiService service

type ApiAddAccessTokenValidatorRequest struct {
	ctx                            context.Context
	ApiService                     *AccessTokenValidatorApiService
	addAccessTokenValidatorRequest *AddAccessTokenValidatorRequest
}

// Create a new Access Token Validator in the config
func (r ApiAddAccessTokenValidatorRequest) AddAccessTokenValidatorRequest(addAccessTokenValidatorRequest AddAccessTokenValidatorRequest) ApiAddAccessTokenValidatorRequest {
	r.addAccessTokenValidatorRequest = &addAccessTokenValidatorRequest
	return r
}

func (r ApiAddAccessTokenValidatorRequest) Execute() (*AddAccessTokenValidator200Response, *http.Response, error) {
	return r.ApiService.AddAccessTokenValidatorExecute(r)
}

/*
AddAccessTokenValidator Add a new Access Token Validator to the config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddAccessTokenValidatorRequest
*/
func (a *AccessTokenValidatorApiService) AddAccessTokenValidator(ctx context.Context) ApiAddAccessTokenValidatorRequest {
	return ApiAddAccessTokenValidatorRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AddAccessTokenValidator200Response
func (a *AccessTokenValidatorApiService) AddAccessTokenValidatorExecute(r ApiAddAccessTokenValidatorRequest) (*AddAccessTokenValidator200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddAccessTokenValidator200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessTokenValidatorApiService.AddAccessTokenValidator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access-token-validators"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addAccessTokenValidatorRequest == nil {
		return localVarReturnValue, nil, reportError("addAccessTokenValidatorRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addAccessTokenValidatorRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAccessTokenValidatorRequest struct {
	ctx                      context.Context
	ApiService               *AccessTokenValidatorApiService
	accessTokenValidatorName string
}

func (r ApiDeleteAccessTokenValidatorRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAccessTokenValidatorExecute(r)
}

/*
DeleteAccessTokenValidator Delete a Access Token Validator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accessTokenValidatorName Name of the Access Token Validator to be deleted
	@return ApiDeleteAccessTokenValidatorRequest
*/
func (a *AccessTokenValidatorApiService) DeleteAccessTokenValidator(ctx context.Context, accessTokenValidatorName string) ApiDeleteAccessTokenValidatorRequest {
	return ApiDeleteAccessTokenValidatorRequest{
		ApiService:               a,
		ctx:                      ctx,
		accessTokenValidatorName: accessTokenValidatorName,
	}
}

// Execute executes the request
func (a *AccessTokenValidatorApiService) DeleteAccessTokenValidatorExecute(r ApiDeleteAccessTokenValidatorRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessTokenValidatorApiService.DeleteAccessTokenValidator")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access-token-validators/{access-token-validator-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"access-token-validator-name"+"}", url.PathEscape(parameterToString(r.accessTokenValidatorName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAccessTokenValidatorRequest struct {
	ctx                      context.Context
	ApiService               *AccessTokenValidatorApiService
	accessTokenValidatorName string
}

func (r ApiGetAccessTokenValidatorRequest) Execute() (*AddAccessTokenValidator200Response, *http.Response, error) {
	return r.ApiService.GetAccessTokenValidatorExecute(r)
}

/*
GetAccessTokenValidator Returns a single Access Token Validator

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accessTokenValidatorName Name of the Access Token Validator to be read
	@return ApiGetAccessTokenValidatorRequest
*/
func (a *AccessTokenValidatorApiService) GetAccessTokenValidator(ctx context.Context, accessTokenValidatorName string) ApiGetAccessTokenValidatorRequest {
	return ApiGetAccessTokenValidatorRequest{
		ApiService:               a,
		ctx:                      ctx,
		accessTokenValidatorName: accessTokenValidatorName,
	}
}

// Execute executes the request
//
//	@return AddAccessTokenValidator200Response
func (a *AccessTokenValidatorApiService) GetAccessTokenValidatorExecute(r ApiGetAccessTokenValidatorRequest) (*AddAccessTokenValidator200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddAccessTokenValidator200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessTokenValidatorApiService.GetAccessTokenValidator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access-token-validators/{access-token-validator-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"access-token-validator-name"+"}", url.PathEscape(parameterToString(r.accessTokenValidatorName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAccessTokenValidatorRequest struct {
	ctx                      context.Context
	ApiService               *AccessTokenValidatorApiService
	accessTokenValidatorName string
	updateRequest            *UpdateRequest
}

// Update an existing Access Token Validator
func (r ApiUpdateAccessTokenValidatorRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateAccessTokenValidatorRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateAccessTokenValidatorRequest) Execute() (*AddAccessTokenValidator200Response, *http.Response, error) {
	return r.ApiService.UpdateAccessTokenValidatorExecute(r)
}

/*
UpdateAccessTokenValidator Update an existing Access Token Validator by name

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accessTokenValidatorName Name of the Access Token Validator to be updated
	@return ApiUpdateAccessTokenValidatorRequest
*/
func (a *AccessTokenValidatorApiService) UpdateAccessTokenValidator(ctx context.Context, accessTokenValidatorName string) ApiUpdateAccessTokenValidatorRequest {
	return ApiUpdateAccessTokenValidatorRequest{
		ApiService:               a,
		ctx:                      ctx,
		accessTokenValidatorName: accessTokenValidatorName,
	}
}

// Execute executes the request
//
//	@return AddAccessTokenValidator200Response
func (a *AccessTokenValidatorApiService) UpdateAccessTokenValidatorExecute(r ApiUpdateAccessTokenValidatorRequest) (*AddAccessTokenValidator200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddAccessTokenValidator200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccessTokenValidatorApiService.UpdateAccessTokenValidator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/access-token-validators/{access-token-validator-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"access-token-validator-name"+"}", url.PathEscape(parameterToString(r.accessTokenValidatorName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
