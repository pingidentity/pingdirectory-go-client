/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Enumscim2HttpServletExtensionSchemaUrn the model 'Enumscim2HttpServletExtensionSchemaUrn'
type Enumscim2HttpServletExtensionSchemaUrn string

// List of Enumscim2-http-servlet-extensionSchemaUrn
const (
	ENUMSCIM2HTTPSERVLETEXTENSIONSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0HTTP_SERVLET_EXTENSIONSCIM2 Enumscim2HttpServletExtensionSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:scim2"
)

// All allowed values of Enumscim2HttpServletExtensionSchemaUrn enum
var AllowedEnumscim2HttpServletExtensionSchemaUrnEnumValues = []Enumscim2HttpServletExtensionSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:http-servlet-extension:scim2",
}

func (v *Enumscim2HttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Enumscim2HttpServletExtensionSchemaUrn(value)
	for _, existing := range AllowedEnumscim2HttpServletExtensionSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Enumscim2HttpServletExtensionSchemaUrn", value)
}

// NewEnumscim2HttpServletExtensionSchemaUrnFromValue returns a pointer to a valid Enumscim2HttpServletExtensionSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumscim2HttpServletExtensionSchemaUrnFromValue(v string) (*Enumscim2HttpServletExtensionSchemaUrn, error) {
	ev := Enumscim2HttpServletExtensionSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Enumscim2HttpServletExtensionSchemaUrn: valid values are %v", v, AllowedEnumscim2HttpServletExtensionSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Enumscim2HttpServletExtensionSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumscim2HttpServletExtensionSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumscim2-http-servlet-extensionSchemaUrn value
func (v Enumscim2HttpServletExtensionSchemaUrn) Ptr() *Enumscim2HttpServletExtensionSchemaUrn {
	return &v
}

type NullableEnumscim2HttpServletExtensionSchemaUrn struct {
	value *Enumscim2HttpServletExtensionSchemaUrn
	isSet bool
}

func (v NullableEnumscim2HttpServletExtensionSchemaUrn) Get() *Enumscim2HttpServletExtensionSchemaUrn {
	return v.value
}

func (v *NullableEnumscim2HttpServletExtensionSchemaUrn) Set(val *Enumscim2HttpServletExtensionSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumscim2HttpServletExtensionSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumscim2HttpServletExtensionSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumscim2HttpServletExtensionSchemaUrn(val *Enumscim2HttpServletExtensionSchemaUrn) *NullableEnumscim2HttpServletExtensionSchemaUrn {
	return &NullableEnumscim2HttpServletExtensionSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumscim2HttpServletExtensionSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumscim2HttpServletExtensionSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
