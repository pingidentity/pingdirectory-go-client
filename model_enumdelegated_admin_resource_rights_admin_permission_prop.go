/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumdelegatedAdminResourceRightsAdminPermissionProp Specifies administrator(s) permissions.
type EnumdelegatedAdminResourceRightsAdminPermissionProp string

// List of Enumdelegated-admin-resource-rights-adminPermissionProp
const (
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_CREATE                  EnumdelegatedAdminResourceRightsAdminPermissionProp = "create"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_READ                    EnumdelegatedAdminResourceRightsAdminPermissionProp = "read"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_REFERENCE               EnumdelegatedAdminResourceRightsAdminPermissionProp = "reference"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_UPDATE                  EnumdelegatedAdminResourceRightsAdminPermissionProp = "update"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_UPDATE_PROFILE          EnumdelegatedAdminResourceRightsAdminPermissionProp = "update-profile"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_RESET_PASSWORD          EnumdelegatedAdminResourceRightsAdminPermissionProp = "reset-password"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_DELETE                  EnumdelegatedAdminResourceRightsAdminPermissionProp = "delete"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_MANAGE_GROUP_MEMBERSHIP EnumdelegatedAdminResourceRightsAdminPermissionProp = "manage-group-membership"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_DOWNLOAD                EnumdelegatedAdminResourceRightsAdminPermissionProp = "download"
	ENUMDELEGATEDADMINRESOURCERIGHTSADMINPERMISSIONPROP_UPLOAD                  EnumdelegatedAdminResourceRightsAdminPermissionProp = "upload"
)

// All allowed values of EnumdelegatedAdminResourceRightsAdminPermissionProp enum
var AllowedEnumdelegatedAdminResourceRightsAdminPermissionPropEnumValues = []EnumdelegatedAdminResourceRightsAdminPermissionProp{
	"create",
	"read",
	"reference",
	"update",
	"update-profile",
	"reset-password",
	"delete",
	"manage-group-membership",
	"download",
	"upload",
}

func (v *EnumdelegatedAdminResourceRightsAdminPermissionProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumdelegatedAdminResourceRightsAdminPermissionProp(value)
	for _, existing := range AllowedEnumdelegatedAdminResourceRightsAdminPermissionPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumdelegatedAdminResourceRightsAdminPermissionProp", value)
}

// NewEnumdelegatedAdminResourceRightsAdminPermissionPropFromValue returns a pointer to a valid EnumdelegatedAdminResourceRightsAdminPermissionProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumdelegatedAdminResourceRightsAdminPermissionPropFromValue(v string) (*EnumdelegatedAdminResourceRightsAdminPermissionProp, error) {
	ev := EnumdelegatedAdminResourceRightsAdminPermissionProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumdelegatedAdminResourceRightsAdminPermissionProp: valid values are %v", v, AllowedEnumdelegatedAdminResourceRightsAdminPermissionPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumdelegatedAdminResourceRightsAdminPermissionProp) IsValid() bool {
	for _, existing := range AllowedEnumdelegatedAdminResourceRightsAdminPermissionPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumdelegated-admin-resource-rights-adminPermissionProp value
func (v EnumdelegatedAdminResourceRightsAdminPermissionProp) Ptr() *EnumdelegatedAdminResourceRightsAdminPermissionProp {
	return &v
}

type NullableEnumdelegatedAdminResourceRightsAdminPermissionProp struct {
	value *EnumdelegatedAdminResourceRightsAdminPermissionProp
	isSet bool
}

func (v NullableEnumdelegatedAdminResourceRightsAdminPermissionProp) Get() *EnumdelegatedAdminResourceRightsAdminPermissionProp {
	return v.value
}

func (v *NullableEnumdelegatedAdminResourceRightsAdminPermissionProp) Set(val *EnumdelegatedAdminResourceRightsAdminPermissionProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumdelegatedAdminResourceRightsAdminPermissionProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumdelegatedAdminResourceRightsAdminPermissionProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumdelegatedAdminResourceRightsAdminPermissionProp(val *EnumdelegatedAdminResourceRightsAdminPermissionProp) *NullableEnumdelegatedAdminResourceRightsAdminPermissionProp {
	return &NullableEnumdelegatedAdminResourceRightsAdminPermissionProp{value: val, isSet: true}
}

func (v NullableEnumdelegatedAdminResourceRightsAdminPermissionProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumdelegatedAdminResourceRightsAdminPermissionProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
