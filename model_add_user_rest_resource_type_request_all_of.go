/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddUserRestResourceTypeRequestAllOf struct for AddUserRestResourceTypeRequestAllOf
type AddUserRestResourceTypeRequestAllOf struct {
	// Name of the new REST Resource Type
	TypeName string `json:"typeName"`
}

// NewAddUserRestResourceTypeRequestAllOf instantiates a new AddUserRestResourceTypeRequestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUserRestResourceTypeRequestAllOf(typeName string) *AddUserRestResourceTypeRequestAllOf {
	this := AddUserRestResourceTypeRequestAllOf{}
	this.TypeName = typeName
	return &this
}

// NewAddUserRestResourceTypeRequestAllOfWithDefaults instantiates a new AddUserRestResourceTypeRequestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUserRestResourceTypeRequestAllOfWithDefaults() *AddUserRestResourceTypeRequestAllOf {
	this := AddUserRestResourceTypeRequestAllOf{}
	return &this
}

// GetTypeName returns the TypeName field value
func (o *AddUserRestResourceTypeRequestAllOf) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *AddUserRestResourceTypeRequestAllOf) GetTypeNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *AddUserRestResourceTypeRequestAllOf) SetTypeName(v string) {
	o.TypeName = v
}

func (o AddUserRestResourceTypeRequestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["typeName"] = o.TypeName
	}
	return json.Marshal(toSerialize)
}

type NullableAddUserRestResourceTypeRequestAllOf struct {
	value *AddUserRestResourceTypeRequestAllOf
	isSet bool
}

func (v NullableAddUserRestResourceTypeRequestAllOf) Get() *AddUserRestResourceTypeRequestAllOf {
	return v.value
}

func (v *NullableAddUserRestResourceTypeRequestAllOf) Set(val *AddUserRestResourceTypeRequestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserRestResourceTypeRequestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserRestResourceTypeRequestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserRestResourceTypeRequestAllOf(val *AddUserRestResourceTypeRequestAllOf) *NullableAddUserRestResourceTypeRequestAllOf {
	return &NullableAddUserRestResourceTypeRequestAllOf{value: val, isSet: true}
}

func (v NullableAddUserRestResourceTypeRequestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserRestResourceTypeRequestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


