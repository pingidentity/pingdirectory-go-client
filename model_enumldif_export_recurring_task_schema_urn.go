/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumldifExportRecurringTaskSchemaUrn the model 'EnumldifExportRecurringTaskSchemaUrn'
type EnumldifExportRecurringTaskSchemaUrn string

// List of Enumldif-export-recurring-taskSchemaUrn
const (
	ENUMLDIFEXPORTRECURRINGTASKSCHEMAURN_URNPINGIDENTITYSCHEMASCONFIGURATION2_0RECURRING_TASKLDIF_EXPORT EnumldifExportRecurringTaskSchemaUrn = "urn:pingidentity:schemas:configuration:2.0:recurring-task:ldif-export"
)

// All allowed values of EnumldifExportRecurringTaskSchemaUrn enum
var AllowedEnumldifExportRecurringTaskSchemaUrnEnumValues = []EnumldifExportRecurringTaskSchemaUrn{
	"urn:pingidentity:schemas:configuration:2.0:recurring-task:ldif-export",
}

func (v *EnumldifExportRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumldifExportRecurringTaskSchemaUrn(value)
	for _, existing := range AllowedEnumldifExportRecurringTaskSchemaUrnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumldifExportRecurringTaskSchemaUrn", value)
}

// NewEnumldifExportRecurringTaskSchemaUrnFromValue returns a pointer to a valid EnumldifExportRecurringTaskSchemaUrn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumldifExportRecurringTaskSchemaUrnFromValue(v string) (*EnumldifExportRecurringTaskSchemaUrn, error) {
	ev := EnumldifExportRecurringTaskSchemaUrn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumldifExportRecurringTaskSchemaUrn: valid values are %v", v, AllowedEnumldifExportRecurringTaskSchemaUrnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumldifExportRecurringTaskSchemaUrn) IsValid() bool {
	for _, existing := range AllowedEnumldifExportRecurringTaskSchemaUrnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumldif-export-recurring-taskSchemaUrn value
func (v EnumldifExportRecurringTaskSchemaUrn) Ptr() *EnumldifExportRecurringTaskSchemaUrn {
	return &v
}

type NullableEnumldifExportRecurringTaskSchemaUrn struct {
	value *EnumldifExportRecurringTaskSchemaUrn
	isSet bool
}

func (v NullableEnumldifExportRecurringTaskSchemaUrn) Get() *EnumldifExportRecurringTaskSchemaUrn {
	return v.value
}

func (v *NullableEnumldifExportRecurringTaskSchemaUrn) Set(val *EnumldifExportRecurringTaskSchemaUrn) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumldifExportRecurringTaskSchemaUrn) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumldifExportRecurringTaskSchemaUrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumldifExportRecurringTaskSchemaUrn(val *EnumldifExportRecurringTaskSchemaUrn) *NullableEnumldifExportRecurringTaskSchemaUrn {
	return &NullableEnumldifExportRecurringTaskSchemaUrn{value: val, isSet: true}
}

func (v NullableEnumldifExportRecurringTaskSchemaUrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumldifExportRecurringTaskSchemaUrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
