/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumresultCriteriaRemoteAssuranceLevelProp The local assurance level values that will be allowed to match this Replication Assurance Result Criteria.
type EnumresultCriteriaRemoteAssuranceLevelProp string

// List of Enumresult-criteria-remoteAssuranceLevelProp
const (
	ENUMRESULTCRITERIAREMOTEASSURANCELEVELPROP_NONE                          EnumresultCriteriaRemoteAssuranceLevelProp = "none"
	ENUMRESULTCRITERIAREMOTEASSURANCELEVELPROP_RECEIVED_ANY_REMOTE_LOCATION  EnumresultCriteriaRemoteAssuranceLevelProp = "received-any-remote-location"
	ENUMRESULTCRITERIAREMOTEASSURANCELEVELPROP_RECEIVED_ALL_REMOTE_LOCATIONS EnumresultCriteriaRemoteAssuranceLevelProp = "received-all-remote-locations"
	ENUMRESULTCRITERIAREMOTEASSURANCELEVELPROP_PROCESSED_ALL_REMOTE_SERVERS  EnumresultCriteriaRemoteAssuranceLevelProp = "processed-all-remote-servers"
)

// All allowed values of EnumresultCriteriaRemoteAssuranceLevelProp enum
var AllowedEnumresultCriteriaRemoteAssuranceLevelPropEnumValues = []EnumresultCriteriaRemoteAssuranceLevelProp{
	"none",
	"received-any-remote-location",
	"received-all-remote-locations",
	"processed-all-remote-servers",
}

func (v *EnumresultCriteriaRemoteAssuranceLevelProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumresultCriteriaRemoteAssuranceLevelProp(value)
	for _, existing := range AllowedEnumresultCriteriaRemoteAssuranceLevelPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumresultCriteriaRemoteAssuranceLevelProp", value)
}

// NewEnumresultCriteriaRemoteAssuranceLevelPropFromValue returns a pointer to a valid EnumresultCriteriaRemoteAssuranceLevelProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumresultCriteriaRemoteAssuranceLevelPropFromValue(v string) (*EnumresultCriteriaRemoteAssuranceLevelProp, error) {
	ev := EnumresultCriteriaRemoteAssuranceLevelProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumresultCriteriaRemoteAssuranceLevelProp: valid values are %v", v, AllowedEnumresultCriteriaRemoteAssuranceLevelPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumresultCriteriaRemoteAssuranceLevelProp) IsValid() bool {
	for _, existing := range AllowedEnumresultCriteriaRemoteAssuranceLevelPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumresult-criteria-remoteAssuranceLevelProp value
func (v EnumresultCriteriaRemoteAssuranceLevelProp) Ptr() *EnumresultCriteriaRemoteAssuranceLevelProp {
	return &v
}

type NullableEnumresultCriteriaRemoteAssuranceLevelProp struct {
	value *EnumresultCriteriaRemoteAssuranceLevelProp
	isSet bool
}

func (v NullableEnumresultCriteriaRemoteAssuranceLevelProp) Get() *EnumresultCriteriaRemoteAssuranceLevelProp {
	return v.value
}

func (v *NullableEnumresultCriteriaRemoteAssuranceLevelProp) Set(val *EnumresultCriteriaRemoteAssuranceLevelProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumresultCriteriaRemoteAssuranceLevelProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumresultCriteriaRemoteAssuranceLevelProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumresultCriteriaRemoteAssuranceLevelProp(val *EnumresultCriteriaRemoteAssuranceLevelProp) *NullableEnumresultCriteriaRemoteAssuranceLevelProp {
	return &NullableEnumresultCriteriaRemoteAssuranceLevelProp{value: val, isSet: true}
}

func (v NullableEnumresultCriteriaRemoteAssuranceLevelProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumresultCriteriaRemoteAssuranceLevelProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
