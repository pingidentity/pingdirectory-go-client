/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackendSingleWriterLockBehaviorProp Specifies the condition under which to acquire a single-writer lock to ensure that the associated operation will be the only write in progress at the time the lock is held. The single-writer lock can help avoid problems that result from database lock conflicts that arise between two write operations being processed at the same time in the same backend. This will not have any effect on the read operations processed while the write is in progress.
type EnumbackendSingleWriterLockBehaviorProp string

// List of Enumbackend-singleWriterLockBehaviorProp
const (
	ENUMBACKENDSINGLEWRITERLOCKBEHAVIORPROP_NEVER_ACQUIRE    EnumbackendSingleWriterLockBehaviorProp = "never-acquire"
	ENUMBACKENDSINGLEWRITERLOCKBEHAVIORPROP_ACQUIRE_ON_RETRY EnumbackendSingleWriterLockBehaviorProp = "acquire-on-retry"
	ENUMBACKENDSINGLEWRITERLOCKBEHAVIORPROP_ALWAYS_ACQUIRE   EnumbackendSingleWriterLockBehaviorProp = "always-acquire"
)

// All allowed values of EnumbackendSingleWriterLockBehaviorProp enum
var AllowedEnumbackendSingleWriterLockBehaviorPropEnumValues = []EnumbackendSingleWriterLockBehaviorProp{
	"never-acquire",
	"acquire-on-retry",
	"always-acquire",
}

func (v *EnumbackendSingleWriterLockBehaviorProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackendSingleWriterLockBehaviorProp(value)
	for _, existing := range AllowedEnumbackendSingleWriterLockBehaviorPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackendSingleWriterLockBehaviorProp", value)
}

// NewEnumbackendSingleWriterLockBehaviorPropFromValue returns a pointer to a valid EnumbackendSingleWriterLockBehaviorProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackendSingleWriterLockBehaviorPropFromValue(v string) (*EnumbackendSingleWriterLockBehaviorProp, error) {
	ev := EnumbackendSingleWriterLockBehaviorProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackendSingleWriterLockBehaviorProp: valid values are %v", v, AllowedEnumbackendSingleWriterLockBehaviorPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackendSingleWriterLockBehaviorProp) IsValid() bool {
	for _, existing := range AllowedEnumbackendSingleWriterLockBehaviorPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackend-singleWriterLockBehaviorProp value
func (v EnumbackendSingleWriterLockBehaviorProp) Ptr() *EnumbackendSingleWriterLockBehaviorProp {
	return &v
}

type NullableEnumbackendSingleWriterLockBehaviorProp struct {
	value *EnumbackendSingleWriterLockBehaviorProp
	isSet bool
}

func (v NullableEnumbackendSingleWriterLockBehaviorProp) Get() *EnumbackendSingleWriterLockBehaviorProp {
	return v.value
}

func (v *NullableEnumbackendSingleWriterLockBehaviorProp) Set(val *EnumbackendSingleWriterLockBehaviorProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackendSingleWriterLockBehaviorProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackendSingleWriterLockBehaviorProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackendSingleWriterLockBehaviorProp(val *EnumbackendSingleWriterLockBehaviorProp) *NullableEnumbackendSingleWriterLockBehaviorProp {
	return &NullableEnumbackendSingleWriterLockBehaviorProp{value: val, isSet: true}
}

func (v NullableEnumbackendSingleWriterLockBehaviorProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackendSingleWriterLockBehaviorProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
