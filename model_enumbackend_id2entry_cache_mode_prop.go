/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumbackendId2entryCacheModeProp Specifies the cache mode that should be used when accessing the records in the id2entry database, which provides a mapping between entry IDs and entry contents. Consider configuring uncached entries or uncached attributes in lieu of changing from the \"cache-keys-and-values\" default value.
type EnumbackendId2entryCacheModeProp string

// List of Enumbackend-id2entryCacheModeProp
const (
	ENUMBACKENDID2ENTRYCACHEMODEPROP_CACHE_KEYS_AND_VALUES  EnumbackendId2entryCacheModeProp = "cache-keys-and-values"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_CACHE_KEYS_ONLY        EnumbackendId2entryCacheModeProp = "cache-keys-only"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_NO_CACHING             EnumbackendId2entryCacheModeProp = "no-caching"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_KEEP_HOT               EnumbackendId2entryCacheModeProp = "keep-hot"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_DEFAULT                EnumbackendId2entryCacheModeProp = "default"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_MAKE_COLD              EnumbackendId2entryCacheModeProp = "make-cold"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_EVICT_LEAF_IMMEDIATELY EnumbackendId2entryCacheModeProp = "evict-leaf-immediately"
	ENUMBACKENDID2ENTRYCACHEMODEPROP_EVICT_BIN_IMMEDIATELY  EnumbackendId2entryCacheModeProp = "evict-bin-immediately"
)

// All allowed values of EnumbackendId2entryCacheModeProp enum
var AllowedEnumbackendId2entryCacheModePropEnumValues = []EnumbackendId2entryCacheModeProp{
	"cache-keys-and-values",
	"cache-keys-only",
	"no-caching",
	"keep-hot",
	"default",
	"make-cold",
	"evict-leaf-immediately",
	"evict-bin-immediately",
}

func (v *EnumbackendId2entryCacheModeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumbackendId2entryCacheModeProp(value)
	for _, existing := range AllowedEnumbackendId2entryCacheModePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumbackendId2entryCacheModeProp", value)
}

// NewEnumbackendId2entryCacheModePropFromValue returns a pointer to a valid EnumbackendId2entryCacheModeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumbackendId2entryCacheModePropFromValue(v string) (*EnumbackendId2entryCacheModeProp, error) {
	ev := EnumbackendId2entryCacheModeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumbackendId2entryCacheModeProp: valid values are %v", v, AllowedEnumbackendId2entryCacheModePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumbackendId2entryCacheModeProp) IsValid() bool {
	for _, existing := range AllowedEnumbackendId2entryCacheModePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumbackend-id2entryCacheModeProp value
func (v EnumbackendId2entryCacheModeProp) Ptr() *EnumbackendId2entryCacheModeProp {
	return &v
}

type NullableEnumbackendId2entryCacheModeProp struct {
	value *EnumbackendId2entryCacheModeProp
	isSet bool
}

func (v NullableEnumbackendId2entryCacheModeProp) Get() *EnumbackendId2entryCacheModeProp {
	return v.value
}

func (v *NullableEnumbackendId2entryCacheModeProp) Set(val *EnumbackendId2entryCacheModeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumbackendId2entryCacheModeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumbackendId2entryCacheModeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumbackendId2entryCacheModeProp(val *EnumbackendId2entryCacheModeProp) *NullableEnumbackendId2entryCacheModeProp {
	return &NullableEnumbackendId2entryCacheModeProp{value: val, isSet: true}
}

func (v NullableEnumbackendId2entryCacheModeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumbackendId2entryCacheModeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
