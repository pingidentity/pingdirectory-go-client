/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PasswordPolicyImportPluginResponse struct for PasswordPolicyImportPluginResponse
type PasswordPolicyImportPluginResponse struct {
	Meta                                          *MetaMeta                                          `json:"meta,omitempty"`
	Urnpingidentityschemasconfigurationmessages20 *MetaUrnPingidentitySchemasConfigurationMessages20 `json:"urn:pingidentity:schemas:configuration:messages:2.0,omitempty"`
	Schemas                                       []EnumpasswordPolicyImportPluginSchemaUrn          `json:"schemas"`
	// Name of the Plugin
	Id string `json:"id"`
	// Indicates whether the plug-in should be invoked for internal operations.
	InvokeForInternalOperations *bool `json:"invokeForInternalOperations,omitempty"`
	// Specifies the names of the password storage schemes to be used for encoding passwords contained in attributes with the user password syntax for entries that do not include the ds-pwp-password-policy-dn attribute specifying which password policy is to be used to govern them.
	DefaultUserPasswordStorageScheme []string `json:"defaultUserPasswordStorageScheme,omitempty"`
	// Specifies the names of password storage schemes that to be used for encoding passwords contained in attributes with the auth password syntax for entries that do not include the ds-pwp-password-policy-dn attribute specifying which password policy should be used to govern them.
	DefaultAuthPasswordStorageScheme []string `json:"defaultAuthPasswordStorageScheme,omitempty"`
	// A description for this Plugin
	Description *string `json:"description,omitempty"`
	// Indicates whether the plug-in is enabled for use.
	Enabled bool `json:"enabled"`
}

// NewPasswordPolicyImportPluginResponse instantiates a new PasswordPolicyImportPluginResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicyImportPluginResponse(schemas []EnumpasswordPolicyImportPluginSchemaUrn, id string, enabled bool) *PasswordPolicyImportPluginResponse {
	this := PasswordPolicyImportPluginResponse{}
	this.Schemas = schemas
	this.Id = id
	this.Enabled = enabled
	return &this
}

// NewPasswordPolicyImportPluginResponseWithDefaults instantiates a new PasswordPolicyImportPluginResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyImportPluginResponseWithDefaults() *PasswordPolicyImportPluginResponse {
	this := PasswordPolicyImportPluginResponse{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *PasswordPolicyImportPluginResponse) GetMeta() MetaMeta {
	if o == nil || isNil(o.Meta) {
		var ret MetaMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetMetaOk() (*MetaMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *PasswordPolicyImportPluginResponse) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MetaMeta and assigns it to the Meta field.
func (o *PasswordPolicyImportPluginResponse) SetMeta(v MetaMeta) {
	o.Meta = &v
}

// GetUrnpingidentityschemasconfigurationmessages20 returns the Urnpingidentityschemasconfigurationmessages20 field value if set, zero value otherwise.
func (o *PasswordPolicyImportPluginResponse) GetUrnpingidentityschemasconfigurationmessages20() MetaUrnPingidentitySchemasConfigurationMessages20 {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		var ret MetaUrnPingidentitySchemasConfigurationMessages20
		return ret
	}
	return *o.Urnpingidentityschemasconfigurationmessages20
}

// GetUrnpingidentityschemasconfigurationmessages20Ok returns a tuple with the Urnpingidentityschemasconfigurationmessages20 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetUrnpingidentityschemasconfigurationmessages20Ok() (*MetaUrnPingidentitySchemasConfigurationMessages20, bool) {
	if o == nil || isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return nil, false
	}
	return o.Urnpingidentityschemasconfigurationmessages20, true
}

// HasUrnpingidentityschemasconfigurationmessages20 returns a boolean if a field has been set.
func (o *PasswordPolicyImportPluginResponse) HasUrnpingidentityschemasconfigurationmessages20() bool {
	if o != nil && !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		return true
	}

	return false
}

// SetUrnpingidentityschemasconfigurationmessages20 gets a reference to the given MetaUrnPingidentitySchemasConfigurationMessages20 and assigns it to the Urnpingidentityschemasconfigurationmessages20 field.
func (o *PasswordPolicyImportPluginResponse) SetUrnpingidentityschemasconfigurationmessages20(v MetaUrnPingidentitySchemasConfigurationMessages20) {
	o.Urnpingidentityschemasconfigurationmessages20 = &v
}

// GetSchemas returns the Schemas field value
func (o *PasswordPolicyImportPluginResponse) GetSchemas() []EnumpasswordPolicyImportPluginSchemaUrn {
	if o == nil {
		var ret []EnumpasswordPolicyImportPluginSchemaUrn
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetSchemasOk() ([]EnumpasswordPolicyImportPluginSchemaUrn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *PasswordPolicyImportPluginResponse) SetSchemas(v []EnumpasswordPolicyImportPluginSchemaUrn) {
	o.Schemas = v
}

// GetId returns the Id field value
func (o *PasswordPolicyImportPluginResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PasswordPolicyImportPluginResponse) SetId(v string) {
	o.Id = v
}

// GetInvokeForInternalOperations returns the InvokeForInternalOperations field value if set, zero value otherwise.
func (o *PasswordPolicyImportPluginResponse) GetInvokeForInternalOperations() bool {
	if o == nil || isNil(o.InvokeForInternalOperations) {
		var ret bool
		return ret
	}
	return *o.InvokeForInternalOperations
}

// GetInvokeForInternalOperationsOk returns a tuple with the InvokeForInternalOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetInvokeForInternalOperationsOk() (*bool, bool) {
	if o == nil || isNil(o.InvokeForInternalOperations) {
		return nil, false
	}
	return o.InvokeForInternalOperations, true
}

// HasInvokeForInternalOperations returns a boolean if a field has been set.
func (o *PasswordPolicyImportPluginResponse) HasInvokeForInternalOperations() bool {
	if o != nil && !isNil(o.InvokeForInternalOperations) {
		return true
	}

	return false
}

// SetInvokeForInternalOperations gets a reference to the given bool and assigns it to the InvokeForInternalOperations field.
func (o *PasswordPolicyImportPluginResponse) SetInvokeForInternalOperations(v bool) {
	o.InvokeForInternalOperations = &v
}

// GetDefaultUserPasswordStorageScheme returns the DefaultUserPasswordStorageScheme field value if set, zero value otherwise.
func (o *PasswordPolicyImportPluginResponse) GetDefaultUserPasswordStorageScheme() []string {
	if o == nil || isNil(o.DefaultUserPasswordStorageScheme) {
		var ret []string
		return ret
	}
	return o.DefaultUserPasswordStorageScheme
}

// GetDefaultUserPasswordStorageSchemeOk returns a tuple with the DefaultUserPasswordStorageScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetDefaultUserPasswordStorageSchemeOk() ([]string, bool) {
	if o == nil || isNil(o.DefaultUserPasswordStorageScheme) {
		return nil, false
	}
	return o.DefaultUserPasswordStorageScheme, true
}

// HasDefaultUserPasswordStorageScheme returns a boolean if a field has been set.
func (o *PasswordPolicyImportPluginResponse) HasDefaultUserPasswordStorageScheme() bool {
	if o != nil && !isNil(o.DefaultUserPasswordStorageScheme) {
		return true
	}

	return false
}

// SetDefaultUserPasswordStorageScheme gets a reference to the given []string and assigns it to the DefaultUserPasswordStorageScheme field.
func (o *PasswordPolicyImportPluginResponse) SetDefaultUserPasswordStorageScheme(v []string) {
	o.DefaultUserPasswordStorageScheme = v
}

// GetDefaultAuthPasswordStorageScheme returns the DefaultAuthPasswordStorageScheme field value if set, zero value otherwise.
func (o *PasswordPolicyImportPluginResponse) GetDefaultAuthPasswordStorageScheme() []string {
	if o == nil || isNil(o.DefaultAuthPasswordStorageScheme) {
		var ret []string
		return ret
	}
	return o.DefaultAuthPasswordStorageScheme
}

// GetDefaultAuthPasswordStorageSchemeOk returns a tuple with the DefaultAuthPasswordStorageScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetDefaultAuthPasswordStorageSchemeOk() ([]string, bool) {
	if o == nil || isNil(o.DefaultAuthPasswordStorageScheme) {
		return nil, false
	}
	return o.DefaultAuthPasswordStorageScheme, true
}

// HasDefaultAuthPasswordStorageScheme returns a boolean if a field has been set.
func (o *PasswordPolicyImportPluginResponse) HasDefaultAuthPasswordStorageScheme() bool {
	if o != nil && !isNil(o.DefaultAuthPasswordStorageScheme) {
		return true
	}

	return false
}

// SetDefaultAuthPasswordStorageScheme gets a reference to the given []string and assigns it to the DefaultAuthPasswordStorageScheme field.
func (o *PasswordPolicyImportPluginResponse) SetDefaultAuthPasswordStorageScheme(v []string) {
	o.DefaultAuthPasswordStorageScheme = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PasswordPolicyImportPluginResponse) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PasswordPolicyImportPluginResponse) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PasswordPolicyImportPluginResponse) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *PasswordPolicyImportPluginResponse) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicyImportPluginResponse) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *PasswordPolicyImportPluginResponse) SetEnabled(v bool) {
	o.Enabled = v
}

func (o PasswordPolicyImportPluginResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Urnpingidentityschemasconfigurationmessages20) {
		toSerialize["urn:pingidentity:schemas:configuration:messages:2.0"] = o.Urnpingidentityschemasconfigurationmessages20
	}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.InvokeForInternalOperations) {
		toSerialize["invokeForInternalOperations"] = o.InvokeForInternalOperations
	}
	if !isNil(o.DefaultUserPasswordStorageScheme) {
		toSerialize["defaultUserPasswordStorageScheme"] = o.DefaultUserPasswordStorageScheme
	}
	if !isNil(o.DefaultAuthPasswordStorageScheme) {
		toSerialize["defaultAuthPasswordStorageScheme"] = o.DefaultAuthPasswordStorageScheme
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullablePasswordPolicyImportPluginResponse struct {
	value *PasswordPolicyImportPluginResponse
	isSet bool
}

func (v NullablePasswordPolicyImportPluginResponse) Get() *PasswordPolicyImportPluginResponse {
	return v.value
}

func (v *NullablePasswordPolicyImportPluginResponse) Set(val *PasswordPolicyImportPluginResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicyImportPluginResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicyImportPluginResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicyImportPluginResponse(val *PasswordPolicyImportPluginResponse) *NullablePasswordPolicyImportPluginResponse {
	return &NullablePasswordPolicyImportPluginResponse{value: val, isSet: true}
}

func (v NullablePasswordPolicyImportPluginResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicyImportPluginResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
