/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// RecurringTaskChainApiService RecurringTaskChainApi service
type RecurringTaskChainApiService service

type ApiAddRecurringTaskChainRequest struct {
	ctx context.Context
	ApiService *RecurringTaskChainApiService
	addRecurringTaskChainRequest *AddRecurringTaskChainRequest
}

// Create a new Recurring Task Chain in the config
func (r ApiAddRecurringTaskChainRequest) AddRecurringTaskChainRequest(addRecurringTaskChainRequest AddRecurringTaskChainRequest) ApiAddRecurringTaskChainRequest {
	r.addRecurringTaskChainRequest = &addRecurringTaskChainRequest
	return r
}

func (r ApiAddRecurringTaskChainRequest) Execute() (*RecurringTaskChainResponse, *http.Response, error) {
	return r.ApiService.AddRecurringTaskChainExecute(r)
}

/*
AddRecurringTaskChain Add a new Recurring Task Chain to the config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddRecurringTaskChainRequest
*/
func (a *RecurringTaskChainApiService) AddRecurringTaskChain(ctx context.Context) ApiAddRecurringTaskChainRequest {
	return ApiAddRecurringTaskChainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RecurringTaskChainResponse
func (a *RecurringTaskChainApiService) AddRecurringTaskChainExecute(r ApiAddRecurringTaskChainRequest) (*RecurringTaskChainResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecurringTaskChainResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskChainApiService.AddRecurringTaskChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-task-chains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addRecurringTaskChainRequest == nil {
		return localVarReturnValue, nil, reportError("addRecurringTaskChainRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addRecurringTaskChainRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRecurringTaskChainRequest struct {
	ctx context.Context
	ApiService *RecurringTaskChainApiService
	recurringTaskChainName string
}

func (r ApiDeleteRecurringTaskChainRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRecurringTaskChainExecute(r)
}

/*
DeleteRecurringTaskChain Delete a Recurring Task Chain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recurringTaskChainName Name of the Recurring Task Chain to be deleted
 @return ApiDeleteRecurringTaskChainRequest
*/
func (a *RecurringTaskChainApiService) DeleteRecurringTaskChain(ctx context.Context, recurringTaskChainName string) ApiDeleteRecurringTaskChainRequest {
	return ApiDeleteRecurringTaskChainRequest{
		ApiService: a,
		ctx: ctx,
		recurringTaskChainName: recurringTaskChainName,
	}
}

// Execute executes the request
func (a *RecurringTaskChainApiService) DeleteRecurringTaskChainExecute(r ApiDeleteRecurringTaskChainRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskChainApiService.DeleteRecurringTaskChain")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-task-chains/{recurring-task-chain-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"recurring-task-chain-name"+"}", url.PathEscape(parameterToString(r.recurringTaskChainName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRecurringTaskChainRequest struct {
	ctx context.Context
	ApiService *RecurringTaskChainApiService
	recurringTaskChainName string
}

func (r ApiGetRecurringTaskChainRequest) Execute() (*RecurringTaskChainResponse, *http.Response, error) {
	return r.ApiService.GetRecurringTaskChainExecute(r)
}

/*
GetRecurringTaskChain Returns a single Recurring Task Chain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recurringTaskChainName Name of the Recurring Task Chain to be read
 @return ApiGetRecurringTaskChainRequest
*/
func (a *RecurringTaskChainApiService) GetRecurringTaskChain(ctx context.Context, recurringTaskChainName string) ApiGetRecurringTaskChainRequest {
	return ApiGetRecurringTaskChainRequest{
		ApiService: a,
		ctx: ctx,
		recurringTaskChainName: recurringTaskChainName,
	}
}

// Execute executes the request
//  @return RecurringTaskChainResponse
func (a *RecurringTaskChainApiService) GetRecurringTaskChainExecute(r ApiGetRecurringTaskChainRequest) (*RecurringTaskChainResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecurringTaskChainResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskChainApiService.GetRecurringTaskChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-task-chains/{recurring-task-chain-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"recurring-task-chain-name"+"}", url.PathEscape(parameterToString(r.recurringTaskChainName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRecurringTaskChainRequest struct {
	ctx context.Context
	ApiService *RecurringTaskChainApiService
	recurringTaskChainName string
	updateRequest *UpdateRequest
}

// Update an existing Recurring Task Chain
func (r ApiUpdateRecurringTaskChainRequest) UpdateRequest(updateRequest UpdateRequest) ApiUpdateRecurringTaskChainRequest {
	r.updateRequest = &updateRequest
	return r
}

func (r ApiUpdateRecurringTaskChainRequest) Execute() (*RecurringTaskChainResponse, *http.Response, error) {
	return r.ApiService.UpdateRecurringTaskChainExecute(r)
}

/*
UpdateRecurringTaskChain Update an existing Recurring Task Chain by name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param recurringTaskChainName Name of the Recurring Task Chain to be updated
 @return ApiUpdateRecurringTaskChainRequest
*/
func (a *RecurringTaskChainApiService) UpdateRecurringTaskChain(ctx context.Context, recurringTaskChainName string) ApiUpdateRecurringTaskChainRequest {
	return ApiUpdateRecurringTaskChainRequest{
		ApiService: a,
		ctx: ctx,
		recurringTaskChainName: recurringTaskChainName,
	}
}

// Execute executes the request
//  @return RecurringTaskChainResponse
func (a *RecurringTaskChainApiService) UpdateRecurringTaskChainExecute(r ApiUpdateRecurringTaskChainRequest) (*RecurringTaskChainResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RecurringTaskChainResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecurringTaskChainApiService.UpdateRecurringTaskChain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recurring-task-chains/{recurring-task-chain-name}"
	localVarPath = strings.Replace(localVarPath, "{"+"recurring-task-chain-name"+"}", url.PathEscape(parameterToString(r.recurringTaskChainName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRequest == nil {
		return localVarReturnValue, nil, reportError("updateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
