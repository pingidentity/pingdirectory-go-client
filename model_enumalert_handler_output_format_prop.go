/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumalertHandlerOutputFormatProp The format to use when writing the alert messages.
type EnumalertHandlerOutputFormatProp string

// List of Enumalert-handler-outputFormatProp
const (
	ENUMALERTHANDLEROUTPUTFORMATPROP_LEGACY_TEXT EnumalertHandlerOutputFormatProp = "legacy-text"
	ENUMALERTHANDLEROUTPUTFORMATPROP_SINGLE_LINE_JSON EnumalertHandlerOutputFormatProp = "single-line-json"
	ENUMALERTHANDLEROUTPUTFORMATPROP_MULTI_LINE_JSON EnumalertHandlerOutputFormatProp = "multi-line-json"
)

// All allowed values of EnumalertHandlerOutputFormatProp enum
var AllowedEnumalertHandlerOutputFormatPropEnumValues = []EnumalertHandlerOutputFormatProp{
	"legacy-text",
	"single-line-json",
	"multi-line-json",
}

func (v *EnumalertHandlerOutputFormatProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumalertHandlerOutputFormatProp(value)
	for _, existing := range AllowedEnumalertHandlerOutputFormatPropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumalertHandlerOutputFormatProp", value)
}

// NewEnumalertHandlerOutputFormatPropFromValue returns a pointer to a valid EnumalertHandlerOutputFormatProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumalertHandlerOutputFormatPropFromValue(v string) (*EnumalertHandlerOutputFormatProp, error) {
	ev := EnumalertHandlerOutputFormatProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumalertHandlerOutputFormatProp: valid values are %v", v, AllowedEnumalertHandlerOutputFormatPropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumalertHandlerOutputFormatProp) IsValid() bool {
	for _, existing := range AllowedEnumalertHandlerOutputFormatPropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumalert-handler-outputFormatProp value
func (v EnumalertHandlerOutputFormatProp) Ptr() *EnumalertHandlerOutputFormatProp {
	return &v
}

type NullableEnumalertHandlerOutputFormatProp struct {
	value *EnumalertHandlerOutputFormatProp
	isSet bool
}

func (v NullableEnumalertHandlerOutputFormatProp) Get() *EnumalertHandlerOutputFormatProp {
	return v.value
}

func (v *NullableEnumalertHandlerOutputFormatProp) Set(val *EnumalertHandlerOutputFormatProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumalertHandlerOutputFormatProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumalertHandlerOutputFormatProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumalertHandlerOutputFormatProp(val *EnumalertHandlerOutputFormatProp) *NullableEnumalertHandlerOutputFormatProp {
	return &NullableEnumalertHandlerOutputFormatProp{value: val, isSet: true}
}

func (v NullableEnumalertHandlerOutputFormatProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumalertHandlerOutputFormatProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

