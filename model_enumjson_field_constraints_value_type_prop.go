/*
PingData Config - OpenAPI 3.0

This is the PingData Configuration API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumjsonFieldConstraintsValueTypeProp The data type that will be required for values of the target field.
type EnumjsonFieldConstraintsValueTypeProp string

// List of Enumjson-field-constraints-valueTypeProp
const (
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_ANY     EnumjsonFieldConstraintsValueTypeProp = "any"
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_BOOLEAN EnumjsonFieldConstraintsValueTypeProp = "boolean"
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_INTEGER EnumjsonFieldConstraintsValueTypeProp = "integer"
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_NULL    EnumjsonFieldConstraintsValueTypeProp = "null"
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_NUMBER  EnumjsonFieldConstraintsValueTypeProp = "number"
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_OBJECT  EnumjsonFieldConstraintsValueTypeProp = "object"
	ENUMJSONFIELDCONSTRAINTSVALUETYPEPROP_STRING  EnumjsonFieldConstraintsValueTypeProp = "string"
)

// All allowed values of EnumjsonFieldConstraintsValueTypeProp enum
var AllowedEnumjsonFieldConstraintsValueTypePropEnumValues = []EnumjsonFieldConstraintsValueTypeProp{
	"any",
	"boolean",
	"integer",
	"null",
	"number",
	"object",
	"string",
}

func (v *EnumjsonFieldConstraintsValueTypeProp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumjsonFieldConstraintsValueTypeProp(value)
	for _, existing := range AllowedEnumjsonFieldConstraintsValueTypePropEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumjsonFieldConstraintsValueTypeProp", value)
}

// NewEnumjsonFieldConstraintsValueTypePropFromValue returns a pointer to a valid EnumjsonFieldConstraintsValueTypeProp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumjsonFieldConstraintsValueTypePropFromValue(v string) (*EnumjsonFieldConstraintsValueTypeProp, error) {
	ev := EnumjsonFieldConstraintsValueTypeProp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumjsonFieldConstraintsValueTypeProp: valid values are %v", v, AllowedEnumjsonFieldConstraintsValueTypePropEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumjsonFieldConstraintsValueTypeProp) IsValid() bool {
	for _, existing := range AllowedEnumjsonFieldConstraintsValueTypePropEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enumjson-field-constraints-valueTypeProp value
func (v EnumjsonFieldConstraintsValueTypeProp) Ptr() *EnumjsonFieldConstraintsValueTypeProp {
	return &v
}

type NullableEnumjsonFieldConstraintsValueTypeProp struct {
	value *EnumjsonFieldConstraintsValueTypeProp
	isSet bool
}

func (v NullableEnumjsonFieldConstraintsValueTypeProp) Get() *EnumjsonFieldConstraintsValueTypeProp {
	return v.value
}

func (v *NullableEnumjsonFieldConstraintsValueTypeProp) Set(val *EnumjsonFieldConstraintsValueTypeProp) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumjsonFieldConstraintsValueTypeProp) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumjsonFieldConstraintsValueTypeProp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumjsonFieldConstraintsValueTypeProp(val *EnumjsonFieldConstraintsValueTypeProp) *NullableEnumjsonFieldConstraintsValueTypeProp {
	return &NullableEnumjsonFieldConstraintsValueTypeProp{value: val, isSet: true}
}

func (v NullableEnumjsonFieldConstraintsValueTypeProp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumjsonFieldConstraintsValueTypeProp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
